
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000734c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e0  080077e0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e8  080077e8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000a4  08007894  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08007894  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ad6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c2  00000000  00000000  00035baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00038d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cca  00000000  00000000  0003b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015209  00000000  00000000  00040072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d76da  00000000  00000000  0005527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a6c  00000000  00000000  0012c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074c4 	.word	0x080074c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080074c4 	.word	0x080074c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4798      	blx	r3
   WIZCHIP.CS._select();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0a12      	lsrs	r2, r2, #8
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4610      	mov	r0, r2
 80005ba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <WIZCHIP_READ+0x58>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <WIZCHIP_READ+0x58>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <WIZCHIP_READ+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	200f      	movs	r0, #15
 80005ee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <WIZCHIP_READ+0x58>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0a12      	lsrs	r2, r2, #8
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <WIZCHIP_READ+0x58>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4610      	mov	r0, r2
 8000608:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <WIZCHIP_READ+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <WIZCHIP_READ+0x58>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <WIZCHIP_READ+0x58>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4798      	blx	r3
   return ret;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	e02a      	b.n	80006aa <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	20f0      	movs	r0, #240	; 0xf0
 8000660:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b291      	uxth	r1, r2
 800066a:	8afa      	ldrh	r2, [r7, #22]
 800066c:	440a      	add	r2, r1
 800066e:	b292      	uxth	r2, r2
 8000670:	0a12      	lsrs	r2, r2, #8
 8000672:	b292      	uxth	r2, r2
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440a      	add	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	440a      	add	r2, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d0      	bcc.n	8000654 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5200 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]
 80006ee:	e02a      	b.n	8000746 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	200f      	movs	r0, #15
 80006fc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b291      	uxth	r1, r2
 8000706:	8afa      	ldrh	r2, [r7, #22]
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	0a12      	lsrs	r2, r2, #8
 800070e:	b292      	uxth	r2, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	8afa      	ldrh	r2, [r7, #22]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440a      	add	r2, r1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	8afa      	ldrh	r2, [r7, #22]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	188c      	adds	r4, r1, r2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
 8000746:	8afa      	ldrh	r2, [r7, #22]
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3d0      	bcc.n	80006f0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	2300      	movs	r3, #0
 8000778:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3304      	adds	r3, #4
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	3320      	adds	r3, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <WIZCHIP_READ>
 8000788:	4603      	mov	r3, r0
 800078a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b29c      	uxth	r4, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3304      	adds	r3, #4
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	3321      	adds	r3, #33	; 0x21
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff1a 	bl	80005d4 <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4423      	add	r3, r4
 80007a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3304      	adds	r3, #4
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	3320      	adds	r3, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0c 	bl	80005d4 <WIZCHIP_READ>
 80007bc:	4603      	mov	r3, r0
 80007be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3304      	adds	r3, #4
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	3321      	adds	r3, #33	; 0x21
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff00 	bl	80005d4 <WIZCHIP_READ>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4423      	add	r3, r4
 80007da:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d1ca      	bne.n	800077a <getSn_TX_FSR+0x12>
   return val;
 80007e4:	89fb      	ldrh	r3, [r7, #14]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80007ee:	b590      	push	{r4, r7, lr}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3304      	adds	r3, #4
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	3326      	adds	r3, #38	; 0x26
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <WIZCHIP_READ>
 800080e:	4603      	mov	r3, r0
 8000810:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b29c      	uxth	r4, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3304      	adds	r3, #4
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	3327      	adds	r3, #39	; 0x27
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <WIZCHIP_READ>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4423      	add	r3, r4
 800082c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d016      	beq.n	8000862 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3304      	adds	r3, #4
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	3326      	adds	r3, #38	; 0x26
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fec9 	bl	80005d4 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	3327      	adds	r3, #39	; 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff febd 	bl	80005d4 <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d1ca      	bne.n	8000800 <getSn_RX_RSR+0x12>
   return val;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800087e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000882:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e020      	b.n	80008cc <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 800088a:	201a      	movs	r0, #26
 800088c:	f7ff fea2 	bl	80005d4 <WIZCHIP_READ>
 8000890:	4603      	mov	r3, r0
 8000892:	4619      	mov	r1, r3
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	ea01 0203 	and.w	r2, r1, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd9      	blt.n	800088a <getSn_RxBASE+0x16>

   return rxbase;
 80008d6:	68bb      	ldr	r3, [r7, #8]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3304      	adds	r3, #4
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	3328      	adds	r3, #40	; 0x28
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe6b 	bl	80005d4 <WIZCHIP_READ>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29b      	uxth	r3, r3
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b29c      	uxth	r4, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	3304      	adds	r3, #4
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	3329      	adds	r3, #41	; 0x29
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe60 	bl	80005d4 <WIZCHIP_READ>
 8000914:	4603      	mov	r3, r0
 8000916:	b29b      	uxth	r3, r3
 8000918:	4423      	add	r3, r4
 800091a:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800091c:	201a      	movs	r0, #26
 800091e:	f7ff fe59 	bl	80005d4 <WIZCHIP_READ>
 8000922:	4603      	mov	r3, r0
 8000924:	4619      	mov	r1, r3
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	ea01 0203 	and.w	r2, r1, r3
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa42 f303 	asr.w	r3, r2, r3
 800093c:	2201      	movs	r2, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	b29b      	uxth	r3, r3
 8000944:	029b      	lsls	r3, r3, #10
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	4013      	ands	r3, r2
 8000950:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff8d 	bl	8000874 <getSn_RxBASE>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	89bb      	ldrh	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8000964:	89ba      	ldrh	r2, [r7, #12]
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	18d4      	adds	r4, r2, r3
 800096a:	201a      	movs	r0, #26
 800096c:	f7ff fe32 	bl	80005d4 <WIZCHIP_READ>
 8000970:	4603      	mov	r3, r0
 8000972:	4619      	mov	r1, r3
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	ea01 0203 	and.w	r2, r1, r3
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa42 f303 	asr.w	r3, r2, r3
 800098a:	2201      	movs	r2, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	429c      	cmp	r4, r3
 8000996:	dd33      	ble.n	8000a00 <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8000998:	201a      	movs	r0, #26
 800099a:	f7ff fe1b 	bl	80005d4 <WIZCHIP_READ>
 800099e:	4603      	mov	r3, r0
 80009a0:	4619      	mov	r1, r3
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	ea01 0203 	and.w	r2, r1, r3
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fa42 f303 	asr.w	r3, r2, r3
 80009b8:	2201      	movs	r2, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	029b      	lsls	r3, r3, #10
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80009ca:	897b      	ldrh	r3, [r7, #10]
 80009cc:	893a      	ldrh	r2, [r7, #8]
 80009ce:	6839      	ldr	r1, [r7, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe7b 	bl	80006cc <WIZCHIP_READ_BUF>
    wizdata += size;
 80009d6:	893b      	ldrh	r3, [r7, #8]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	603b      	str	r3, [r7, #0]
    size = len - size;
 80009de:	88ba      	ldrh	r2, [r7, #4]
 80009e0:	893b      	ldrh	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff43 	bl	8000874 <getSn_RxBASE>
 80009ee:	4603      	mov	r3, r0
 80009f0:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 80009f2:	897b      	ldrh	r3, [r7, #10]
 80009f4:	893a      	ldrh	r2, [r7, #8]
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe67 	bl	80006cc <WIZCHIP_READ_BUF>
 80009fe:	e005      	b.n	8000a0c <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 8000a00:	897b      	ldrh	r3, [r7, #10]
 8000a02:	88ba      	ldrh	r2, [r7, #4]
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe60 	bl	80006cc <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 8000a0c:	89fa      	ldrh	r2, [r7, #14]
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3304      	adds	r3, #4
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	3328      	adds	r3, #40	; 0x28
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f7ff fda5 	bl	8000578 <WIZCHIP_WRITE>
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	3304      	adds	r3, #4
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	3329      	adds	r3, #41	; 0x29
 8000a36:	461a      	mov	r2, r3
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4610      	mov	r0, r2
 8000a40:	f7ff fd9a 	bl	8000578 <WIZCHIP_WRITE>
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71bb      	strb	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	80bb      	strh	r3, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d902      	bls.n	8000a76 <socket+0x2a>
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	e0e2      	b.n	8000c3c <socket+0x1f0>
	switch(protocol)
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d819      	bhi.n	8000ab2 <socket+0x66>
 8000a7e:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <socket+0x38>)
 8000a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a84:	08000a99 	.word	0x08000a99
 8000a88:	08000ab9 	.word	0x08000ab9
 8000a8c:	08000ab9 	.word	0x08000ab9
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	08000ab9 	.word	0x08000ab9
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f7ff fe13 	bl	80006cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <socket+0x6c>
 8000aac:	f06f 0302 	mvn.w	r3, #2
 8000ab0:	e0c4      	b.n	8000c3c <socket+0x1f0>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000ab2:	f06f 0304 	mvn.w	r3, #4
 8000ab6:	e0c1      	b.n	8000c3c <socket+0x1f0>
         break;
 8000ab8:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <socket+0x7e>
 8000ac4:	f06f 0305 	mvn.w	r3, #5
 8000ac8:	e0b8      	b.n	8000c3c <socket+0x1f0>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d019      	beq.n	8000b04 <socket+0xb8>
	{
   	switch(protocol)
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d002      	beq.n	8000adc <socket+0x90>
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d008      	beq.n	8000aec <socket+0xa0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000ada:	e018      	b.n	8000b0e <socket+0xc2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d110      	bne.n	8000b08 <socket+0xbc>
 8000ae6:	f06f 0305 	mvn.w	r3, #5
 8000aea:	e0a7      	b.n	8000c3c <socket+0x1f0>
   	      if(flag & SF_IGMP_VER2)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	f003 0320 	and.w	r3, r3, #32
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00a      	beq.n	8000b0c <socket+0xc0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db06      	blt.n	8000b0c <socket+0xc0>
 8000afe:	f06f 0305 	mvn.w	r3, #5
 8000b02:	e09b      	b.n	8000c3c <socket+0x1f0>
   	}
   }
 8000b04:	bf00      	nop
 8000b06:	e002      	b.n	8000b0e <socket+0xc2>
   	      break;
 8000b08:	bf00      	nop
 8000b0a:	e000      	b.n	8000b0e <socket+0xc2>
   	      break;
 8000b0c:	bf00      	nop
	close(sn);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f8a1 	bl	8000c58 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b22:	f023 030f 	bic.w	r3, r3, #15
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fd20 	bl	8000578 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d110      	bne.n	8000b60 <socket+0x114>
	{
	   port = sock_any_port++;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <socket+0x1f8>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	b291      	uxth	r1, r2
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <socket+0x1f8>)
 8000b48:	8011      	strh	r1, [r2, #0]
 8000b4a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <socket+0x1f8>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d103      	bne.n	8000b60 <socket+0x114>
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <socket+0x1f8>)
 8000b5a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000b5e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3304      	adds	r3, #4
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	3304      	adds	r3, #4
 8000b68:	461a      	mov	r2, r3
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f7ff fcff 	bl	8000578 <WIZCHIP_WRITE>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	3305      	adds	r3, #5
 8000b82:	461a      	mov	r2, r3
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f7ff fcf4 	bl	8000578 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3304      	adds	r3, #4
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	3301      	adds	r3, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fcec 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ba0:	bf00      	nop
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd12 	bl	80005d4 <WIZCHIP_READ>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f5      	bne.n	8000ba2 <socket+0x156>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <socket+0x1fc>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <socket+0x1fc>)
 8000bd2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	f003 0201 	and.w	r2, r3, #1
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <socket+0x1fc>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <socket+0x1fc>)
 8000bf0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <socket+0x200>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <socket+0x200>)
 8000c0e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <socket+0x204>)
 8000c14:	2100      	movs	r1, #0
 8000c16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <socket+0x208>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000c22:	bf00      	nop
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	3304      	adds	r3, #4
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	3303      	adds	r3, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fcd1 	bl	80005d4 <WIZCHIP_READ>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f5      	beq.n	8000c24 <socket+0x1d8>
   return (int8_t)sn;
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	200000c0 	.word	0x200000c0
 8000c4c:	200000c2 	.word	0x200000c2
 8000c50:	200000c4 	.word	0x200000c4
 8000c54:	200000cc 	.word	0x200000cc

08000c58 <close>:

int8_t close(uint8_t sn)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d902      	bls.n	8000c6e <close+0x16>
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	e04d      	b.n	8000d0a <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3304      	adds	r3, #4
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	3301      	adds	r3, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc7d 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000c7e:	bf00      	nop
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	3304      	adds	r3, #4
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	3301      	adds	r3, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fca3 	bl	80005d4 <WIZCHIP_READ>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f5      	bne.n	8000c80 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	3304      	adds	r3, #4
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	21ff      	movs	r1, #255	; 0xff
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc6a 	bl	8000578 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <close+0xbc>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <close+0xbc>)
 8000cc0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <close+0xc0>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <close+0xc0>)
 8000cde:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <close+0xc4>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <close+0xc8>)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000cf2:	bf00      	nop
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc69 	bl	80005d4 <WIZCHIP_READ>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f5      	bne.n	8000cf4 <close+0x9c>
	return SOCK_OK;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000c0 	.word	0x200000c0
 8000d18:	200000c2 	.word	0x200000c2
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	200000cc 	.word	0x200000cc

08000d24 <listen>:

int8_t listen(uint8_t sn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d902      	bls.n	8000d3a <listen+0x16>
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	e040      	b.n	8000dbc <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fc47 	bl	80005d4 <WIZCHIP_READ>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d002      	beq.n	8000d56 <listen+0x32>
 8000d50:	f06f 0304 	mvn.w	r3, #4
 8000d54:	e032      	b.n	8000dbc <listen+0x98>
	CHECK_SOCKINIT();
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fc38 	bl	80005d4 <WIZCHIP_READ>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b13      	cmp	r3, #19
 8000d68:	d002      	beq.n	8000d70 <listen+0x4c>
 8000d6a:	f06f 0302 	mvn.w	r3, #2
 8000d6e:	e025      	b.n	8000dbc <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3304      	adds	r3, #4
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	3301      	adds	r3, #1
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbfc 	bl	8000578 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000d80:	bf00      	nop
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3304      	adds	r3, #4
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc22 	bl	80005d4 <WIZCHIP_READ>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f5      	bne.n	8000d82 <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000d96:	e006      	b.n	8000da6 <listen+0x82>
   {
         close(sn);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff5c 	bl	8000c58 <close>
         return SOCKERR_SOCKCLOSED;
 8000da0:	f06f 0303 	mvn.w	r3, #3
 8000da4:	e00a      	b.n	8000dbc <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	3304      	adds	r3, #4
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	3303      	adds	r3, #3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc10 	bl	80005d4 <WIZCHIP_READ>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b14      	cmp	r3, #20
 8000db8:	d1ee      	bne.n	8000d98 <listen+0x74>
   }
   return SOCK_OK;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d902      	bls.n	8000dda <disconnect+0x16>
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	e059      	b.n	8000e8e <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fbf7 	bl	80005d4 <WIZCHIP_READ>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d002      	beq.n	8000df6 <disconnect+0x32>
 8000df0:	f06f 0304 	mvn.w	r3, #4
 8000df4:	e04b      	b.n	8000e8e <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	2108      	movs	r1, #8
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fbb9 	bl	8000578 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000e06:	bf00      	nop
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbdf 	bl	80005d4 <WIZCHIP_READ>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f5      	bne.n	8000e08 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <disconnect+0xd4>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <disconnect+0xd4>)
 8000e38:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <disconnect+0xd8>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	fa42 f303 	asr.w	r3, r2, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d014      	beq.n	8000e78 <disconnect+0xb4>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e01d      	b.n	8000e8e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	3304      	adds	r3, #4
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	3302      	adds	r3, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fbba 	bl	80005d4 <WIZCHIP_READ>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <disconnect+0xb4>
	   {
	      close(sn);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef3 	bl	8000c58 <close>
	      return SOCKERR_TIMEOUT;
 8000e72:	f06f 030c 	mvn.w	r3, #12
 8000e76:	e00a      	b.n	8000e8e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	3303      	adds	r3, #3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fba7 	bl	80005d4 <WIZCHIP_READ>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e2      	bne.n	8000e52 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000c2 	.word	0x200000c2
 8000e9c:	200000c0 	.word	0x200000c0

08000ea0 <recv>:
   return (int32_t)len;
}


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d902      	bls.n	8000ec4 <recv+0x24>
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e0a8      	b.n	8001016 <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb82 	bl	80005d4 <WIZCHIP_READ>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d002      	beq.n	8000ee0 <recv+0x40>
 8000eda:	f06f 0304 	mvn.w	r3, #4
 8000ede:	e09a      	b.n	8001016 <recv+0x176>
   CHECK_SOCKDATA();
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <recv+0x4c>
 8000ee6:	f06f 030d 	mvn.w	r3, #13
 8000eea:	e094      	b.n	8001016 <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8000eec:	201a      	movs	r0, #26
 8000eee:	f7ff fb71 	bl	80005d4 <WIZCHIP_READ>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	ea01 0203 	and.w	r2, r1, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa42 f303 	asr.w	r3, r2, r3
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000f18:	89ba      	ldrh	r2, [r7, #12]
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d201      	bcs.n	8000f24 <recv+0x84>
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fc61 	bl	80007ee <getSn_RX_RSR>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	3304      	adds	r3, #4
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	3303      	adds	r3, #3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fb4b 	bl	80005d4 <WIZCHIP_READ>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b17      	cmp	r3, #23
 8000f46:	d030      	beq.n	8000faa <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b1c      	cmp	r3, #28
 8000f4c:	d126      	bne.n	8000f9c <recv+0xfc>
            {
               if(recvsize != 0) break;
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d13d      	bne.n	8000fd0 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fc06 	bl	8000768 <getSn_TX_FSR>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461c      	mov	r4, r3
 8000f60:	201b      	movs	r0, #27
 8000f62:	f7ff fb37 	bl	80005d4 <WIZCHIP_READ>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	ea01 0203 	and.w	r2, r1, r3
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa42 f303 	asr.w	r3, r2, r3
 8000f80:	2201      	movs	r2, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	d10d      	bne.n	8000faa <recv+0x10a>
               {
                  close(sn);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe61 	bl	8000c58 <close>
                  return SOCKERR_SOCKSTATUS;
 8000f96:	f06f 0306 	mvn.w	r3, #6
 8000f9a:	e03c      	b.n	8001016 <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe5a 	bl	8000c58 <close>
               return SOCKERR_SOCKSTATUS;
 8000fa4:	f06f 0306 	mvn.w	r3, #6
 8000fa8:	e035      	b.n	8001016 <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <recv+0x180>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <recv+0x128>
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <recv+0x128>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e026      	b.n	8001016 <recv+0x176>
         if(recvsize != 0) break;
 8000fc8:	89bb      	ldrh	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8000fce:	e7a9      	b.n	8000f24 <recv+0x84>
               if(recvsize != 0) break;
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <recv+0x136>
         if(recvsize != 0) break;
 8000fd4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8000fd6:	89ba      	ldrh	r2, [r7, #12]
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d201      	bcs.n	8000fe2 <recv+0x142>
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fc79 	bl	80008e0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fabd 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ffe:	bf00      	nop
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3304      	adds	r3, #4
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	3301      	adds	r3, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fae3 	bl	80005d4 <WIZCHIP_READ>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f5      	bne.n	8001000 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001014:	88bb      	ldrh	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	200000c0 	.word	0x200000c0

08001024 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2206      	movs	r2, #6
 800109e:	4619      	mov	r1, r3
 80010a0:	2009      	movs	r0, #9
 80010a2:	f7ff fb13 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2204      	movs	r2, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fb0c 	bl	80006cc <WIZCHIP_READ_BUF>
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	2005      	movs	r0, #5
 80010be:	f7ff fb05 	bl	80006cc <WIZCHIP_READ_BUF>
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2204      	movs	r2, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fafe 	bl	80006cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fa50 	bl	8000578 <WIZCHIP_WRITE>
   getMR(); // for delay
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fa7b 	bl	80005d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2206      	movs	r2, #6
 80010e2:	4619      	mov	r1, r3
 80010e4:	2009      	movs	r0, #9
 80010e6:	f7ff faa3 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fa9c 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2204      	movs	r2, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	2005      	movs	r0, #5
 8001102:	f7ff fa95 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2204      	movs	r2, #4
 800110c:	4619      	mov	r1, r3
 800110e:	200f      	movs	r0, #15
 8001110:	f7ff fa8e 	bl	8000630 <WIZCHIP_WRITE_BUF>
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800112a:	f7ff ffb3 	bl	8001094 <wizchip_sw_reset>
   if(txsize)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d04e      	beq.n	80011d2 <wizchip_init+0xb6>
   {
      tmp = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73bb      	strb	r3, [r7, #14]
         tmp += txsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else      
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e015      	b.n	800116a <wizchip_init+0x4e>
      {
         tmp += txsize[i];
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	4413      	add	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 8001150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001154:	2b10      	cmp	r3, #16
 8001156:	dd02      	ble.n	800115e <wizchip_init+0x42>
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	e08c      	b.n	8001278 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b03      	cmp	r3, #3
 8001170:	dde5      	ble.n	800113e <wizchip_init+0x22>
      }
   #endif
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e028      	b.n	80011ca <wizchip_init+0xae>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8001178:	201b      	movs	r0, #27
 800117a:	f7ff fa2b 	bl	80005d4 <WIZCHIP_READ>
 800117e:	4603      	mov	r3, r0
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2103      	movs	r1, #3
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	b25b      	sxtb	r3, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	b25b      	sxtb	r3, r3
 8001194:	4013      	ands	r3, r2
 8001196:	b25a      	sxtb	r2, r3
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	440b      	add	r3, r1
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	201b      	movs	r0, #27
 80011ba:	f7ff f9dd 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	ddd2      	ble.n	8001178 <wizchip_init+0x5c>
   }
   if(rxsize)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d04e      	beq.n	8001276 <wizchip_init+0x15a>
   {
      tmp = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	73bb      	strb	r3, [r7, #14]
         tmp += rxsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else         
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e015      	b.n	800120e <wizchip_init+0xf2>
      {
         tmp += rxsize[i];
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	4413      	add	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 80011f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	dd02      	ble.n	8001202 <wizchip_init+0xe6>
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	e03a      	b.n	8001278 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3301      	adds	r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	dde5      	ble.n	80011e2 <wizchip_init+0xc6>
      }
   #endif

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e028      	b.n	800126e <wizchip_init+0x152>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 800121c:	201a      	movs	r0, #26
 800121e:	f7ff f9d9 	bl	80005d4 <WIZCHIP_READ>
 8001222:	4603      	mov	r3, r0
 8001224:	b25a      	sxtb	r2, r3
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2103      	movs	r1, #3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4013      	ands	r3, r2
 800123a:	b25a      	sxtb	r2, r3
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	201a      	movs	r0, #26
 800125e:	f7ff f98b 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	2b03      	cmp	r3, #3
 8001274:	ddd2      	ble.n	800121c <wizchip_init+0x100>
   }
   return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <DHCP_time_handler+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <DHCP_time_handler+0x18>)
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200000d0 	.word	0x200000d0

0800129c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <DWT_Delay_us+0x40>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80012aa:	f002 fff9 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <DWT_Delay_us+0x44>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80012c0:	bf00      	nop
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <DWT_Delay_us+0x40>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad2      	subs	r2, r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3f8      	bcc.n	80012c2 <DWT_Delay_us+0x26>
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e0001000 	.word	0xe0001000
 80012e0:	431bde83 	.word	0x431bde83

080012e4 <HAL_UART_RxCpltCallback>:


/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a71      	ldr	r2, [pc, #452]	; (80014b8 <HAL_UART_RxCpltCallback+0x1d4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10d      	bne.n	8001312 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	4970      	ldr	r1, [pc, #448]	; (80014bc <HAL_UART_RxCpltCallback+0x1d8>)
 80012fa:	4871      	ldr	r0, [pc, #452]	; (80014c0 <HAL_UART_RxCpltCallback+0x1dc>)
 80012fc:	f004 fb53 	bl	80059a6 <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8001300:	230a      	movs	r3, #10
 8001302:	2201      	movs	r2, #1
 8001304:	496d      	ldr	r1, [pc, #436]	; (80014bc <HAL_UART_RxCpltCallback+0x1d8>)
 8001306:	486e      	ldr	r0, [pc, #440]	; (80014c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001308:	f004 fabb 	bl	8005882 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 800130c:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_UART_RxCpltCallback+0x1e0>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	; (80014c8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d15e      	bne.n	80013da <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	496b      	ldr	r1, [pc, #428]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 8001320:	486b      	ldr	r0, [pc, #428]	; (80014d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001322:	f004 fb40 	bl	80059a6 <HAL_UART_Receive_IT>

		switch(status){
 8001326:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d002      	beq.n	8001334 <HAL_UART_RxCpltCallback+0x50>
 800132e:	2b02      	cmp	r3, #2
 8001330:	d011      	beq.n	8001356 <HAL_UART_RxCpltCallback+0x72>
 8001332:	e055      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8001334:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b5b      	cmp	r3, #91	; 0x5b
 800133a:	d150      	bne.n	80013de <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 800133c:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <HAL_UART_RxCpltCallback+0x1f4>)
 800133e:	225b      	movs	r2, #91	; 0x5b
 8001340:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001342:	4b66      	ldr	r3, [pc, #408]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 800134e:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8001354:	e043      	b.n	80013de <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8001356:	4b5d      	ldr	r3, [pc, #372]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b5b      	cmp	r3, #91	; 0x5b
 800135c:	d109      	bne.n	8001372 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001360:	225b      	movs	r2, #91	; 0x5b
 8001362:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001364:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <HAL_UART_RxCpltCallback+0x1f0>)
 800136c:	2202      	movs	r2, #2
 800136e:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8001370:	e036      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b5d      	cmp	r3, #93	; 0x5d
 8001378:	d115      	bne.n	80013a6 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b22      	cmp	r3, #34	; 0x22
 8001380:	d10d      	bne.n	800139e <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	b2d1      	uxtb	r1, r2
 800138a:	4a54      	ldr	r2, [pc, #336]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 800138c:	7011      	strb	r1, [r2, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 8001392:	7819      	ldrb	r1, [r3, #0]
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001396:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8001398:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_UART_RxCpltCallback+0x1fc>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
		            status = START ;
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_UART_RxCpltCallback+0x1f0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
		        break ;
 80013a4:	e01c      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 80013a6:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b24      	cmp	r3, #36	; 0x24
 80013ac:	d80b      	bhi.n	80013c6 <HAL_UART_RxCpltCallback+0xe2>
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	b2d1      	uxtb	r1, r2
 80013b6:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 80013b8:	7011      	strb	r1, [r2, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_UART_RxCpltCallback+0x1e8>)
 80013be:	7819      	ldrb	r1, [r3, #0]
 80013c0:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <HAL_UART_RxCpltCallback+0x1f4>)
 80013c2:	5499      	strb	r1, [r3, r2]
		        break ;
 80013c4:	e00c      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_UART_RxCpltCallback+0x1f0>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_UART_RxCpltCallback+0x1f8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_UART_RxCpltCallback+0x1fc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
		        break ;
 80013d8:	e002      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80013da:	bf00      	nop
 80013dc:	e000      	b.n	80013e0 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80013de:	bf00      	nop

	if (huart->Instance == USART6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_UART_RxCpltCallback+0x200>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d15e      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	493e      	ldr	r1, [pc, #248]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 80013ee:	483f      	ldr	r0, [pc, #252]	; (80014ec <HAL_UART_RxCpltCallback+0x208>)
 80013f0:	f004 fad9 	bl	80059a6 <HAL_UART_Receive_IT>

		switch(GTO_status){
 80013f4:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <HAL_UART_RxCpltCallback+0x20c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d002      	beq.n	8001402 <HAL_UART_RxCpltCallback+0x11e>
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d011      	beq.n	8001424 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 8001400:	e055      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b28      	cmp	r3, #40	; 0x28
 8001408:	d150      	bne.n	80014ac <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <HAL_UART_RxCpltCallback+0x210>)
 800140c:	2228      	movs	r2, #40	; 0x28
 800140e:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_UART_RxCpltCallback+0x20c>)
 8001418:	2202      	movs	r2, #2
 800141a:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_UART_RxCpltCallback+0x218>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
					break ;
 8001422:	e043      	b.n	80014ac <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b28      	cmp	r3, #40	; 0x28
 800142a:	d109      	bne.n	8001440 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_UART_RxCpltCallback+0x210>)
 800142e:	2228      	movs	r2, #40	; 0x28
 8001430:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_UART_RxCpltCallback+0x20c>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
					break ;
 800143e:	e036      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b29      	cmp	r3, #41	; 0x29
 8001446:	d115      	bne.n	8001474 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d10d      	bne.n	800146c <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 800145a:	7011      	strb	r1, [r2, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 8001460:	7819      	ldrb	r1, [r3, #0]
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_UART_RxCpltCallback+0x210>)
 8001464:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_UART_RxCpltCallback+0x218>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_UART_RxCpltCallback+0x20c>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
					break ;
 8001472:	e01c      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d80b      	bhi.n	8001494 <HAL_UART_RxCpltCallback+0x1b0>
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	b2d1      	uxtb	r1, r2
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 8001486:	7011      	strb	r1, [r2, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_RxCpltCallback+0x204>)
 800148c:	7819      	ldrb	r1, [r3, #0]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_UART_RxCpltCallback+0x210>)
 8001490:	5499      	strb	r1, [r3, r2]
					break ;
 8001492:	e00c      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_UART_RxCpltCallback+0x20c>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_UART_RxCpltCallback+0x214>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_UART_RxCpltCallback+0x218>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
					break ;
 80014a6:	e002      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
	}
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 80014ac:	bf00      	nop
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40011000 	.word	0x40011000
 80014bc:	20000245 	.word	0x20000245
 80014c0:	20000188 	.word	0x20000188
 80014c4:	200000d4 	.word	0x200000d4
 80014c8:	40004400 	.word	0x40004400
 80014cc:	20000184 	.word	0x20000184
 80014d0:	20000358 	.word	0x20000358
 80014d4:	2000002f 	.word	0x2000002f
 80014d8:	200004f8 	.word	0x200004f8
 80014dc:	200000e9 	.word	0x200000e9
 80014e0:	200000d5 	.word	0x200000d5
 80014e4:	40011400 	.word	0x40011400
 80014e8:	200002f8 	.word	0x200002f8
 80014ec:	20000248 	.word	0x20000248
 80014f0:	20000030 	.word	0x20000030
 80014f4:	2000028c 	.word	0x2000028c
 80014f8:	20000524 	.word	0x20000524
 80014fc:	200000d6 	.word	0x200000d6

08001500 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	b29a      	uxth	r2, r3
 8001510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <_write+0x28>)
 8001518:	f004 f9b3 	bl	8005882 <HAL_UART_Transmit>
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000188 	.word	0x20000188

0800152c <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7fe fe4a 	bl	80001d0 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	230a      	movs	r3, #10
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 f99c 	bl	8005882 <HAL_UART_Transmit>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f7fe fe37 	bl	80001d0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	230a      	movs	r3, #10
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f004 f989 	bl	8005882 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8001570:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001574:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	230a      	movs	r3, #10
 800157c:	2202      	movs	r2, #2
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f004 f97f 	bl	8005882 <HAL_UART_Transmit>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f001 fc03 	bl	8002d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f989 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 fc8b 	bl	8001eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800159e:	f000 fc61 	bl	8001e64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015a2:	f000 fbdf 	bl	8001d64 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80015a6:	f000 fbb3 	bl	8001d10 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80015aa:	f000 fb5d 	bl	8001c68 <MX_UART4_Init>
  MX_UART5_Init();
 80015ae:	f000 fb85 	bl	8001cbc <MX_UART5_Init>
  MX_USART6_UART_Init();
 80015b2:	f000 fc2b 	bl	8001e0c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80015b6:	f000 fa67 	bl	8001a88 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015ba:	f000 fab7 	bl	8001b2c <MX_TIM1_Init>
  MX_TIM7_Init();
 80015be:	f000 fb1d 	bl	8001bfc <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80015c2:	f000 fbf9 	bl	8001db8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80015c6:	f000 fa05 	bl	80019d4 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015ca:	f000 f9ef 	bl	80019ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	4998      	ldr	r1, [pc, #608]	; (8001834 <main+0x2a8>)
 80015d2:	4899      	ldr	r0, [pc, #612]	; (8001838 <main+0x2ac>)
 80015d4:	f004 f9e7 	bl	80059a6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 80015d8:	2201      	movs	r2, #1
 80015da:	4998      	ldr	r1, [pc, #608]	; (800183c <main+0x2b0>)
 80015dc:	4898      	ldr	r0, [pc, #608]	; (8001840 <main+0x2b4>)
 80015de:	f004 f9e2 	bl	80059a6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 80015e2:	2201      	movs	r2, #1
 80015e4:	4997      	ldr	r1, [pc, #604]	; (8001844 <main+0x2b8>)
 80015e6:	4898      	ldr	r0, [pc, #608]	; (8001848 <main+0x2bc>)
 80015e8:	f004 f9dd 	bl	80059a6 <HAL_UART_Receive_IT>
  //debugPrintln(&huart1, "\n Start STM32F407");

  /*##########################################################################################################*/
  /*START DEBUGGING MESSAGE*/

  printf("\r\n Start STM32F407 - 20210811 \r\n");
 80015ec:	4897      	ldr	r0, [pc, #604]	; (800184c <main+0x2c0>)
 80015ee:	f005 f8cd 	bl	800678c <puts>

  NetInit();
 80015f2:	f000 fed9 	bl	80023a8 <NetInit>
  DisplayConfig();
 80015f6:	f000 fe47 	bl	8002288 <DisplayConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	4893      	ldr	r0, [pc, #588]	; (8001850 <main+0x2c4>)
 8001602:	f002 fa1f 	bl	8003a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	4892      	ldr	r0, [pc, #584]	; (8001854 <main+0x2c8>)
 800160c:	f002 fa1a 	bl	8003a44 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4890      	ldr	r0, [pc, #576]	; (8001858 <main+0x2cc>)
 8001616:	f002 fa15 	bl	8003a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 800161a:	2200      	movs	r2, #0
 800161c:	2108      	movs	r1, #8
 800161e:	488e      	ldr	r0, [pc, #568]	; (8001858 <main+0x2cc>)
 8001620:	f002 fa10 	bl	8003a44 <HAL_GPIO_WritePin>

  //HAL_GPIO_WritePin(GPIOC, RX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> rx enable

  HAL_GPIO_WritePin(GPIOC, E_RST, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	488b      	ldr	r0, [pc, #556]	; (8001858 <main+0x2cc>)
 800162a:	f002 fa0b 	bl	8003a44 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);	// 1 second*/

	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  ProcessTcpSever();	// Ethernet test
 800162e:	f000 fdc3 	bl	80021b8 <ProcessTcpSever>

	  if (uart1_key_Flag){
 8001632:	4b8a      	ldr	r3, [pc, #552]	; (800185c <main+0x2d0>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8092 	beq.w	8001760 <main+0x1d4>
		  uart1_key_Flag = 0;
 800163c:	4b87      	ldr	r3, [pc, #540]	; (800185c <main+0x2d0>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <main+0x2a8>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b7a      	cmp	r3, #122	; 0x7a
 8001648:	f300 808b 	bgt.w	8001762 <main+0x1d6>
 800164c:	2b61      	cmp	r3, #97	; 0x61
 800164e:	da04      	bge.n	800165a <main+0xce>
 8001650:	2b32      	cmp	r3, #50	; 0x32
 8001652:	d04c      	beq.n	80016ee <main+0x162>
 8001654:	2b36      	cmp	r3, #54	; 0x36
 8001656:	d055      	beq.n	8001704 <main+0x178>
 8001658:	e083      	b.n	8001762 <main+0x1d6>
 800165a:	3b61      	subs	r3, #97	; 0x61
 800165c:	2b19      	cmp	r3, #25
 800165e:	f200 8080 	bhi.w	8001762 <main+0x1d6>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <main+0xdc>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016d7 	.word	0x080016d7
 800166c:	08001763 	.word	0x08001763
 8001670:	08001753 	.word	0x08001753
 8001674:	08001763 	.word	0x08001763
 8001678:	08001763 	.word	0x08001763
 800167c:	08001763 	.word	0x08001763
 8001680:	08001763 	.word	0x08001763
 8001684:	08001763 	.word	0x08001763
 8001688:	08001763 	.word	0x08001763
 800168c:	08001763 	.word	0x08001763
 8001690:	08001763 	.word	0x08001763
 8001694:	08001763 	.word	0x08001763
 8001698:	08001763 	.word	0x08001763
 800169c:	08001763 	.word	0x08001763
 80016a0:	08001763 	.word	0x08001763
 80016a4:	08001763 	.word	0x08001763
 80016a8:	08001763 	.word	0x08001763
 80016ac:	0800171b 	.word	0x0800171b
 80016b0:	080016d1 	.word	0x080016d1
 80016b4:	08001729 	.word	0x08001729
 80016b8:	08001763 	.word	0x08001763
 80016bc:	08001763 	.word	0x08001763
 80016c0:	08001763 	.word	0x08001763
 80016c4:	08001745 	.word	0x08001745
 80016c8:	08001763 	.word	0x08001763
 80016cc:	08001737 	.word	0x08001737

			  case 's':
				  Sync_out();
 80016d0:	f000 fcc8 	bl	8002064 <Sync_out>

				  break;
 80016d4:	e045      	b.n	8001762 <main+0x1d6>

			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 80016d6:	4962      	ldr	r1, [pc, #392]	; (8001860 <main+0x2d4>)
 80016d8:	4857      	ldr	r0, [pc, #348]	; (8001838 <main+0x2ac>)
 80016da:	f7ff ff27 	bl	800152c <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 80016de:	4961      	ldr	r1, [pc, #388]	; (8001864 <main+0x2d8>)
 80016e0:	4855      	ldr	r0, [pc, #340]	; (8001838 <main+0x2ac>)
 80016e2:	f7ff ff36 	bl	8001552 <debugPrintln>
				  printf("printf test\r\n");
 80016e6:	4860      	ldr	r0, [pc, #384]	; (8001868 <main+0x2dc>)
 80016e8:	f005 f850 	bl	800678c <puts>
				  break;
 80016ec:	e039      	b.n	8001762 <main+0x1d6>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2101      	movs	r1, #1
 80016f2:	4858      	ldr	r0, [pc, #352]	; (8001854 <main+0x2c8>)
 80016f4:	f002 f9a6 	bl	8003a44 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	4854      	ldr	r0, [pc, #336]	; (8001850 <main+0x2c4>)
 80016fe:	f002 f9a1 	bl	8003a44 <HAL_GPIO_WritePin>

				  break;
 8001702:	e02e      	b.n	8001762 <main+0x1d6>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	4852      	ldr	r0, [pc, #328]	; (8001854 <main+0x2c8>)
 800170a:	f002 f99b 	bl	8003a44 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 800170e:	2201      	movs	r2, #1
 8001710:	2120      	movs	r1, #32
 8001712:	484f      	ldr	r0, [pc, #316]	; (8001850 <main+0x2c4>)
 8001714:	f002 f996 	bl	8003a44 <HAL_GPIO_WritePin>

				  break;
 8001718:	e023      	b.n	8001762 <main+0x1d6>


			  case 'r':
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 800171a:	230a      	movs	r3, #10
 800171c:	2201      	movs	r2, #1
 800171e:	4947      	ldr	r1, [pc, #284]	; (800183c <main+0x2b0>)
 8001720:	4847      	ldr	r0, [pc, #284]	; (8001840 <main+0x2b4>)
 8001722:	f004 f8ae 	bl	8005882 <HAL_UART_Transmit>

				  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  break;
 8001726:	e01c      	b.n	8001762 <main+0x1d6>

			  case 't':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 8001728:	230a      	movs	r3, #10
 800172a:	2201      	movs	r2, #1
 800172c:	494f      	ldr	r1, [pc, #316]	; (800186c <main+0x2e0>)
 800172e:	4846      	ldr	r0, [pc, #280]	; (8001848 <main+0x2bc>)
 8001730:	f004 f8a7 	bl	8005882 <HAL_UART_Transmit>

				  break;
 8001734:	e015      	b.n	8001762 <main+0x1d6>
			  case 'z':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 10);
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
				  //HAL_GPIO_WritePin(GPIOC, RX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> rx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001736:	2364      	movs	r3, #100	; 0x64
 8001738:	2223      	movs	r2, #35	; 0x23
 800173a:	494d      	ldr	r1, [pc, #308]	; (8001870 <main+0x2e4>)
 800173c:	4840      	ldr	r0, [pc, #256]	; (8001840 <main+0x2b4>)
 800173e:	f004 f8a0 	bl	8005882 <HAL_UART_Transmit>
				  /*if(uart2_key_Flag){
					  printf("PIC Received\r\n");
				  }*/


				  break;
 8001742:	e00e      	b.n	8001762 <main+0x1d6>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001744:	2364      	movs	r3, #100	; 0x64
 8001746:	2223      	movs	r2, #35	; 0x23
 8001748:	494a      	ldr	r1, [pc, #296]	; (8001874 <main+0x2e8>)
 800174a:	483d      	ldr	r0, [pc, #244]	; (8001840 <main+0x2b4>)
 800174c:	f004 f899 	bl	8005882 <HAL_UART_Transmit>
				  break;
 8001750:	e007      	b.n	8001762 <main+0x1d6>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	2223      	movs	r2, #35	; 0x23
 8001756:	4948      	ldr	r1, [pc, #288]	; (8001878 <main+0x2ec>)
 8001758:	4839      	ldr	r0, [pc, #228]	; (8001840 <main+0x2b4>)
 800175a:	f004 f892 	bl	8005882 <HAL_UART_Transmit>

				  break;
 800175e:	e000      	b.n	8001762 <main+0x1d6>

		  }
	  }
 8001760:	bf00      	nop


	  if(uart2_key_Flag) {
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <main+0x2f0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <main+0x228>
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  uart2_key_Flag = 0;
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <main+0x2f0>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8001770:	4843      	ldr	r0, [pc, #268]	; (8001880 <main+0x2f4>)
 8001772:	f005 f80b 	bl	800678c <puts>
		  //HAL_UART_Transmit(&huart1, "OK", 1, 10);
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  //HAL_UART_Receive_IT(&huart2, &data, 1); // interrupt uart 2

		  reset_CMD = SubStr(rxd, 0, 35);
 8001776:	2223      	movs	r2, #35	; 0x23
 8001778:	2100      	movs	r1, #0
 800177a:	4842      	ldr	r0, [pc, #264]	; (8001884 <main+0x2f8>)
 800177c:	f000 fca2 	bl	80020c4 <SubStr>
 8001780:	4603      	mov	r3, r0
 8001782:	4a41      	ldr	r2, [pc, #260]	; (8001888 <main+0x2fc>)
 8001784:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 8001786:	4b40      	ldr	r3, [pc, #256]	; (8001888 <main+0x2fc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	483f      	ldr	r0, [pc, #252]	; (800188c <main+0x300>)
 800178e:	f004 ff77 	bl	8006680 <iprintf>

		  //HAL_Delay(1);
		  for (int i = 0; i < LENGTH; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e00a      	b.n	80017ae <main+0x222>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <main+0x2f8>)
 800179c:	1899      	adds	r1, r3, r2
 800179e:	230a      	movs	r3, #10
 80017a0:	2201      	movs	r2, #1
 80017a2:	4825      	ldr	r0, [pc, #148]	; (8001838 <main+0x2ac>)
 80017a4:	f004 f86d 	bl	8005882 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b22      	cmp	r3, #34	; 0x22
 80017b2:	ddf1      	ble.n	8001798 <main+0x20c>
		  }

	  }

	  if(uart_6_flag) {
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <main+0x304>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d016      	beq.n	80017ea <main+0x25e>
		  uart_6_flag = 0;
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <main+0x304>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 80017c2:	4834      	ldr	r0, [pc, #208]	; (8001894 <main+0x308>)
 80017c4:	f004 ffe2 	bl	800678c <puts>

		  //HAL_Delay(1);

		  for (int i = 0; i < GTO_LENGTH; i++) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	e00a      	b.n	80017e4 <main+0x258>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4a31      	ldr	r2, [pc, #196]	; (8001898 <main+0x30c>)
 80017d2:	1899      	adds	r1, r3, r2
 80017d4:	230a      	movs	r3, #10
 80017d6:	2201      	movs	r2, #1
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <main+0x2ac>)
 80017da:	f004 f852 	bl	8005882 <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b0a      	cmp	r3, #10
 80017e8:	ddf1      	ble.n	80017ce <main+0x242>
		  //printf("\r\n\r\n");

	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	4818      	ldr	r0, [pc, #96]	; (8001850 <main+0x2c4>)
 80017f0:	f002 f910 	bl	8003a14 <HAL_GPIO_ReadPin>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <main+0x310>)
 80017fa:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 80017fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <main+0x2c4>)
 8001802:	f002 f907 	bl	8003a14 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <main+0x314>)
 800180c:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 800180e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <main+0x2c4>)
 8001814:	f002 f8fe 	bl	8003a14 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <main+0x318>)
 800181e:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 8001820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <main+0x2c4>)
 8001826:	f002 f8f5 	bl	8003a14 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <main+0x31c>)
 8001830:	701a      	strb	r2, [r3, #0]
  {
 8001832:	e6fc      	b.n	800162e <main+0xa2>
 8001834:	20000245 	.word	0x20000245
 8001838:	20000188 	.word	0x20000188
 800183c:	2000002c 	.word	0x2000002c
 8001840:	20000358 	.word	0x20000358
 8001844:	200002f8 	.word	0x200002f8
 8001848:	20000248 	.word	0x20000248
 800184c:	080074dc 	.word	0x080074dc
 8001850:	40020400 	.word	0x40020400
 8001854:	40021000 	.word	0x40021000
 8001858:	40020800 	.word	0x40020800
 800185c:	200000d4 	.word	0x200000d4
 8001860:	080074fc 	.word	0x080074fc
 8001864:	08007510 	.word	0x08007510
 8001868:	08007524 	.word	0x08007524
 800186c:	2000002e 	.word	0x2000002e
 8001870:	08007534 	.word	0x08007534
 8001874:	08007558 	.word	0x08007558
 8001878:	0800757c 	.word	0x0800757c
 800187c:	200000d5 	.word	0x200000d5
 8001880:	080075a0 	.word	0x080075a0
 8001884:	200004f8 	.word	0x200004f8
 8001888:	20000134 	.word	0x20000134
 800188c:	080075b0 	.word	0x080075b0
 8001890:	200000d6 	.word	0x200000d6
 8001894:	080075c0 	.word	0x080075c0
 8001898:	2000028c 	.word	0x2000028c
 800189c:	2000013c 	.word	0x2000013c
 80018a0:	20000494 	.word	0x20000494
 80018a4:	200001cc 	.word	0x200001cc
 80018a8:	200000e8 	.word	0x200000e8

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b098      	sub	sp, #96	; 0x60
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b6:	2230      	movs	r2, #48	; 0x30
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fe2e 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <SystemClock_Config+0xf8>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <SystemClock_Config+0xf8>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <SystemClock_Config+0xf8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <SystemClock_Config+0xfc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <SystemClock_Config+0xfc>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <SystemClock_Config+0xfc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001916:	230a      	movs	r3, #10
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	2301      	movs	r3, #1
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191e:	2310      	movs	r3, #16
 8001920:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001922:	2301      	movs	r3, #1
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	2302      	movs	r3, #2
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192a:	2300      	movs	r3, #0
 800192c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800192e:	2308      	movs	r3, #8
 8001930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001932:	23a8      	movs	r3, #168	; 0xa8
 8001934:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001936:	2302      	movs	r3, #2
 8001938:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800193a:	2304      	movs	r3, #4
 800193c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001942:	4618      	mov	r0, r3
 8001944:	f002 f898 	bl	8003a78 <HAL_RCC_OscConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800194e:	f000 fd9d 	bl	800248c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001956:	2302      	movs	r3, #2
 8001958:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fafa 	bl	8003f68 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800197a:	f000 fd87 	bl	800248c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800197e:	2302      	movs	r3, #2
 8001980:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001986:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fced 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001998:	f000 fd78 	bl	800248c <Error_Handler>
  }
}
 800199c:	bf00      	nop
 800199e:	3760      	adds	r7, #96	; 0x60
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2025      	movs	r0, #37	; 0x25
 80019b6:	f001 faeb 	bl	8002f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ba:	2025      	movs	r0, #37	; 0x25
 80019bc:	f001 fb04 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2047      	movs	r0, #71	; 0x47
 80019c6:	f001 fae3 	bl	8002f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019ca:	2047      	movs	r0, #71	; 0x47
 80019cc:	f001 fafc 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019e8:	2300      	movs	r3, #0
 80019ea:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <MX_RTC_Init+0xac>)
 80019ee:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <MX_RTC_Init+0xb0>)
 80019f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <MX_RTC_Init+0xac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_RTC_Init+0xac>)
 80019fa:	227f      	movs	r2, #127	; 0x7f
 80019fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a16:	481a      	ldr	r0, [pc, #104]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a18:	f002 fd8a 	bl	8004530 <HAL_RTC_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a22:	f000 fd33 	bl	800248c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480f      	ldr	r0, [pc, #60]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a42:	f002 fe06 	bl	8004652 <HAL_RTC_SetTime>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f000 fd1e 	bl	800248c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a50:	2301      	movs	r3, #1
 8001a52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a54:	2301      	movs	r3, #1
 8001a56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <MX_RTC_Init+0xac>)
 8001a68:	f002 feb0 	bl	80047cc <HAL_RTC_SetDate>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001a72:	f000 fd0b 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001d0 	.word	0x200001d0
 8001a84:	40002800 	.word	0x40002800

08001a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <MX_SPI1_Init+0x9c>)
 8001a92:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001a96:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001abe:	2210      	movs	r2, #16
 8001ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001ad6:	220a      	movs	r2, #10
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ada:	4811      	ldr	r0, [pc, #68]	; (8001b20 <MX_SPI1_Init+0x98>)
 8001adc:	f002 ff8f 	bl	80049fe <HAL_SPI_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ae6:	f000 fcd1 	bl	800248c <Error_Handler>
  /**SPI2 GPIO Configuration
	PB4     ------> SPI1_SCK
	PB6     ------> SPI1_MISO
	PB7     ------> SPI1_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001af8:	23d0      	movs	r3, #208	; 0xd0
 8001afa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_SPI1_Init+0xa0>)
 8001b12:	f001 fde3 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE END SPI1_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002fc 	.word	0x200002fc
 8001b24:	40013000 	.word	0x40013000
 8001b28:	40020800 	.word	0x40020800

08001b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b5a:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <MX_TIM1_Init+0xcc>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b84:	481b      	ldr	r0, [pc, #108]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001b86:	f003 f8e1 	bl	8004d4c <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001b90:	f000 fc7c 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001ba2:	f003 fa9b 	bl	80050dc <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bac:	f000 fc6e 	bl	800248c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001bc0:	f003 fb50 	bl	8005264 <HAL_TIM_SlaveConfigSynchro>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001bca:	f000 fc5f 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_TIM1_Init+0xc8>)
 8001bdc:	f003 fd74 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001be6:	f000 fc51 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3730      	adds	r7, #48	; 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001f8 	.word	0x200001f8
 8001bf8:	40010000 	.word	0x40010000

08001bfc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <MX_TIM7_Init+0x68>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c12:	2229      	movs	r2, #41	; 0x29
 8001c14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c2c:	f003 f88e 	bl	8004d4c <HAL_TIM_Base_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c36:	f000 fc29 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM7_Init+0x64>)
 8001c48:	f003 fd3e 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c52:	f000 fc1b 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000044c 	.word	0x2000044c
 8001c64:	40001400 	.word	0x40001400

08001c68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_UART4_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_UART4_Init+0x4c>)
 8001ca0:	f003 fda2 	bl	80057e8 <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001caa:	f000 fbef 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002b4 	.word	0x200002b4
 8001cb8:	40004c00 	.word	0x40004c00

08001cbc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_UART5_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_UART5_Init+0x4c>)
 8001cf4:	f003 fd78 	bl	80057e8 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f000 fbc5 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000140 	.word	0x20000140
 8001d0c:	40005000 	.word	0x40005000

08001d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <MX_USART1_UART_Init+0x50>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USART1_UART_Init+0x4c>)
 8001d48:	f003 fd4e 	bl	80057e8 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d52:	f000 fb9b 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000188 	.word	0x20000188
 8001d60:	40011000 	.word	0x40011000

08001d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_USART2_UART_Init+0x50>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f003 fd24 	bl	80057e8 <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da6:	f000 fb71 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000358 	.word	0x20000358
 8001db4:	40004400 	.word	0x40004400

08001db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <MX_USART3_UART_Init+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_USART3_UART_Init+0x4c>)
 8001df0:	f003 fcfa 	bl	80057e8 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f000 fb47 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000ec 	.word	0x200000ec
 8001e08:	40004800 	.word	0x40004800

08001e0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_USART6_UART_Init+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <MX_USART6_UART_Init+0x54>)
 8001e1a:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e30:	220c      	movs	r2, #12
 8001e32:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART6_UART_Init+0x4c>)
 8001e44:	f003 fcd0 	bl	80057e8 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e4e:	f000 fb1d 	bl	800248c <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000248 	.word	0x20000248
 8001e5c:	40011400 	.word	0x40011400
 8001e60:	003d0900 	.word	0x003d0900

08001e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_DMA_Init+0x4c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <MX_DMA_Init+0x4c>)
 8001e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <MX_DMA_Init+0x4c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2038      	movs	r0, #56	; 0x38
 8001e8c:	f001 f880 	bl	8002f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e90:	2038      	movs	r0, #56	; 0x38
 8001e92:	f001 f899 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	203b      	movs	r0, #59	; 0x3b
 8001e9c:	f001 f878 	bl	8002f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ea0:	203b      	movs	r0, #59	; 0x3b
 8001ea2:	f001 f891 	bl	8002fc8 <HAL_NVIC_EnableIRQ>

}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <MX_GPIO_Init+0x198>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	; (800204c <MX_GPIO_Init+0x198>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <MX_GPIO_Init+0x198>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b58      	ldr	r3, [pc, #352]	; (800204c <MX_GPIO_Init+0x198>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <MX_GPIO_Init+0x198>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b55      	ldr	r3, [pc, #340]	; (800204c <MX_GPIO_Init+0x198>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b51      	ldr	r3, [pc, #324]	; (800204c <MX_GPIO_Init+0x198>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a50      	ldr	r2, [pc, #320]	; (800204c <MX_GPIO_Init+0x198>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <MX_GPIO_Init+0x198>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <MX_GPIO_Init+0x198>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <MX_GPIO_Init+0x198>)
 8001f28:	f043 0310 	orr.w	r3, r3, #16
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <MX_GPIO_Init+0x198>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <MX_GPIO_Init+0x198>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a42      	ldr	r2, [pc, #264]	; (800204c <MX_GPIO_Init+0x198>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <MX_GPIO_Init+0x198>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <MX_GPIO_Init+0x198>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	; (800204c <MX_GPIO_Init+0x198>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <MX_GPIO_Init+0x198>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	211a      	movs	r1, #26
 8001f76:	4836      	ldr	r0, [pc, #216]	; (8002050 <MX_GPIO_Init+0x19c>)
 8001f78:	f001 fd64 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f82:	4834      	ldr	r0, [pc, #208]	; (8002054 <MX_GPIO_Init+0x1a0>)
 8001f84:	f001 fd5e 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001f8e:	4832      	ldr	r0, [pc, #200]	; (8002058 <MX_GPIO_Init+0x1a4>)
 8001f90:	f001 fd58 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4830      	ldr	r0, [pc, #192]	; (800205c <MX_GPIO_Init+0x1a8>)
 8001f9a:	f001 fd53 	bl	8003a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001f9e:	231a      	movs	r3, #26
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4826      	ldr	r0, [pc, #152]	; (8002050 <MX_GPIO_Init+0x19c>)
 8001fb6:	f001 fb91 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_GPIO_Init+0x1ac>)
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4823      	ldr	r0, [pc, #140]	; (800205c <MX_GPIO_Init+0x1a8>)
 8001fce:	f001 fb85 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fd2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481c      	ldr	r0, [pc, #112]	; (8002058 <MX_GPIO_Init+0x1a4>)
 8001fe8:	f001 fb78 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <MX_GPIO_Init+0x1a0>)
 8002006:	f001 fb69 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 800200a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_GPIO_Init+0x1a4>)
 8002024:	f001 fb5a 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_GPIO_Init+0x1a8>)
 8002040:	f001 fb4c 	bl	80036dc <HAL_GPIO_Init>

}
 8002044:	bf00      	nop
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40020800 	.word	0x40020800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40021000 	.word	0x40021000
 8002060:	10110000 	.word	0x10110000

08002064 <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8002068:	2201      	movs	r2, #1
 800206a:	2120      	movs	r1, #32
 800206c:	4810      	ldr	r0, [pc, #64]	; (80020b0 <Sync_out+0x4c>)
 800206e:	f001 fce9 	bl	8003a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 8002072:	2201      	movs	r2, #1
 8002074:	2101      	movs	r1, #1
 8002076:	480f      	ldr	r0, [pc, #60]	; (80020b4 <Sync_out+0x50>)
 8002078:	f001 fce4 	bl	8003a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 800207c:	2201      	movs	r2, #1
 800207e:	2102      	movs	r1, #2
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <Sync_out+0x54>)
 8002082:	f001 fcdf 	bl	8003a44 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 8002086:	230a      	movs	r3, #10
 8002088:	2201      	movs	r2, #1
 800208a:	490c      	ldr	r1, [pc, #48]	; (80020bc <Sync_out+0x58>)
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <Sync_out+0x5c>)
 800208e:	f003 fbf8 	bl	8005882 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 8002092:	2064      	movs	r0, #100	; 0x64
 8002094:	f7ff f902 	bl	800129c <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 8002098:	2200      	movs	r2, #0
 800209a:	2102      	movs	r1, #2
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <Sync_out+0x54>)
 800209e:	f001 fcd1 	bl	8003a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 80020a2:	2200      	movs	r2, #0
 80020a4:	2101      	movs	r1, #1
 80020a6:	4803      	ldr	r0, [pc, #12]	; (80020b4 <Sync_out+0x50>)
 80020a8:	f001 fccc 	bl	8003a44 <HAL_GPIO_WritePin>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40020800 	.word	0x40020800
 80020bc:	2000002d 	.word	0x2000002d
 80020c0:	20000248 	.word	0x20000248

080020c4 <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <SubStr+0x16>
        return NULL ;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e033      	b.n	8002142 <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3301      	adds	r3, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fa14 	bl	800650c <malloc>
 80020e4:	4603      	mov	r3, r0
 80020e6:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7fe f871 	bl	80001d0 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dd03      	ble.n	8002106 <SubStr+0x42>
        nLength = nStart + nLen ;
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e00d      	b.n	8002128 <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	441a      	add	r2, r3
 8002112:	69f9      	ldr	r1, [r7, #28]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	4619      	mov	r1, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	440b      	add	r3, r1
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbed      	blt.n	800210c <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	461a      	mov	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4413      	add	r3, r2
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8002140:	697b      	ldr	r3, [r7, #20]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <EthernetTest>:
/*##########################################################################################################*/

/*##########################################################################################################*/

void EthernetTest(unsigned char *pRcvBuffer, unsigned int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	unsigned int i;

	printf("Read Data[%d]\r\n", len);
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <EthernetTest+0x5c>)
 800215a:	f004 fa91 	bl	8006680 <iprintf>

	for(i=0;i<len;i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e00a      	b.n	800217a <EthernetTest+0x2e>
	{
		//receive data
		printf("%c ", pRcvBuffer[i]);
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	480f      	ldr	r0, [pc, #60]	; (80021ac <EthernetTest+0x60>)
 8002170:	f004 fa86 	bl	8006680 <iprintf>
	for(i=0;i<len;i++)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3f0      	bcc.n	8002164 <EthernetTest+0x18>
	}

	//receive data control
	if(pRcvBuffer[0] == '1')
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b31      	cmp	r3, #49	; 0x31
 8002188:	d103      	bne.n	8002192 <EthernetTest+0x46>
	{
		printf("zero\r\n");
 800218a:	4809      	ldr	r0, [pc, #36]	; (80021b0 <EthernetTest+0x64>)
 800218c:	f004 fafe 	bl	800678c <puts>
	}
	else if(pRcvBuffer[0] == '0')
	{
		printf("one\r\n");
	}
}
 8002190:	e006      	b.n	80021a0 <EthernetTest+0x54>
	else if(pRcvBuffer[0] == '0')
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b30      	cmp	r3, #48	; 0x30
 8002198:	d102      	bne.n	80021a0 <EthernetTest+0x54>
		printf("one\r\n");
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <EthernetTest+0x68>)
 800219c:	f004 faf6 	bl	800678c <puts>
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	080075d4 	.word	0x080075d4
 80021ac:	080075e4 	.word	0x080075e4
 80021b0:	080075e8 	.word	0x080075e8
 80021b4:	080075f0 	.word	0x080075f0

080021b8 <ProcessTcpSever>:


//TCP-Server process
void ProcessTcpSever(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80021be:	af00      	add	r7, sp, #0
	//printf("process TCP Server function .. \r\n");
	int len;
	unsigned char data_buf[TX_RX_MAX_BUF_SIZE];

	unsigned int port = MY_LISTEN_PORT;
 80021c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c4:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

	switch (getSn_SR(SOCK_TCPS))
 80021c8:	f240 4003 	movw	r0, #1027	; 0x403
 80021cc:	f7fe fa02 	bl	80005d4 <WIZCHIP_READ>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b1c      	cmp	r3, #28
 80021d4:	d02a      	beq.n	800222c <ProcessTcpSever+0x74>
 80021d6:	2b1c      	cmp	r3, #28
 80021d8:	dc4d      	bgt.n	8002276 <ProcessTcpSever+0xbe>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02d      	beq.n	800223a <ProcessTcpSever+0x82>
 80021de:	2b17      	cmp	r3, #23
 80021e0:	d149      	bne.n	8002276 <ProcessTcpSever+0xbe>
	{
	case SOCK_ESTABLISHED:
		// check receive data
		if((len = getSn_RX_RSR(SOCK_TCPS)) > 0)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fb03 	bl	80007ee <getSn_RX_RSR>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80021ee:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dd3e      	ble.n	8002274 <ProcessTcpSever+0xbc>
		{
			//if Rx data size is lager than TX_RX_MAX_BUF_SIZE
			if (len > TX_RX_MAX_BUF_SIZE) len = TX_RX_MAX_BUF_SIZE;
 80021f6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fe:	dd03      	ble.n	8002208 <ProcessTcpSever+0x50>
 8002200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002204:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

			// data receive
			len = recv(SOCK_TCPS, data_buf, len);
 8002208:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800220c:	b29a      	uxth	r2, r3
 800220e:	463b      	mov	r3, r7
 8002210:	4619      	mov	r1, r3
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fe44 	bl	8000ea0 <recv>
 8002218:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404

			// send the received data
			//send(SOCK_MYTEST, data_buf, len);

			EthernetTest(data_buf, len);
 800221c:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8002220:	463b      	mov	r3, r7
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff91 	bl	800214c <EthernetTest>
		}
		break;
 800222a:	e023      	b.n	8002274 <ProcessTcpSever+0xbc>

	case SOCK_CLOSE_WAIT:
		//If the client request to close
		disconnect(SOCK_TCPS);
 800222c:	2000      	movs	r0, #0
 800222e:	f7fe fdc9 	bl	8000dc4 <disconnect>

		m_SokStatus1 = 0;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <ProcessTcpSever+0xc8>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
		break;
 8002238:	e01d      	b.n	8002276 <ProcessTcpSever+0xbe>

	case SOCK_CLOSED:
		if(!m_SokStatus1)
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <ProcessTcpSever+0xc8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <ProcessTcpSever+0x90>
		{
			m_SokStatus1 = 1;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <ProcessTcpSever+0xc8>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		}

		//reinitialize the socket
		if(socket(SOCK_TCPS,Sn_MR_TCP, port,0x00) == 0)
 8002248:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800224c:	b29a      	uxth	r2, r3
 800224e:	2300      	movs	r3, #0
 8002250:	2101      	movs	r1, #1
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe fbfa 	bl	8000a4c <socket>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <ProcessTcpSever+0xb4>
		{
			printf("Fail to create socket.");
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <ProcessTcpSever+0xcc>)
 8002260:	f004 fa0e 	bl	8006680 <iprintf>
			m_SokStatus1 = 0;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <ProcessTcpSever+0xc8>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
		else
		{
			listen(SOCK_TCPS);
		}

		break;
 800226a:	e004      	b.n	8002276 <ProcessTcpSever+0xbe>
			listen(SOCK_TCPS);
 800226c:	2000      	movs	r0, #0
 800226e:	f7fe fd59 	bl	8000d24 <listen>
		break;
 8002272:	e000      	b.n	8002276 <ProcessTcpSever+0xbe>
		break;
 8002274:	bf00      	nop
	}
}
 8002276:	bf00      	nop
 8002278:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000031 	.word	0x20000031
 8002284:	080075f8 	.word	0x080075f8

08002288 <DisplayConfig>:

void DisplayConfig(void)
{
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af04      	add	r7, sp, #16
	u_char addr[6];
	u_char i = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	71fb      	strb	r3, [r7, #7]
	//u_long iaddr;
	printf("\r\n================================================\r\n");
 8002292:	483d      	ldr	r0, [pc, #244]	; (8002388 <DisplayConfig+0x100>)
 8002294:	f004 fa7a 	bl	800678c <puts>
	printf("       Net Config Information\r\n");
 8002298:	483c      	ldr	r0, [pc, #240]	; (800238c <DisplayConfig+0x104>)
 800229a:	f004 fa77 	bl	800678c <puts>
	printf("================================================\r\n");
 800229e:	483c      	ldr	r0, [pc, #240]	; (8002390 <DisplayConfig+0x108>)
 80022a0:	f004 fa74 	bl	800678c <puts>


	for(i=0; i<6;i++)addr[i] = IINCHIP_READ(SHAR0+i);
 80022a4:	2300      	movs	r3, #0
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	e00f      	b.n	80022ca <DisplayConfig+0x42>
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3309      	adds	r3, #9
 80022ae:	79fc      	ldrb	r4, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f98f 	bl	80005d4 <WIZCHIP_READ>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4423      	add	r3, r4
 80022c0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	3301      	adds	r3, #1
 80022c8:	71fb      	strb	r3, [r7, #7]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d9ec      	bls.n	80022aa <DisplayConfig+0x22>
	printf("MAC ADDRESS      : 0x%02X.0x%02X.0x%02X.0x%02X.0x%02X.0x%02X\r\n",addr[0],addr[1],addr[2],addr[3],addr[4],addr[5]);
 80022d0:	783b      	ldrb	r3, [r7, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	461c      	mov	r4, r3
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	461d      	mov	r5, r3
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	793a      	ldrb	r2, [r7, #4]
 80022e0:	7979      	ldrb	r1, [r7, #5]
 80022e2:	9102      	str	r1, [sp, #8]
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	462b      	mov	r3, r5
 80022ea:	4622      	mov	r2, r4
 80022ec:	4601      	mov	r1, r0
 80022ee:	4829      	ldr	r0, [pc, #164]	; (8002394 <DisplayConfig+0x10c>)
 80022f0:	f004 f9c6 	bl	8006680 <iprintf>


	printf("SUBNET MASK      : ");
 80022f4:	4828      	ldr	r0, [pc, #160]	; (8002398 <DisplayConfig+0x110>)
 80022f6:	f004 f9c3 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	e00c      	b.n	800231a <DisplayConfig+0x92>
	{
		printf("%d.", (char)IINCHIP_READ(SUBR0+i));
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	3305      	adds	r3, #5
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f965 	bl	80005d4 <WIZCHIP_READ>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4823      	ldr	r0, [pc, #140]	; (800239c <DisplayConfig+0x114>)
 8002310:	f004 f9b6 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	3301      	adds	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d9ef      	bls.n	8002300 <DisplayConfig+0x78>
	}


	printf("\r\nG/W IP ADDRESS   : ");
 8002320:	481f      	ldr	r0, [pc, #124]	; (80023a0 <DisplayConfig+0x118>)
 8002322:	f004 f9ad 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	e00c      	b.n	8002346 <DisplayConfig+0xbe>
	{
		printf("%d.", (char)IINCHIP_READ(GAR0+i));
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	3301      	adds	r3, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f94f 	bl	80005d4 <WIZCHIP_READ>
 8002336:	4603      	mov	r3, r0
 8002338:	4619      	mov	r1, r3
 800233a:	4818      	ldr	r0, [pc, #96]	; (800239c <DisplayConfig+0x114>)
 800233c:	f004 f9a0 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	3301      	adds	r3, #1
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d9ef      	bls.n	800232c <DisplayConfig+0xa4>
	}

	printf("\r\nLOCAL IP ADDRESS : ");
 800234c:	4815      	ldr	r0, [pc, #84]	; (80023a4 <DisplayConfig+0x11c>)
 800234e:	f004 f997 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	e00c      	b.n	8002372 <DisplayConfig+0xea>
	{
		printf("%d.", (char)IINCHIP_READ(SIPR0+i));
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	330f      	adds	r3, #15
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f939 	bl	80005d4 <WIZCHIP_READ>
 8002362:	4603      	mov	r3, r0
 8002364:	4619      	mov	r1, r3
 8002366:	480d      	ldr	r0, [pc, #52]	; (800239c <DisplayConfig+0x114>)
 8002368:	f004 f98a 	bl	8006680 <iprintf>
	for(i=0; i < 4; i++)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	3301      	adds	r3, #1
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d9ef      	bls.n	8002358 <DisplayConfig+0xd0>
	}

	printf("\r\n================================================\r\n");
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <DisplayConfig+0x100>)
 800237a:	f004 fa07 	bl	800678c <puts>

}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	bf00      	nop
 8002388:	08007610 	.word	0x08007610
 800238c:	08007644 	.word	0x08007644
 8002390:	08007664 	.word	0x08007664
 8002394:	08007698 	.word	0x08007698
 8002398:	080076d8 	.word	0x080076d8
 800239c:	080076ec 	.word	0x080076ec
 80023a0:	080076f0 	.word	0x080076f0
 80023a4:	08007708 	.word	0x08007708

080023a8 <NetInit>:
/*##########################################################################################################*/

/*##########################################################################################################*/

void NetInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
	unsigned char mac[6] = MY_NET_MAC;
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <NetInit+0x70>)
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b8:	6018      	str	r0, [r3, #0]
 80023ba:	3304      	adds	r3, #4
 80023bc:	8019      	strh	r1, [r3, #0]
	unsigned char sm[4]	= MY_SUBNET;
 80023be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80023c2:	60fb      	str	r3, [r7, #12]
	unsigned char gwip[4]	= MY_NET_GWIP;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <NetInit+0x74>)
 80023c6:	60bb      	str	r3, [r7, #8]
	unsigned char m_sip[4]	= MY_SOURCEIP;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <NetInit+0x78>)
 80023ca:	607b      	str	r3, [r7, #4]

	//W5100 Chip Init
	iinchip_init();
 80023cc:	f000 f82a 	bl	8002424 <iinchip_init>

	wizchip_init(2, 2);
 80023d0:	2102      	movs	r1, #2
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7fe fea2 	bl	800111c <wizchip_init>

	//Set MAC Address
	setSHAR(mac);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2206      	movs	r2, #6
 80023de:	4619      	mov	r1, r3
 80023e0:	2009      	movs	r0, #9
 80023e2:	f7fe f925 	bl	8000630 <WIZCHIP_WRITE_BUF>

	//Set Gateway
	setGAR(gwip);
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2204      	movs	r2, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7fe f91e 	bl	8000630 <WIZCHIP_WRITE_BUF>

	//Set Subnet Mask
	setSUBR(sm);
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2204      	movs	r2, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	2005      	movs	r0, #5
 80023fe:	f7fe f917 	bl	8000630 <WIZCHIP_WRITE_BUF>

	//Set My IP
	setSIPR(m_sip);
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2204      	movs	r2, #4
 8002406:	4619      	mov	r1, r3
 8002408:	200f      	movs	r0, #15
 800240a:	f7fe f911 	bl	8000630 <WIZCHIP_WRITE_BUF>
#ifdef __DEF_IINCHIP_INT__
	setIMR(0xEF);
#endif

	//sysinit(MY_NET_MEMALLOC, MY_NET_MEMALLOC);
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08007720 	.word	0x08007720
 800241c:	0100a8c0 	.word	0x0100a8c0
 8002420:	6500a8c0 	.word	0x6500a8c0

08002424 <iinchip_init>:

/**
@brief	This function is for resetting of the iinchip. Initializes the iinchip to work in whether DIRECT or INDIRECT mode
*/
void iinchip_init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	setMR( MR_RST );
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe f8a4 	bl	8000578 <WIZCHIP_WRITE>
#if (__DEF_IINCHIP_BUS__ == __DEF_IINCHIP_INDIRECT_MODE__)
	setMR( MR_IND | MR_AI );
 8002430:	2103      	movs	r1, #3
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe f8a0 	bl	8000578 <WIZCHIP_WRITE>
#ifdef __DEF_IINCHIP_DBG__
	printf("MR value is %d \r\n",IINCHIP_READ(MR));
#endif
#endif
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800244e:	f000 fcc7 	bl	8002de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM6) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10f      	bne.n	800247c <HAL_TIM_PeriodElapsedCallback+0x40>
	  wizDHCPticks++;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002466:	801a      	strh	r2, [r3, #0]
	  if(wizDHCPticks >= 1000)
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002470:	d304      	bcc.n	800247c <HAL_TIM_PeriodElapsedCallback+0x40>
	  {
		  wizDHCPticks = 0;
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
		  DHCP_time_handler();
 8002478:	f7fe ff02 	bl	8001280 <DHCP_time_handler>
	  }
  }
  /* USER CODE END Callback 1 */
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40001000 	.word	0x40001000
 8002488:	200000d8 	.word	0x200000d8

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	e7fe      	b.n	8002494 <Error_Handler+0x8>
	...

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_MspInit+0x4c>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_MspInit+0x4c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x4c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_MspInit+0x4c>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_MspInit+0x4c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <HAL_RTC_MspInit+0x24>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d102      	bne.n	8002500 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RTC_MspInit+0x28>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40002800 	.word	0x40002800
 8002510:	42470e3c 	.word	0x42470e3c

08002514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <HAL_SPI_MspInit+0x150>)
 8002532:	4293      	cmp	r3, r2
 8002534:	f040 8091 	bne.w	800265a <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_SPI_MspInit+0x154>)
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_SPI_MspInit+0x154>)
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	6453      	str	r3, [r2, #68]	; 0x44
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_SPI_MspInit+0x154>)
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_SPI_MspInit+0x154>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_SPI_MspInit+0x154>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_SPI_MspInit+0x154>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002570:	23f0      	movs	r3, #240	; 0xf0
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002580:	2305      	movs	r3, #5
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4838      	ldr	r0, [pc, #224]	; (800266c <HAL_SPI_MspInit+0x158>)
 800258c:	f001 f8a6 	bl	80036dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 8002592:	4a38      	ldr	r2, [pc, #224]	; (8002674 <HAL_SPI_MspInit+0x160>)
 8002594:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 8002598:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800259c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025d0:	4827      	ldr	r0, [pc, #156]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025d2:	f000 fd07 	bl	8002fe4 <HAL_DMA_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80025dc:	f7ff ff56 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025e4:	649a      	str	r2, [r3, #72]	; 0x48
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_SPI_MspInit+0x15c>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_SPI_MspInit+0x164>)
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_SPI_MspInit+0x168>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_SPI_MspInit+0x164>)
 80025f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_SPI_MspInit+0x164>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_SPI_MspInit+0x164>)
 800261c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002620:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_SPI_MspInit+0x164>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800262e:	4812      	ldr	r0, [pc, #72]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002630:	f000 fcd8 	bl	8002fe4 <HAL_DMA_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800263a:	f7ff ff27 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002642:	64da      	str	r2, [r3, #76]	; 0x4c
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <HAL_SPI_MspInit+0x164>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2023      	movs	r0, #35	; 0x23
 8002650:	f000 fc9e 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002654:	2023      	movs	r0, #35	; 0x23
 8002656:	f000 fcb7 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	; 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40013000 	.word	0x40013000
 8002668:	40023800 	.word	0x40023800
 800266c:	40020000 	.word	0x40020000
 8002670:	20000498 	.word	0x20000498
 8002674:	40026458 	.word	0x40026458
 8002678:	2000039c 	.word	0x2000039c
 800267c:	40026410 	.word	0x40026410

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_TIM_Base_MspInit+0x70>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80026ae:	e01a      	b.n	80026e6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_TIM_Base_MspInit+0x78>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d115      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0x74>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2037      	movs	r0, #55	; 0x37
 80026dc:	f000 fc58 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026e0:	2037      	movs	r0, #55	; 0x37
 80026e2:	f000 fc71 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40001400 	.word	0x40001400

080026fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b094      	sub	sp, #80	; 0x50
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a9c      	ldr	r2, [pc, #624]	; (800298c <HAL_UART_MspInit+0x290>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d135      	bne.n	800278a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
 8002722:	4b9b      	ldr	r3, [pc, #620]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a9a      	ldr	r2, [pc, #616]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b98      	ldr	r3, [pc, #608]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	4b94      	ldr	r3, [pc, #592]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a93      	ldr	r2, [pc, #588]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b91      	ldr	r3, [pc, #580]	; (8002990 <HAL_UART_MspInit+0x294>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002760:	2301      	movs	r3, #1
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002768:	2308      	movs	r3, #8
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002770:	4619      	mov	r1, r3
 8002772:	4888      	ldr	r0, [pc, #544]	; (8002994 <HAL_UART_MspInit+0x298>)
 8002774:	f000 ffb2 	bl	80036dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2034      	movs	r0, #52	; 0x34
 800277e:	f000 fc07 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002782:	2034      	movs	r0, #52	; 0x34
 8002784:	f000 fc20 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002788:	e145      	b.n	8002a16 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a82      	ldr	r2, [pc, #520]	; (8002998 <HAL_UART_MspInit+0x29c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d153      	bne.n	800283c <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
 8002798:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <HAL_UART_MspInit+0x294>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <HAL_UART_MspInit+0x294>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a2:	6413      	str	r3, [r2, #64]	; 0x40
 80027a4:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b4:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a75      	ldr	r2, [pc, #468]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d0:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <HAL_UART_MspInit+0x294>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027fa:	2308      	movs	r3, #8
 80027fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002802:	4619      	mov	r1, r3
 8002804:	4863      	ldr	r0, [pc, #396]	; (8002994 <HAL_UART_MspInit+0x298>)
 8002806:	f000 ff69 	bl	80036dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800280a:	2304      	movs	r3, #4
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	2301      	movs	r3, #1
 8002814:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800281a:	2308      	movs	r3, #8
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002822:	4619      	mov	r1, r3
 8002824:	485d      	ldr	r0, [pc, #372]	; (800299c <HAL_UART_MspInit+0x2a0>)
 8002826:	f000 ff59 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2035      	movs	r0, #53	; 0x35
 8002830:	f000 fbae 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002834:	2035      	movs	r0, #53	; 0x35
 8002836:	f000 fbc7 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
}
 800283a:	e0ec      	b.n	8002a16 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <HAL_UART_MspInit+0x2a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d12d      	bne.n	80028a2 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	4b51      	ldr	r3, [pc, #324]	; (8002990 <HAL_UART_MspInit+0x294>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_UART_MspInit+0x294>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800287e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002890:	2307      	movs	r3, #7
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002898:	4619      	mov	r1, r3
 800289a:	4842      	ldr	r0, [pc, #264]	; (80029a4 <HAL_UART_MspInit+0x2a8>)
 800289c:	f000 ff1e 	bl	80036dc <HAL_GPIO_Init>
}
 80028a0:	e0b9      	b.n	8002a16 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HAL_UART_MspInit+0x2ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d134      	bne.n	8002916 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	4a36      	ldr	r2, [pc, #216]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	6413      	str	r3, [r2, #64]	; 0x40
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6313      	str	r3, [r2, #48]	; 0x30
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_UART_MspInit+0x294>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028e4:	230c      	movs	r3, #12
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028f4:	2307      	movs	r3, #7
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028fc:	4619      	mov	r1, r3
 80028fe:	4829      	ldr	r0, [pc, #164]	; (80029a4 <HAL_UART_MspInit+0x2a8>)
 8002900:	f000 feec 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2026      	movs	r0, #38	; 0x26
 800290a:	f000 fb41 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800290e:	2026      	movs	r0, #38	; 0x26
 8002910:	f000 fb5a 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
}
 8002914:	e07f      	b.n	8002a16 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <HAL_UART_MspInit+0x2b0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d149      	bne.n	80029b4 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_UART_MspInit+0x294>)
 800292a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_UART_MspInit+0x294>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_UART_MspInit+0x294>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002958:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800296a:	2307      	movs	r3, #7
 800296c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002972:	4619      	mov	r1, r3
 8002974:	480e      	ldr	r0, [pc, #56]	; (80029b0 <HAL_UART_MspInit+0x2b4>)
 8002976:	f000 feb1 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2027      	movs	r0, #39	; 0x27
 8002980:	f000 fb06 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002984:	2027      	movs	r0, #39	; 0x27
 8002986:	f000 fb1f 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
}
 800298a:	e044      	b.n	8002a16 <HAL_UART_MspInit+0x31a>
 800298c:	40004c00 	.word	0x40004c00
 8002990:	40023800 	.word	0x40023800
 8002994:	40020800 	.word	0x40020800
 8002998:	40005000 	.word	0x40005000
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40004400 	.word	0x40004400
 80029ac:	40004800 	.word	0x40004800
 80029b0:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0x324>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12b      	bne.n	8002a16 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_UART_MspInit+0x328>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029f6:	23c0      	movs	r3, #192	; 0xc0
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a06:	2308      	movs	r3, #8
 8002a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_UART_MspInit+0x32c>)
 8002a12:	f000 fe63 	bl	80036dc <HAL_GPIO_Init>
}
 8002a16:	bf00      	nop
 8002a18:	3750      	adds	r7, #80	; 0x50
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020800 	.word	0x40020800

08002a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	2036      	movs	r0, #54	; 0x36
 8002a42:	f000 faa5 	bl	8002f90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a46:	2036      	movs	r0, #54	; 0x36
 8002a48:	f000 fabe 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_InitTick+0xa4>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_InitTick+0xa4>)
 8002a56:	f043 0310 	orr.w	r3, r3, #16
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_InitTick+0xa4>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a68:	f107 0210 	add.w	r2, r7, #16
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fc48 	bl	8004308 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a78:	f001 fc1e 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_InitTick+0xa8>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_InitTick+0xac>)
 8002a92:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_InitTick+0xb0>)
 8002a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_InitTick+0xac>)
 8002a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <HAL_InitTick+0xac>)
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_InitTick+0xac>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_InitTick+0xac>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <HAL_InitTick+0xac>)
 8002ab2:	f002 f94b 	bl	8004d4c <HAL_TIM_Base_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002abc:	4806      	ldr	r0, [pc, #24]	; (8002ad8 <HAL_InitTick+0xac>)
 8002abe:	f002 f995 	bl	8004dec <HAL_TIM_Base_Start_IT>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	431bde83 	.word	0x431bde83
 8002ad8:	20000528 	.word	0x20000528
 8002adc:	40001000 	.word	0x40001000

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <SPI1_IRQHandler+0x10>)
 8002b3e:	f001 ffe7 	bl	8004b10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200002fc 	.word	0x200002fc

08002b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <USART1_IRQHandler+0x10>)
 8002b52:	f002 ff59 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000188 	.word	0x20000188

08002b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART2_IRQHandler+0x10>)
 8002b66:	f002 ff4f 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000358 	.word	0x20000358

08002b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <USART3_IRQHandler+0x10>)
 8002b7a:	f002 ff45 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200000ec 	.word	0x200000ec

08002b88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <UART4_IRQHandler+0x10>)
 8002b8e:	f002 ff3b 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200002b4 	.word	0x200002b4

08002b9c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <UART5_IRQHandler+0x10>)
 8002ba2:	f002 ff31 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000140 	.word	0x20000140

08002bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <TIM6_DAC_IRQHandler+0x10>)
 8002bb6:	f002 f989 	bl	8004ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000528 	.word	0x20000528

08002bc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM7_IRQHandler+0x10>)
 8002bca:	f002 f97f 	bl	8004ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000044c 	.word	0x2000044c

08002bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <DMA2_Stream0_IRQHandler+0x10>)
 8002bde:	f000 fb41 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000039c 	.word	0x2000039c

08002bec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA2_Stream3_IRQHandler+0x10>)
 8002bf2:	f000 fb37 	bl	8003264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000498 	.word	0x20000498

08002c00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART6_IRQHandler+0x10>)
 8002c06:	f002 feff 	bl	8005a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000248 	.word	0x20000248

08002c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e00a      	b.n	8002c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c26:	f3af 8000 	nop.w
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbf0      	blt.n	8002c26 <_read+0x12>
	}

return len;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	return -1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c76:	605a      	str	r2, [r3, #4]
	return 0;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_isatty>:

int _isatty(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <_sbrk+0x5c>)
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <_sbrk+0x60>)
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <_sbrk+0x64>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <_sbrk+0x64>)
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <_sbrk+0x68>)
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce8:	f003 fbe6 	bl	80064b8 <__errno>
 8002cec:	4603      	mov	r3, r0
 8002cee:	220c      	movs	r2, #12
 8002cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e009      	b.n	8002d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <_sbrk+0x64>)
 8002d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20020000 	.word	0x20020000
 8002d18:	00000400 	.word	0x00000400
 8002d1c:	200000dc 	.word	0x200000dc
 8002d20:	20000588 	.word	0x20000588

08002d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SystemInit+0x20>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <SystemInit+0x20>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4e:	490e      	ldr	r1, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d64:	4c0b      	ldr	r4, [pc, #44]	; (8002d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d72:	f7ff ffd7 	bl	8002d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d76:	f003 fba5 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7a:	f7fe fc07 	bl	800158c <main>
  bx  lr    
 8002d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002d8c:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8002d90:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002d94:	20000584 	.word	0x20000584

08002d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <ADC_IRQHandler>
	...

08002d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_Init+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_Init+0x40>)
 8002da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_Init+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_Init+0x40>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_Init+0x40>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 f8d8 	bl	8002f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fe2e 	bl	8002a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fb62 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000003c 	.word	0x2000003c
 8002e04:	20000570 	.word	0x20000570

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000570 	.word	0x20000570

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	; (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	; (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff4c 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa2:	f7ff ff61 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f7ff ffb1 	bl	8002f14 <NVIC_EncodePriority>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff80 	bl	8002ec0 <__NVIC_SetPriority>
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff54 	bl	8002e84 <__NVIC_EnableIRQ>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ff0a 	bl	8002e08 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff fef1 	bl	8002e08 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa7b 	bl	80035e4 <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa32 	bl	8003578 <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800314e:	f7ff fe5b 	bl	8002e08 <HAL_GetTick>
 8003152:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d008      	beq.n	8003172 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e052      	b.n	8003218 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0216 	bic.w	r2, r2, #22
 8003180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_DMA_Abort+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0208 	bic.w	r2, r2, #8
 80031b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c2:	e013      	b.n	80031ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031c4:	f7ff fe20 	bl	8002e08 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d90c      	bls.n	80031ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2203      	movs	r2, #3
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e015      	b.n	8003218 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e4      	bne.n	80031c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	223f      	movs	r2, #63	; 0x3f
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e00c      	b.n	8003258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2205      	movs	r2, #5
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003270:	4b92      	ldr	r3, [pc, #584]	; (80034bc <HAL_DMA_IRQHandler+0x258>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a92      	ldr	r2, [pc, #584]	; (80034c0 <HAL_DMA_IRQHandler+0x25c>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	2208      	movs	r2, #8
 8003290:	409a      	lsls	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2208      	movs	r2, #8
 80032be:	409a      	lsls	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d012      	beq.n	8003306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2201      	movs	r2, #1
 80032f4:	409a      	lsls	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f043 0202 	orr.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	2204      	movs	r2, #4
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2204      	movs	r2, #4
 800332a:	409a      	lsls	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	2210      	movs	r2, #16
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d043      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d03c      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2210      	movs	r2, #16
 8003360:	409a      	lsls	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d024      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	e01f      	b.n	80033d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e016      	b.n	80033d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0208 	bic.w	r2, r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2220      	movs	r2, #32
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 808e 	beq.w	8003502 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8086 	beq.w	8003502 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	2220      	movs	r2, #32
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b05      	cmp	r3, #5
 800340c:	d136      	bne.n	800347c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0216 	bic.w	r2, r2, #22
 800341c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_DMA_IRQHandler+0x1da>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0208 	bic.w	r2, r2, #8
 800344c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	223f      	movs	r2, #63	; 0x3f
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d07d      	beq.n	800356e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
        }
        return;
 800347a:	e078      	b.n	800356e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	2b00      	cmp	r3, #0
 800349e:	d030      	beq.n	8003502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e02b      	b.n	8003502 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e022      	b.n	8003502 <HAL_DMA_IRQHandler+0x29e>
 80034bc:	20000034 	.word	0x20000034
 80034c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0210 	bic.w	r2, r2, #16
 80034e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	2b00      	cmp	r3, #0
 8003508:	d032      	beq.n	8003570 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d022      	beq.n	800355c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2205      	movs	r2, #5
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3301      	adds	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	429a      	cmp	r2, r3
 8003538:	d307      	bcc.n	800354a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f2      	bne.n	800352e <HAL_DMA_IRQHandler+0x2ca>
 8003548:	e000      	b.n	800354c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800354a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e000      	b.n	8003570 <HAL_DMA_IRQHandler+0x30c>
        return;
 800356e:	bf00      	nop
    }
  }
}
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b10      	subs	r3, #16
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d909      	bls.n	80035ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58
 80035b8:	e007      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	08007740 	.word	0x08007740

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d856      	bhi.n	80036b2 <DMA_CheckFifoParam+0xce>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b3 	.word	0x080036b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d046      	beq.n	80036b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e043      	b.n	80036b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003636:	d140      	bne.n	80036ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03d      	b.n	80036ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d837      	bhi.n	80036be <DMA_CheckFifoParam+0xda>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e030      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e022      	b.n	80036c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003684:	d11f      	bne.n	80036c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01c      	b.n	80036c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d903      	bls.n	800369a <DMA_CheckFifoParam+0xb6>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003698:	e018      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      break;
 800369e:	e015      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e00b      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b2:	bf00      	nop
 80036b4:	e00a      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e008      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e006      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;   
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
    }
  } 
  
  return status; 
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e16b      	b.n	80039d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 815a 	bne.w	80039ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	2b02      	cmp	r3, #2
 800372c:	d130      	bne.n	8003790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80b4 	beq.w	80039ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b60      	ldr	r3, [pc, #384]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a5f      	ldr	r2, [pc, #380]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_GPIO_Init+0x310>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_GPIO_Init+0x314>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a51      	ldr	r2, [pc, #324]	; (80039f4 <HAL_GPIO_Init+0x318>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d025      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a50      	ldr	r2, [pc, #320]	; (80039f8 <HAL_GPIO_Init+0x31c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_GPIO_Init+0x320>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_GPIO_Init+0x324>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_GPIO_Init+0x216>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <HAL_GPIO_Init+0x328>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00d      	beq.n	80038ee <HAL_GPIO_Init+0x212>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <HAL_GPIO_Init+0x20e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_GPIO_Init+0x20a>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00e      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038e6:	2308      	movs	r3, #8
 80038e8:	e00c      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x228>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	; (80039ec <HAL_GPIO_Init+0x310>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_GPIO_Init+0x334>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_GPIO_Init+0x334>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c4:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f ae90 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40021400 	.word	0x40021400
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e001      	b.n	8003a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
 8003a50:	4613      	mov	r3, r2
 8003a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a54:	787b      	ldrb	r3, [r7, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a60:	e003      	b.n	8003a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	041a      	lsls	r2, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	619a      	str	r2, [r3, #24]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e264      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	4ba3      	ldr	r3, [pc, #652]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa2:	4ba0      	ldr	r3, [pc, #640]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d112      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aae:	4b9d      	ldr	r3, [pc, #628]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aba:	d10b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05b      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d157      	bne.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e23f      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x74>
 8003ade:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a90      	ldr	r2, [pc, #576]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a8a      	ldr	r2, [pc, #552]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a87      	ldr	r2, [pc, #540]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003b10:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a83      	ldr	r2, [pc, #524]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7ff f96a 	bl	8002e08 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7ff f966 	bl	8002e08 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e204      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7ff f956 	bl	8002e08 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b60:	f7ff f952 	bl	8002e08 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1f0      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d063      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	4b65      	ldr	r3, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d11c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x152>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1c4      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4952      	ldr	r1, [pc, #328]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	e03a      	b.n	8003c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be8:	4b4f      	ldr	r3, [pc, #316]	; (8003d28 <HAL_RCC_OscConfig+0x2b0>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7ff f90b 	bl	8002e08 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7ff f907 	bl	8002e08 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1a5      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4940      	ldr	r1, [pc, #256]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	e015      	b.n	8003c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCC_OscConfig+0x2b0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7ff f8ea 	bl	8002e08 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c38:	f7ff f8e6 	bl	8002e08 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e184      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d030      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6a:	4b30      	ldr	r3, [pc, #192]	; (8003d2c <HAL_RCC_OscConfig+0x2b4>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7ff f8ca 	bl	8002e08 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c78:	f7ff f8c6 	bl	8002e08 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e164      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x200>
 8003c96:	e015      	b.n	8003cc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x2b4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7ff f8b3 	bl	8002e08 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7ff f8af 	bl	8002e08 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e14d      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a0 	beq.w	8003e12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_OscConfig+0x2b8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d121      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_RCC_OscConfig+0x2b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <HAL_RCC_OscConfig+0x2b8>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7ff f875 	bl	8002e08 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	e011      	b.n	8003d46 <HAL_RCC_OscConfig+0x2ce>
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470000 	.word	0x42470000
 8003d2c:	42470e80 	.word	0x42470e80
 8003d30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7ff f868 	bl	8002e08 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e106      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b85      	ldr	r3, [pc, #532]	; (8003f5c <HAL_RCC_OscConfig+0x4e4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a80      	ldr	r2, [pc, #512]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	e01c      	b.n	8003da2 <HAL_RCC_OscConfig+0x32a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x312>
 8003d70:	4b7b      	ldr	r3, [pc, #492]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a7a      	ldr	r2, [pc, #488]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a77      	ldr	r2, [pc, #476]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0x32a>
 8003d8a:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a74      	ldr	r2, [pc, #464]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a71      	ldr	r2, [pc, #452]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d015      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7ff f82d 	bl	8002e08 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7ff f829 	bl	8002e08 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0c5      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCC_OscConfig+0x33a>
 8003dd4:	e014      	b.n	8003e00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7ff f817 	bl	8002e08 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7ff f813 	bl	8002e08 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0af      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4b56      	ldr	r3, [pc, #344]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a55      	ldr	r2, [pc, #340]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 809b 	beq.w	8003f52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d05c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d141      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b4c      	ldr	r3, [pc, #304]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fe ffe7 	bl	8002e08 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fe ffe3 	bl	8002e08 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e081      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	019b      	lsls	r3, r3, #6
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	4937      	ldr	r1, [pc, #220]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe ffbc 	bl	8002e08 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fe ffb8 	bl	8002e08 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e056      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x41c>
 8003eb2:	e04e      	b.n	8003f52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fe ffa5 	bl	8002e08 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe ffa1 	bl	8002e08 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e03f      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x44a>
 8003ee0:	e037      	b.n	8003f52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e032      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d028      	beq.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d121      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d11a      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470060 	.word	0x42470060

08003f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0cc      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d90c      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	494d      	ldr	r1, [pc, #308]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d119      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e067      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fe fed6 	bl	8002e08 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fe fed2 	bl	8002e08 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d20c      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e032      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	490e      	ldr	r1, [pc, #56]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ee:	f000 f821 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	5ccb      	ldrb	r3, [r1, r3]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fc8c 	bl	8002a2c <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023c00 	.word	0x40023c00
 8004124:	40023800 	.word	0x40023800
 8004128:	08007728 	.word	0x08007728
 800412c:	20000034 	.word	0x20000034
 8004130:	20000038 	.word	0x20000038

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800413a:	2100      	movs	r1, #0
 800413c:	6079      	str	r1, [r7, #4]
 800413e:	2100      	movs	r1, #0
 8004140:	60f9      	str	r1, [r7, #12]
 8004142:	2100      	movs	r1, #0
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004146:	2100      	movs	r1, #0
 8004148:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414a:	4952      	ldr	r1, [pc, #328]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800414c:	6889      	ldr	r1, [r1, #8]
 800414e:	f001 010c 	and.w	r1, r1, #12
 8004152:	2908      	cmp	r1, #8
 8004154:	d00d      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x3e>
 8004156:	2908      	cmp	r1, #8
 8004158:	f200 8094 	bhi.w	8004284 <HAL_RCC_GetSysClockFreq+0x150>
 800415c:	2900      	cmp	r1, #0
 800415e:	d002      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x32>
 8004160:	2904      	cmp	r1, #4
 8004162:	d003      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x38>
 8004164:	e08e      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004166:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCC_GetSysClockFreq+0x164>)
 8004168:	60bb      	str	r3, [r7, #8]
       break;
 800416a:	e08e      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 800416e:	60bb      	str	r3, [r7, #8]
      break;
 8004170:	e08b      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004172:	4948      	ldr	r1, [pc, #288]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 8004174:	6849      	ldr	r1, [r1, #4]
 8004176:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800417a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800417c:	4945      	ldr	r1, [pc, #276]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004184:	2900      	cmp	r1, #0
 8004186:	d024      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4942      	ldr	r1, [pc, #264]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800418a:	6849      	ldr	r1, [r1, #4]
 800418c:	0989      	lsrs	r1, r1, #6
 800418e:	4608      	mov	r0, r1
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004198:	f04f 0500 	mov.w	r5, #0
 800419c:	ea00 0204 	and.w	r2, r0, r4
 80041a0:	ea01 0305 	and.w	r3, r1, r5
 80041a4:	493d      	ldr	r1, [pc, #244]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 80041a6:	fb01 f003 	mul.w	r0, r1, r3
 80041aa:	2100      	movs	r1, #0
 80041ac:	fb01 f102 	mul.w	r1, r1, r2
 80041b0:	1844      	adds	r4, r0, r1
 80041b2:	493a      	ldr	r1, [pc, #232]	; (800429c <HAL_RCC_GetSysClockFreq+0x168>)
 80041b4:	fba2 0101 	umull	r0, r1, r2, r1
 80041b8:	1863      	adds	r3, r4, r1
 80041ba:	4619      	mov	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f7fc f85c 	bl	8000280 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e04a      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	ea02 0400 	and.w	r4, r2, r0
 80041ea:	ea03 0501 	and.w	r5, r3, r1
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	014b      	lsls	r3, r1, #5
 80041fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004200:	0142      	lsls	r2, r0, #5
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	1b00      	subs	r0, r0, r4
 8004208:	eb61 0105 	sbc.w	r1, r1, r5
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	018b      	lsls	r3, r1, #6
 8004216:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800421a:	0182      	lsls	r2, r0, #6
 800421c:	1a12      	subs	r2, r2, r0
 800421e:	eb63 0301 	sbc.w	r3, r3, r1
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	00d9      	lsls	r1, r3, #3
 800422c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004230:	00d0      	lsls	r0, r2, #3
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	1912      	adds	r2, r2, r4
 8004238:	eb45 0303 	adc.w	r3, r5, r3
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0299      	lsls	r1, r3, #10
 8004246:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800424a:	0290      	lsls	r0, r2, #10
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fc f810 	bl	8000280 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_RCC_GetSysClockFreq+0x160>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	3301      	adds	r3, #1
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	60bb      	str	r3, [r7, #8]
      break;
 8004282:	e002      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RCC_GetSysClockFreq+0x164>)
 8004286:	60bb      	str	r3, [r7, #8]
      break;
 8004288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800428a:	68bb      	ldr	r3, [r7, #8]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	00f42400 	.word	0x00f42400
 800429c:	017d7840 	.word	0x017d7840

080042a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000034 	.word	0x20000034

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	08007738 	.word	0x08007738

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffdc 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	08007738 	.word	0x08007738

08004308 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	220f      	movs	r2, #15
 8004316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_RCC_GetClockConfig+0x60>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40023c00 	.word	0x40023c00

0800436c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004390:	2b00      	cmp	r3, #0
 8004392:	d035      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004394:	4b62      	ldr	r3, [pc, #392]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800439a:	f7fe fd35 	bl	8002e08 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043a2:	f7fe fd31 	bl	8002e08 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0b0      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b4:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	019a      	lsls	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	071b      	lsls	r3, r3, #28
 80043cc:	4955      	ldr	r1, [pc, #340]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043d4:	4b52      	ldr	r3, [pc, #328]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043da:	f7fe fd15 	bl	8002e08 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043e2:	f7fe fd11 	bl	8002e08 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e090      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8083 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a43      	ldr	r2, [pc, #268]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800442a:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a3e      	ldr	r2, [pc, #248]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004436:	f7fe fce7 	bl	8002e08 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fe fce3 	bl	8002e08 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e062      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004450:	4b35      	ldr	r3, [pc, #212]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02f      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d028      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d114      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fcb1 	bl	8002e08 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a8:	e00a      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fe fcad 	bl	8002e08 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e02a      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ee      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ee:	490d      	ldr	r1, [pc, #52]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
 80044f4:	e005      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450e:	4905      	ldr	r1, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	42470068 	.word	0x42470068
 8004524:	40023800 	.word	0x40023800
 8004528:	40007000 	.word	0x40007000
 800452c:	42470e40 	.word	0x42470e40

08004530 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e083      	b.n	800464a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7f5b      	ldrb	r3, [r3, #29]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd ffc8 	bl	80024e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	22ca      	movs	r2, #202	; 0xca
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2253      	movs	r2, #83	; 0x53
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9fb 	bl	800496a <RTC_EnterInitMode>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	22ff      	movs	r2, #255	; 0xff
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e05e      	b.n	800464a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68d2      	ldr	r2, [r2, #12]
 80045c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	041a      	lsls	r2, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f98d 	bl	800491a <HAL_RTC_WaitForSynchro>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e018      	b.n	800464a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	22ff      	movs	r2, #255	; 0xff
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	7f1b      	ldrb	r3, [r3, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_RTC_SetTime+0x1c>
 800466a:	2302      	movs	r3, #2
 800466c:	e0aa      	b.n	80047c4 <HAL_RTC_SetTime+0x172>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2202      	movs	r2, #2
 8004678:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d126      	bne.n	80046ce <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f992 	bl	80049c2 <RTC_ByteToBcd2>
 800469e:	4603      	mov	r3, r0
 80046a0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f98b 	bl	80049c2 <RTC_ByteToBcd2>
 80046ac:	4603      	mov	r3, r0
 80046ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046b0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	789b      	ldrb	r3, [r3, #2]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f983 	bl	80049c2 <RTC_ByteToBcd2>
 80046bc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80046be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e018      	b.n	8004700 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046ee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80046f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	78db      	ldrb	r3, [r3, #3]
 80046fa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	22ca      	movs	r2, #202	; 0xca
 8004706:	625a      	str	r2, [r3, #36]	; 0x24
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2253      	movs	r2, #83	; 0x53
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f92a 	bl	800496a <RTC_EnterInitMode>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	22ff      	movs	r2, #255	; 0xff
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2204      	movs	r2, #4
 8004728:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e047      	b.n	80047c4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800473e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004742:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004752:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	431a      	orrs	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800477a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d111      	bne.n	80047ae <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8c5 	bl	800491a <HAL_RTC_WaitForSynchro>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2204      	movs	r2, #4
 80047a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e00a      	b.n	80047c4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80047c2:	2300      	movs	r3, #0
  }
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}

080047cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	7f1b      	ldrb	r3, [r3, #28]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_RTC_SetDate+0x1c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e094      	b.n	8004912 <HAL_RTC_SetDate+0x146>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2202      	movs	r2, #2
 80047f2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10e      	bne.n	8004818 <HAL_RTC_SetDate+0x4c>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	f023 0310 	bic.w	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	330a      	adds	r3, #10
 8004812:	b2da      	uxtb	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11c      	bne.n	8004858 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f8cd 	bl	80049c2 <RTC_ByteToBcd2>
 8004828:	4603      	mov	r3, r0
 800482a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8c6 	bl	80049c2 <RTC_ByteToBcd2>
 8004836:	4603      	mov	r3, r0
 8004838:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800483a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	789b      	ldrb	r3, [r3, #2]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f8be 	bl	80049c2 <RTC_ByteToBcd2>
 8004846:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004848:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e00e      	b.n	8004876 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	78db      	ldrb	r3, [r3, #3]
 800485c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004864:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800486a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ca      	movs	r2, #202	; 0xca
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2253      	movs	r2, #83	; 0x53
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f86f 	bl	800496a <RTC_EnterInitMode>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2204      	movs	r2, #4
 800489e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e033      	b.n	8004912 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d111      	bne.n	80048fc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f81e 	bl	800491a <HAL_RTC_WaitForSynchro>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2204      	movs	r2, #4
 80048f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e00a      	b.n	8004912 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22ff      	movs	r2, #255	; 0xff
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}

0800491a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004934:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004936:	f7fe fa67 	bl	8002e08 <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800493c:	e009      	b.n	8004952 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800493e:	f7fe fa63 	bl	8002e08 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800494c:	d901      	bls.n	8004952 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e007      	b.n	8004962 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ee      	beq.n	800493e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d119      	bne.n	80049b8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f04f 32ff 	mov.w	r2, #4294967295
 800498c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800498e:	f7fe fa3b 	bl	8002e08 <HAL_GetTick>
 8004992:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004994:	e009      	b.n	80049aa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004996:	f7fe fa37 	bl	8002e08 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a4:	d901      	bls.n	80049aa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e007      	b.n	80049ba <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ee      	beq.n	8004996 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80049d0:	e005      	b.n	80049de <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	3b0a      	subs	r3, #10
 80049dc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d8f6      	bhi.n	80049d2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b2db      	uxtb	r3, r3
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e07b      	b.n	8004b08 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a20:	d009      	beq.n	8004a36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	61da      	str	r2, [r3, #28]
 8004a28:	e005      	b.n	8004a36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fd fd5f 	bl	8002514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0104 	and.w	r1, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0210 	and.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10f      	bne.n	8004b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
    return;
 8004b52:	e0d7      	b.n	8004d04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_SPI_IRQHandler+0x66>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	09db      	lsrs	r3, r3, #7
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
    return;
 8004b74:	e0c6      	b.n	8004d04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_SPI_IRQHandler+0x8c>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80b4 	beq.w	8004d04 <HAL_SPI_IRQHandler+0x1f4>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80ad 	beq.w	8004d04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d023      	beq.n	8004bfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d011      	beq.n	8004be6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	f043 0204 	orr.w	r2, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e00b      	b.n	8004bfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]
        return;
 8004bfc:	e082      	b.n	8004d04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	0a1b      	lsrs	r3, r3, #8
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0208 	orr.w	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d04f      	beq.n	8004d02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_SPI_IRQHandler+0x17e>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d034      	beq.n	8004cf8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0203 	bic.w	r2, r2, #3
 8004c9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d011      	beq.n	8004cca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <HAL_SPI_IRQHandler+0x1fc>)
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe fab4 	bl	8003220 <HAL_DMA_Abort_IT>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <HAL_SPI_IRQHandler+0x1fc>)
 8004cd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fa9e 	bl	8003220 <HAL_DMA_Abort_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cf6:	e003      	b.n	8004d00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f809 	bl	8004d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cfe:	e000      	b.n	8004d02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d00:	bf00      	nop
    return;
 8004d02:	bf00      	nop
  }
}
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	08004d25 	.word	0x08004d25

08004d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff ffe6 	bl	8004d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e041      	b.n	8004de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fc84 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 fad4 	bl	8005338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d001      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e04e      	b.n	8004ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d01d      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d111      	bne.n	8004e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d010      	beq.n	8004ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	e007      	b.n	8004ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40010400 	.word	0x40010400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40001800 	.word	0x40001800

08004ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0202 	mvn.w	r2, #2
 8004ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9f4 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9e6 	bl	80052e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f9f7 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0204 	mvn.w	r2, #4
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9ca 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9bc 	bl	80052e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9cd 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0208 	mvn.w	r2, #8
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9a0 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f992 	bl	80052e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f9a3 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0210 	mvn.w	r2, #16
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f976 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f968 	bl	80052e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f979 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0201 	mvn.w	r2, #1
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd f9f6 	bl	800243c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fbac 	bl	80057d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d10e      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f93e 	bl	8005324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0220 	mvn.w	r2, #32
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb76 	bl	80057c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_ConfigClockSource+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0b3      	b.n	800525c <HAL_TIM_ConfigClockSource+0x180>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d03e      	beq.n	80051ac <HAL_TIM_ConfigClockSource+0xd0>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005132:	f200 8087 	bhi.w	8005244 <HAL_TIM_ConfigClockSource+0x168>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	f000 8085 	beq.w	8005248 <HAL_TIM_ConfigClockSource+0x16c>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	d87f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d01a      	beq.n	800517e <HAL_TIM_ConfigClockSource+0xa2>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d87b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d050      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0x116>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d877      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 8005154:	2b50      	cmp	r3, #80	; 0x50
 8005156:	d03c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xf6>
 8005158:	2b50      	cmp	r3, #80	; 0x50
 800515a:	d873      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d058      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x136>
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d86f      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 8005164:	2b30      	cmp	r3, #48	; 0x30
 8005166:	d064      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x156>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d86b      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d060      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x156>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d867      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x156>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d05a      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800517c:	e062      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6899      	ldr	r1, [r3, #8]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f000 fa7b 	bl	8005688 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	609a      	str	r2, [r3, #8]
      break;
 80051aa:	e04e      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6899      	ldr	r1, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f000 fa64 	bl	8005688 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ce:	609a      	str	r2, [r3, #8]
      break;
 80051d0:	e03b      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6859      	ldr	r1, [r3, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	461a      	mov	r2, r3
 80051e0:	f000 f9d8 	bl	8005594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2150      	movs	r1, #80	; 0x50
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fa31 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 80051f0:	e02b      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 f9f7 	bl	80055f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2160      	movs	r1, #96	; 0x60
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fa21 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 8005210:	e01b      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 f9b8 	bl	8005594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa11 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 8005230:	e00b      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 fa08 	bl	8005652 <TIM_ITRx_SetConfig>
        break;
 8005242:	e002      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005248:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e031      	b.n	80052e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8f2 	bl	8005478 <TIM_SlaveTimer_SetConfig>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e018      	b.n	80052e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a40      	ldr	r2, [pc, #256]	; (800544c <TIM_Base_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <TIM_Base_SetConfig+0x118>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <TIM_Base_SetConfig+0x11c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <TIM_Base_SetConfig+0x120>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3a      	ldr	r2, [pc, #232]	; (800545c <TIM_Base_SetConfig+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2f      	ldr	r2, [pc, #188]	; (800544c <TIM_Base_SetConfig+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d027      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2c      	ldr	r2, [pc, #176]	; (8005450 <TIM_Base_SetConfig+0x118>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d023      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2b      	ldr	r2, [pc, #172]	; (8005454 <TIM_Base_SetConfig+0x11c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01f      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <TIM_Base_SetConfig+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <TIM_Base_SetConfig+0x124>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d017      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a28      	ldr	r2, [pc, #160]	; (8005460 <TIM_Base_SetConfig+0x128>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <TIM_Base_SetConfig+0x12c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00f      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a26      	ldr	r2, [pc, #152]	; (8005468 <TIM_Base_SetConfig+0x130>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a25      	ldr	r2, [pc, #148]	; (800546c <TIM_Base_SetConfig+0x134>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a24      	ldr	r2, [pc, #144]	; (8005470 <TIM_Base_SetConfig+0x138>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <TIM_Base_SetConfig+0x13c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <TIM_Base_SetConfig+0x114>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_Base_SetConfig+0xf8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <TIM_Base_SetConfig+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d103      	bne.n	8005438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	615a      	str	r2, [r3, #20]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	40001800 	.word	0x40001800
 8005470:	40001c00 	.word	0x40001c00
 8005474:	40002000 	.word	0x40002000

08005478 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b70      	cmp	r3, #112	; 0x70
 80054bc:	d01a      	beq.n	80054f4 <TIM_SlaveTimer_SetConfig+0x7c>
 80054be:	2b70      	cmp	r3, #112	; 0x70
 80054c0:	d860      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054c2:	2b60      	cmp	r3, #96	; 0x60
 80054c4:	d054      	beq.n	8005570 <TIM_SlaveTimer_SetConfig+0xf8>
 80054c6:	2b60      	cmp	r3, #96	; 0x60
 80054c8:	d85c      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054ca:	2b50      	cmp	r3, #80	; 0x50
 80054cc:	d046      	beq.n	800555c <TIM_SlaveTimer_SetConfig+0xe4>
 80054ce:	2b50      	cmp	r3, #80	; 0x50
 80054d0:	d858      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d019      	beq.n	800550a <TIM_SlaveTimer_SetConfig+0x92>
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d854      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054da:	2b30      	cmp	r3, #48	; 0x30
 80054dc:	d054      	beq.n	8005588 <TIM_SlaveTimer_SetConfig+0x110>
 80054de:	2b30      	cmp	r3, #48	; 0x30
 80054e0:	d850      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d050      	beq.n	8005588 <TIM_SlaveTimer_SetConfig+0x110>
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d84c      	bhi.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d04c      	beq.n	8005588 <TIM_SlaveTimer_SetConfig+0x110>
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d04a      	beq.n	8005588 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80054f2:	e047      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68d9      	ldr	r1, [r3, #12]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f000 f8c0 	bl	8005688 <TIM_ETR_SetConfig>
      break;
 8005508:	e03f      	b.n	800558a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b05      	cmp	r3, #5
 8005510:	d101      	bne.n	8005516 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e03a      	b.n	800558c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	621a      	str	r2, [r3, #32]
      break;
 800555a:	e016      	b.n	800558a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	461a      	mov	r2, r3
 800556a:	f000 f813 	bl	8005594 <TIM_TI1_ConfigInputStage>
      break;
 800556e:	e00c      	b.n	800558a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	461a      	mov	r2, r3
 800557e:	f000 f838 	bl	80055f2 <TIM_TI2_ConfigInputStage>
      break;
 8005582:	e002      	b.n	800558a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005588:	bf00      	nop
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0201 	bic.w	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 030a 	bic.w	r3, r3, #10
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0210 	bic.w	r2, r3, #16
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800561c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 0307 	orr.w	r3, r3, #7
 8005674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e05a      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d022      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d01d      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10c      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40001800 	.word	0x40001800

080057c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e03f      	b.n	800587a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc ff74 	bl	80026fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc7b 	bl	8006128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af02      	add	r7, sp, #8
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d17c      	bne.n	800599c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_UART_Transmit+0x2c>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e075      	b.n	800599e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Transmit+0x3e>
 80058bc:	2302      	movs	r3, #2
 80058be:	e06e      	b.n	800599e <HAL_UART_Transmit+0x11c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d6:	f7fd fa97 	bl	8002e08 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f0:	d108      	bne.n	8005904 <HAL_UART_Transmit+0x82>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e003      	b.n	800590c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005914:	e02a      	b.n	800596c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2200      	movs	r2, #0
 800591e:	2180      	movs	r1, #128	; 0x80
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa3d 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e036      	b.n	800599e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	3302      	adds	r3, #2
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	e007      	b.n	800595e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1cf      	bne.n	8005916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2140      	movs	r1, #64	; 0x40
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fa0d 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e006      	b.n	800599e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d11d      	bne.n	80059fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_UART_Receive_IT+0x26>
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e016      	b.n	80059fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_UART_Receive_IT+0x38>
 80059da:	2302      	movs	r3, #2
 80059dc:	e00f      	b.n	80059fe <HAL_UART_Receive_IT+0x58>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	461a      	mov	r2, r3
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa1e 	bl	8005e34 <UART_Start_Receive_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	e000      	b.n	80059fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10d      	bne.n	8005a5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_UART_IRQHandler+0x52>
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fad1 	bl	8005ffa <UART_Receive_IT>
      return;
 8005a58:	e17c      	b.n	8005d54 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80b1 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x1bc>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <HAL_UART_IRQHandler+0x70>
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80a6 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_UART_IRQHandler+0x90>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f043 0201 	orr.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xb0>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f043 0202 	orr.w	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xd0>
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00f      	beq.n	8005b02 <HAL_UART_IRQHandler+0xfa>
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_UART_IRQHandler+0xee>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0208 	orr.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 811f 	beq.w	8005d4a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_UART_IRQHandler+0x11e>
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa6a 	bl	8005ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_UART_IRQHandler+0x146>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d031      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9aa 	bl	8005ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d123      	bne.n	8005baa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d013      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	4a77      	ldr	r2, [pc, #476]	; (8005d5c <HAL_UART_IRQHandler+0x354>)
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd fb4a 	bl	8003220 <HAL_DMA_Abort_IT>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e00e      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8e6 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e00a      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8e2 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	e006      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8de 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bbe:	e0c4      	b.n	8005d4a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	bf00      	nop
    return;
 8005bc2:	e0c2      	b.n	8005d4a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	f040 80a2 	bne.w	8005d12 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 809c 	beq.w	8005d12 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8096 	beq.w	8005d12 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d14f      	bne.n	8005caa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c14:	8a3b      	ldrh	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8099 	beq.w	8005d4e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c20:	8a3a      	ldrh	r2, [r7, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f080 8093 	bcs.w	8005d4e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8a3a      	ldrh	r2, [r7, #16]
 8005c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c38:	d02b      	beq.n	8005c92 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c48:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0210 	bic.w	r2, r2, #16
 8005c86:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fd fa57 	bl	8003140 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f870 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ca8:	e051      	b.n	8005d4e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d047      	beq.n	8005d52 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005cc2:	8a7b      	ldrh	r3, [r7, #18]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d044      	beq.n	8005d52 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cd6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0210 	bic.w	r2, r2, #16
 8005d04:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d06:	8a7b      	ldrh	r3, [r7, #18]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f83c 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d10:	e01f      	b.n	8005d52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_UART_IRQHandler+0x326>
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f8ff 	bl	8005f2a <UART_Transmit_IT>
    return;
 8005d2c:	e012      	b.n	8005d54 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00d      	beq.n	8005d54 <HAL_UART_IRQHandler+0x34c>
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f941 	bl	8005fca <UART_EndTransmit_IT>
    return;
 8005d48:	e004      	b.n	8005d54 <HAL_UART_IRQHandler+0x34c>
    return;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_UART_IRQHandler+0x34c>
      return;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_UART_IRQHandler+0x34c>
      return;
 8005d52:	bf00      	nop
  }
}
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08005f03 	.word	0x08005f03

08005d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db0:	e02c      	b.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d028      	beq.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dc0:	f7fd f822 	bl	8002e08 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d21d      	bcs.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e00f      	b.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4013      	ands	r3, r2
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2301      	moveq	r3, #1
 8005e1e:	2300      	movne	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d0c3      	beq.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2222      	movs	r2, #34	; 0x22
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0220 	orr.w	r2, r2, #32
 8005e98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ebe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d107      	bne.n	8005ee8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0210 	bic.w	r2, r2, #16
 8005ee6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ff29 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b21      	cmp	r3, #33	; 0x21
 8005f3c:	d13e      	bne.n	8005fbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d114      	bne.n	8005f72 <UART_Transmit_IT+0x48>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d110      	bne.n	8005f72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]
 8005f70:	e008      	b.n	8005f84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	1c59      	adds	r1, r3, #1
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6211      	str	r1, [r2, #32]
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4619      	mov	r1, r3
 8005f92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff feb8 	bl	8005d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b22      	cmp	r3, #34	; 0x22
 800600c:	f040 8087 	bne.w	800611e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006018:	d117      	bne.n	800604a <UART_Receive_IT+0x50>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d113      	bne.n	800604a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	b29a      	uxth	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
 8006048:	e026      	b.n	8006098 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605c:	d007      	beq.n	800606e <UART_Receive_IT+0x74>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <UART_Receive_IT+0x82>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e008      	b.n	800608e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4619      	mov	r1, r3
 80060a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d136      	bne.n	800611a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0220 	bic.w	r2, r2, #32
 80060ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10e      	bne.n	800610a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0210 	bic.w	r2, r2, #16
 80060fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fe40 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
 8006108:	e002      	b.n	8006110 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f8ea 	bl	80012e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e002      	b.n	8006120 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800611e:	2302      	movs	r3, #2
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	b09f      	sub	sp, #124	; 0x7c
 800612e:	af00      	add	r7, sp, #0
 8006130:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	ea40 0301 	orr.w	r3, r0, r1
 8006148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	431a      	orrs	r2, r3
 8006154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	431a      	orrs	r2, r3
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
 8006160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800616c:	f021 010c 	bic.w	r1, r1, #12
 8006170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006176:	430b      	orrs	r3, r1
 8006178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	6999      	ldr	r1, [r3, #24]
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	ea40 0301 	orr.w	r3, r0, r1
 8006190:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4bc5      	ldr	r3, [pc, #788]	; (80064ac <UART_SetConfig+0x384>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d004      	beq.n	80061a6 <UART_SetConfig+0x7e>
 800619c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4bc3      	ldr	r3, [pc, #780]	; (80064b0 <UART_SetConfig+0x388>)
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a6:	f7fe f89b 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 80061aa:	6778      	str	r0, [r7, #116]	; 0x74
 80061ac:	e002      	b.n	80061b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ae:	f7fe f883 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 80061b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	f040 80b6 	bne.w	800632c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c2:	461c      	mov	r4, r3
 80061c4:	f04f 0500 	mov.w	r5, #0
 80061c8:	4622      	mov	r2, r4
 80061ca:	462b      	mov	r3, r5
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	6439      	str	r1, [r7, #64]	; 0x40
 80061d0:	415b      	adcs	r3, r3
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d8:	1912      	adds	r2, r2, r4
 80061da:	eb45 0303 	adc.w	r3, r5, r3
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	00d9      	lsls	r1, r3, #3
 80061e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ec:	00d0      	lsls	r0, r2, #3
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	1911      	adds	r1, r2, r4
 80061f4:	6639      	str	r1, [r7, #96]	; 0x60
 80061f6:	416b      	adcs	r3, r5
 80061f8:	667b      	str	r3, [r7, #100]	; 0x64
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	461a      	mov	r2, r3
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	1891      	adds	r1, r2, r2
 8006206:	63b9      	str	r1, [r7, #56]	; 0x38
 8006208:	415b      	adcs	r3, r3
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006214:	f7fa f834 	bl	8000280 <__aeabi_uldivmod>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4ba5      	ldr	r3, [pc, #660]	; (80064b4 <UART_SetConfig+0x38c>)
 800621e:	fba3 2302 	umull	r2, r3, r3, r2
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	011e      	lsls	r6, r3, #4
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	461c      	mov	r4, r3
 800622a:	f04f 0500 	mov.w	r5, #0
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	1891      	adds	r1, r2, r2
 8006234:	6339      	str	r1, [r7, #48]	; 0x30
 8006236:	415b      	adcs	r3, r3
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
 800623a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800623e:	1912      	adds	r2, r2, r4
 8006240:	eb45 0303 	adc.w	r3, r5, r3
 8006244:	f04f 0000 	mov.w	r0, #0
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	00d9      	lsls	r1, r3, #3
 800624e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006252:	00d0      	lsls	r0, r2, #3
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	1911      	adds	r1, r2, r4
 800625a:	65b9      	str	r1, [r7, #88]	; 0x58
 800625c:	416b      	adcs	r3, r5
 800625e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	461a      	mov	r2, r3
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	1891      	adds	r1, r2, r2
 800626c:	62b9      	str	r1, [r7, #40]	; 0x28
 800626e:	415b      	adcs	r3, r3
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800627a:	f7fa f801 	bl	8000280 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <UART_SetConfig+0x38c>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a87      	ldr	r2, [pc, #540]	; (80064b4 <UART_SetConfig+0x38c>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a4:	441e      	add	r6, r3
 80062a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a8:	4618      	mov	r0, r3
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	1894      	adds	r4, r2, r2
 80062b4:	623c      	str	r4, [r7, #32]
 80062b6:	415b      	adcs	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062be:	1812      	adds	r2, r2, r0
 80062c0:	eb41 0303 	adc.w	r3, r1, r3
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	f04f 0500 	mov.w	r5, #0
 80062cc:	00dd      	lsls	r5, r3, #3
 80062ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062d2:	00d4      	lsls	r4, r2, #3
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	1814      	adds	r4, r2, r0
 80062da:	653c      	str	r4, [r7, #80]	; 0x50
 80062dc:	414b      	adcs	r3, r1
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	61b9      	str	r1, [r7, #24]
 80062ee:	415b      	adcs	r3, r3
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80062fa:	f7f9 ffc1 	bl	8000280 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b6c      	ldr	r3, [pc, #432]	; (80064b4 <UART_SetConfig+0x38c>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	; 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	3332      	adds	r3, #50	; 0x32
 8006316:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <UART_SetConfig+0x38c>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 0207 	and.w	r2, r3, #7
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4432      	add	r2, r6
 8006328:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800632a:	e0b9      	b.n	80064a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800632c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632e:	461c      	mov	r4, r3
 8006330:	f04f 0500 	mov.w	r5, #0
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	1891      	adds	r1, r2, r2
 800633a:	6139      	str	r1, [r7, #16]
 800633c:	415b      	adcs	r3, r3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006344:	1912      	adds	r2, r2, r4
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	00d9      	lsls	r1, r3, #3
 8006354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006358:	00d0      	lsls	r0, r2, #3
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	eb12 0804 	adds.w	r8, r2, r4
 8006362:	eb43 0905 	adc.w	r9, r3, r5
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f04f 0100 	mov.w	r1, #0
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	008b      	lsls	r3, r1, #2
 800637a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800637e:	0082      	lsls	r2, r0, #2
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7f9 ff7c 	bl	8000280 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4b49      	ldr	r3, [pc, #292]	; (80064b4 <UART_SetConfig+0x38c>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	011e      	lsls	r6, r3, #4
 8006396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006398:	4618      	mov	r0, r3
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	1894      	adds	r4, r2, r2
 80063a4:	60bc      	str	r4, [r7, #8]
 80063a6:	415b      	adcs	r3, r3
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ae:	1812      	adds	r2, r2, r0
 80063b0:	eb41 0303 	adc.w	r3, r1, r3
 80063b4:	f04f 0400 	mov.w	r4, #0
 80063b8:	f04f 0500 	mov.w	r5, #0
 80063bc:	00dd      	lsls	r5, r3, #3
 80063be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063c2:	00d4      	lsls	r4, r2, #3
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	1814      	adds	r4, r2, r0
 80063ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80063cc:	414b      	adcs	r3, r1
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f04f 0100 	mov.w	r1, #0
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063e8:	0082      	lsls	r2, r0, #2
 80063ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063ee:	f7f9 ff47 	bl	8000280 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <UART_SetConfig+0x38c>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <UART_SetConfig+0x38c>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006416:	441e      	add	r6, r3
 8006418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641a:	4618      	mov	r0, r3
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	1894      	adds	r4, r2, r2
 8006426:	603c      	str	r4, [r7, #0]
 8006428:	415b      	adcs	r3, r3
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006430:	1812      	adds	r2, r2, r0
 8006432:	eb41 0303 	adc.w	r3, r1, r3
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	f04f 0500 	mov.w	r5, #0
 800643e:	00dd      	lsls	r5, r3, #3
 8006440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006444:	00d4      	lsls	r4, r2, #3
 8006446:	4622      	mov	r2, r4
 8006448:	462b      	mov	r3, r5
 800644a:	eb12 0a00 	adds.w	sl, r2, r0
 800644e:	eb43 0b01 	adc.w	fp, r3, r1
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800646a:	0082      	lsls	r2, r0, #2
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7f9 ff06 	bl	8000280 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <UART_SetConfig+0x38c>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <UART_SetConfig+0x38c>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4432      	add	r2, r6
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	377c      	adds	r7, #124	; 0x7c
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	bf00      	nop
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000040 	.word	0x20000040

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 fff4 	bl	80074c4 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	080077e8 	.word	0x080077e8
 8006500:	080077e8 	.word	0x080077e8
 8006504:	080077e8 	.word	0x080077e8
 8006508:	080077ec 	.word	0x080077ec

0800650c <malloc>:
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <malloc+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f000 b85b 	b.w	80065cc <_malloc_r>
 8006516:	bf00      	nop
 8006518:	20000040 	.word	0x20000040

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_free_r>:
 800652c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800652e:	2900      	cmp	r1, #0
 8006530:	d048      	beq.n	80065c4 <_free_r+0x98>
 8006532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006536:	9001      	str	r0, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f1a1 0404 	sub.w	r4, r1, #4
 800653e:	bfb8      	it	lt
 8006540:	18e4      	addlt	r4, r4, r3
 8006542:	f000 fc91 	bl	8006e68 <__malloc_lock>
 8006546:	4a20      	ldr	r2, [pc, #128]	; (80065c8 <_free_r+0x9c>)
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	4615      	mov	r5, r2
 800654e:	b933      	cbnz	r3, 800655e <_free_r+0x32>
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	6014      	str	r4, [r2, #0]
 8006554:	b003      	add	sp, #12
 8006556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800655a:	f000 bc8b 	b.w	8006e74 <__malloc_unlock>
 800655e:	42a3      	cmp	r3, r4
 8006560:	d90b      	bls.n	800657a <_free_r+0x4e>
 8006562:	6821      	ldr	r1, [r4, #0]
 8006564:	1862      	adds	r2, r4, r1
 8006566:	4293      	cmp	r3, r2
 8006568:	bf04      	itt	eq
 800656a:	681a      	ldreq	r2, [r3, #0]
 800656c:	685b      	ldreq	r3, [r3, #4]
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	bf04      	itt	eq
 8006572:	1852      	addeq	r2, r2, r1
 8006574:	6022      	streq	r2, [r4, #0]
 8006576:	602c      	str	r4, [r5, #0]
 8006578:	e7ec      	b.n	8006554 <_free_r+0x28>
 800657a:	461a      	mov	r2, r3
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b10b      	cbz	r3, 8006584 <_free_r+0x58>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x4e>
 8006584:	6811      	ldr	r1, [r2, #0]
 8006586:	1855      	adds	r5, r2, r1
 8006588:	42a5      	cmp	r5, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x78>
 800658c:	6824      	ldr	r4, [r4, #0]
 800658e:	4421      	add	r1, r4
 8006590:	1854      	adds	r4, r2, r1
 8006592:	42a3      	cmp	r3, r4
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	d1dd      	bne.n	8006554 <_free_r+0x28>
 8006598:	681c      	ldr	r4, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6053      	str	r3, [r2, #4]
 800659e:	4421      	add	r1, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	e7d7      	b.n	8006554 <_free_r+0x28>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x80>
 80065a6:	230c      	movs	r3, #12
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	e7d3      	b.n	8006554 <_free_r+0x28>
 80065ac:	6825      	ldr	r5, [r4, #0]
 80065ae:	1961      	adds	r1, r4, r5
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1949      	addeq	r1, r1, r5
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	6054      	str	r4, [r2, #4]
 80065c2:	e7c7      	b.n	8006554 <_free_r+0x28>
 80065c4:	b003      	add	sp, #12
 80065c6:	bd30      	pop	{r4, r5, pc}
 80065c8:	200000e0 	.word	0x200000e0

080065cc <_malloc_r>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	1ccd      	adds	r5, r1, #3
 80065d0:	f025 0503 	bic.w	r5, r5, #3
 80065d4:	3508      	adds	r5, #8
 80065d6:	2d0c      	cmp	r5, #12
 80065d8:	bf38      	it	cc
 80065da:	250c      	movcc	r5, #12
 80065dc:	2d00      	cmp	r5, #0
 80065de:	4606      	mov	r6, r0
 80065e0:	db01      	blt.n	80065e6 <_malloc_r+0x1a>
 80065e2:	42a9      	cmp	r1, r5
 80065e4:	d903      	bls.n	80065ee <_malloc_r+0x22>
 80065e6:	230c      	movs	r3, #12
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	2000      	movs	r0, #0
 80065ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ee:	f000 fc3b 	bl	8006e68 <__malloc_lock>
 80065f2:	4921      	ldr	r1, [pc, #132]	; (8006678 <_malloc_r+0xac>)
 80065f4:	680a      	ldr	r2, [r1, #0]
 80065f6:	4614      	mov	r4, r2
 80065f8:	b99c      	cbnz	r4, 8006622 <_malloc_r+0x56>
 80065fa:	4f20      	ldr	r7, [pc, #128]	; (800667c <_malloc_r+0xb0>)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	b923      	cbnz	r3, 800660a <_malloc_r+0x3e>
 8006600:	4621      	mov	r1, r4
 8006602:	4630      	mov	r0, r6
 8006604:	f000 f8ca 	bl	800679c <_sbrk_r>
 8006608:	6038      	str	r0, [r7, #0]
 800660a:	4629      	mov	r1, r5
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f8c5 	bl	800679c <_sbrk_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	d123      	bne.n	800665e <_malloc_r+0x92>
 8006616:	230c      	movs	r3, #12
 8006618:	6033      	str	r3, [r6, #0]
 800661a:	4630      	mov	r0, r6
 800661c:	f000 fc2a 	bl	8006e74 <__malloc_unlock>
 8006620:	e7e3      	b.n	80065ea <_malloc_r+0x1e>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	1b5b      	subs	r3, r3, r5
 8006626:	d417      	bmi.n	8006658 <_malloc_r+0x8c>
 8006628:	2b0b      	cmp	r3, #11
 800662a:	d903      	bls.n	8006634 <_malloc_r+0x68>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	441c      	add	r4, r3
 8006630:	6025      	str	r5, [r4, #0]
 8006632:	e004      	b.n	800663e <_malloc_r+0x72>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	42a2      	cmp	r2, r4
 8006638:	bf0c      	ite	eq
 800663a:	600b      	streq	r3, [r1, #0]
 800663c:	6053      	strne	r3, [r2, #4]
 800663e:	4630      	mov	r0, r6
 8006640:	f000 fc18 	bl	8006e74 <__malloc_unlock>
 8006644:	f104 000b 	add.w	r0, r4, #11
 8006648:	1d23      	adds	r3, r4, #4
 800664a:	f020 0007 	bic.w	r0, r0, #7
 800664e:	1ac2      	subs	r2, r0, r3
 8006650:	d0cc      	beq.n	80065ec <_malloc_r+0x20>
 8006652:	1a1b      	subs	r3, r3, r0
 8006654:	50a3      	str	r3, [r4, r2]
 8006656:	e7c9      	b.n	80065ec <_malloc_r+0x20>
 8006658:	4622      	mov	r2, r4
 800665a:	6864      	ldr	r4, [r4, #4]
 800665c:	e7cc      	b.n	80065f8 <_malloc_r+0x2c>
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d0e3      	beq.n	8006630 <_malloc_r+0x64>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f896 	bl	800679c <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d1dd      	bne.n	8006630 <_malloc_r+0x64>
 8006674:	e7cf      	b.n	8006616 <_malloc_r+0x4a>
 8006676:	bf00      	nop
 8006678:	200000e0 	.word	0x200000e0
 800667c:	200000e4 	.word	0x200000e4

08006680 <iprintf>:
 8006680:	b40f      	push	{r0, r1, r2, r3}
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <iprintf+0x2c>)
 8006684:	b513      	push	{r0, r1, r4, lr}
 8006686:	681c      	ldr	r4, [r3, #0]
 8006688:	b124      	cbz	r4, 8006694 <iprintf+0x14>
 800668a:	69a3      	ldr	r3, [r4, #24]
 800668c:	b913      	cbnz	r3, 8006694 <iprintf+0x14>
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fad4 	bl	8006c3c <__sinit>
 8006694:	ab05      	add	r3, sp, #20
 8006696:	9a04      	ldr	r2, [sp, #16]
 8006698:	68a1      	ldr	r1, [r4, #8]
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fc19 	bl	8006ed4 <_vfiprintf_r>
 80066a2:	b002      	add	sp, #8
 80066a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a8:	b004      	add	sp, #16
 80066aa:	4770      	bx	lr
 80066ac:	20000040 	.word	0x20000040

080066b0 <_puts_r>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	460e      	mov	r6, r1
 80066b4:	4605      	mov	r5, r0
 80066b6:	b118      	cbz	r0, 80066c0 <_puts_r+0x10>
 80066b8:	6983      	ldr	r3, [r0, #24]
 80066ba:	b90b      	cbnz	r3, 80066c0 <_puts_r+0x10>
 80066bc:	f000 fabe 	bl	8006c3c <__sinit>
 80066c0:	69ab      	ldr	r3, [r5, #24]
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	b913      	cbnz	r3, 80066cc <_puts_r+0x1c>
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fab8 	bl	8006c3c <__sinit>
 80066cc:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <_puts_r+0xd0>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d120      	bne.n	8006714 <_puts_r+0x64>
 80066d2:	686c      	ldr	r4, [r5, #4]
 80066d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d6:	07db      	lsls	r3, r3, #31
 80066d8:	d405      	bmi.n	80066e6 <_puts_r+0x36>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	0598      	lsls	r0, r3, #22
 80066de:	d402      	bmi.n	80066e6 <_puts_r+0x36>
 80066e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066e2:	f000 fb49 	bl	8006d78 <__retarget_lock_acquire_recursive>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	0719      	lsls	r1, r3, #28
 80066ea:	d51d      	bpl.n	8006728 <_puts_r+0x78>
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	b1db      	cbz	r3, 8006728 <_puts_r+0x78>
 80066f0:	3e01      	subs	r6, #1
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066f8:	3b01      	subs	r3, #1
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	bb39      	cbnz	r1, 800674e <_puts_r+0x9e>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da38      	bge.n	8006774 <_puts_r+0xc4>
 8006702:	4622      	mov	r2, r4
 8006704:	210a      	movs	r1, #10
 8006706:	4628      	mov	r0, r5
 8006708:	f000 f89c 	bl	8006844 <__swbuf_r>
 800670c:	3001      	adds	r0, #1
 800670e:	d011      	beq.n	8006734 <_puts_r+0x84>
 8006710:	250a      	movs	r5, #10
 8006712:	e011      	b.n	8006738 <_puts_r+0x88>
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <_puts_r+0xd4>)
 8006716:	429c      	cmp	r4, r3
 8006718:	d101      	bne.n	800671e <_puts_r+0x6e>
 800671a:	68ac      	ldr	r4, [r5, #8]
 800671c:	e7da      	b.n	80066d4 <_puts_r+0x24>
 800671e:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <_puts_r+0xd8>)
 8006720:	429c      	cmp	r4, r3
 8006722:	bf08      	it	eq
 8006724:	68ec      	ldreq	r4, [r5, #12]
 8006726:	e7d5      	b.n	80066d4 <_puts_r+0x24>
 8006728:	4621      	mov	r1, r4
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f8ee 	bl	800690c <__swsetup_r>
 8006730:	2800      	cmp	r0, #0
 8006732:	d0dd      	beq.n	80066f0 <_puts_r+0x40>
 8006734:	f04f 35ff 	mov.w	r5, #4294967295
 8006738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	d405      	bmi.n	800674a <_puts_r+0x9a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	059b      	lsls	r3, r3, #22
 8006742:	d402      	bmi.n	800674a <_puts_r+0x9a>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f000 fb18 	bl	8006d7a <__retarget_lock_release_recursive>
 800674a:	4628      	mov	r0, r5
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	2b00      	cmp	r3, #0
 8006750:	da04      	bge.n	800675c <_puts_r+0xac>
 8006752:	69a2      	ldr	r2, [r4, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	dc06      	bgt.n	8006766 <_puts_r+0xb6>
 8006758:	290a      	cmp	r1, #10
 800675a:	d004      	beq.n	8006766 <_puts_r+0xb6>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	6022      	str	r2, [r4, #0]
 8006762:	7019      	strb	r1, [r3, #0]
 8006764:	e7c5      	b.n	80066f2 <_puts_r+0x42>
 8006766:	4622      	mov	r2, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f86b 	bl	8006844 <__swbuf_r>
 800676e:	3001      	adds	r0, #1
 8006770:	d1bf      	bne.n	80066f2 <_puts_r+0x42>
 8006772:	e7df      	b.n	8006734 <_puts_r+0x84>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	250a      	movs	r5, #10
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	701d      	strb	r5, [r3, #0]
 800677e:	e7db      	b.n	8006738 <_puts_r+0x88>
 8006780:	0800776c 	.word	0x0800776c
 8006784:	0800778c 	.word	0x0800778c
 8006788:	0800774c 	.word	0x0800774c

0800678c <puts>:
 800678c:	4b02      	ldr	r3, [pc, #8]	; (8006798 <puts+0xc>)
 800678e:	4601      	mov	r1, r0
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	f7ff bf8d 	b.w	80066b0 <_puts_r>
 8006796:	bf00      	nop
 8006798:	20000040 	.word	0x20000040

0800679c <_sbrk_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d06      	ldr	r5, [pc, #24]	; (80067b8 <_sbrk_r+0x1c>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	f7fc fa86 	bl	8002cb8 <_sbrk>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_sbrk_r+0x1a>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_sbrk_r+0x1a>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	20000580 	.word	0x20000580

080067bc <__sread>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	f000 fe4a 	bl	800745c <_read_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfab      	itete	ge
 80067cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ce:	89a3      	ldrhlt	r3, [r4, #12]
 80067d0:	181b      	addge	r3, r3, r0
 80067d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067d6:	bfac      	ite	ge
 80067d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067da:	81a3      	strhlt	r3, [r4, #12]
 80067dc:	bd10      	pop	{r4, pc}

080067de <__swrite>:
 80067de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	461f      	mov	r7, r3
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	05db      	lsls	r3, r3, #23
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4616      	mov	r6, r2
 80067ee:	d505      	bpl.n	80067fc <__swrite+0x1e>
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2302      	movs	r3, #2
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 fac0 	bl	8006d7c <_lseek_r>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	f000 b869 	b.w	80068e8 <_write_r>

08006816 <__sseek>:
 8006816:	b510      	push	{r4, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681e:	f000 faad 	bl	8006d7c <_lseek_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	bf15      	itete	ne
 8006828:	6560      	strne	r0, [r4, #84]	; 0x54
 800682a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800682e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006832:	81a3      	strheq	r3, [r4, #12]
 8006834:	bf18      	it	ne
 8006836:	81a3      	strhne	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__sclose>:
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 b8d3 	b.w	80069e8 <_close_r>
	...

08006844 <__swbuf_r>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4614      	mov	r4, r2
 800684a:	4605      	mov	r5, r0
 800684c:	b118      	cbz	r0, 8006856 <__swbuf_r+0x12>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <__swbuf_r+0x12>
 8006852:	f000 f9f3 	bl	8006c3c <__sinit>
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <__swbuf_r+0x98>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d12b      	bne.n	80068b4 <__swbuf_r+0x70>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	d52f      	bpl.n	80068c8 <__swbuf_r+0x84>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b36b      	cbz	r3, 80068c8 <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1ac0      	subs	r0, r0, r3
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	b2f6      	uxtb	r6, r6
 8006876:	4283      	cmp	r3, r0
 8006878:	4637      	mov	r7, r6
 800687a:	dc04      	bgt.n	8006886 <__swbuf_r+0x42>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f948 	bl	8006b14 <_fflush_r>
 8006884:	bb30      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	3b01      	subs	r3, #1
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	701e      	strb	r6, [r3, #0]
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	3001      	adds	r0, #1
 8006898:	4283      	cmp	r3, r0
 800689a:	d004      	beq.n	80068a6 <__swbuf_r+0x62>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d506      	bpl.n	80068b0 <__swbuf_r+0x6c>
 80068a2:	2e0a      	cmp	r6, #10
 80068a4:	d104      	bne.n	80068b0 <__swbuf_r+0x6c>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f933 	bl	8006b14 <_fflush_r>
 80068ae:	b988      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 80068b0:	4638      	mov	r0, r7
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <__swbuf_r+0x9c>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <__swbuf_r+0x7a>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7cf      	b.n	800685e <__swbuf_r+0x1a>
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <__swbuf_r+0xa0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7ca      	b.n	800685e <__swbuf_r+0x1a>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f81e 	bl	800690c <__swsetup_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0cb      	beq.n	800686c <__swbuf_r+0x28>
 80068d4:	f04f 37ff 	mov.w	r7, #4294967295
 80068d8:	e7ea      	b.n	80068b0 <__swbuf_r+0x6c>
 80068da:	bf00      	nop
 80068dc:	0800776c 	.word	0x0800776c
 80068e0:	0800778c 	.word	0x0800778c
 80068e4:	0800774c 	.word	0x0800774c

080068e8 <_write_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d07      	ldr	r5, [pc, #28]	; (8006908 <_write_r+0x20>)
 80068ec:	4604      	mov	r4, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	4611      	mov	r1, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	602a      	str	r2, [r5, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fa fe02 	bl	8001500 <_write>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_write_r+0x1e>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_write_r+0x1e>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000580 	.word	0x20000580

0800690c <__swsetup_r>:
 800690c:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <__swsetup_r+0xcc>)
 800690e:	b570      	push	{r4, r5, r6, lr}
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	4606      	mov	r6, r0
 8006914:	460c      	mov	r4, r1
 8006916:	b125      	cbz	r5, 8006922 <__swsetup_r+0x16>
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	b913      	cbnz	r3, 8006922 <__swsetup_r+0x16>
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f98d 	bl	8006c3c <__sinit>
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <__swsetup_r+0xd0>)
 8006924:	429c      	cmp	r4, r3
 8006926:	d10f      	bne.n	8006948 <__swsetup_r+0x3c>
 8006928:	686c      	ldr	r4, [r5, #4]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006930:	0719      	lsls	r1, r3, #28
 8006932:	d42c      	bmi.n	800698e <__swsetup_r+0x82>
 8006934:	06dd      	lsls	r5, r3, #27
 8006936:	d411      	bmi.n	800695c <__swsetup_r+0x50>
 8006938:	2309      	movs	r3, #9
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	e03e      	b.n	80069c6 <__swsetup_r+0xba>
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <__swsetup_r+0xd4>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <__swsetup_r+0x46>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7eb      	b.n	800692a <__swsetup_r+0x1e>
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <__swsetup_r+0xd8>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7e6      	b.n	800692a <__swsetup_r+0x1e>
 800695c:	0758      	lsls	r0, r3, #29
 800695e:	d512      	bpl.n	8006986 <__swsetup_r+0x7a>
 8006960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006962:	b141      	cbz	r1, 8006976 <__swsetup_r+0x6a>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__swsetup_r+0x66>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fddd 	bl	800652c <_free_r>
 8006972:	2300      	movs	r3, #0
 8006974:	6363      	str	r3, [r4, #52]	; 0x34
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	2300      	movs	r3, #0
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b94b      	cbnz	r3, 80069a6 <__swsetup_r+0x9a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699c:	d003      	beq.n	80069a6 <__swsetup_r+0x9a>
 800699e:	4621      	mov	r1, r4
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 fa21 	bl	8006de8 <__smakebuf_r>
 80069a6:	89a0      	ldrh	r0, [r4, #12]
 80069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ac:	f010 0301 	ands.w	r3, r0, #1
 80069b0:	d00a      	beq.n	80069c8 <__swsetup_r+0xbc>
 80069b2:	2300      	movs	r3, #0
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	425b      	negs	r3, r3
 80069ba:	61a3      	str	r3, [r4, #24]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	b943      	cbnz	r3, 80069d2 <__swsetup_r+0xc6>
 80069c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c4:	d1ba      	bne.n	800693c <__swsetup_r+0x30>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	0781      	lsls	r1, r0, #30
 80069ca:	bf58      	it	pl
 80069cc:	6963      	ldrpl	r3, [r4, #20]
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	e7f4      	b.n	80069bc <__swsetup_r+0xb0>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7f7      	b.n	80069c6 <__swsetup_r+0xba>
 80069d6:	bf00      	nop
 80069d8:	20000040 	.word	0x20000040
 80069dc:	0800776c 	.word	0x0800776c
 80069e0:	0800778c 	.word	0x0800778c
 80069e4:	0800774c 	.word	0x0800774c

080069e8 <_close_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d06      	ldr	r5, [pc, #24]	; (8006a04 <_close_r+0x1c>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	602b      	str	r3, [r5, #0]
 80069f4:	f7fc f92b 	bl	8002c4e <_close>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_close_r+0x1a>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_close_r+0x1a>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20000580 	.word	0x20000580

08006a08 <__sflush_r>:
 8006a08:	898a      	ldrh	r2, [r1, #12]
 8006a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	0710      	lsls	r0, r2, #28
 8006a12:	460c      	mov	r4, r1
 8006a14:	d458      	bmi.n	8006ac8 <__sflush_r+0xc0>
 8006a16:	684b      	ldr	r3, [r1, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dc05      	bgt.n	8006a28 <__sflush_r+0x20>
 8006a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dc02      	bgt.n	8006a28 <__sflush_r+0x20>
 8006a22:	2000      	movs	r0, #0
 8006a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d0f9      	beq.n	8006a22 <__sflush_r+0x1a>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a34:	682f      	ldr	r7, [r5, #0]
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	d032      	beq.n	8006aa0 <__sflush_r+0x98>
 8006a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	075a      	lsls	r2, r3, #29
 8006a40:	d505      	bpl.n	8006a4e <__sflush_r+0x46>
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	1ac0      	subs	r0, r0, r3
 8006a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a48:	b10b      	cbz	r3, 8006a4e <__sflush_r+0x46>
 8006a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a4c:	1ac0      	subs	r0, r0, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4602      	mov	r2, r0
 8006a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a54:	6a21      	ldr	r1, [r4, #32]
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b0      	blx	r6
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	d106      	bne.n	8006a6e <__sflush_r+0x66>
 8006a60:	6829      	ldr	r1, [r5, #0]
 8006a62:	291d      	cmp	r1, #29
 8006a64:	d82c      	bhi.n	8006ac0 <__sflush_r+0xb8>
 8006a66:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <__sflush_r+0x108>)
 8006a68:	40ca      	lsrs	r2, r1
 8006a6a:	07d6      	lsls	r6, r2, #31
 8006a6c:	d528      	bpl.n	8006ac0 <__sflush_r+0xb8>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	6062      	str	r2, [r4, #4]
 8006a72:	04d9      	lsls	r1, r3, #19
 8006a74:	6922      	ldr	r2, [r4, #16]
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	d504      	bpl.n	8006a84 <__sflush_r+0x7c>
 8006a7a:	1c42      	adds	r2, r0, #1
 8006a7c:	d101      	bne.n	8006a82 <__sflush_r+0x7a>
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	b903      	cbnz	r3, 8006a84 <__sflush_r+0x7c>
 8006a82:	6560      	str	r0, [r4, #84]	; 0x54
 8006a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a86:	602f      	str	r7, [r5, #0]
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d0ca      	beq.n	8006a22 <__sflush_r+0x1a>
 8006a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a90:	4299      	cmp	r1, r3
 8006a92:	d002      	beq.n	8006a9a <__sflush_r+0x92>
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7ff fd49 	bl	800652c <_free_r>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a9e:	e7c1      	b.n	8006a24 <__sflush_r+0x1c>
 8006aa0:	6a21      	ldr	r1, [r4, #32]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b0      	blx	r6
 8006aa8:	1c41      	adds	r1, r0, #1
 8006aaa:	d1c7      	bne.n	8006a3c <__sflush_r+0x34>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0c4      	beq.n	8006a3c <__sflush_r+0x34>
 8006ab2:	2b1d      	cmp	r3, #29
 8006ab4:	d001      	beq.n	8006aba <__sflush_r+0xb2>
 8006ab6:	2b16      	cmp	r3, #22
 8006ab8:	d101      	bne.n	8006abe <__sflush_r+0xb6>
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	e7b1      	b.n	8006a22 <__sflush_r+0x1a>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	e7ad      	b.n	8006a24 <__sflush_r+0x1c>
 8006ac8:	690f      	ldr	r7, [r1, #16]
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d0a9      	beq.n	8006a22 <__sflush_r+0x1a>
 8006ace:	0793      	lsls	r3, r2, #30
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	bf08      	it	eq
 8006ad4:	694b      	ldreq	r3, [r1, #20]
 8006ad6:	600f      	str	r7, [r1, #0]
 8006ad8:	bf18      	it	ne
 8006ada:	2300      	movne	r3, #0
 8006adc:	eba6 0807 	sub.w	r8, r6, r7
 8006ae0:	608b      	str	r3, [r1, #8]
 8006ae2:	f1b8 0f00 	cmp.w	r8, #0
 8006ae6:	dd9c      	ble.n	8006a22 <__sflush_r+0x1a>
 8006ae8:	6a21      	ldr	r1, [r4, #32]
 8006aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aec:	4643      	mov	r3, r8
 8006aee:	463a      	mov	r2, r7
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b0      	blx	r6
 8006af4:	2800      	cmp	r0, #0
 8006af6:	dc06      	bgt.n	8006b06 <__sflush_r+0xfe>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	e78e      	b.n	8006a24 <__sflush_r+0x1c>
 8006b06:	4407      	add	r7, r0
 8006b08:	eba8 0800 	sub.w	r8, r8, r0
 8006b0c:	e7e9      	b.n	8006ae2 <__sflush_r+0xda>
 8006b0e:	bf00      	nop
 8006b10:	20400001 	.word	0x20400001

08006b14 <_fflush_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b913      	cbnz	r3, 8006b24 <_fflush_r+0x10>
 8006b1e:	2500      	movs	r5, #0
 8006b20:	4628      	mov	r0, r5
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	b118      	cbz	r0, 8006b2e <_fflush_r+0x1a>
 8006b26:	6983      	ldr	r3, [r0, #24]
 8006b28:	b90b      	cbnz	r3, 8006b2e <_fflush_r+0x1a>
 8006b2a:	f000 f887 	bl	8006c3c <__sinit>
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <_fflush_r+0x6c>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	d11b      	bne.n	8006b6c <_fflush_r+0x58>
 8006b34:	686c      	ldr	r4, [r5, #4]
 8006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0ef      	beq.n	8006b1e <_fflush_r+0xa>
 8006b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b40:	07d0      	lsls	r0, r2, #31
 8006b42:	d404      	bmi.n	8006b4e <_fflush_r+0x3a>
 8006b44:	0599      	lsls	r1, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_fflush_r+0x3a>
 8006b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4a:	f000 f915 	bl	8006d78 <__retarget_lock_acquire_recursive>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7ff ff59 	bl	8006a08 <__sflush_r>
 8006b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b58:	07da      	lsls	r2, r3, #31
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	d4e0      	bmi.n	8006b20 <_fflush_r+0xc>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	d4dd      	bmi.n	8006b20 <_fflush_r+0xc>
 8006b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b66:	f000 f908 	bl	8006d7a <__retarget_lock_release_recursive>
 8006b6a:	e7d9      	b.n	8006b20 <_fflush_r+0xc>
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <_fflush_r+0x70>)
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	d101      	bne.n	8006b76 <_fflush_r+0x62>
 8006b72:	68ac      	ldr	r4, [r5, #8]
 8006b74:	e7df      	b.n	8006b36 <_fflush_r+0x22>
 8006b76:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <_fflush_r+0x74>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	bf08      	it	eq
 8006b7c:	68ec      	ldreq	r4, [r5, #12]
 8006b7e:	e7da      	b.n	8006b36 <_fflush_r+0x22>
 8006b80:	0800776c 	.word	0x0800776c
 8006b84:	0800778c 	.word	0x0800778c
 8006b88:	0800774c 	.word	0x0800774c

08006b8c <std>:
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	e9c0 3300 	strd	r3, r3, [r0]
 8006b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b9a:	6083      	str	r3, [r0, #8]
 8006b9c:	8181      	strh	r1, [r0, #12]
 8006b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006ba0:	81c2      	strh	r2, [r0, #14]
 8006ba2:	6183      	str	r3, [r0, #24]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	2208      	movs	r2, #8
 8006ba8:	305c      	adds	r0, #92	; 0x5c
 8006baa:	f7ff fcb7 	bl	800651c <memset>
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <std+0x38>)
 8006bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <std+0x3c>)
 8006bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <std+0x40>)
 8006bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <std+0x44>)
 8006bbc:	6224      	str	r4, [r4, #32]
 8006bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	bf00      	nop
 8006bc4:	080067bd 	.word	0x080067bd
 8006bc8:	080067df 	.word	0x080067df
 8006bcc:	08006817 	.word	0x08006817
 8006bd0:	0800683b 	.word	0x0800683b

08006bd4 <_cleanup_r>:
 8006bd4:	4901      	ldr	r1, [pc, #4]	; (8006bdc <_cleanup_r+0x8>)
 8006bd6:	f000 b8af 	b.w	8006d38 <_fwalk_reent>
 8006bda:	bf00      	nop
 8006bdc:	08006b15 	.word	0x08006b15

08006be0 <__sfmoreglue>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	1e4a      	subs	r2, r1, #1
 8006be4:	2568      	movs	r5, #104	; 0x68
 8006be6:	4355      	muls	r5, r2
 8006be8:	460e      	mov	r6, r1
 8006bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bee:	f7ff fced 	bl	80065cc <_malloc_r>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	b140      	cbz	r0, 8006c08 <__sfmoreglue+0x28>
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bfc:	300c      	adds	r0, #12
 8006bfe:	60a0      	str	r0, [r4, #8]
 8006c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c04:	f7ff fc8a 	bl	800651c <memset>
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}

08006c0c <__sfp_lock_acquire>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	; (8006c14 <__sfp_lock_acquire+0x8>)
 8006c0e:	f000 b8b3 	b.w	8006d78 <__retarget_lock_acquire_recursive>
 8006c12:	bf00      	nop
 8006c14:	2000057c 	.word	0x2000057c

08006c18 <__sfp_lock_release>:
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <__sfp_lock_release+0x8>)
 8006c1a:	f000 b8ae 	b.w	8006d7a <__retarget_lock_release_recursive>
 8006c1e:	bf00      	nop
 8006c20:	2000057c 	.word	0x2000057c

08006c24 <__sinit_lock_acquire>:
 8006c24:	4801      	ldr	r0, [pc, #4]	; (8006c2c <__sinit_lock_acquire+0x8>)
 8006c26:	f000 b8a7 	b.w	8006d78 <__retarget_lock_acquire_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20000577 	.word	0x20000577

08006c30 <__sinit_lock_release>:
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <__sinit_lock_release+0x8>)
 8006c32:	f000 b8a2 	b.w	8006d7a <__retarget_lock_release_recursive>
 8006c36:	bf00      	nop
 8006c38:	20000577 	.word	0x20000577

08006c3c <__sinit>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	4604      	mov	r4, r0
 8006c40:	f7ff fff0 	bl	8006c24 <__sinit_lock_acquire>
 8006c44:	69a3      	ldr	r3, [r4, #24]
 8006c46:	b11b      	cbz	r3, 8006c50 <__sinit+0x14>
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c4c:	f7ff bff0 	b.w	8006c30 <__sinit_lock_release>
 8006c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c54:	6523      	str	r3, [r4, #80]	; 0x50
 8006c56:	4b13      	ldr	r3, [pc, #76]	; (8006ca4 <__sinit+0x68>)
 8006c58:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <__sinit+0x6c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	bf04      	itt	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	61a3      	streq	r3, [r4, #24]
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f820 	bl	8006cac <__sfp>
 8006c6c:	6060      	str	r0, [r4, #4]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f81c 	bl	8006cac <__sfp>
 8006c74:	60a0      	str	r0, [r4, #8]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f818 	bl	8006cac <__sfp>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	60e0      	str	r0, [r4, #12]
 8006c80:	2104      	movs	r1, #4
 8006c82:	6860      	ldr	r0, [r4, #4]
 8006c84:	f7ff ff82 	bl	8006b8c <std>
 8006c88:	68a0      	ldr	r0, [r4, #8]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2109      	movs	r1, #9
 8006c8e:	f7ff ff7d 	bl	8006b8c <std>
 8006c92:	68e0      	ldr	r0, [r4, #12]
 8006c94:	2202      	movs	r2, #2
 8006c96:	2112      	movs	r1, #18
 8006c98:	f7ff ff78 	bl	8006b8c <std>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	61a3      	str	r3, [r4, #24]
 8006ca0:	e7d2      	b.n	8006c48 <__sinit+0xc>
 8006ca2:	bf00      	nop
 8006ca4:	08007748 	.word	0x08007748
 8006ca8:	08006bd5 	.word	0x08006bd5

08006cac <__sfp>:
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	4607      	mov	r7, r0
 8006cb0:	f7ff ffac 	bl	8006c0c <__sfp_lock_acquire>
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <__sfp+0x84>)
 8006cb6:	681e      	ldr	r6, [r3, #0]
 8006cb8:	69b3      	ldr	r3, [r6, #24]
 8006cba:	b913      	cbnz	r3, 8006cc2 <__sfp+0x16>
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f7ff ffbd 	bl	8006c3c <__sinit>
 8006cc2:	3648      	adds	r6, #72	; 0x48
 8006cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	d503      	bpl.n	8006cd4 <__sfp+0x28>
 8006ccc:	6833      	ldr	r3, [r6, #0]
 8006cce:	b30b      	cbz	r3, 8006d14 <__sfp+0x68>
 8006cd0:	6836      	ldr	r6, [r6, #0]
 8006cd2:	e7f7      	b.n	8006cc4 <__sfp+0x18>
 8006cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cd8:	b9d5      	cbnz	r5, 8006d10 <__sfp+0x64>
 8006cda:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <__sfp+0x88>)
 8006cdc:	60e3      	str	r3, [r4, #12]
 8006cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ce4:	f000 f847 	bl	8006d76 <__retarget_lock_init_recursive>
 8006ce8:	f7ff ff96 	bl	8006c18 <__sfp_lock_release>
 8006cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cf4:	6025      	str	r5, [r4, #0]
 8006cf6:	61a5      	str	r5, [r4, #24]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d00:	f7ff fc0c 	bl	800651c <memset>
 8006d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d10:	3468      	adds	r4, #104	; 0x68
 8006d12:	e7d9      	b.n	8006cc8 <__sfp+0x1c>
 8006d14:	2104      	movs	r1, #4
 8006d16:	4638      	mov	r0, r7
 8006d18:	f7ff ff62 	bl	8006be0 <__sfmoreglue>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	6030      	str	r0, [r6, #0]
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d1d5      	bne.n	8006cd0 <__sfp+0x24>
 8006d24:	f7ff ff78 	bl	8006c18 <__sfp_lock_release>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	e7ee      	b.n	8006d0c <__sfp+0x60>
 8006d2e:	bf00      	nop
 8006d30:	08007748 	.word	0x08007748
 8006d34:	ffff0001 	.word	0xffff0001

08006d38 <_fwalk_reent>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	4688      	mov	r8, r1
 8006d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d44:	2700      	movs	r7, #0
 8006d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d4e:	d505      	bpl.n	8006d5c <_fwalk_reent+0x24>
 8006d50:	6824      	ldr	r4, [r4, #0]
 8006d52:	2c00      	cmp	r4, #0
 8006d54:	d1f7      	bne.n	8006d46 <_fwalk_reent+0xe>
 8006d56:	4638      	mov	r0, r7
 8006d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5c:	89ab      	ldrh	r3, [r5, #12]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d907      	bls.n	8006d72 <_fwalk_reent+0x3a>
 8006d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d66:	3301      	adds	r3, #1
 8006d68:	d003      	beq.n	8006d72 <_fwalk_reent+0x3a>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	47c0      	blx	r8
 8006d70:	4307      	orrs	r7, r0
 8006d72:	3568      	adds	r5, #104	; 0x68
 8006d74:	e7e9      	b.n	8006d4a <_fwalk_reent+0x12>

08006d76 <__retarget_lock_init_recursive>:
 8006d76:	4770      	bx	lr

08006d78 <__retarget_lock_acquire_recursive>:
 8006d78:	4770      	bx	lr

08006d7a <__retarget_lock_release_recursive>:
 8006d7a:	4770      	bx	lr

08006d7c <_lseek_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	; (8006d9c <_lseek_r+0x20>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f7fb ff86 	bl	8002c9c <_lseek>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_lseek_r+0x1e>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_lseek_r+0x1e>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000580 	.word	0x20000580

08006da0 <__swhatbuf_r>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	460e      	mov	r6, r1
 8006da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da8:	2900      	cmp	r1, #0
 8006daa:	b096      	sub	sp, #88	; 0x58
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	da07      	bge.n	8006dc2 <__swhatbuf_r+0x22>
 8006db2:	2300      	movs	r3, #0
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	89b3      	ldrh	r3, [r6, #12]
 8006db8:	061a      	lsls	r2, r3, #24
 8006dba:	d410      	bmi.n	8006dde <__swhatbuf_r+0x3e>
 8006dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc0:	e00e      	b.n	8006de0 <__swhatbuf_r+0x40>
 8006dc2:	466a      	mov	r2, sp
 8006dc4:	f000 fb5c 	bl	8007480 <_fstat_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dbf2      	blt.n	8006db2 <__swhatbuf_r+0x12>
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dd6:	425a      	negs	r2, r3
 8006dd8:	415a      	adcs	r2, r3
 8006dda:	602a      	str	r2, [r5, #0]
 8006ddc:	e7ee      	b.n	8006dbc <__swhatbuf_r+0x1c>
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	2000      	movs	r0, #0
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	b016      	add	sp, #88	; 0x58
 8006de6:	bd70      	pop	{r4, r5, r6, pc}

08006de8 <__smakebuf_r>:
 8006de8:	898b      	ldrh	r3, [r1, #12]
 8006dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dec:	079d      	lsls	r5, r3, #30
 8006dee:	4606      	mov	r6, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	d507      	bpl.n	8006e04 <__smakebuf_r+0x1c>
 8006df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	6163      	str	r3, [r4, #20]
 8006e00:	b002      	add	sp, #8
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	ab01      	add	r3, sp, #4
 8006e06:	466a      	mov	r2, sp
 8006e08:	f7ff ffca 	bl	8006da0 <__swhatbuf_r>
 8006e0c:	9900      	ldr	r1, [sp, #0]
 8006e0e:	4605      	mov	r5, r0
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7ff fbdb 	bl	80065cc <_malloc_r>
 8006e16:	b948      	cbnz	r0, 8006e2c <__smakebuf_r+0x44>
 8006e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1c:	059a      	lsls	r2, r3, #22
 8006e1e:	d4ef      	bmi.n	8006e00 <__smakebuf_r+0x18>
 8006e20:	f023 0303 	bic.w	r3, r3, #3
 8006e24:	f043 0302 	orr.w	r3, r3, #2
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	e7e3      	b.n	8006df4 <__smakebuf_r+0xc>
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <__smakebuf_r+0x7c>)
 8006e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	6020      	str	r0, [r4, #0]
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	81a3      	strh	r3, [r4, #12]
 8006e3a:	9b00      	ldr	r3, [sp, #0]
 8006e3c:	6163      	str	r3, [r4, #20]
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	6120      	str	r0, [r4, #16]
 8006e42:	b15b      	cbz	r3, 8006e5c <__smakebuf_r+0x74>
 8006e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fb2b 	bl	80074a4 <_isatty_r>
 8006e4e:	b128      	cbz	r0, 8006e5c <__smakebuf_r+0x74>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f023 0303 	bic.w	r3, r3, #3
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	89a0      	ldrh	r0, [r4, #12]
 8006e5e:	4305      	orrs	r5, r0
 8006e60:	81a5      	strh	r5, [r4, #12]
 8006e62:	e7cd      	b.n	8006e00 <__smakebuf_r+0x18>
 8006e64:	08006bd5 	.word	0x08006bd5

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf85 	b.w	8006d78 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20000578 	.word	0x20000578

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff bf80 	b.w	8006d7a <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000578 	.word	0x20000578

08006e80 <__sfputc_r>:
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	b410      	push	{r4}
 8006e88:	6093      	str	r3, [r2, #8]
 8006e8a:	da08      	bge.n	8006e9e <__sfputc_r+0x1e>
 8006e8c:	6994      	ldr	r4, [r2, #24]
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	db01      	blt.n	8006e96 <__sfputc_r+0x16>
 8006e92:	290a      	cmp	r1, #10
 8006e94:	d103      	bne.n	8006e9e <__sfputc_r+0x1e>
 8006e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e9a:	f7ff bcd3 	b.w	8006844 <__swbuf_r>
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	1c58      	adds	r0, r3, #1
 8006ea2:	6010      	str	r0, [r2, #0]
 8006ea4:	7019      	strb	r1, [r3, #0]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <__sfputs_r>:
 8006eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	460f      	mov	r7, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	18d5      	adds	r5, r2, r3
 8006eb8:	42ac      	cmp	r4, r5
 8006eba:	d101      	bne.n	8006ec0 <__sfputs_r+0x12>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e007      	b.n	8006ed0 <__sfputs_r+0x22>
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff ffda 	bl	8006e80 <__sfputc_r>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d1f3      	bne.n	8006eb8 <__sfputs_r+0xa>
 8006ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed4 <_vfiprintf_r>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	460d      	mov	r5, r1
 8006eda:	b09d      	sub	sp, #116	; 0x74
 8006edc:	4614      	mov	r4, r2
 8006ede:	4698      	mov	r8, r3
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	b118      	cbz	r0, 8006eec <_vfiprintf_r+0x18>
 8006ee4:	6983      	ldr	r3, [r0, #24]
 8006ee6:	b90b      	cbnz	r3, 8006eec <_vfiprintf_r+0x18>
 8006ee8:	f7ff fea8 	bl	8006c3c <__sinit>
 8006eec:	4b89      	ldr	r3, [pc, #548]	; (8007114 <_vfiprintf_r+0x240>)
 8006eee:	429d      	cmp	r5, r3
 8006ef0:	d11b      	bne.n	8006f2a <_vfiprintf_r+0x56>
 8006ef2:	6875      	ldr	r5, [r6, #4]
 8006ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	d405      	bmi.n	8006f06 <_vfiprintf_r+0x32>
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	059a      	lsls	r2, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_vfiprintf_r+0x32>
 8006f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f02:	f7ff ff39 	bl	8006d78 <__retarget_lock_acquire_recursive>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	071b      	lsls	r3, r3, #28
 8006f0a:	d501      	bpl.n	8006f10 <_vfiprintf_r+0x3c>
 8006f0c:	692b      	ldr	r3, [r5, #16]
 8006f0e:	b9eb      	cbnz	r3, 8006f4c <_vfiprintf_r+0x78>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7ff fcfa 	bl	800690c <__swsetup_r>
 8006f18:	b1c0      	cbz	r0, 8006f4c <_vfiprintf_r+0x78>
 8006f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f1c:	07dc      	lsls	r4, r3, #31
 8006f1e:	d50e      	bpl.n	8006f3e <_vfiprintf_r+0x6a>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b01d      	add	sp, #116	; 0x74
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	; (8007118 <_vfiprintf_r+0x244>)
 8006f2c:	429d      	cmp	r5, r3
 8006f2e:	d101      	bne.n	8006f34 <_vfiprintf_r+0x60>
 8006f30:	68b5      	ldr	r5, [r6, #8]
 8006f32:	e7df      	b.n	8006ef4 <_vfiprintf_r+0x20>
 8006f34:	4b79      	ldr	r3, [pc, #484]	; (800711c <_vfiprintf_r+0x248>)
 8006f36:	429d      	cmp	r5, r3
 8006f38:	bf08      	it	eq
 8006f3a:	68f5      	ldreq	r5, [r6, #12]
 8006f3c:	e7da      	b.n	8006ef4 <_vfiprintf_r+0x20>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d4ed      	bmi.n	8006f20 <_vfiprintf_r+0x4c>
 8006f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f46:	f7ff ff18 	bl	8006d7a <__retarget_lock_release_recursive>
 8006f4a:	e7e9      	b.n	8006f20 <_vfiprintf_r+0x4c>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f50:	2320      	movs	r3, #32
 8006f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5a:	2330      	movs	r3, #48	; 0x30
 8006f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007120 <_vfiprintf_r+0x24c>
 8006f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f64:	f04f 0901 	mov.w	r9, #1
 8006f68:	4623      	mov	r3, r4
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f70:	b10a      	cbz	r2, 8006f76 <_vfiprintf_r+0xa2>
 8006f72:	2a25      	cmp	r2, #37	; 0x25
 8006f74:	d1f9      	bne.n	8006f6a <_vfiprintf_r+0x96>
 8006f76:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7a:	d00b      	beq.n	8006f94 <_vfiprintf_r+0xc0>
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ff93 	bl	8006eae <__sfputs_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f000 80aa 	beq.w	80070e2 <_vfiprintf_r+0x20e>
 8006f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f90:	445a      	add	r2, fp
 8006f92:	9209      	str	r2, [sp, #36]	; 0x24
 8006f94:	f89a 3000 	ldrb.w	r3, [sl]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80a2 	beq.w	80070e2 <_vfiprintf_r+0x20e>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa8:	f10a 0a01 	add.w	sl, sl, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb6:	4654      	mov	r4, sl
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4858      	ldr	r0, [pc, #352]	; (8007120 <_vfiprintf_r+0x24c>)
 8006fc0:	f7f9 f90e 	bl	80001e0 <memchr>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	b9d8      	cbnz	r0, 8007000 <_vfiprintf_r+0x12c>
 8006fc8:	06d1      	lsls	r1, r2, #27
 8006fca:	bf44      	itt	mi
 8006fcc:	2320      	movmi	r3, #32
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd2:	0713      	lsls	r3, r2, #28
 8006fd4:	bf44      	itt	mi
 8006fd6:	232b      	movmi	r3, #43	; 0x2b
 8006fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe2:	d015      	beq.n	8007010 <_vfiprintf_r+0x13c>
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f04f 0c0a 	mov.w	ip, #10
 8006fee:	4621      	mov	r1, r4
 8006ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff4:	3b30      	subs	r3, #48	; 0x30
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d94e      	bls.n	8007098 <_vfiprintf_r+0x1c4>
 8006ffa:	b1b0      	cbz	r0, 800702a <_vfiprintf_r+0x156>
 8006ffc:	9207      	str	r2, [sp, #28]
 8006ffe:	e014      	b.n	800702a <_vfiprintf_r+0x156>
 8007000:	eba0 0308 	sub.w	r3, r0, r8
 8007004:	fa09 f303 	lsl.w	r3, r9, r3
 8007008:	4313      	orrs	r3, r2
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	46a2      	mov	sl, r4
 800700e:	e7d2      	b.n	8006fb6 <_vfiprintf_r+0xe2>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfbb      	ittet	lt
 800701c:	425b      	neglt	r3, r3
 800701e:	f042 0202 	orrlt.w	r2, r2, #2
 8007022:	9307      	strge	r3, [sp, #28]
 8007024:	9307      	strlt	r3, [sp, #28]
 8007026:	bfb8      	it	lt
 8007028:	9204      	strlt	r2, [sp, #16]
 800702a:	7823      	ldrb	r3, [r4, #0]
 800702c:	2b2e      	cmp	r3, #46	; 0x2e
 800702e:	d10c      	bne.n	800704a <_vfiprintf_r+0x176>
 8007030:	7863      	ldrb	r3, [r4, #1]
 8007032:	2b2a      	cmp	r3, #42	; 0x2a
 8007034:	d135      	bne.n	80070a2 <_vfiprintf_r+0x1ce>
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	bfb8      	it	lt
 8007042:	f04f 33ff 	movlt.w	r3, #4294967295
 8007046:	3402      	adds	r4, #2
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007130 <_vfiprintf_r+0x25c>
 800704e:	7821      	ldrb	r1, [r4, #0]
 8007050:	2203      	movs	r2, #3
 8007052:	4650      	mov	r0, sl
 8007054:	f7f9 f8c4 	bl	80001e0 <memchr>
 8007058:	b140      	cbz	r0, 800706c <_vfiprintf_r+0x198>
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	eba0 000a 	sub.w	r0, r0, sl
 8007060:	fa03 f000 	lsl.w	r0, r3, r0
 8007064:	9b04      	ldr	r3, [sp, #16]
 8007066:	4303      	orrs	r3, r0
 8007068:	3401      	adds	r4, #1
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007070:	482c      	ldr	r0, [pc, #176]	; (8007124 <_vfiprintf_r+0x250>)
 8007072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007076:	2206      	movs	r2, #6
 8007078:	f7f9 f8b2 	bl	80001e0 <memchr>
 800707c:	2800      	cmp	r0, #0
 800707e:	d03f      	beq.n	8007100 <_vfiprintf_r+0x22c>
 8007080:	4b29      	ldr	r3, [pc, #164]	; (8007128 <_vfiprintf_r+0x254>)
 8007082:	bb1b      	cbnz	r3, 80070cc <_vfiprintf_r+0x1f8>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	3307      	adds	r3, #7
 8007088:	f023 0307 	bic.w	r3, r3, #7
 800708c:	3308      	adds	r3, #8
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007092:	443b      	add	r3, r7
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	e767      	b.n	8006f68 <_vfiprintf_r+0x94>
 8007098:	fb0c 3202 	mla	r2, ip, r2, r3
 800709c:	460c      	mov	r4, r1
 800709e:	2001      	movs	r0, #1
 80070a0:	e7a5      	b.n	8006fee <_vfiprintf_r+0x11a>
 80070a2:	2300      	movs	r3, #0
 80070a4:	3401      	adds	r4, #1
 80070a6:	9305      	str	r3, [sp, #20]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f04f 0c0a 	mov.w	ip, #10
 80070ae:	4620      	mov	r0, r4
 80070b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b4:	3a30      	subs	r2, #48	; 0x30
 80070b6:	2a09      	cmp	r2, #9
 80070b8:	d903      	bls.n	80070c2 <_vfiprintf_r+0x1ee>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0c5      	beq.n	800704a <_vfiprintf_r+0x176>
 80070be:	9105      	str	r1, [sp, #20]
 80070c0:	e7c3      	b.n	800704a <_vfiprintf_r+0x176>
 80070c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c6:	4604      	mov	r4, r0
 80070c8:	2301      	movs	r3, #1
 80070ca:	e7f0      	b.n	80070ae <_vfiprintf_r+0x1da>
 80070cc:	ab03      	add	r3, sp, #12
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4b16      	ldr	r3, [pc, #88]	; (800712c <_vfiprintf_r+0x258>)
 80070d4:	a904      	add	r1, sp, #16
 80070d6:	4630      	mov	r0, r6
 80070d8:	f3af 8000 	nop.w
 80070dc:	4607      	mov	r7, r0
 80070de:	1c78      	adds	r0, r7, #1
 80070e0:	d1d6      	bne.n	8007090 <_vfiprintf_r+0x1bc>
 80070e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e4:	07d9      	lsls	r1, r3, #31
 80070e6:	d405      	bmi.n	80070f4 <_vfiprintf_r+0x220>
 80070e8:	89ab      	ldrh	r3, [r5, #12]
 80070ea:	059a      	lsls	r2, r3, #22
 80070ec:	d402      	bmi.n	80070f4 <_vfiprintf_r+0x220>
 80070ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070f0:	f7ff fe43 	bl	8006d7a <__retarget_lock_release_recursive>
 80070f4:	89ab      	ldrh	r3, [r5, #12]
 80070f6:	065b      	lsls	r3, r3, #25
 80070f8:	f53f af12 	bmi.w	8006f20 <_vfiprintf_r+0x4c>
 80070fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070fe:	e711      	b.n	8006f24 <_vfiprintf_r+0x50>
 8007100:	ab03      	add	r3, sp, #12
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	462a      	mov	r2, r5
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <_vfiprintf_r+0x258>)
 8007108:	a904      	add	r1, sp, #16
 800710a:	4630      	mov	r0, r6
 800710c:	f000 f880 	bl	8007210 <_printf_i>
 8007110:	e7e4      	b.n	80070dc <_vfiprintf_r+0x208>
 8007112:	bf00      	nop
 8007114:	0800776c 	.word	0x0800776c
 8007118:	0800778c 	.word	0x0800778c
 800711c:	0800774c 	.word	0x0800774c
 8007120:	080077ac 	.word	0x080077ac
 8007124:	080077b6 	.word	0x080077b6
 8007128:	00000000 	.word	0x00000000
 800712c:	08006eaf 	.word	0x08006eaf
 8007130:	080077b2 	.word	0x080077b2

08007134 <_printf_common>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	4616      	mov	r6, r2
 800713a:	4699      	mov	r9, r3
 800713c:	688a      	ldr	r2, [r1, #8]
 800713e:	690b      	ldr	r3, [r1, #16]
 8007140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007144:	4293      	cmp	r3, r2
 8007146:	bfb8      	it	lt
 8007148:	4613      	movlt	r3, r2
 800714a:	6033      	str	r3, [r6, #0]
 800714c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007150:	4607      	mov	r7, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b10a      	cbz	r2, 800715a <_printf_common+0x26>
 8007156:	3301      	adds	r3, #1
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	0699      	lsls	r1, r3, #26
 800715e:	bf42      	ittt	mi
 8007160:	6833      	ldrmi	r3, [r6, #0]
 8007162:	3302      	addmi	r3, #2
 8007164:	6033      	strmi	r3, [r6, #0]
 8007166:	6825      	ldr	r5, [r4, #0]
 8007168:	f015 0506 	ands.w	r5, r5, #6
 800716c:	d106      	bne.n	800717c <_printf_common+0x48>
 800716e:	f104 0a19 	add.w	sl, r4, #25
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	6832      	ldr	r2, [r6, #0]
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	42ab      	cmp	r3, r5
 800717a:	dc26      	bgt.n	80071ca <_printf_common+0x96>
 800717c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007180:	1e13      	subs	r3, r2, #0
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	bf18      	it	ne
 8007186:	2301      	movne	r3, #1
 8007188:	0692      	lsls	r2, r2, #26
 800718a:	d42b      	bmi.n	80071e4 <_printf_common+0xb0>
 800718c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007190:	4649      	mov	r1, r9
 8007192:	4638      	mov	r0, r7
 8007194:	47c0      	blx	r8
 8007196:	3001      	adds	r0, #1
 8007198:	d01e      	beq.n	80071d8 <_printf_common+0xa4>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	68e5      	ldr	r5, [r4, #12]
 800719e:	6832      	ldr	r2, [r6, #0]
 80071a0:	f003 0306 	and.w	r3, r3, #6
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	bf08      	it	eq
 80071a8:	1aad      	subeq	r5, r5, r2
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	6922      	ldr	r2, [r4, #16]
 80071ae:	bf0c      	ite	eq
 80071b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b4:	2500      	movne	r5, #0
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bfc4      	itt	gt
 80071ba:	1a9b      	subgt	r3, r3, r2
 80071bc:	18ed      	addgt	r5, r5, r3
 80071be:	2600      	movs	r6, #0
 80071c0:	341a      	adds	r4, #26
 80071c2:	42b5      	cmp	r5, r6
 80071c4:	d11a      	bne.n	80071fc <_printf_common+0xc8>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e008      	b.n	80071dc <_printf_common+0xa8>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4649      	mov	r1, r9
 80071d0:	4638      	mov	r0, r7
 80071d2:	47c0      	blx	r8
 80071d4:	3001      	adds	r0, #1
 80071d6:	d103      	bne.n	80071e0 <_printf_common+0xac>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e0:	3501      	adds	r5, #1
 80071e2:	e7c6      	b.n	8007172 <_printf_common+0x3e>
 80071e4:	18e1      	adds	r1, r4, r3
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	2030      	movs	r0, #48	; 0x30
 80071ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ee:	4422      	add	r2, r4
 80071f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071f8:	3302      	adds	r3, #2
 80071fa:	e7c7      	b.n	800718c <_printf_common+0x58>
 80071fc:	2301      	movs	r3, #1
 80071fe:	4622      	mov	r2, r4
 8007200:	4649      	mov	r1, r9
 8007202:	4638      	mov	r0, r7
 8007204:	47c0      	blx	r8
 8007206:	3001      	adds	r0, #1
 8007208:	d0e6      	beq.n	80071d8 <_printf_common+0xa4>
 800720a:	3601      	adds	r6, #1
 800720c:	e7d9      	b.n	80071c2 <_printf_common+0x8e>
	...

08007210 <_printf_i>:
 8007210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	460c      	mov	r4, r1
 8007216:	4691      	mov	r9, r2
 8007218:	7e27      	ldrb	r7, [r4, #24]
 800721a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800721c:	2f78      	cmp	r7, #120	; 0x78
 800721e:	4680      	mov	r8, r0
 8007220:	469a      	mov	sl, r3
 8007222:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007226:	d807      	bhi.n	8007238 <_printf_i+0x28>
 8007228:	2f62      	cmp	r7, #98	; 0x62
 800722a:	d80a      	bhi.n	8007242 <_printf_i+0x32>
 800722c:	2f00      	cmp	r7, #0
 800722e:	f000 80d8 	beq.w	80073e2 <_printf_i+0x1d2>
 8007232:	2f58      	cmp	r7, #88	; 0x58
 8007234:	f000 80a3 	beq.w	800737e <_printf_i+0x16e>
 8007238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800723c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007240:	e03a      	b.n	80072b8 <_printf_i+0xa8>
 8007242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007246:	2b15      	cmp	r3, #21
 8007248:	d8f6      	bhi.n	8007238 <_printf_i+0x28>
 800724a:	a001      	add	r0, pc, #4	; (adr r0, 8007250 <_printf_i+0x40>)
 800724c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007250:	080072a9 	.word	0x080072a9
 8007254:	080072bd 	.word	0x080072bd
 8007258:	08007239 	.word	0x08007239
 800725c:	08007239 	.word	0x08007239
 8007260:	08007239 	.word	0x08007239
 8007264:	08007239 	.word	0x08007239
 8007268:	080072bd 	.word	0x080072bd
 800726c:	08007239 	.word	0x08007239
 8007270:	08007239 	.word	0x08007239
 8007274:	08007239 	.word	0x08007239
 8007278:	08007239 	.word	0x08007239
 800727c:	080073c9 	.word	0x080073c9
 8007280:	080072ed 	.word	0x080072ed
 8007284:	080073ab 	.word	0x080073ab
 8007288:	08007239 	.word	0x08007239
 800728c:	08007239 	.word	0x08007239
 8007290:	080073eb 	.word	0x080073eb
 8007294:	08007239 	.word	0x08007239
 8007298:	080072ed 	.word	0x080072ed
 800729c:	08007239 	.word	0x08007239
 80072a0:	08007239 	.word	0x08007239
 80072a4:	080073b3 	.word	0x080073b3
 80072a8:	680b      	ldr	r3, [r1, #0]
 80072aa:	1d1a      	adds	r2, r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	600a      	str	r2, [r1, #0]
 80072b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0a3      	b.n	8007404 <_printf_i+0x1f4>
 80072bc:	6825      	ldr	r5, [r4, #0]
 80072be:	6808      	ldr	r0, [r1, #0]
 80072c0:	062e      	lsls	r6, r5, #24
 80072c2:	f100 0304 	add.w	r3, r0, #4
 80072c6:	d50a      	bpl.n	80072de <_printf_i+0xce>
 80072c8:	6805      	ldr	r5, [r0, #0]
 80072ca:	600b      	str	r3, [r1, #0]
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	da03      	bge.n	80072d8 <_printf_i+0xc8>
 80072d0:	232d      	movs	r3, #45	; 0x2d
 80072d2:	426d      	negs	r5, r5
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d8:	485e      	ldr	r0, [pc, #376]	; (8007454 <_printf_i+0x244>)
 80072da:	230a      	movs	r3, #10
 80072dc:	e019      	b.n	8007312 <_printf_i+0x102>
 80072de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80072e2:	6805      	ldr	r5, [r0, #0]
 80072e4:	600b      	str	r3, [r1, #0]
 80072e6:	bf18      	it	ne
 80072e8:	b22d      	sxthne	r5, r5
 80072ea:	e7ef      	b.n	80072cc <_printf_i+0xbc>
 80072ec:	680b      	ldr	r3, [r1, #0]
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	1d18      	adds	r0, r3, #4
 80072f2:	6008      	str	r0, [r1, #0]
 80072f4:	0628      	lsls	r0, r5, #24
 80072f6:	d501      	bpl.n	80072fc <_printf_i+0xec>
 80072f8:	681d      	ldr	r5, [r3, #0]
 80072fa:	e002      	b.n	8007302 <_printf_i+0xf2>
 80072fc:	0669      	lsls	r1, r5, #25
 80072fe:	d5fb      	bpl.n	80072f8 <_printf_i+0xe8>
 8007300:	881d      	ldrh	r5, [r3, #0]
 8007302:	4854      	ldr	r0, [pc, #336]	; (8007454 <_printf_i+0x244>)
 8007304:	2f6f      	cmp	r7, #111	; 0x6f
 8007306:	bf0c      	ite	eq
 8007308:	2308      	moveq	r3, #8
 800730a:	230a      	movne	r3, #10
 800730c:	2100      	movs	r1, #0
 800730e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007312:	6866      	ldr	r6, [r4, #4]
 8007314:	60a6      	str	r6, [r4, #8]
 8007316:	2e00      	cmp	r6, #0
 8007318:	bfa2      	ittt	ge
 800731a:	6821      	ldrge	r1, [r4, #0]
 800731c:	f021 0104 	bicge.w	r1, r1, #4
 8007320:	6021      	strge	r1, [r4, #0]
 8007322:	b90d      	cbnz	r5, 8007328 <_printf_i+0x118>
 8007324:	2e00      	cmp	r6, #0
 8007326:	d04d      	beq.n	80073c4 <_printf_i+0x1b4>
 8007328:	4616      	mov	r6, r2
 800732a:	fbb5 f1f3 	udiv	r1, r5, r3
 800732e:	fb03 5711 	mls	r7, r3, r1, r5
 8007332:	5dc7      	ldrb	r7, [r0, r7]
 8007334:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007338:	462f      	mov	r7, r5
 800733a:	42bb      	cmp	r3, r7
 800733c:	460d      	mov	r5, r1
 800733e:	d9f4      	bls.n	800732a <_printf_i+0x11a>
 8007340:	2b08      	cmp	r3, #8
 8007342:	d10b      	bne.n	800735c <_printf_i+0x14c>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	07df      	lsls	r7, r3, #31
 8007348:	d508      	bpl.n	800735c <_printf_i+0x14c>
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	6861      	ldr	r1, [r4, #4]
 800734e:	4299      	cmp	r1, r3
 8007350:	bfde      	ittt	le
 8007352:	2330      	movle	r3, #48	; 0x30
 8007354:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007358:	f106 36ff 	addle.w	r6, r6, #4294967295
 800735c:	1b92      	subs	r2, r2, r6
 800735e:	6122      	str	r2, [r4, #16]
 8007360:	f8cd a000 	str.w	sl, [sp]
 8007364:	464b      	mov	r3, r9
 8007366:	aa03      	add	r2, sp, #12
 8007368:	4621      	mov	r1, r4
 800736a:	4640      	mov	r0, r8
 800736c:	f7ff fee2 	bl	8007134 <_printf_common>
 8007370:	3001      	adds	r0, #1
 8007372:	d14c      	bne.n	800740e <_printf_i+0x1fe>
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	b004      	add	sp, #16
 800737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737e:	4835      	ldr	r0, [pc, #212]	; (8007454 <_printf_i+0x244>)
 8007380:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	680e      	ldr	r6, [r1, #0]
 8007388:	061f      	lsls	r7, r3, #24
 800738a:	f856 5b04 	ldr.w	r5, [r6], #4
 800738e:	600e      	str	r6, [r1, #0]
 8007390:	d514      	bpl.n	80073bc <_printf_i+0x1ac>
 8007392:	07d9      	lsls	r1, r3, #31
 8007394:	bf44      	itt	mi
 8007396:	f043 0320 	orrmi.w	r3, r3, #32
 800739a:	6023      	strmi	r3, [r4, #0]
 800739c:	b91d      	cbnz	r5, 80073a6 <_printf_i+0x196>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	f023 0320 	bic.w	r3, r3, #32
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	2310      	movs	r3, #16
 80073a8:	e7b0      	b.n	800730c <_printf_i+0xfc>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	f043 0320 	orr.w	r3, r3, #32
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	2378      	movs	r3, #120	; 0x78
 80073b4:	4828      	ldr	r0, [pc, #160]	; (8007458 <_printf_i+0x248>)
 80073b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ba:	e7e3      	b.n	8007384 <_printf_i+0x174>
 80073bc:	065e      	lsls	r6, r3, #25
 80073be:	bf48      	it	mi
 80073c0:	b2ad      	uxthmi	r5, r5
 80073c2:	e7e6      	b.n	8007392 <_printf_i+0x182>
 80073c4:	4616      	mov	r6, r2
 80073c6:	e7bb      	b.n	8007340 <_printf_i+0x130>
 80073c8:	680b      	ldr	r3, [r1, #0]
 80073ca:	6826      	ldr	r6, [r4, #0]
 80073cc:	6960      	ldr	r0, [r4, #20]
 80073ce:	1d1d      	adds	r5, r3, #4
 80073d0:	600d      	str	r5, [r1, #0]
 80073d2:	0635      	lsls	r5, r6, #24
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	d501      	bpl.n	80073dc <_printf_i+0x1cc>
 80073d8:	6018      	str	r0, [r3, #0]
 80073da:	e002      	b.n	80073e2 <_printf_i+0x1d2>
 80073dc:	0671      	lsls	r1, r6, #25
 80073de:	d5fb      	bpl.n	80073d8 <_printf_i+0x1c8>
 80073e0:	8018      	strh	r0, [r3, #0]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	4616      	mov	r6, r2
 80073e8:	e7ba      	b.n	8007360 <_printf_i+0x150>
 80073ea:	680b      	ldr	r3, [r1, #0]
 80073ec:	1d1a      	adds	r2, r3, #4
 80073ee:	600a      	str	r2, [r1, #0]
 80073f0:	681e      	ldr	r6, [r3, #0]
 80073f2:	6862      	ldr	r2, [r4, #4]
 80073f4:	2100      	movs	r1, #0
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7f8 fef2 	bl	80001e0 <memchr>
 80073fc:	b108      	cbz	r0, 8007402 <_printf_i+0x1f2>
 80073fe:	1b80      	subs	r0, r0, r6
 8007400:	6060      	str	r0, [r4, #4]
 8007402:	6863      	ldr	r3, [r4, #4]
 8007404:	6123      	str	r3, [r4, #16]
 8007406:	2300      	movs	r3, #0
 8007408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800740c:	e7a8      	b.n	8007360 <_printf_i+0x150>
 800740e:	6923      	ldr	r3, [r4, #16]
 8007410:	4632      	mov	r2, r6
 8007412:	4649      	mov	r1, r9
 8007414:	4640      	mov	r0, r8
 8007416:	47d0      	blx	sl
 8007418:	3001      	adds	r0, #1
 800741a:	d0ab      	beq.n	8007374 <_printf_i+0x164>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	079b      	lsls	r3, r3, #30
 8007420:	d413      	bmi.n	800744a <_printf_i+0x23a>
 8007422:	68e0      	ldr	r0, [r4, #12]
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	4298      	cmp	r0, r3
 8007428:	bfb8      	it	lt
 800742a:	4618      	movlt	r0, r3
 800742c:	e7a4      	b.n	8007378 <_printf_i+0x168>
 800742e:	2301      	movs	r3, #1
 8007430:	4632      	mov	r2, r6
 8007432:	4649      	mov	r1, r9
 8007434:	4640      	mov	r0, r8
 8007436:	47d0      	blx	sl
 8007438:	3001      	adds	r0, #1
 800743a:	d09b      	beq.n	8007374 <_printf_i+0x164>
 800743c:	3501      	adds	r5, #1
 800743e:	68e3      	ldr	r3, [r4, #12]
 8007440:	9903      	ldr	r1, [sp, #12]
 8007442:	1a5b      	subs	r3, r3, r1
 8007444:	42ab      	cmp	r3, r5
 8007446:	dcf2      	bgt.n	800742e <_printf_i+0x21e>
 8007448:	e7eb      	b.n	8007422 <_printf_i+0x212>
 800744a:	2500      	movs	r5, #0
 800744c:	f104 0619 	add.w	r6, r4, #25
 8007450:	e7f5      	b.n	800743e <_printf_i+0x22e>
 8007452:	bf00      	nop
 8007454:	080077bd 	.word	0x080077bd
 8007458:	080077ce 	.word	0x080077ce

0800745c <_read_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d07      	ldr	r5, [pc, #28]	; (800747c <_read_r+0x20>)
 8007460:	4604      	mov	r4, r0
 8007462:	4608      	mov	r0, r1
 8007464:	4611      	mov	r1, r2
 8007466:	2200      	movs	r2, #0
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	f7fb fbd2 	bl	8002c14 <_read>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_read_r+0x1e>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_read_r+0x1e>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20000580 	.word	0x20000580

08007480 <_fstat_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4d07      	ldr	r5, [pc, #28]	; (80074a0 <_fstat_r+0x20>)
 8007484:	2300      	movs	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f7fb fbea 	bl	8002c66 <_fstat>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d102      	bne.n	800749c <_fstat_r+0x1c>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b103      	cbz	r3, 800749c <_fstat_r+0x1c>
 800749a:	6023      	str	r3, [r4, #0]
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	bf00      	nop
 80074a0:	20000580 	.word	0x20000580

080074a4 <_isatty_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_isatty_r+0x1c>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	f7fb fbe9 	bl	8002c86 <_isatty>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_isatty_r+0x1a>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_isatty_r+0x1a>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000580 	.word	0x20000580

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
