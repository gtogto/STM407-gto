
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086cc  080086cc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d4  080086d4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080086dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200000a0  0800877c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800877c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015051  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7e  00000000  00000000  00035121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000380a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b5f  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f41  00000000  00000000  0003f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7450  00000000  00000000  00052ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b4  00000000  00000000  0012a49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800837c 	.word	0x0800837c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800837c 	.word	0x0800837c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4798      	blx	r3
   WIZCHIP.CS._select();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0a12      	lsrs	r2, r2, #8
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4610      	mov	r0, r2
 80005ba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <WIZCHIP_READ+0x58>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <WIZCHIP_READ+0x58>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <WIZCHIP_READ+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	200f      	movs	r0, #15
 80005ee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <WIZCHIP_READ+0x58>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0a12      	lsrs	r2, r2, #8
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <WIZCHIP_READ+0x58>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4610      	mov	r0, r2
 8000608:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <WIZCHIP_READ+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <WIZCHIP_READ+0x58>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <WIZCHIP_READ+0x58>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4798      	blx	r3
   return ret;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	e02a      	b.n	80006aa <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	20f0      	movs	r0, #240	; 0xf0
 8000660:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b291      	uxth	r1, r2
 800066a:	8afa      	ldrh	r2, [r7, #22]
 800066c:	440a      	add	r2, r1
 800066e:	b292      	uxth	r2, r2
 8000670:	0a12      	lsrs	r2, r2, #8
 8000672:	b292      	uxth	r2, r2
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440a      	add	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	440a      	add	r2, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d0      	bcc.n	8000654 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5200 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]
 80006ee:	e02a      	b.n	8000746 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	200f      	movs	r0, #15
 80006fc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b291      	uxth	r1, r2
 8000706:	8afa      	ldrh	r2, [r7, #22]
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	0a12      	lsrs	r2, r2, #8
 800070e:	b292      	uxth	r2, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	8afa      	ldrh	r2, [r7, #22]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440a      	add	r2, r1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	8afa      	ldrh	r2, [r7, #22]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	188c      	adds	r4, r1, r2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
 8000746:	8afa      	ldrh	r2, [r7, #22]
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3d0      	bcc.n	80006f0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	2300      	movs	r3, #0
 8000778:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3304      	adds	r3, #4
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	3320      	adds	r3, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <WIZCHIP_READ>
 8000788:	4603      	mov	r3, r0
 800078a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b29c      	uxth	r4, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3304      	adds	r3, #4
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	3321      	adds	r3, #33	; 0x21
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff1a 	bl	80005d4 <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4423      	add	r3, r4
 80007a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3304      	adds	r3, #4
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	3320      	adds	r3, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0c 	bl	80005d4 <WIZCHIP_READ>
 80007bc:	4603      	mov	r3, r0
 80007be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3304      	adds	r3, #4
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	3321      	adds	r3, #33	; 0x21
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff00 	bl	80005d4 <WIZCHIP_READ>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4423      	add	r3, r4
 80007da:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d1ca      	bne.n	800077a <getSn_TX_FSR+0x12>
   return val;
 80007e4:	89fb      	ldrh	r3, [r7, #14]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80007ee:	b590      	push	{r4, r7, lr}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3304      	adds	r3, #4
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	3326      	adds	r3, #38	; 0x26
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <WIZCHIP_READ>
 800080e:	4603      	mov	r3, r0
 8000810:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b29c      	uxth	r4, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3304      	adds	r3, #4
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	3327      	adds	r3, #39	; 0x27
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <WIZCHIP_READ>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4423      	add	r3, r4
 800082c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d016      	beq.n	8000862 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3304      	adds	r3, #4
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	3326      	adds	r3, #38	; 0x26
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fec9 	bl	80005d4 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	3327      	adds	r3, #39	; 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff febd 	bl	80005d4 <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d1ca      	bne.n	8000800 <getSn_RX_RSR+0x12>
   return val;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <getSn_TxBASE>:

   return rxbase;
}

uint32_t getSn_TxBASE(uint8_t sn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 800087e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000882:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e020      	b.n	80008cc <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 800088a:	201b      	movs	r0, #27
 800088c:	f7ff fea2 	bl	80005d4 <WIZCHIP_READ>
 8000890:	4603      	mov	r3, r0
 8000892:	4619      	mov	r1, r3
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	ea01 0203 	and.w	r2, r1, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd9      	blt.n	800088a <getSn_TxBASE+0x16>
   return txbase;
 80008d6:	68bb      	ldr	r3, [r7, #8]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3304      	adds	r3, #4
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	3324      	adds	r3, #36	; 0x24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe6b 	bl	80005d4 <WIZCHIP_READ>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29b      	uxth	r3, r3
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b29c      	uxth	r4, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	3304      	adds	r3, #4
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	3325      	adds	r3, #37	; 0x25
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe60 	bl	80005d4 <WIZCHIP_READ>
 8000914:	4603      	mov	r3, r0
 8000916:	b29b      	uxth	r3, r3
 8000918:	4423      	add	r3, r4
 800091a:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 800091c:	201b      	movs	r0, #27
 800091e:	f7ff fe59 	bl	80005d4 <WIZCHIP_READ>
 8000922:	4603      	mov	r3, r0
 8000924:	4619      	mov	r1, r3
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	ea01 0203 	and.w	r2, r1, r3
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa42 f303 	asr.w	r3, r2, r3
 800093c:	2201      	movs	r2, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	b29b      	uxth	r3, r3
 8000944:	029b      	lsls	r3, r3, #10
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21a      	sxth	r2, r3
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	4013      	ands	r3, r2
 8000954:	b21b      	sxth	r3, r3
 8000956:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff8a 	bl	8000874 <getSn_TxBASE>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	89bb      	ldrh	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 800096a:	89ba      	ldrh	r2, [r7, #12]
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	18d4      	adds	r4, r2, r3
 8000970:	201b      	movs	r0, #27
 8000972:	f7ff fe2f 	bl	80005d4 <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	4619      	mov	r1, r3
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	ea01 0203 	and.w	r2, r1, r3
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa42 f303 	asr.w	r3, r2, r3
 8000990:	2201      	movs	r2, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	029b      	lsls	r3, r3, #10
 800099a:	429c      	cmp	r4, r3
 800099c:	dd33      	ble.n	8000a06 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800099e:	201b      	movs	r0, #27
 80009a0:	f7ff fe18 	bl	80005d4 <WIZCHIP_READ>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4619      	mov	r1, r3
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	ea01 0203 	and.w	r2, r1, r3
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa42 f303 	asr.w	r3, r2, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	029b      	lsls	r3, r3, #10
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80009d0:	897b      	ldrh	r3, [r7, #10]
 80009d2:	893a      	ldrh	r2, [r7, #8]
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe2a 	bl	8000630 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 80009dc:	893b      	ldrh	r3, [r7, #8]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
    size = len - size;
 80009e4:	88ba      	ldrh	r2, [r7, #4]
 80009e6:	893b      	ldrh	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff40 	bl	8000874 <getSn_TxBASE>
 80009f4:	4603      	mov	r3, r0
 80009f6:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	893a      	ldrh	r2, [r7, #8]
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe16 	bl	8000630 <WIZCHIP_WRITE_BUF>
 8000a04:	e005      	b.n	8000a12 <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8000a06:	897b      	ldrh	r3, [r7, #10]
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe0f 	bl	8000630 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 8000a12:	89fa      	ldrh	r2, [r7, #14]
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	3324      	adds	r3, #36	; 0x24
 8000a22:	461a      	mov	r2, r3
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4610      	mov	r0, r2
 8000a30:	f7ff fda2 	bl	8000578 <WIZCHIP_WRITE>
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	3304      	adds	r3, #4
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	3325      	adds	r3, #37	; 0x25
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	4610      	mov	r0, r2
 8000a46:	f7ff fd97 	bl	8000578 <WIZCHIP_WRITE>
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
	...

08000a54 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4623      	mov	r3, r4
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	4603      	mov	r3, r0
 8000a68:	71bb      	strb	r3, [r7, #6]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d902      	bls.n	8000a7e <socket+0x2a>
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	e0e2      	b.n	8000c44 <socket+0x1f0>
	switch(protocol)
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d819      	bhi.n	8000aba <socket+0x66>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <socket+0x38>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000aa1 	.word	0x08000aa1
 8000a90:	08000ac1 	.word	0x08000ac1
 8000a94:	08000ac1 	.word	0x08000ac1
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	08000ac1 	.word	0x08000ac1
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	200f      	movs	r0, #15
 8000aaa:	f7ff fe0f 	bl	80006cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <socket+0x6c>
 8000ab4:	f06f 0302 	mvn.w	r3, #2
 8000ab8:	e0c4      	b.n	8000c44 <socket+0x1f0>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000aba:	f06f 0304 	mvn.w	r3, #4
 8000abe:	e0c1      	b.n	8000c44 <socket+0x1f0>
         break;
 8000ac0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <socket+0x7e>
 8000acc:	f06f 0305 	mvn.w	r3, #5
 8000ad0:	e0b8      	b.n	8000c44 <socket+0x1f0>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d019      	beq.n	8000b0c <socket+0xb8>
	{
   	switch(protocol)
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d002      	beq.n	8000ae4 <socket+0x90>
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d008      	beq.n	8000af4 <socket+0xa0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000ae2:	e018      	b.n	8000b16 <socket+0xc2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d110      	bne.n	8000b10 <socket+0xbc>
 8000aee:	f06f 0305 	mvn.w	r3, #5
 8000af2:	e0a7      	b.n	8000c44 <socket+0x1f0>
   	      if(flag & SF_IGMP_VER2)
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00a      	beq.n	8000b14 <socket+0xc0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db06      	blt.n	8000b14 <socket+0xc0>
 8000b06:	f06f 0305 	mvn.w	r3, #5
 8000b0a:	e09b      	b.n	8000c44 <socket+0x1f0>
   	}
   }
 8000b0c:	bf00      	nop
 8000b0e:	e002      	b.n	8000b16 <socket+0xc2>
   	      break;
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <socket+0xc2>
   	      break;
 8000b14:	bf00      	nop
	close(sn);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f8a1 	bl	8000c60 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3304      	adds	r3, #4
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b2a:	f023 030f 	bic.w	r3, r3, #15
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f7ff fd1c 	bl	8000578 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d110      	bne.n	8000b68 <socket+0x114>
	{
	   port = sock_any_port++;
 8000b46:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <socket+0x1f8>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	b291      	uxth	r1, r2
 8000b4e:	4a3f      	ldr	r2, [pc, #252]	; (8000c4c <socket+0x1f8>)
 8000b50:	8011      	strh	r1, [r2, #0]
 8000b52:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000b54:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <socket+0x1f8>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d103      	bne.n	8000b68 <socket+0x114>
 8000b60:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <socket+0x1f8>)
 8000b62:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000b66:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	3304      	adds	r3, #4
 8000b70:	461a      	mov	r2, r3
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	f7ff fcfb 	bl	8000578 <WIZCHIP_WRITE>
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3304      	adds	r3, #4
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	3305      	adds	r3, #5
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f7ff fcf0 	bl	8000578 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fce8 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ba8:	bf00      	nop
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3304      	adds	r3, #4
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd0e 	bl	80005d4 <WIZCHIP_READ>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f5      	bne.n	8000baa <socket+0x156>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <socket+0x1fc>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <socket+0x1fc>)
 8000bda:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	f003 0201 	and.w	r2, r3, #1
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <socket+0x1fc>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <socket+0x1fc>)
 8000bf8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <socket+0x200>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <socket+0x200>)
 8000c16:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <socket+0x204>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <socket+0x208>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000c2a:	bf00      	nop
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	3303      	adds	r3, #3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fccd 	bl	80005d4 <WIZCHIP_READ>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f5      	beq.n	8000c2c <socket+0x1d8>
   return (int8_t)sn;
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	200000bc 	.word	0x200000bc
 8000c54:	200000be 	.word	0x200000be
 8000c58:	200000c0 	.word	0x200000c0
 8000c5c:	200000c8 	.word	0x200000c8

08000c60 <close>:

int8_t close(uint8_t sn)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d902      	bls.n	8000c76 <close+0x16>
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e04d      	b.n	8000d12 <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc79 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000c86:	bf00      	nop
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc9f 	bl	80005d4 <WIZCHIP_READ>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f5      	bne.n	8000c88 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	21ff      	movs	r1, #255	; 0xff
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc66 	bl	8000578 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <close+0xbc>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <close+0xbc>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <close+0xc0>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <close+0xc0>)
 8000ce6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <close+0xc4>)
 8000cec:	2100      	movs	r1, #0
 8000cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <close+0xc8>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000cfa:	bf00      	nop
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	3303      	adds	r3, #3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc65 	bl	80005d4 <WIZCHIP_READ>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f5      	bne.n	8000cfc <close+0x9c>
	return SOCK_OK;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	200000be 	.word	0x200000be
 8000d24:	200000c0 	.word	0x200000c0
 8000d28:	200000c8 	.word	0x200000c8

08000d2c <listen>:

int8_t listen(uint8_t sn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d902      	bls.n	8000d42 <listen+0x16>
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	e040      	b.n	8000dc4 <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3304      	adds	r3, #4
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fc43 	bl	80005d4 <WIZCHIP_READ>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d002      	beq.n	8000d5e <listen+0x32>
 8000d58:	f06f 0304 	mvn.w	r3, #4
 8000d5c:	e032      	b.n	8000dc4 <listen+0x98>
	CHECK_SOCKINIT();
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	3304      	adds	r3, #4
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	3303      	adds	r3, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc34 	bl	80005d4 <WIZCHIP_READ>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b13      	cmp	r3, #19
 8000d70:	d002      	beq.n	8000d78 <listen+0x4c>
 8000d72:	f06f 0302 	mvn.w	r3, #2
 8000d76:	e025      	b.n	8000dc4 <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	3301      	adds	r3, #1
 8000d80:	2102      	movs	r1, #2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fbf8 	bl	8000578 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000d88:	bf00      	nop
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	3301      	adds	r3, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fc1e 	bl	80005d4 <WIZCHIP_READ>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f5      	bne.n	8000d8a <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000d9e:	e006      	b.n	8000dae <listen+0x82>
   {
         close(sn);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff5c 	bl	8000c60 <close>
         return SOCKERR_SOCKCLOSED;
 8000da8:	f06f 0303 	mvn.w	r3, #3
 8000dac:	e00a      	b.n	8000dc4 <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3304      	adds	r3, #4
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	3303      	adds	r3, #3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fc0c 	bl	80005d4 <WIZCHIP_READ>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b14      	cmp	r3, #20
 8000dc0:	d1ee      	bne.n	8000da0 <listen+0x74>
   }
   return SOCK_OK;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d902      	bls.n	8000de2 <disconnect+0x16>
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	e059      	b.n	8000e96 <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	3304      	adds	r3, #4
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fbf3 	bl	80005d4 <WIZCHIP_READ>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d002      	beq.n	8000dfe <disconnect+0x32>
 8000df8:	f06f 0304 	mvn.w	r3, #4
 8000dfc:	e04b      	b.n	8000e96 <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3304      	adds	r3, #4
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	3301      	adds	r3, #1
 8000e06:	2108      	movs	r1, #8
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fbb5 	bl	8000578 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000e0e:	bf00      	nop
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	3304      	adds	r3, #4
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	3301      	adds	r3, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbdb 	bl	80005d4 <WIZCHIP_READ>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f5      	bne.n	8000e10 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2201      	movs	r2, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <disconnect+0xd4>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <disconnect+0xd4>)
 8000e40:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <disconnect+0xd8>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	fa42 f303 	asr.w	r3, r2, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d014      	beq.n	8000e80 <disconnect+0xb4>
 8000e56:	2300      	movs	r3, #0
 8000e58:	e01d      	b.n	8000e96 <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	3302      	adds	r3, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fbb6 	bl	80005d4 <WIZCHIP_READ>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <disconnect+0xb4>
	   {
	      close(sn);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fef3 	bl	8000c60 <close>
	      return SOCKERR_TIMEOUT;
 8000e7a:	f06f 030c 	mvn.w	r3, #12
 8000e7e:	e00a      	b.n	8000e96 <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3304      	adds	r3, #4
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	3303      	adds	r3, #3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fba3 	bl	80005d4 <WIZCHIP_READ>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e2      	bne.n	8000e5a <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000be 	.word	0x200000be
 8000ea4:	200000bc 	.word	0x200000bc

08000ea8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d902      	bls.n	8000ecc <send+0x24>
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e0d8      	b.n	800107e <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb7e 	bl	80005d4 <WIZCHIP_READ>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <send+0x40>
 8000ee2:	f06f 0304 	mvn.w	r3, #4
 8000ee6:	e0ca      	b.n	800107e <send+0x1d6>
   CHECK_SOCKDATA();
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <send+0x4c>
 8000eee:	f06f 030d 	mvn.w	r3, #13
 8000ef2:	e0c4      	b.n	800107e <send+0x1d6>
   tmp = getSn_SR(sn);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	3303      	adds	r3, #3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb69 	bl	80005d4 <WIZCHIP_READ>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b17      	cmp	r3, #23
 8000f0a:	d005      	beq.n	8000f18 <send+0x70>
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b1c      	cmp	r3, #28
 8000f10:	d002      	beq.n	8000f18 <send+0x70>
 8000f12:	f06f 0306 	mvn.w	r3, #6
 8000f16:	e0b2      	b.n	800107e <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 8000f18:	4b5b      	ldr	r3, [pc, #364]	; (8001088 <send+0x1e0>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d033      	beq.n	8000f94 <send+0xec>
   {
      tmp = getSn_IR(sn);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	3302      	adds	r3, #2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb4d 	bl	80005d4 <WIZCHIP_READ>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d017      	beq.n	8000f78 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	3302      	adds	r3, #2
 8000f50:	2110      	movs	r1, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb10 	bl	8000578 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b48      	ldr	r3, [pc, #288]	; (8001088 <send+0x1e0>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <send+0x1e0>)
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	e00d      	b.n	8000f94 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <send+0xe8>
      {
         close(sn);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fe6b 	bl	8000c60 <close>
         return SOCKERR_TIMEOUT;
 8000f8a:	f06f 030c 	mvn.w	r3, #12
 8000f8e:	e076      	b.n	800107e <send+0x1d6>
      }
      else return SOCK_BUSY;
 8000f90:	2300      	movs	r3, #0
 8000f92:	e074      	b.n	800107e <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8000f94:	201b      	movs	r0, #27
 8000f96:	f7ff fb1d 	bl	80005d4 <WIZCHIP_READ>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	ea01 0203 	and.w	r2, r1, r3
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa42 f303 	asr.w	r3, r2, r3
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	89bb      	ldrh	r3, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d901      	bls.n	8000fcc <send+0x124>
 8000fc8:	89bb      	ldrh	r3, [r7, #12]
 8000fca:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fbca 	bl	8000768 <getSn_TX_FSR>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	3303      	adds	r3, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff faf7 	bl	80005d4 <WIZCHIP_READ>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b17      	cmp	r3, #23
 8000fee:	d009      	beq.n	8001004 <send+0x15c>
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b1c      	cmp	r3, #28
 8000ff4:	d006      	beq.n	8001004 <send+0x15c>
      {
         close(sn);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe31 	bl	8000c60 <close>
         return SOCKERR_SOCKSTATUS;
 8000ffe:	f06f 0306 	mvn.w	r3, #6
 8001002:	e03c      	b.n	800107e <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <send+0x1e4>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	fa42 f303 	asr.w	r3, r2, r3
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <send+0x17c>
 8001018:	88ba      	ldrh	r2, [r7, #4]
 800101a:	89bb      	ldrh	r3, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d901      	bls.n	8001024 <send+0x17c>
 8001020:	2300      	movs	r3, #0
 8001022:	e02c      	b.n	800107e <send+0x1d6>
      if(len <= freesize) break;
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d900      	bls.n	800102e <send+0x186>
      freesize = getSn_TX_FSR(sn);
 800102c:	e7ce      	b.n	8000fcc <send+0x124>
      if(len <= freesize) break;
 800102e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001030:	88ba      	ldrh	r2, [r7, #4]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	6839      	ldr	r1, [r7, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fc52 	bl	80008e0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3304      	adds	r3, #4
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	3301      	adds	r3, #1
 8001044:	2120      	movs	r1, #32
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa96 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800104c:	bf00      	nop
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	3304      	adds	r3, #4
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	3301      	adds	r3, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fabc 	bl	80005d4 <WIZCHIP_READ>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f5      	bne.n	800104e <send+0x1a6>
   sock_is_sending |= (1 << sn);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2201      	movs	r2, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <send+0x1e0>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <send+0x1e0>)
 800107a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800107c:	88bb      	ldrh	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000be 	.word	0x200000be
 800108c:	200000bc 	.word	0x200000bc

08001090 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	460b      	mov	r3, r1
 800109e:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d902      	bls.n	80010ac <getsockopt+0x1c>
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e0c5      	b.n	8001238 <getsockopt+0x1a8>
   switch(sotype)
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	f200 80be 	bhi.w	8001230 <getsockopt+0x1a0>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <getsockopt+0x2c>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010e9 	.word	0x080010e9
 80010c0:	08001103 	.word	0x08001103
 80010c4:	0800111b 	.word	0x0800111b
 80010c8:	08001133 	.word	0x08001133
 80010cc:	08001159 	.word	0x08001159
 80010d0:	0800116d 	.word	0x0800116d
 80010d4:	0800119f 	.word	0x0800119f
 80010d8:	080011b1 	.word	0x080011b1
 80010dc:	080011c3 	.word	0x080011c3
 80010e0:	080011db 	.word	0x080011db
 80010e4:	0800120d 	.word	0x0800120d
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3304      	adds	r3, #4
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa70 	bl	80005d4 <WIZCHIP_READ>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	701a      	strb	r2, [r3, #0]
         break;
 8001100:	e099      	b.n	8001236 <getsockopt+0x1a6>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	3304      	adds	r3, #4
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	3316      	adds	r3, #22
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa62 	bl	80005d4 <WIZCHIP_READ>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	701a      	strb	r2, [r3, #0]
         break;
 8001118:	e08d      	b.n	8001236 <getsockopt+0x1a6>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	3304      	adds	r3, #4
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	3315      	adds	r3, #21
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa56 	bl	80005d4 <WIZCHIP_READ>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	701a      	strb	r2, [r3, #0]
         break;
 8001130:	e081      	b.n	8001236 <getsockopt+0x1a6>
      case SO_MSS:   
         *(uint8_t*) arg = getSn_MSSR(sn);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	3304      	adds	r3, #4
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	3312      	adds	r3, #18
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa4a 	bl	80005d4 <WIZCHIP_READ>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3304      	adds	r3, #4
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	3313      	adds	r3, #19
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa43 	bl	80005d4 <WIZCHIP_READ>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	701a      	strb	r2, [r3, #0]
         break;
 8001156:	e06e      	b.n	8001236 <getsockopt+0x1a6>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3304      	adds	r3, #4
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	330c      	adds	r3, #12
 8001160:	2204      	movs	r2, #4
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fab1 	bl	80006cc <WIZCHIP_READ_BUF>
         break;
 800116a:	e064      	b.n	8001236 <getsockopt+0x1a6>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	3304      	adds	r3, #4
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	3310      	adds	r3, #16
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fa2d 	bl	80005d4 <WIZCHIP_READ>
 800117a:	4603      	mov	r3, r0
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29c      	uxth	r4, r3
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	3304      	adds	r3, #4
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	3311      	adds	r3, #17
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa22 	bl	80005d4 <WIZCHIP_READ>
 8001190:	4603      	mov	r3, r0
 8001192:	b29b      	uxth	r3, r3
 8001194:	4423      	add	r3, r4
 8001196:	b29a      	uxth	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	801a      	strh	r2, [r3, #0]
         break;
 800119c:	e04b      	b.n	8001236 <getsockopt+0x1a6>
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fae1 	bl	8000768 <getSn_TX_FSR>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	801a      	strh	r2, [r3, #0]
         break;
 80011ae:	e042      	b.n	8001236 <getsockopt+0x1a6>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fb1b 	bl	80007ee <getSn_RX_RSR>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	801a      	strh	r2, [r3, #0]
         break;
 80011c0:	e039      	b.n	8001236 <getsockopt+0x1a6>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	3304      	adds	r3, #4
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	3303      	adds	r3, #3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fa02 	bl	80005d4 <WIZCHIP_READ>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
         break;
 80011d8:	e02d      	b.n	8001236 <getsockopt+0x1a6>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3304      	adds	r3, #4
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9f7 	bl	80005d4 <WIZCHIP_READ>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <getsockopt+0x16e>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fafd 	bl	80007ee <getSn_RX_RSR>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80011fc:	e01b      	b.n	8001236 <getsockopt+0x1a6>
            *(uint16_t*)arg = sock_remained_size[sn];
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <getsockopt+0x1b0>)
 8001202:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	801a      	strh	r2, [r3, #0]
         break;
 800120a:	e014      	b.n	8001236 <getsockopt+0x1a6>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3304      	adds	r3, #4
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9de 	bl	80005d4 <WIZCHIP_READ>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <getsockopt+0x194>
             return SOCKERR_SOCKMODE;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	e009      	b.n	8001238 <getsockopt+0x1a8>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <getsockopt+0x1b4>)
 8001228:	5cd2      	ldrb	r2, [r2, r3]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	701a      	strb	r2, [r3, #0]
         break;
 800122e:	e002      	b.n	8001236 <getsockopt+0x1a6>
      default:
         return SOCKERR_SOCKOPT;
 8001230:	f06f 0301 	mvn.w	r3, #1
 8001234:	e000      	b.n	8001238 <getsockopt+0x1a8>
   }
   return SOCK_OK;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	200000c0 	.word	0x200000c0
 8001244:	200000c8 	.word	0x200000c8

08001248 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	70fb      	strb	r3, [r7, #3]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	2300      	movs	r3, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <reg_wizchip_cs_cbfunc+0x16>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <reg_wizchip_cs_cbfunc+0x40>)
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <reg_wizchip_cs_cbfunc+0x44>)
 80012fa:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <reg_wizchip_cs_cbfunc+0x40>)
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <reg_wizchip_cs_cbfunc+0x48>)
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	e006      	b.n	8001312 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <reg_wizchip_cs_cbfunc+0x40>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <reg_wizchip_cs_cbfunc+0x40>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6153      	str	r3, [r2, #20]
   }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000004 	.word	0x20000004
 8001324:	08001265 	.word	0x08001265
 8001328:	08001273 	.word	0x08001273

0800132c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001336:	bf00      	nop
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <reg_wizchip_spi_cbfunc+0x4c>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f9      	beq.n	8001338 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <reg_wizchip_spi_cbfunc+0x24>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <reg_wizchip_spi_cbfunc+0x4c>)
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <reg_wizchip_spi_cbfunc+0x50>)
 8001354:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <reg_wizchip_spi_cbfunc+0x4c>)
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <reg_wizchip_spi_cbfunc+0x54>)
 800135a:	61da      	str	r2, [r3, #28]
 800135c:	e006      	b.n	800136c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <reg_wizchip_spi_cbfunc+0x4c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <reg_wizchip_spi_cbfunc+0x4c>)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	61d3      	str	r3, [r2, #28]
   }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000004 	.word	0x20000004
 800137c:	080012b9 	.word	0x080012b9
 8001380:	080012c9 	.word	0x080012c9

08001384 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2206      	movs	r2, #6
 800138e:	4619      	mov	r1, r3
 8001390:	2009      	movs	r0, #9
 8001392:	f7ff f99b 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff f994 	bl	80006cc <WIZCHIP_READ_BUF>
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2204      	movs	r2, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	2005      	movs	r0, #5
 80013ae:	f7ff f98d 	bl	80006cc <WIZCHIP_READ_BUF>
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2204      	movs	r2, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	200f      	movs	r0, #15
 80013bc:	f7ff f986 	bl	80006cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff f8d8 	bl	8000578 <WIZCHIP_WRITE>
   getMR(); // for delay
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff f903 	bl	80005d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2206      	movs	r2, #6
 80013d2:	4619      	mov	r1, r3
 80013d4:	2009      	movs	r0, #9
 80013d6:	f7ff f92b 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff f924 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	2005      	movs	r0, #5
 80013f2:	f7ff f91d 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2204      	movs	r2, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff f916 	bl	8000630 <WIZCHIP_WRITE_BUF>
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800141a:	f7ff ffb3 	bl	8001384 <wizchip_sw_reset>
   if(txsize)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04e      	beq.n	80014c2 <wizchip_init+0xb6>
   {
      tmp = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
         tmp += txsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else      
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e015      	b.n	800145a <wizchip_init+0x4e>
      {
         tmp += txsize[i];
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	4413      	add	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 8001440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001444:	2b10      	cmp	r3, #16
 8001446:	dd02      	ble.n	800144e <wizchip_init+0x42>
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e08c      	b.n	8001568 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	2b03      	cmp	r3, #3
 8001460:	dde5      	ble.n	800142e <wizchip_init+0x22>
      }
   #endif
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e028      	b.n	80014ba <wizchip_init+0xae>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8001468:	201b      	movs	r0, #27
 800146a:	f7ff f8b3 	bl	80005d4 <WIZCHIP_READ>
 800146e:	4603      	mov	r3, r0
 8001470:	b25a      	sxtb	r2, r3
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2103      	movs	r1, #3
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	b25b      	sxtb	r3, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	b25b      	sxtb	r3, r3
 8001484:	4013      	ands	r3, r2
 8001486:	b25a      	sxtb	r2, r3
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	440b      	add	r3, r1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	201b      	movs	r0, #27
 80014aa:	f7ff f865 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	ddd2      	ble.n	8001468 <wizchip_init+0x5c>
   }
   if(rxsize)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d04e      	beq.n	8001566 <wizchip_init+0x15a>
   {
      tmp = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73bb      	strb	r3, [r7, #14]
         tmp += rxsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else         
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e015      	b.n	80014fe <wizchip_init+0xf2>
      {
         tmp += rxsize[i];
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 80014e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	dd02      	ble.n	80014f2 <wizchip_init+0xe6>
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e03a      	b.n	8001568 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	2b03      	cmp	r3, #3
 8001504:	dde5      	ble.n	80014d2 <wizchip_init+0xc6>
      }
   #endif

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e028      	b.n	800155e <wizchip_init+0x152>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 800150c:	201a      	movs	r0, #26
 800150e:	f7ff f861 	bl	80005d4 <WIZCHIP_READ>
 8001512:	4603      	mov	r3, r0
 8001514:	b25a      	sxtb	r2, r3
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2103      	movs	r1, #3
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	b25b      	sxtb	r3, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	b25b      	sxtb	r3, r3
 8001528:	4013      	ands	r3, r2
 800152a:	b25a      	sxtb	r2, r3
 800152c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	440b      	add	r3, r1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b25b      	sxtb	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	201a      	movs	r0, #26
 800154e:	f7ff f813 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	2b03      	cmp	r3, #3
 8001564:	ddd2      	ble.n	800150c <wizchip_init+0x100>
   }
   return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2206      	movs	r2, #6
 800157c:	4619      	mov	r1, r3
 800157e:	2009      	movs	r0, #9
 8001580:	f7ff f856 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	330e      	adds	r3, #14
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff f84f 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	330a      	adds	r3, #10
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	2005      	movs	r0, #5
 800159c:	f7ff f848 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3306      	adds	r3, #6
 80015a4:	2204      	movs	r2, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	200f      	movs	r0, #15
 80015aa:	f7ff f841 	bl	8000630 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7c9a      	ldrb	r2, [r3, #18]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <wizchip_setnetinfo+0x70>)
 80015b4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7cda      	ldrb	r2, [r3, #19]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <wizchip_setnetinfo+0x70>)
 80015bc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7d1a      	ldrb	r2, [r3, #20]
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <wizchip_setnetinfo+0x70>)
 80015c4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7d5a      	ldrb	r2, [r3, #21]
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <wizchip_setnetinfo+0x70>)
 80015cc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7d9a      	ldrb	r2, [r3, #22]
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <wizchip_setnetinfo+0x74>)
 80015d4:	701a      	strb	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000cc 	.word	0x200000cc
 80015e4:	200000d0 	.word	0x200000d0

080015e8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2206      	movs	r2, #6
 80015f4:	4619      	mov	r1, r3
 80015f6:	2009      	movs	r0, #9
 80015f8:	f7ff f868 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	330e      	adds	r3, #14
 8001600:	2204      	movs	r2, #4
 8001602:	4619      	mov	r1, r3
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff f861 	bl	80006cc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330a      	adds	r3, #10
 800160e:	2204      	movs	r2, #4
 8001610:	4619      	mov	r1, r3
 8001612:	2005      	movs	r0, #5
 8001614:	f7ff f85a 	bl	80006cc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3306      	adds	r3, #6
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	200f      	movs	r0, #15
 8001622:	f7ff f853 	bl	80006cc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <wizchip_getnetinfo+0x70>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <wizchip_getnetinfo+0x70>)
 8001630:	785a      	ldrb	r2, [r3, #1]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <wizchip_getnetinfo+0x70>)
 8001638:	789a      	ldrb	r2, [r3, #2]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <wizchip_getnetinfo+0x70>)
 8001640:	78da      	ldrb	r2, [r3, #3]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <wizchip_getnetinfo+0x74>)
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	759a      	strb	r2, [r3, #22]
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000cc 	.word	0x200000cc
 800165c:	200000d0 	.word	0x200000d0

08001660 <cs_sel>:
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);															\
} while(0)

char msg[60];

void cs_sel() {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <cs_sel+0x14>)
 800166a:	f002 fa5d 	bl	8003b28 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020000 	.word	0x40020000

08001678 <cs_desel>:

void cs_desel() {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800167c:	2201      	movs	r2, #1
 800167e:	2110      	movs	r1, #16
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <cs_desel+0x14>)
 8001682:	f002 fa51 	bl	8003b28 <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020000 	.word	0x40020000

08001690 <spi_rb>:

uint8_t spi_rb(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001696:	1df9      	adds	r1, r7, #7
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2201      	movs	r2, #1
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <spi_rb+0x20>)
 80016a0:	f003 fbe4 	bl	8004e6c <HAL_SPI_Receive>
	return rbuf;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000330 	.word	0x20000330

080016b4 <spi_wb>:

void spi_wb(uint8_t b) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80016be:	1df9      	adds	r1, r7, #7
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	2201      	movs	r2, #1
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <spi_wb+0x20>)
 80016c8:	f003 fa94 	bl	8004bf4 <HAL_SPI_Transmit>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000330 	.word	0x20000330

080016d8 <HAL_UART_RxCpltCallback>:


/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_UART_RxCpltCallback+0x1d4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10d      	bne.n	8001706 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	4970      	ldr	r1, [pc, #448]	; (80018b0 <HAL_UART_RxCpltCallback+0x1d8>)
 80016ee:	4871      	ldr	r0, [pc, #452]	; (80018b4 <HAL_UART_RxCpltCallback+0x1dc>)
 80016f0:	f004 feeb 	bl	80064ca <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80016f4:	230a      	movs	r3, #10
 80016f6:	2201      	movs	r2, #1
 80016f8:	496d      	ldr	r1, [pc, #436]	; (80018b0 <HAL_UART_RxCpltCallback+0x1d8>)
 80016fa:	486e      	ldr	r0, [pc, #440]	; (80018b4 <HAL_UART_RxCpltCallback+0x1dc>)
 80016fc:	f004 fe53 	bl	80063a6 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_UART_RxCpltCallback+0x1e0>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6c      	ldr	r2, [pc, #432]	; (80018bc <HAL_UART_RxCpltCallback+0x1e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d15e      	bne.n	80017ce <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	496b      	ldr	r1, [pc, #428]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 8001714:	486b      	ldr	r0, [pc, #428]	; (80018c4 <HAL_UART_RxCpltCallback+0x1ec>)
 8001716:	f004 fed8 	bl	80064ca <HAL_UART_Receive_IT>

		switch(status){
 800171a:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_UART_RxCpltCallback+0x1f0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_UART_RxCpltCallback+0x50>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d011      	beq.n	800174a <HAL_UART_RxCpltCallback+0x72>
 8001726:	e055      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8001728:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b5b      	cmp	r3, #91	; 0x5b
 800172e:	d150      	bne.n	80017d2 <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_UART_RxCpltCallback+0x1f4>)
 8001732:	225b      	movs	r2, #91	; 0x5b
 8001734:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001736:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800173c:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_UART_RxCpltCallback+0x1f0>)
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_UART_RxCpltCallback+0x1fc>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8001748:	e043      	b.n	80017d2 <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b5b      	cmp	r3, #91	; 0x5b
 8001750:	d109      	bne.n	8001766 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_UART_RxCpltCallback+0x1f4>)
 8001754:	225b      	movs	r2, #91	; 0x5b
 8001756:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001758:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_UART_RxCpltCallback+0x1f0>)
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8001764:	e036      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 8001766:	4b56      	ldr	r3, [pc, #344]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b5d      	cmp	r3, #93	; 0x5d
 800176c:	d115      	bne.n	800179a <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b22      	cmp	r3, #34	; 0x22
 8001774:	d10d      	bne.n	8001792 <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	b2d1      	uxtb	r1, r2
 800177e:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001780:	7011      	strb	r1, [r2, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 8001786:	7819      	ldrb	r1, [r3, #0]
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_UART_RxCpltCallback+0x1f4>)
 800178a:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_UART_RxCpltCallback+0x1fc>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
		            status = START ;
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_UART_RxCpltCallback+0x1f0>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
		        break ;
 8001798:	e01c      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 800179a:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b24      	cmp	r3, #36	; 0x24
 80017a0:	d80b      	bhi.n	80017ba <HAL_UART_RxCpltCallback+0xe2>
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	b2d1      	uxtb	r1, r2
 80017aa:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 80017ac:	7011      	strb	r1, [r2, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_UART_RxCpltCallback+0x1e8>)
 80017b2:	7819      	ldrb	r1, [r3, #0]
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <HAL_UART_RxCpltCallback+0x1f4>)
 80017b6:	5499      	strb	r1, [r3, r2]
		        break ;
 80017b8:	e00c      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_UART_RxCpltCallback+0x1f0>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_UART_RxCpltCallback+0x1f8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80017c6:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_UART_RxCpltCallback+0x1fc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
		        break ;
 80017cc:	e002      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80017ce:	bf00      	nop
 80017d0:	e000      	b.n	80017d4 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80017d2:	bf00      	nop

	if (huart->Instance == USART6) {
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_UART_RxCpltCallback+0x200>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d15e      	bne.n	800189c <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	493e      	ldr	r1, [pc, #248]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 80017e2:	483f      	ldr	r0, [pc, #252]	; (80018e0 <HAL_UART_RxCpltCallback+0x208>)
 80017e4:	f004 fe71 	bl	80064ca <HAL_UART_Receive_IT>

		switch(GTO_status){
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_UART_RxCpltCallback+0x20c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d002      	beq.n	80017f6 <HAL_UART_RxCpltCallback+0x11e>
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d011      	beq.n	8001818 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 80017f4:	e055      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b28      	cmp	r3, #40	; 0x28
 80017fc:	d150      	bne.n	80018a0 <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_UART_RxCpltCallback+0x210>)
 8001800:	2228      	movs	r2, #40	; 0x28
 8001802:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 800180a:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_UART_RxCpltCallback+0x20c>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_UART_RxCpltCallback+0x218>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
					break ;
 8001816:	e043      	b.n	80018a0 <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b28      	cmp	r3, #40	; 0x28
 800181e:	d109      	bne.n	8001834 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_UART_RxCpltCallback+0x210>)
 8001822:	2228      	movs	r2, #40	; 0x28
 8001824:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_UART_RxCpltCallback+0x20c>)
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
					break ;
 8001832:	e036      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b29      	cmp	r3, #41	; 0x29
 800183a:	d115      	bne.n	8001868 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0a      	cmp	r3, #10
 8001842:	d10d      	bne.n	8001860 <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	b2d1      	uxtb	r1, r2
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 800184e:	7011      	strb	r1, [r2, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 8001854:	7819      	ldrb	r1, [r3, #0]
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_UART_RxCpltCallback+0x210>)
 8001858:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_UART_RxCpltCallback+0x218>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_UART_RxCpltCallback+0x20c>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
					break ;
 8001866:	e01c      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d80b      	bhi.n	8001888 <HAL_UART_RxCpltCallback+0x1b0>
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	b2d1      	uxtb	r1, r2
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 800187a:	7011      	strb	r1, [r2, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_UART_RxCpltCallback+0x204>)
 8001880:	7819      	ldrb	r1, [r3, #0]
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_UART_RxCpltCallback+0x210>)
 8001884:	5499      	strb	r1, [r3, r2]
					break ;
 8001886:	e00c      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_UART_RxCpltCallback+0x20c>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_UART_RxCpltCallback+0x214>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_UART_RxCpltCallback+0x218>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
					break ;
 800189a:	e002      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
	}
 800189c:	bf00      	nop
 800189e:	e000      	b.n	80018a2 <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 80018a0:	bf00      	nop
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40011000 	.word	0x40011000
 80018b0:	20000279 	.word	0x20000279
 80018b4:	200001bc 	.word	0x200001bc
 80018b8:	200000d1 	.word	0x200000d1
 80018bc:	40004400 	.word	0x40004400
 80018c0:	200001b8 	.word	0x200001b8
 80018c4:	2000038c 	.word	0x2000038c
 80018c8:	2000002d 	.word	0x2000002d
 80018cc:	2000052c 	.word	0x2000052c
 80018d0:	200000e1 	.word	0x200000e1
 80018d4:	200000d2 	.word	0x200000d2
 80018d8:	40011400 	.word	0x40011400
 80018dc:	2000032c 	.word	0x2000032c
 80018e0:	2000027c 	.word	0x2000027c
 80018e4:	2000002e 	.word	0x2000002e
 80018e8:	200002c0 	.word	0x200002c0
 80018ec:	20000558 	.word	0x20000558
 80018f0:	200000d3 	.word	0x200000d3

080018f4 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	4804      	ldr	r0, [pc, #16]	; (800191c <_write+0x28>)
 800190c:	f004 fd4b 	bl	80063a6 <HAL_UART_Transmit>
	return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200001bc 	.word	0x200001bc

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  uint8_t retVal, sockStatus;
  int16_t rcvLen;
  uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2};
 8001926:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f001 fa9c 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 fa18 	bl	8001d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f000 fd26 	bl	8002384 <MX_GPIO_Init>
  MX_DMA_Init();
 8001938:	f000 fcfc 	bl	8002334 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800193c:	f000 fc7a 	bl	8002234 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001940:	f000 fc4e 	bl	80021e0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001944:	f000 fbf8 	bl	8002138 <MX_UART4_Init>
  MX_UART5_Init();
 8001948:	f000 fc20 	bl	800218c <MX_UART5_Init>
  MX_USART6_UART_Init();
 800194c:	f000 fcc6 	bl	80022dc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001950:	f000 faf6 	bl	8001f40 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001954:	f000 fb52 	bl	8001ffc <MX_TIM1_Init>
  MX_TIM7_Init();
 8001958:	f000 fbb8 	bl	80020cc <MX_TIM7_Init>
  MX_USART3_UART_Init();
 800195c:	f000 fc94 	bl	8002288 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001960:	f000 fa94 	bl	8001e8c <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001964:	f000 fa7e 	bl	8001e64 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*##########################################################################################################*/
  /*INTERRUPT SET*/
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	49b6      	ldr	r1, [pc, #728]	; (8001c44 <main+0x324>)
 800196c:	48b6      	ldr	r0, [pc, #728]	; (8001c48 <main+0x328>)
 800196e:	f004 fdac 	bl	80064ca <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 8001972:	2201      	movs	r2, #1
 8001974:	49b5      	ldr	r1, [pc, #724]	; (8001c4c <main+0x32c>)
 8001976:	48b6      	ldr	r0, [pc, #728]	; (8001c50 <main+0x330>)
 8001978:	f004 fda7 	bl	80064ca <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 800197c:	2201      	movs	r2, #1
 800197e:	49b5      	ldr	r1, [pc, #724]	; (8001c54 <main+0x334>)
 8001980:	48b5      	ldr	r0, [pc, #724]	; (8001c58 <main+0x338>)
 8001982:	f004 fda2 	bl	80064ca <HAL_UART_Receive_IT>

  /*PIN SET*/
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800198c:	48b3      	ldr	r0, [pc, #716]	; (8001c5c <main+0x33c>)
 800198e:	f002 f8cb 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 8001992:	2200      	movs	r2, #0
 8001994:	2101      	movs	r1, #1
 8001996:	48b2      	ldr	r0, [pc, #712]	; (8001c60 <main+0x340>)
 8001998:	f002 f8c6 	bl	8003b28 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 800199c:	2201      	movs	r2, #1
 800199e:	2102      	movs	r1, #2
 80019a0:	48b0      	ldr	r0, [pc, #704]	; (8001c64 <main+0x344>)
 80019a2:	f002 f8c1 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	48ae      	ldr	r0, [pc, #696]	; (8001c64 <main+0x344>)
 80019ac:	f002 f8bc 	bl	8003b28 <HAL_GPIO_WritePin>
  /*##########################################################################################################*/

  /*##########################################################################################################*/
  /*ETHERNET SET*/
  //gto
  printf("\r\n EHTERNET RUNNING .... 20210813 \r\n");
 80019b0:	48ad      	ldr	r0, [pc, #692]	; (8001c68 <main+0x348>)
 80019b2:	f005 fc83 	bl	80072bc <puts>
  E_RST_HIGH();								// Ethernet Enable
 80019b6:	2201      	movs	r2, #1
 80019b8:	2110      	movs	r1, #16
 80019ba:	48aa      	ldr	r0, [pc, #680]	; (8001c64 <main+0x344>)
 80019bc:	f002 f8b4 	bl	8003b28 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, E_RST, 1);		// Ethernet Enable

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80019c0:	49aa      	ldr	r1, [pc, #680]	; (8001c6c <main+0x34c>)
 80019c2:	48ab      	ldr	r0, [pc, #684]	; (8001c70 <main+0x350>)
 80019c4:	f7ff fc8c 	bl	80012e0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80019c8:	49aa      	ldr	r1, [pc, #680]	; (8001c74 <main+0x354>)
 80019ca:	48ab      	ldr	r0, [pc, #684]	; (8001c78 <main+0x358>)
 80019cc:	f7ff fcae 	bl	800132c <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 80019d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd16 	bl	800140c <wizchip_init>
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
		  	  	  	  	  .ip 	= {192, 168, 2, 192},					// IP address
						  .sn 	= {255, 255, 255, 0},					// Subnet mask
						  .gw 	= {192, 168, 2, 1}};					// Gateway address
  */
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	f8c3 2013 	str.w	r2, [r3, #19]
 80019f4:	4aa1      	ldr	r2, [pc, #644]	; (8001c7c <main+0x35c>)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fe:	6018      	str	r0, [r3, #0]
 8001a00:	3304      	adds	r3, #4
 8001a02:	8019      	strh	r1, [r3, #0]
 8001a04:	4a9e      	ldr	r2, [pc, #632]	; (8001c80 <main+0x360>)
 8001a06:	f107 0312 	add.w	r3, r7, #18
 8001a0a:	6810      	ldr	r0, [r2, #0]
 8001a0c:	6018      	str	r0, [r3, #0]
 8001a0e:	4a9d      	ldr	r2, [pc, #628]	; (8001c84 <main+0x364>)
 8001a10:	f107 0316 	add.w	r3, r7, #22
 8001a14:	6810      	ldr	r0, [r2, #0]
 8001a16:	6018      	str	r0, [r3, #0]
 8001a18:	4a9b      	ldr	r2, [pc, #620]	; (8001c88 <main+0x368>)
 8001a1a:	f107 031a 	add.w	r3, r7, #26
 8001a1e:	6810      	ldr	r0, [r2, #0]
 8001a20:	6018      	str	r0, [r3, #0]
 		  	  	  	  	  .ip 	= {10, 0, 7, 211},						// IP address
 						  .sn 	= {255, 255, 248, 0},					// Subnet mask
 						  .gw 	= {10, 0, 0, 1}};						// Gateway address

  wizchip_setnetinfo(&netInfo);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fda2 	bl	8001570 <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fdd9 	bl	80015e8 <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 8001a36:	2364      	movs	r3, #100	; 0x64
 8001a38:	2218      	movs	r2, #24
 8001a3a:	4994      	ldr	r1, [pc, #592]	; (8001c8c <main+0x36c>)
 8001a3c:	4884      	ldr	r0, [pc, #528]	; (8001c50 <main+0x330>)
 8001a3e:	f004 fcb2 	bl	80063a6 <HAL_UART_Transmit>
 8001a42:	7b3b      	ldrb	r3, [r7, #12]
 8001a44:	461c      	mov	r4, r3
 8001a46:	7b7b      	ldrb	r3, [r7, #13]
 8001a48:	461d      	mov	r5, r3
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	7c39      	ldrb	r1, [r7, #16]
 8001a50:	7c78      	ldrb	r0, [r7, #17]
 8001a52:	9003      	str	r0, [sp, #12]
 8001a54:	9102      	str	r1, [sp, #8]
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	498c      	ldr	r1, [pc, #560]	; (8001c90 <main+0x370>)
 8001a60:	488c      	ldr	r0, [pc, #560]	; (8001c94 <main+0x374>)
 8001a62:	f005 fc43 	bl	80072ec <siprintf>
 8001a66:	488b      	ldr	r0, [pc, #556]	; (8001c94 <main+0x374>)
 8001a68:	f7fe fbb2 	bl	80001d0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	4988      	ldr	r1, [pc, #544]	; (8001c94 <main+0x374>)
 8001a74:	4876      	ldr	r0, [pc, #472]	; (8001c50 <main+0x330>)
 8001a76:	f004 fc96 	bl	80063a6 <HAL_UART_Transmit>
 8001a7a:	7cbb      	ldrb	r3, [r7, #18]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	7cfb      	ldrb	r3, [r7, #19]
 8001a80:	4618      	mov	r0, r3
 8001a82:	7d3b      	ldrb	r3, [r7, #20]
 8001a84:	7d7a      	ldrb	r2, [r7, #21]
 8001a86:	9201      	str	r2, [sp, #4]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	4982      	ldr	r1, [pc, #520]	; (8001c98 <main+0x378>)
 8001a90:	4880      	ldr	r0, [pc, #512]	; (8001c94 <main+0x374>)
 8001a92:	f005 fc2b 	bl	80072ec <siprintf>
 8001a96:	487f      	ldr	r0, [pc, #508]	; (8001c94 <main+0x374>)
 8001a98:	f7fe fb9a 	bl	80001d0 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	497c      	ldr	r1, [pc, #496]	; (8001c94 <main+0x374>)
 8001aa4:	486a      	ldr	r0, [pc, #424]	; (8001c50 <main+0x330>)
 8001aa6:	f004 fc7e 	bl	80063a6 <HAL_UART_Transmit>
 8001aaa:	7dbb      	ldrb	r3, [r7, #22]
 8001aac:	4619      	mov	r1, r3
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	7e3b      	ldrb	r3, [r7, #24]
 8001ab4:	7e7a      	ldrb	r2, [r7, #25]
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	4977      	ldr	r1, [pc, #476]	; (8001c9c <main+0x37c>)
 8001ac0:	4874      	ldr	r0, [pc, #464]	; (8001c94 <main+0x374>)
 8001ac2:	f005 fc13 	bl	80072ec <siprintf>
 8001ac6:	4873      	ldr	r0, [pc, #460]	; (8001c94 <main+0x374>)
 8001ac8:	f7fe fb82 	bl	80001d0 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	4970      	ldr	r1, [pc, #448]	; (8001c94 <main+0x374>)
 8001ad4:	485e      	ldr	r0, [pc, #376]	; (8001c50 <main+0x330>)
 8001ad6:	f004 fc66 	bl	80063a6 <HAL_UART_Transmit>
 8001ada:	7ebb      	ldrb	r3, [r7, #26]
 8001adc:	4619      	mov	r1, r3
 8001ade:	7efb      	ldrb	r3, [r7, #27]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	7f3b      	ldrb	r3, [r7, #28]
 8001ae4:	7f7a      	ldrb	r2, [r7, #29]
 8001ae6:	9201      	str	r2, [sp, #4]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	460a      	mov	r2, r1
 8001aee:	496c      	ldr	r1, [pc, #432]	; (8001ca0 <main+0x380>)
 8001af0:	4868      	ldr	r0, [pc, #416]	; (8001c94 <main+0x374>)
 8001af2:	f005 fbfb 	bl	80072ec <siprintf>
 8001af6:	4867      	ldr	r0, [pc, #412]	; (8001c94 <main+0x374>)
 8001af8:	f7fe fb6a 	bl	80001d0 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	2364      	movs	r3, #100	; 0x64
 8001b02:	4964      	ldr	r1, [pc, #400]	; (8001c94 <main+0x374>)
 8001b04:	4852      	ldr	r0, [pc, #328]	; (8001c50 <main+0x330>)
 8001b06:	f004 fc4e 	bl	80063a6 <HAL_UART_Transmit>

reconnect:
  /* Open socket 0 as TCP_SOCKET with port 60500 */
  if((retVal = socket(0, Sn_MR_TCP, 60500, 0)) == 0) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f64e 4254 	movw	r2, #60500	; 0xec54
 8001b10:	2101      	movs	r1, #1
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7fe ff9e 	bl	8000a54 <socket>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80fa 	bne.w	8001d1c <main+0x3fc>
	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
	  if((retVal = listen(0)) == SOCK_OK) {
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f8ff 	bl	8000d2c <listen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 80e8 	bne.w	8001d0e <main+0x3ee>
		  printf("######### SOCKET READY !! \r\n");
 8001b3e:	4859      	ldr	r0, [pc, #356]	; (8001ca4 <main+0x384>)
 8001b40:	f005 fbbc 	bl	80072bc <puts>
		  /* While socket is in LISTEN mode we wait for a remote connection */
		  while(sockStatus = getSn_SR(0) == SOCK_LISTEN)
 8001b44:	e002      	b.n	8001b4c <main+0x22c>
			  //printf("SOCK LISTENNING ... !! \r\n");
			  HAL_Delay(100);
 8001b46:	2064      	movs	r0, #100	; 0x64
 8001b48:	f001 f9d0 	bl	8002eec <HAL_Delay>
		  while(sockStatus = getSn_SR(0) == SOCK_LISTEN)
 8001b4c:	f240 4003 	movw	r0, #1027	; 0x403
 8001b50:	f7fe fd40 	bl	80005d4 <WIZCHIP_READ>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b14      	cmp	r3, #20
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ec      	bne.n	8001b46 <main+0x226>
  		  /* OK. Got a remote peer. Let's send a message to it */
  		  while(1) {
  			  /* If connection is ESTABLISHED with remote peer */
  			  if(sockStatus = getSn_SR(0) == SOCK_ESTABLISHED) {
 8001b6c:	f240 4003 	movw	r0, #1027	; 0x403
 8001b70:	f7fe fd30 	bl	80005d4 <WIZCHIP_READ>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b17      	cmp	r3, #23
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b84:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80ae 	beq.w	8001cea <main+0x3ca>
  				  printf("######### SOCK_ESTABLISHED !! \r\n");
 8001b8e:	4846      	ldr	r0, [pc, #280]	; (8001ca8 <main+0x388>)
 8001b90:	f005 fb94 	bl	80072bc <puts>
  				  uint8_t remoteIP[4];
  				  uint16_t remotePort;

  				  /* Retrieving remote peer IP and port number */
  				  getsockopt(0, SO_DESTIP, remoteIP);
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fa77 	bl	8001090 <getsockopt>
  				  getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort);
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2105      	movs	r1, #5
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f7ff fa71 	bl	8001090 <getsockopt>
  				  sprintf(msg, CONN_ESTABLISHED_MSG, remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	7a7b      	ldrb	r3, [r7, #9]
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	7afa      	ldrb	r2, [r7, #11]
 8001bba:	88f9      	ldrh	r1, [r7, #6]
 8001bbc:	9102      	str	r1, [sp, #8]
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4939      	ldr	r1, [pc, #228]	; (8001cac <main+0x38c>)
 8001bc8:	4832      	ldr	r0, [pc, #200]	; (8001c94 <main+0x374>)
 8001bca:	f005 fb8f 	bl	80072ec <siprintf>
  				  printf("====================================================== \r\n");
 8001bce:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <main+0x390>)
 8001bd0:	f005 fb74 	bl	80072bc <puts>
  				  printf(msg, CONN_ESTABLISHED_MSG, remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 8001bd4:	7a3b      	ldrb	r3, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	461c      	mov	r4, r3
 8001bdc:	7abb      	ldrb	r3, [r7, #10]
 8001bde:	7afa      	ldrb	r2, [r7, #11]
 8001be0:	88f9      	ldrh	r1, [r7, #6]
 8001be2:	9102      	str	r1, [sp, #8]
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4623      	mov	r3, r4
 8001bea:	4602      	mov	r2, r0
 8001bec:	492f      	ldr	r1, [pc, #188]	; (8001cac <main+0x38c>)
 8001bee:	4829      	ldr	r0, [pc, #164]	; (8001c94 <main+0x374>)
 8001bf0:	f005 fade 	bl	80071b0 <iprintf>
  				  printf("====================================================== \r\n");
 8001bf4:	482e      	ldr	r0, [pc, #184]	; (8001cb0 <main+0x390>)
 8001bf6:	f005 fb61 	bl	80072bc <puts>
  				  PRINT_STR(msg);
 8001bfa:	4826      	ldr	r0, [pc, #152]	; (8001c94 <main+0x374>)
 8001bfc:	f7fe fae8 	bl	80001d0 <strlen>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	4923      	ldr	r1, [pc, #140]	; (8001c94 <main+0x374>)
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <main+0x330>)
 8001c0a:	f004 fbcc 	bl	80063a6 <HAL_UART_Transmit>

  				  /* Let's send a welcome message and closing socket */
  				  if(retVal = send(0, GREETING_MSG, strlen(GREETING_MSG)) == (int16_t)strlen(GREETING_MSG)) {
 8001c0e:	2237      	movs	r2, #55	; 0x37
 8001c10:	4928      	ldr	r1, [pc, #160]	; (8001cb4 <main+0x394>)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff f948 	bl	8000ea8 <send>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b37      	cmp	r3, #55	; 0x37
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d047      	beq.n	8001cc0 <main+0x3a0>
  					  printf("######### WELCOME MESSAGE !! \r\n");
 8001c30:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <main+0x398>)
 8001c32:	f005 fb43 	bl	80072bc <puts>
  					  PRINT_STR(SENT_MESSAGE_MSG);
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2229      	movs	r2, #41	; 0x29
 8001c3a:	4920      	ldr	r1, [pc, #128]	; (8001cbc <main+0x39c>)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <main+0x330>)
 8001c3e:	f004 fbb2 	bl	80063a6 <HAL_UART_Transmit>
  				  else { /* Ops: something went wrong during data transfer */
  					  sprintf(msg, WRONG_RETVAL_MSG, retVal);
  					  printf(" Wrong MESSAGE !! \r\n");
  					  PRINT_STR(msg);
  				  }
  				  break;
 8001c42:	e07c      	b.n	8001d3e <main+0x41e>
 8001c44:	20000279 	.word	0x20000279
 8001c48:	200001bc 	.word	0x200001bc
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	2000038c 	.word	0x2000038c
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	2000027c 	.word	0x2000027c
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40020800 	.word	0x40020800
 8001c68:	08008394 	.word	0x08008394
 8001c6c:	08001679 	.word	0x08001679
 8001c70:	08001661 	.word	0x08001661
 8001c74:	080016b5 	.word	0x080016b5
 8001c78:	08001691 	.word	0x08001691
 8001c7c:	08008600 	.word	0x08008600
 8001c80:	08008608 	.word	0x08008608
 8001c84:	0800860c 	.word	0x0800860c
 8001c88:	08008610 	.word	0x08008610
 8001c8c:	080083b8 	.word	0x080083b8
 8001c90:	080083d4 	.word	0x080083d4
 8001c94:	20000134 	.word	0x20000134
 8001c98:	080083f8 	.word	0x080083f8
 8001c9c:	08008418 	.word	0x08008418
 8001ca0:	08008438 	.word	0x08008438
 8001ca4:	08008458 	.word	0x08008458
 8001ca8:	08008474 	.word	0x08008474
 8001cac:	08008494 	.word	0x08008494
 8001cb0:	080084cc 	.word	0x080084cc
 8001cb4:	08008508 	.word	0x08008508
 8001cb8:	08008540 	.word	0x08008540
 8001cbc:	08008560 	.word	0x08008560
  					  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8001cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4921      	ldr	r1, [pc, #132]	; (8001d4c <main+0x42c>)
 8001cc8:	4821      	ldr	r0, [pc, #132]	; (8001d50 <main+0x430>)
 8001cca:	f005 fb0f 	bl	80072ec <siprintf>
  					  printf(" Wrong MESSAGE !! \r\n");
 8001cce:	4821      	ldr	r0, [pc, #132]	; (8001d54 <main+0x434>)
 8001cd0:	f005 faf4 	bl	80072bc <puts>
  					  PRINT_STR(msg);
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <main+0x430>)
 8001cd6:	f7fe fa7b 	bl	80001d0 <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	491b      	ldr	r1, [pc, #108]	; (8001d50 <main+0x430>)
 8001ce2:	481d      	ldr	r0, [pc, #116]	; (8001d58 <main+0x438>)
 8001ce4:	f004 fb5f 	bl	80063a6 <HAL_UART_Transmit>
  				  break;
 8001ce8:	e029      	b.n	8001d3e <main+0x41e>
  			  }
  			  else { /* Something went wrong with remote peer, maybe the connection was closed unexpectedly */
  				  sprintf(msg, WRONG_STATUS_MSG, sockStatus);
 8001cea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001cee:	461a      	mov	r2, r3
 8001cf0:	491a      	ldr	r1, [pc, #104]	; (8001d5c <main+0x43c>)
 8001cf2:	4817      	ldr	r0, [pc, #92]	; (8001d50 <main+0x430>)
 8001cf4:	f005 fafa 	bl	80072ec <siprintf>
  				  PRINT_STR(msg);
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <main+0x430>)
 8001cfa:	f7fe fa69 	bl	80001d0 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	4912      	ldr	r1, [pc, #72]	; (8001d50 <main+0x430>)
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <main+0x438>)
 8001d08:	f004 fb4d 	bl	80063a6 <HAL_UART_Transmit>
  				  break;
 8001d0c:	e017      	b.n	8001d3e <main+0x41e>
  			  }
  		  }

  	  } else /* Ops: socket not in LISTEN mode. Something went wrong */
  		  PRINT_STR(LISTEN_ERR_MSG);
 8001d0e:	2364      	movs	r3, #100	; 0x64
 8001d10:	220f      	movs	r2, #15
 8001d12:	4913      	ldr	r1, [pc, #76]	; (8001d60 <main+0x440>)
 8001d14:	4810      	ldr	r0, [pc, #64]	; (8001d58 <main+0x438>)
 8001d16:	f004 fb46 	bl	80063a6 <HAL_UART_Transmit>
 8001d1a:	e010      	b.n	8001d3e <main+0x41e>
  } else { /* Can't open the socket. This means something is wrong with W5100 configuration: maybe SPI issue? */
  	  sprintf(msg, WRONG_RETVAL_MSG, retVal);
 8001d1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d20:	461a      	mov	r2, r3
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <main+0x42c>)
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <main+0x430>)
 8001d26:	f005 fae1 	bl	80072ec <siprintf>
  	  PRINT_STR(msg);
 8001d2a:	4809      	ldr	r0, [pc, #36]	; (8001d50 <main+0x430>)
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	4906      	ldr	r1, [pc, #24]	; (8001d50 <main+0x430>)
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <main+0x438>)
 8001d3a:	f004 fb34 	bl	80063a6 <HAL_UART_Transmit>
  }

  /* We close the socket and start a connection again */
  disconnect(0);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff f844 	bl	8000dcc <disconnect>
  close(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7fe ff8b 	bl	8000c60 <close>
  goto reconnect;
 8001d4a:	e6de      	b.n	8001b0a <main+0x1ea>
 8001d4c:	0800858c 	.word	0x0800858c
 8001d50:	20000134 	.word	0x20000134
 8001d54:	080085b8 	.word	0x080085b8
 8001d58:	2000038c 	.word	0x2000038c
 8001d5c:	080085cc 	.word	0x080085cc
 8001d60:	080085f0 	.word	0x080085f0

08001d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b098      	sub	sp, #96	; 0x60
 8001d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6e:	2230      	movs	r2, #48	; 0x30
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 f96a 	bl	800704c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <SystemClock_Config+0xf8>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <SystemClock_Config+0xf8>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <SystemClock_Config+0xf8>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <SystemClock_Config+0xfc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <SystemClock_Config+0xfc>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <SystemClock_Config+0xfc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de2:	2300      	movs	r3, #0
 8001de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001de6:	2308      	movs	r3, #8
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dea:	23a8      	movs	r3, #168	; 0xa8
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dee:	2302      	movs	r3, #2
 8001df0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df2:	2304      	movs	r3, #4
 8001df4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 feae 	bl	8003b5c <HAL_RCC_OscConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e06:	f000 fba7 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	2102      	movs	r1, #2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 f910 	bl	800404c <HAL_RCC_ClockConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e32:	f000 fb91 	bl	8002558 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e36:	2302      	movs	r3, #2
 8001e38:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 fb03 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001e50:	f000 fb82 	bl	8002558 <Error_Handler>
  }
}
 8001e54:	bf00      	nop
 8001e56:	3760      	adds	r7, #96	; 0x60
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000

08001e64 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2025      	movs	r0, #37	; 0x25
 8001e6e:	f001 f919 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e72:	2025      	movs	r0, #37	; 0x25
 8001e74:	f001 f932 	bl	80030dc <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2047      	movs	r0, #71	; 0x47
 8001e7e:	f001 f911 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e82:	2047      	movs	r0, #71	; 0x47
 8001e84:	f001 f92a 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <MX_RTC_Init+0xac>)
 8001ea6:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <MX_RTC_Init+0xb0>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <MX_RTC_Init+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_RTC_Init+0xac>)
 8001eb2:	227f      	movs	r2, #127	; 0x7f
 8001eb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_RTC_Init+0xac>)
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_RTC_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_RTC_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_RTC_Init+0xac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ece:	481a      	ldr	r0, [pc, #104]	; (8001f38 <MX_RTC_Init+0xac>)
 8001ed0:	f002 fba0 	bl	8004614 <HAL_RTC_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001eda:	f000 fb3d 	bl	8002558 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <MX_RTC_Init+0xac>)
 8001efa:	f002 fc1c 	bl	8004736 <HAL_RTC_SetTime>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f04:	f000 fb28 	bl	8002558 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <MX_RTC_Init+0xac>)
 8001f20:	f002 fcc6 	bl	80048b0 <HAL_RTC_SetDate>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f2a:	f000 fb15 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000204 	.word	0x20000204
 8001f3c:	40002800 	.word	0x40002800

08001f40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f48:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <MX_SPI1_Init+0xb4>)
 8001f4a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f4e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f52:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f6c:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f76:	2210      	movs	r2, #16
 8001f78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f8e:	220a      	movs	r2, #10
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f92:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <MX_SPI1_Init+0xb0>)
 8001f94:	f002 fda5 	bl	8004ae2 <HAL_SPI_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001f9e:	f000 fadb 	bl	8002558 <Error_Handler>
  /**SPI2 GPIO Configuration
	PB4     ------> SPI1_SCK
	PB6     ------> SPI1_MISO
	PB7     ------> SPI1_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fb0:	23e0      	movs	r3, #224	; 0xe0
 8001fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <MX_SPI1_Init+0xb8>)
 8001fca:	f001 fc11 	bl	80037f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_SPI1_Init+0xb8>)
 8001fe4:	f001 fc04 	bl	80037f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000330 	.word	0x20000330
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	40020000 	.word	0x40020000

08001ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <MX_TIM1_Init+0xc8>)
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <MX_TIM1_Init+0xcc>)
 800202c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800202e:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_TIM1_Init+0xc8>)
 800203c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_TIM1_Init+0xc8>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002054:	481b      	ldr	r0, [pc, #108]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002056:	f003 fc0b 	bl	8005870 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002060:	f000 fa7a 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	4619      	mov	r1, r3
 8002070:	4814      	ldr	r0, [pc, #80]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002072:	f003 fdc5 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800207c:	f000 fa6c 	bl	8002558 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002080:	2306      	movs	r3, #6
 8002082:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_TIM1_Init+0xc8>)
 8002090:	f003 fe7a 	bl	8005d88 <HAL_TIM_SlaveConfigSynchro>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800209a:	f000 fa5d 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_TIM1_Init+0xc8>)
 80020ac:	f004 f89e 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80020b6:	f000 fa4f 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000022c 	.word	0x2000022c
 80020c8:	40010000 	.word	0x40010000

080020cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_TIM7_Init+0x64>)
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <MX_TIM7_Init+0x68>)
 80020de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_TIM7_Init+0x64>)
 80020e2:	2229      	movs	r2, #41	; 0x29
 80020e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_TIM7_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_TIM7_Init+0x64>)
 80020ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_TIM7_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_TIM7_Init+0x64>)
 80020fc:	f003 fbb8 	bl	8005870 <HAL_TIM_Base_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002106:	f000 fa27 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_TIM7_Init+0x64>)
 8002118:	f004 f868 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002122:	f000 fa19 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000480 	.word	0x20000480
 8002134:	40001400 	.word	0x40001400

08002138 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_UART4_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_UART4_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_UART4_Init+0x4c>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_UART4_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_UART4_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_UART4_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_UART4_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_UART4_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_UART4_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_UART4_Init+0x4c>)
 8002170:	f004 f8cc 	bl	800630c <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800217a:	f000 f9ed 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200002e8 	.word	0x200002e8
 8002188:	40004c00 	.word	0x40004c00

0800218c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_UART5_Init+0x4c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <MX_UART5_Init+0x50>)
 8002194:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_UART5_Init+0x4c>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_UART5_Init+0x4c>)
 80021c4:	f004 f8a2 	bl	800630c <HAL_UART_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80021ce:	f000 f9c3 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000174 	.word	0x20000174
 80021dc:	40005000 	.word	0x40005000

080021e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <MX_USART1_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_USART1_UART_Init+0x4c>)
 8002218:	f004 f878 	bl	800630c <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f000 f999 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001bc 	.word	0x200001bc
 8002230:	40011000 	.word	0x40011000

08002234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <MX_USART2_UART_Init+0x50>)
 800223c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 8002240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 800225a:	220c      	movs	r2, #12
 800225c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_USART2_UART_Init+0x4c>)
 800226c:	f004 f84e 	bl	800630c <HAL_UART_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002276:	f000 f96f 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000038c 	.word	0x2000038c
 8002284:	40004400 	.word	0x40004400

08002288 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <MX_USART3_UART_Init+0x50>)
 8002290:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_USART3_UART_Init+0x4c>)
 80022c0:	f004 f824 	bl	800630c <HAL_UART_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022ca:	f000 f945 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200000e4 	.word	0x200000e4
 80022d8:	40004800 	.word	0x40004800

080022dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <MX_USART6_UART_Init+0x50>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <MX_USART6_UART_Init+0x54>)
 80022ea:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 8002300:	220c      	movs	r2, #12
 8002302:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 800230c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_USART6_UART_Init+0x4c>)
 8002314:	f003 fffa 	bl	800630c <HAL_UART_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800231e:	f000 f91b 	bl	8002558 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000027c 	.word	0x2000027c
 800232c:	40011400 	.word	0x40011400
 8002330:	003d0900 	.word	0x003d0900

08002334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_DMA_Init+0x4c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <MX_DMA_Init+0x4c>)
 8002344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <MX_DMA_Init+0x4c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2038      	movs	r0, #56	; 0x38
 800235c:	f000 fea2 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002360:	2038      	movs	r0, #56	; 0x38
 8002362:	f000 febb 	bl	80030dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	203b      	movs	r0, #59	; 0x3b
 800236c:	f000 fe9a 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002370:	203b      	movs	r0, #59	; 0x3b
 8002372:	f000 feb3 	bl	80030dc <HAL_NVIC_EnableIRQ>

}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <MX_GPIO_Init+0x198>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <MX_GPIO_Init+0x198>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <MX_GPIO_Init+0x198>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <MX_GPIO_Init+0x198>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a57      	ldr	r2, [pc, #348]	; (800251c <MX_GPIO_Init+0x198>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b55      	ldr	r3, [pc, #340]	; (800251c <MX_GPIO_Init+0x198>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <MX_GPIO_Init+0x198>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a50      	ldr	r2, [pc, #320]	; (800251c <MX_GPIO_Init+0x198>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <MX_GPIO_Init+0x198>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <MX_GPIO_Init+0x198>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a49      	ldr	r2, [pc, #292]	; (800251c <MX_GPIO_Init+0x198>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <MX_GPIO_Init+0x198>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <MX_GPIO_Init+0x198>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a42      	ldr	r2, [pc, #264]	; (800251c <MX_GPIO_Init+0x198>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <MX_GPIO_Init+0x198>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <MX_GPIO_Init+0x198>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a3b      	ldr	r2, [pc, #236]	; (800251c <MX_GPIO_Init+0x198>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <MX_GPIO_Init+0x198>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	211a      	movs	r1, #26
 8002446:	4836      	ldr	r0, [pc, #216]	; (8002520 <MX_GPIO_Init+0x19c>)
 8002448:	f001 fb6e 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002452:	4834      	ldr	r0, [pc, #208]	; (8002524 <MX_GPIO_Init+0x1a0>)
 8002454:	f001 fb68 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800245e:	4832      	ldr	r0, [pc, #200]	; (8002528 <MX_GPIO_Init+0x1a4>)
 8002460:	f001 fb62 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	2101      	movs	r1, #1
 8002468:	4830      	ldr	r0, [pc, #192]	; (800252c <MX_GPIO_Init+0x1a8>)
 800246a:	f001 fb5d 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800246e:	231a      	movs	r3, #26
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4826      	ldr	r0, [pc, #152]	; (8002520 <MX_GPIO_Init+0x19c>)
 8002486:	f001 f9b3 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <MX_GPIO_Init+0x1ac>)
 8002490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4823      	ldr	r0, [pc, #140]	; (800252c <MX_GPIO_Init+0x1a8>)
 800249e:	f001 f9a7 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	481c      	ldr	r0, [pc, #112]	; (8002528 <MX_GPIO_Init+0x1a4>)
 80024b8:	f001 f99a 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <MX_GPIO_Init+0x1a0>)
 80024d6:	f001 f98b 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 80024da:	f44f 730c 	mov.w	r3, #560	; 0x230
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_GPIO_Init+0x1a4>)
 80024f4:	f001 f97c 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	4807      	ldr	r0, [pc, #28]	; (800252c <MX_GPIO_Init+0x1a8>)
 8002510:	f001 f96e 	bl	80037f0 <HAL_GPIO_Init>

}
 8002514:	bf00      	nop
 8002516:	3730      	adds	r7, #48	; 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40021000 	.word	0x40021000
 8002530:	10110000 	.word	0x10110000

08002534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002546:	f000 fcb1 	bl	8002eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40001000 	.word	0x40001000

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255c:	b672      	cpsid	i
}
 800255e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002560:	e7fe      	b.n	8002560 <Error_Handler+0x8>
	...

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_MspInit+0x4c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_MspInit+0x4c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <HAL_RTC_MspInit+0x24>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d102      	bne.n	80025cc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RTC_MspInit+0x28>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40002800 	.word	0x40002800
 80025dc:	42470e3c 	.word	0x42470e3c

080025e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <HAL_SPI_MspInit+0x150>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f040 8091 	bne.w	8002726 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_SPI_MspInit+0x154>)
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_SPI_MspInit+0x154>)
 800260e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002612:	6453      	str	r3, [r2, #68]	; 0x44
 8002614:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_SPI_MspInit+0x154>)
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_SPI_MspInit+0x154>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	4a42      	ldr	r2, [pc, #264]	; (8002734 <HAL_SPI_MspInit+0x154>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6313      	str	r3, [r2, #48]	; 0x30
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_SPI_MspInit+0x154>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800263c:	23f0      	movs	r3, #240	; 0xf0
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264c:	2305      	movs	r3, #5
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4838      	ldr	r0, [pc, #224]	; (8002738 <HAL_SPI_MspInit+0x158>)
 8002658:	f001 f8ca 	bl	80037f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_SPI_MspInit+0x15c>)
 800265e:	4a38      	ldr	r2, [pc, #224]	; (8002740 <HAL_SPI_MspInit+0x160>)
 8002660:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002664:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002668:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_SPI_MspInit+0x15c>)
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800267c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_SPI_MspInit+0x15c>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_SPI_MspInit+0x15c>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800269c:	4827      	ldr	r0, [pc, #156]	; (800273c <HAL_SPI_MspInit+0x15c>)
 800269e:	f000 fd2b 	bl	80030f8 <HAL_DMA_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80026a8:	f7ff ff56 	bl	8002558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_SPI_MspInit+0x15c>)
 80026b0:	649a      	str	r2, [r3, #72]	; 0x48
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_SPI_MspInit+0x15c>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <HAL_SPI_MspInit+0x168>)
 80026bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <HAL_SPI_MspInit+0x164>)
 80026fc:	f000 fcfc 	bl	80030f8 <HAL_DMA_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002706:	f7ff ff27 	bl	8002558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_SPI_MspInit+0x164>)
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_SPI_MspInit+0x164>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2023      	movs	r0, #35	; 0x23
 800271c:	f000 fcc2 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002720:	2023      	movs	r0, #35	; 0x23
 8002722:	f000 fcdb 	bl	80030dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40013000 	.word	0x40013000
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000
 800273c:	200004cc 	.word	0x200004cc
 8002740:	40026458 	.word	0x40026458
 8002744:	200003d0 	.word	0x200003d0
 8002748:	40026410 	.word	0x40026410

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_TIM_Base_MspInit+0x70>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800277a:	e01a      	b.n	80027b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HAL_TIM_Base_MspInit+0x78>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d115      	bne.n	80027b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_TIM_Base_MspInit+0x74>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2037      	movs	r0, #55	; 0x37
 80027a8:	f000 fc7c 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027ac:	2037      	movs	r0, #55	; 0x37
 80027ae:	f000 fc95 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40001400 	.word	0x40001400

080027c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b094      	sub	sp, #80	; 0x50
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a9c      	ldr	r2, [pc, #624]	; (8002a58 <HAL_UART_MspInit+0x290>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d135      	bne.n	8002856 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ee:	4b9b      	ldr	r3, [pc, #620]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a9a      	ldr	r2, [pc, #616]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80027f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b98      	ldr	r3, [pc, #608]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a93      	ldr	r2, [pc, #588]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002822:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282c:	2301      	movs	r3, #1
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002834:	2308      	movs	r3, #8
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002838:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800283c:	4619      	mov	r1, r3
 800283e:	4888      	ldr	r0, [pc, #544]	; (8002a60 <HAL_UART_MspInit+0x298>)
 8002840:	f000 ffd6 	bl	80037f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2034      	movs	r0, #52	; 0x34
 800284a:	f000 fc2b 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800284e:	2034      	movs	r0, #52	; 0x34
 8002850:	f000 fc44 	bl	80030dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002854:	e145      	b.n	8002ae2 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a82      	ldr	r2, [pc, #520]	; (8002a64 <HAL_UART_MspInit+0x29c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d153      	bne.n	8002908 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
 8002864:	4b7d      	ldr	r3, [pc, #500]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4a7c      	ldr	r2, [pc, #496]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286e:	6413      	str	r3, [r2, #64]	; 0x40
 8002870:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002880:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028c6:	2308      	movs	r3, #8
 80028c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ce:	4619      	mov	r1, r3
 80028d0:	4863      	ldr	r0, [pc, #396]	; (8002a60 <HAL_UART_MspInit+0x298>)
 80028d2:	f000 ff8d 	bl	80037f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028d6:	2304      	movs	r3, #4
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028de:	2301      	movs	r3, #1
 80028e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028e6:	2308      	movs	r3, #8
 80028e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ee:	4619      	mov	r1, r3
 80028f0:	485d      	ldr	r0, [pc, #372]	; (8002a68 <HAL_UART_MspInit+0x2a0>)
 80028f2:	f000 ff7d 	bl	80037f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2035      	movs	r0, #53	; 0x35
 80028fc:	f000 fbd2 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002900:	2035      	movs	r0, #53	; 0x35
 8002902:	f000 fbeb 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 8002906:	e0ec      	b.n	8002ae2 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_UART_MspInit+0x2a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12d      	bne.n	800296e <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800291c:	f043 0310 	orr.w	r3, r3, #16
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a49      	ldr	r2, [pc, #292]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800294a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800295c:	2307      	movs	r3, #7
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002964:	4619      	mov	r1, r3
 8002966:	4842      	ldr	r0, [pc, #264]	; (8002a70 <HAL_UART_MspInit+0x2a8>)
 8002968:	f000 ff42 	bl	80037f0 <HAL_GPIO_Init>
}
 800296c:	e0b9      	b.n	8002ae2 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a40      	ldr	r2, [pc, #256]	; (8002a74 <HAL_UART_MspInit+0x2ac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d134      	bne.n	80029e2 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a36      	ldr	r2, [pc, #216]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a2f      	ldr	r2, [pc, #188]	; (8002a5c <HAL_UART_MspInit+0x294>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029b0:	230c      	movs	r3, #12
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c0:	2307      	movs	r3, #7
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c8:	4619      	mov	r1, r3
 80029ca:	4829      	ldr	r0, [pc, #164]	; (8002a70 <HAL_UART_MspInit+0x2a8>)
 80029cc:	f000 ff10 	bl	80037f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2026      	movs	r0, #38	; 0x26
 80029d6:	f000 fb65 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029da:	2026      	movs	r0, #38	; 0x26
 80029dc:	f000 fb7e 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 80029e0:	e07f      	b.n	8002ae2 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_UART_MspInit+0x2b0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d149      	bne.n	8002a80 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80029f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fa:	6413      	str	r3, [r2, #64]	; 0x40
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x294>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_UART_MspInit+0x294>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a36:	2307      	movs	r3, #7
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480e      	ldr	r0, [pc, #56]	; (8002a7c <HAL_UART_MspInit+0x2b4>)
 8002a42:	f000 fed5 	bl	80037f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2027      	movs	r0, #39	; 0x27
 8002a4c:	f000 fb2a 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a50:	2027      	movs	r0, #39	; 0x27
 8002a52:	f000 fb43 	bl	80030dc <HAL_NVIC_EnableIRQ>
}
 8002a56:	e044      	b.n	8002ae2 <HAL_UART_MspInit+0x31a>
 8002a58:	40004c00 	.word	0x40004c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40005000 	.word	0x40005000
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40011000 	.word	0x40011000
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40004800 	.word	0x40004800
 8002a7c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_UART_MspInit+0x324>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12b      	bne.n	8002ae2 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002a94:	f043 0320 	orr.w	r3, r3, #32
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_UART_MspInit+0x328>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ada:	4619      	mov	r1, r3
 8002adc:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_UART_MspInit+0x32c>)
 8002ade:	f000 fe87 	bl	80037f0 <HAL_GPIO_Init>
}
 8002ae2:	bf00      	nop
 8002ae4:	3750      	adds	r7, #80	; 0x50
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020800 	.word	0x40020800

08002af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	2036      	movs	r0, #54	; 0x36
 8002b0e:	f000 fac9 	bl	80030a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b12:	2036      	movs	r0, #54	; 0x36
 8002b14:	f000 fae2 	bl	80030dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b22:	f043 0310 	orr.w	r3, r3, #16
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b34:	f107 0210 	add.w	r2, r7, #16
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fc54 	bl	80043ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b44:	f001 fc2a 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <HAL_InitTick+0xb0>)
 8002b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b7c:	4809      	ldr	r0, [pc, #36]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b7e:	f002 fe77 	bl	8005870 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b88:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b8a:	f002 fec1 	bl	8005910 <HAL_TIM_Base_Start_IT>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	2000055c 	.word	0x2000055c
 8002ba8:	40001000 	.word	0x40001000

08002bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <NMI_Handler+0x4>

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <SPI1_IRQHandler+0x10>)
 8002c0a:	f002 fbe3 	bl	80053d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000330 	.word	0x20000330

08002c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <USART1_IRQHandler+0x10>)
 8002c1e:	f003 fc85 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200001bc 	.word	0x200001bc

08002c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <USART2_IRQHandler+0x10>)
 8002c32:	f003 fc7b 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000038c 	.word	0x2000038c

08002c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <USART3_IRQHandler+0x10>)
 8002c46:	f003 fc71 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200000e4 	.word	0x200000e4

08002c54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <UART4_IRQHandler+0x10>)
 8002c5a:	f003 fc67 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200002e8 	.word	0x200002e8

08002c68 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <UART5_IRQHandler+0x10>)
 8002c6e:	f003 fc5d 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000174 	.word	0x20000174

08002c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <TIM6_DAC_IRQHandler+0x10>)
 8002c82:	f002 feb5 	bl	80059f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000055c 	.word	0x2000055c

08002c90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <TIM7_IRQHandler+0x10>)
 8002c96:	f002 feab 	bl	80059f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000480 	.word	0x20000480

08002ca4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA2_Stream0_IRQHandler+0x10>)
 8002caa:	f000 fb65 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200003d0 	.word	0x200003d0

08002cb8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <DMA2_Stream3_IRQHandler+0x10>)
 8002cbe:	f000 fb5b 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200004cc 	.word	0x200004cc

08002ccc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <USART6_IRQHandler+0x10>)
 8002cd2:	f003 fc2b 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000027c 	.word	0x2000027c

08002ce0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e00a      	b.n	8002d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cf2:	f3af 8000 	nop.w
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	60ba      	str	r2, [r7, #8]
 8002cfe:	b2ca      	uxtb	r2, r1
 8002d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbf0      	blt.n	8002cf2 <_read+0x12>
	}

return len;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return -1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d42:	605a      	str	r2, [r3, #4]
	return 0;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_isatty>:

int _isatty(int file)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	return 1;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f004 f912 	bl	8006fdc <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20020000 	.word	0x20020000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	200000d4 	.word	0x200000d4
 8002dec:	200005b8 	.word	0x200005b8

08002df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <SystemInit+0x20>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <SystemInit+0x20>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e18:	480d      	ldr	r0, [pc, #52]	; (8002e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e30:	4c0b      	ldr	r4, [pc, #44]	; (8002e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e3e:	f7ff ffd7 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e42:	f004 f8d1 	bl	8006fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e46:	f7fe fd6b 	bl	8001920 <main>
  bx  lr    
 8002e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002e58:	080086dc 	.word	0x080086dc
  ldr r2, =_sbss
 8002e5c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002e60:	200005b8 	.word	0x200005b8

08002e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <ADC_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_Init+0x40>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_Init+0x40>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_Init+0x40>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 f8fc 	bl	800308e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7ff fe2e 	bl	8002af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff fb62 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000038 	.word	0x20000038
 8002ed0:	200005a4 	.word	0x200005a4

08002ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200005a4 	.word	0x200005a4

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000038 	.word	0x20000038

08002f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f50:	4013      	ands	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__NVIC_GetPriorityGrouping+0x18>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	f003 0307 	and.w	r3, r3, #7
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db0b      	blt.n	8002fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <__NVIC_EnableIRQ+0x38>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2001      	movs	r0, #1
 8002fba:	fa00 f202 	lsl.w	r2, r0, r2
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	db0a      	blt.n	8002ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <__NVIC_SetPriority+0x4c>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	0112      	lsls	r2, r2, #4
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ffc:	e00a      	b.n	8003014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4908      	ldr	r1, [pc, #32]	; (8003024 <__NVIC_SetPriority+0x50>)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	3b04      	subs	r3, #4
 800300c:	0112      	lsls	r2, r2, #4
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	440b      	add	r3, r1
 8003012:	761a      	strb	r2, [r3, #24]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f1c3 0307 	rsb	r3, r3, #7
 8003042:	2b04      	cmp	r3, #4
 8003044:	bf28      	it	cs
 8003046:	2304      	movcs	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3304      	adds	r3, #4
 800304e:	2b06      	cmp	r3, #6
 8003050:	d902      	bls.n	8003058 <NVIC_EncodePriority+0x30>
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3b03      	subs	r3, #3
 8003056:	e000      	b.n	800305a <NVIC_EncodePriority+0x32>
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	401a      	ands	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003070:	f04f 31ff 	mov.w	r1, #4294967295
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	43d9      	mvns	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	4313      	orrs	r3, r2
         );
}
 8003082:	4618      	mov	r0, r3
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff4c 	bl	8002f34 <__NVIC_SetPriorityGrouping>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b6:	f7ff ff61 	bl	8002f7c <__NVIC_GetPriorityGrouping>
 80030ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff ffb1 	bl	8003028 <NVIC_EncodePriority>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff80 	bl	8002fd4 <__NVIC_SetPriority>
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff54 	bl	8002f98 <__NVIC_EnableIRQ>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fee6 	bl	8002ed4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e099      	b.n	8003248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003134:	e00f      	b.n	8003156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003136:	f7ff fecd 	bl	8002ed4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d908      	bls.n	8003156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e078      	b.n	8003248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e8      	bne.n	8003136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_DMA_Init+0x158>)
 8003170:	4013      	ands	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4313      	orrs	r3, r2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0307 	bic.w	r3, r3, #7
 80031d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d117      	bne.n	800321a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa7b 	bl	80036f8 <DMA_CheckFifoParam>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003216:	2301      	movs	r3, #1
 8003218:	e016      	b.n	8003248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa32 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003228:	4603      	mov	r3, r0
 800322a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	f010803f 	.word	0xf010803f

08003254 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003262:	f7ff fe37 	bl	8002ed4 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d008      	beq.n	8003286 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e052      	b.n	800332c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_Abort+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	e013      	b.n	8003300 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d8:	f7ff fdfc 	bl	8002ed4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d90c      	bls.n	8003300 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e015      	b.n	800332c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e4      	bne.n	80032d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	223f      	movs	r2, #63	; 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00c      	b.n	800336c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2205      	movs	r2, #5
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_DMA_IRQHandler+0x258>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <HAL_DMA_IRQHandler+0x25c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2208      	movs	r2, #8
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2208      	movs	r2, #8
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2201      	movs	r2, #1
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2204      	movs	r2, #4
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2204      	movs	r2, #4
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d043      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2210      	movs	r2, #16
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d024      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e01f      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e016      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0208 	bic.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2220      	movs	r2, #32
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 808e 	beq.w	8003616 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8086 	beq.w	8003616 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2220      	movs	r2, #32
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d136      	bne.n	8003590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_IRQHandler+0x1da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	223f      	movs	r2, #63	; 0x3f
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07d      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
        }
        return;
 800358e:	e078      	b.n	8003682 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d030      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e02b      	b.n	8003616 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e022      	b.n	8003616 <HAL_DMA_IRQHandler+0x29e>
 80035d0:	20000030 	.word	0x20000030
 80035d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0210 	bic.w	r2, r2, #16
 80035f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d032      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d022      	beq.n	8003670 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2205      	movs	r2, #5
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	429a      	cmp	r2, r3
 800364c:	d307      	bcc.n	800365e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f2      	bne.n	8003642 <HAL_DMA_IRQHandler+0x2ca>
 800365c:	e000      	b.n	8003660 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800365e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
 8003680:	e000      	b.n	8003684 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003682:	bf00      	nop
    }
  }
}
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop

0800368c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	0800862c 	.word	0x0800862c

080036f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
    }
  } 
  
  return status; 
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e16b      	b.n	8003ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 815a 	bne.w	8003ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80b4 	beq.w	8003ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b60      	ldr	r3, [pc, #384]	; (8003afc <HAL_GPIO_Init+0x30c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a5f      	ldr	r2, [pc, #380]	; (8003afc <HAL_GPIO_Init+0x30c>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_GPIO_Init+0x30c>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a5b      	ldr	r2, [pc, #364]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a52      	ldr	r2, [pc, #328]	; (8003b04 <HAL_GPIO_Init+0x314>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02b      	beq.n	8003a16 <HAL_GPIO_Init+0x226>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a51      	ldr	r2, [pc, #324]	; (8003b08 <HAL_GPIO_Init+0x318>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d025      	beq.n	8003a12 <HAL_GPIO_Init+0x222>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a50      	ldr	r2, [pc, #320]	; (8003b0c <HAL_GPIO_Init+0x31c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01f      	beq.n	8003a0e <HAL_GPIO_Init+0x21e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4f      	ldr	r2, [pc, #316]	; (8003b10 <HAL_GPIO_Init+0x320>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d019      	beq.n	8003a0a <HAL_GPIO_Init+0x21a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_GPIO_Init+0x324>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_GPIO_Init+0x216>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_GPIO_Init+0x328>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <HAL_GPIO_Init+0x212>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_GPIO_Init+0x32c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <HAL_GPIO_Init+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_GPIO_Init+0x330>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_GPIO_Init+0x20a>
 80039f6:	2307      	movs	r3, #7
 80039f8:	e00e      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 80039fa:	2308      	movs	r3, #8
 80039fc:	e00c      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 80039fe:	2306      	movs	r3, #6
 8003a00:	e00a      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a02:	2305      	movs	r3, #5
 8003a04:	e008      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a06:	2304      	movs	r3, #4
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x228>
 8003a16:	2300      	movs	r3, #0
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	f002 0203 	and.w	r2, r2, #3
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	4093      	lsls	r3, r2
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a28:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_GPIO_Init+0x310>)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a5a:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a60:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad8:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_GPIO_Init+0x334>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	f67f ae90 	bls.w	800380c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40013800 	.word	0x40013800
 8003b04:	40020000 	.word	0x40020000
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020c00 	.word	0x40020c00
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40021400 	.word	0x40021400
 8003b1c:	40021800 	.word	0x40021800
 8003b20:	40021c00 	.word	0x40021c00
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e264      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d075      	beq.n	8003c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	4ba3      	ldr	r3, [pc, #652]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4ba0      	ldr	r3, [pc, #640]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d112      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b9d      	ldr	r3, [pc, #628]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d157      	bne.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e23f      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x74>
 8003bc2:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a90      	ldr	r2, [pc, #576]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a8a      	ldr	r2, [pc, #552]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bf4:	4b84      	ldr	r3, [pc, #528]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7ff f95e 	bl	8002ed4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7ff f95a 	bl	8002ed4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e204      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7ff f94a 	bl	8002ed4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7ff f946 	bl	8002ed4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1f0      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7e:	4b62      	ldr	r3, [pc, #392]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c4      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4952      	ldr	r1, [pc, #328]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_OscConfig+0x2b0>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7ff f8ff 	bl	8002ed4 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cda:	f7ff f8fb 	bl	8002ed4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a5      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4940      	ldr	r1, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x2b0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff f8de 	bl	8002ed4 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7ff f8da 	bl	8002ed4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e184      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d030      	beq.n	8003da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x2b4>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7ff f8be 	bl	8002ed4 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7ff f8ba 	bl	8002ed4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e164      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x200>
 8003d7a:	e015      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x2b4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7ff f8a7 	bl	8002ed4 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7ff f8a3 	bl	8002ed4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e14d      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a0 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d121      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfe:	f7ff f869 	bl	8002ed4 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	e011      	b.n	8003e2a <HAL_RCC_OscConfig+0x2ce>
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
 8003e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7ff f85c 	bl	8002ed4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e106      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x4e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
 8003e3e:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a80      	ldr	r2, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	e01c      	b.n	8003e86 <HAL_RCC_OscConfig+0x32a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x312>
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	4b78      	ldr	r3, [pc, #480]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a77      	ldr	r2, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0x32a>
 8003e6e:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a74      	ldr	r2, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	4b72      	ldr	r3, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a71      	ldr	r2, [pc, #452]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d015      	beq.n	8003eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7ff f821 	bl	8002ed4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7ff f81d 	bl	8002ed4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0c5      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RCC_OscConfig+0x33a>
 8003eb8:	e014      	b.n	8003ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7ff f80b 	bl	8002ed4 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7ff f807 	bl	8002ed4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0af      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed8:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4a55      	ldr	r2, [pc, #340]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809b 	beq.w	8004036 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d05c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d141      	bne.n	8003f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe ffdb 	bl	8002ed4 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe ffd7 	bl	8002ed4 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e081      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	019b      	lsls	r3, r3, #6
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	4937      	ldr	r1, [pc, #220]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe ffb0 	bl	8002ed4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fe ffac 	bl	8002ed4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e056      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x41c>
 8003f96:	e04e      	b.n	8004036 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe ff99 	bl	8002ed4 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe ff95 	bl	8002ed4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e03f      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x44a>
 8003fc4:	e037      	b.n	8004036 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e032      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d028      	beq.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d121      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d11a      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004008:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d107      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40007000 	.word	0x40007000
 8004044:	40023800 	.word	0x40023800
 8004048:	42470060 	.word	0x42470060

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0cc      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d90c      	bls.n	8004088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	494d      	ldr	r1, [pc, #308]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d044      	beq.n	800416c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d119      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d003      	beq.n	800410a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004106:	2b03      	cmp	r3, #3
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e067      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4934      	ldr	r1, [pc, #208]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800413c:	f7fe feca 	bl	8002ed4 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fe fec6 	bl	8002ed4 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e04f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 020c 	and.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d1eb      	bne.n	8004144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d20c      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e032      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4916      	ldr	r1, [pc, #88]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d2:	f000 f821 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490a      	ldr	r1, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fc80 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00
 8004208:	40023800 	.word	0x40023800
 800420c:	08008614 	.word	0x08008614
 8004210:	20000030 	.word	0x20000030
 8004214:	20000034 	.word	0x20000034

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	b5b0      	push	{r4, r5, r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800421e:	2100      	movs	r1, #0
 8004220:	6079      	str	r1, [r7, #4]
 8004222:	2100      	movs	r1, #0
 8004224:	60f9      	str	r1, [r7, #12]
 8004226:	2100      	movs	r1, #0
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800422a:	2100      	movs	r1, #0
 800422c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800422e:	4952      	ldr	r1, [pc, #328]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 8004230:	6889      	ldr	r1, [r1, #8]
 8004232:	f001 010c 	and.w	r1, r1, #12
 8004236:	2908      	cmp	r1, #8
 8004238:	d00d      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x3e>
 800423a:	2908      	cmp	r1, #8
 800423c:	f200 8094 	bhi.w	8004368 <HAL_RCC_GetSysClockFreq+0x150>
 8004240:	2900      	cmp	r1, #0
 8004242:	d002      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x32>
 8004244:	2904      	cmp	r1, #4
 8004246:	d003      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x38>
 8004248:	e08e      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424a:	4b4c      	ldr	r3, [pc, #304]	; (800437c <HAL_RCC_GetSysClockFreq+0x164>)
 800424c:	60bb      	str	r3, [r7, #8]
       break;
 800424e:	e08e      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCC_GetSysClockFreq+0x168>)
 8004252:	60bb      	str	r3, [r7, #8]
      break;
 8004254:	e08b      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004256:	4948      	ldr	r1, [pc, #288]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 8004258:	6849      	ldr	r1, [r1, #4]
 800425a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800425e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004260:	4945      	ldr	r1, [pc, #276]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 8004262:	6849      	ldr	r1, [r1, #4]
 8004264:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004268:	2900      	cmp	r1, #0
 800426a:	d024      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426c:	4942      	ldr	r1, [pc, #264]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 800426e:	6849      	ldr	r1, [r1, #4]
 8004270:	0989      	lsrs	r1, r1, #6
 8004272:	4608      	mov	r0, r1
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	f240 14ff 	movw	r4, #511	; 0x1ff
 800427c:	f04f 0500 	mov.w	r5, #0
 8004280:	ea00 0204 	and.w	r2, r0, r4
 8004284:	ea01 0305 	and.w	r3, r1, r5
 8004288:	493d      	ldr	r1, [pc, #244]	; (8004380 <HAL_RCC_GetSysClockFreq+0x168>)
 800428a:	fb01 f003 	mul.w	r0, r1, r3
 800428e:	2100      	movs	r1, #0
 8004290:	fb01 f102 	mul.w	r1, r1, r2
 8004294:	1844      	adds	r4, r0, r1
 8004296:	493a      	ldr	r1, [pc, #232]	; (8004380 <HAL_RCC_GetSysClockFreq+0x168>)
 8004298:	fba2 0101 	umull	r0, r1, r2, r1
 800429c:	1863      	adds	r3, r4, r1
 800429e:	4619      	mov	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f7fb ffea 	bl	8000280 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e04a      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	ea02 0400 	and.w	r4, r2, r0
 80042ce:	ea03 0501 	and.w	r5, r3, r1
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	014b      	lsls	r3, r1, #5
 80042e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e4:	0142      	lsls	r2, r0, #5
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	1b00      	subs	r0, r0, r4
 80042ec:	eb61 0105 	sbc.w	r1, r1, r5
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	018b      	lsls	r3, r1, #6
 80042fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fe:	0182      	lsls	r2, r0, #6
 8004300:	1a12      	subs	r2, r2, r0
 8004302:	eb63 0301 	sbc.w	r3, r3, r1
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	00d9      	lsls	r1, r3, #3
 8004310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004314:	00d0      	lsls	r0, r2, #3
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	1912      	adds	r2, r2, r4
 800431c:	eb45 0303 	adc.w	r3, r5, r3
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0299      	lsls	r1, r3, #10
 800432a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800432e:	0290      	lsls	r0, r2, #10
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	461a      	mov	r2, r3
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f7fb ff9e 	bl	8000280 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_GetSysClockFreq+0x160>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	60bb      	str	r3, [r7, #8]
      break;
 8004366:	e002      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_GetSysClockFreq+0x164>)
 800436a:	60bb      	str	r3, [r7, #8]
      break;
 800436c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436e:	68bb      	ldr	r3, [r7, #8]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bdb0      	pop	{r4, r5, r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	017d7840 	.word	0x017d7840

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000030 	.word	0x20000030

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08008624 	.word	0x08008624

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08008624 	.word	0x08008624

080043ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	220f      	movs	r2, #15
 80043fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0203 	and.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_GetClockConfig+0x5c>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_RCC_GetClockConfig+0x60>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	40023c00 	.word	0x40023c00

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d035      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004478:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800447e:	f7fe fd29 	bl	8002ed4 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004486:	f7fe fd25 	bl	8002ed4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0b0      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	019a      	lsls	r2, r3, #6
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	071b      	lsls	r3, r3, #28
 80044b0:	4955      	ldr	r1, [pc, #340]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044b8:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044be:	f7fe fd09 	bl	8002ed4 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044c6:	f7fe fd05 	bl	8002ed4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e090      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d8:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8083 	beq.w	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b44      	ldr	r3, [pc, #272]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3e      	ldr	r2, [pc, #248]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004518:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800451a:	f7fe fcdb 	bl	8002ed4 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fe fcd7 	bl	8002ed4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e062      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004540:	4b31      	ldr	r3, [pc, #196]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004548:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	429a      	cmp	r2, r3
 800455c:	d028      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004568:	4b29      	ldr	r3, [pc, #164]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456e:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d114      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fca5 	bl	8002ed4 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458c:	e00a      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fe fca1 	bl	8002ed4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	; 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e02a      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ee      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045bc:	d10d      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d2:	490d      	ldr	r1, [pc, #52]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]
 80045d8:	e005      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045e4:	6093      	str	r3, [r2, #8]
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	4905      	ldr	r1, [pc, #20]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	42470068 	.word	0x42470068
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	42470e40 	.word	0x42470e40

08004614 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e083      	b.n	800472e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f5b      	ldrb	r3, [r3, #29]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd ffbc 	bl	80025b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	22ca      	movs	r2, #202	; 0xca
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2253      	movs	r2, #83	; 0x53
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9fb 	bl	8004a4e <RTC_EnterInitMode>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e05e      	b.n	800472e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800467e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004682:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68d2      	ldr	r2, [r2, #12]
 80046aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	041a      	lsls	r2, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10e      	bne.n	80046fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f98d 	bl	80049fe <HAL_RTC_WaitForSynchro>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e018      	b.n	800472e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	7f1b      	ldrb	r3, [r3, #28]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_RTC_SetTime+0x1c>
 800474e:	2302      	movs	r3, #2
 8004750:	e0aa      	b.n	80048a8 <HAL_RTC_SetTime+0x172>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2202      	movs	r2, #2
 800475c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d126      	bne.n	80047b2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f992 	bl	8004aa6 <RTC_ByteToBcd2>
 8004782:	4603      	mov	r3, r0
 8004784:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f98b 	bl	8004aa6 <RTC_ByteToBcd2>
 8004790:	4603      	mov	r3, r0
 8004792:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004794:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	789b      	ldrb	r3, [r3, #2]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f983 	bl	8004aa6 <RTC_ByteToBcd2>
 80047a0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80047a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	78db      	ldrb	r3, [r3, #3]
 80047aa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e018      	b.n	80047e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047d2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80047d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	78db      	ldrb	r3, [r3, #3]
 80047de:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	22ca      	movs	r2, #202	; 0xca
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2253      	movs	r2, #83	; 0x53
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f92a 	bl	8004a4e <RTC_EnterInitMode>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2204      	movs	r2, #4
 800480c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e047      	b.n	80048a8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004822:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004826:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004836:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d111      	bne.n	8004892 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8c5 	bl	80049fe <HAL_RTC_WaitForSynchro>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	22ff      	movs	r2, #255	; 0xff
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e00a      	b.n	80048a8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80048a6:	2300      	movs	r3, #0
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}

080048b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	7f1b      	ldrb	r3, [r3, #28]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_RTC_SetDate+0x1c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e094      	b.n	80049f6 <HAL_RTC_SetDate+0x146>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2202      	movs	r2, #2
 80048d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10e      	bne.n	80048fc <HAL_RTC_SetDate+0x4c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	f023 0310 	bic.w	r3, r3, #16
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	330a      	adds	r3, #10
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11c      	bne.n	800493c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	78db      	ldrb	r3, [r3, #3]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f8cd 	bl	8004aa6 <RTC_ByteToBcd2>
 800490c:	4603      	mov	r3, r0
 800490e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f8c6 	bl	8004aa6 <RTC_ByteToBcd2>
 800491a:	4603      	mov	r3, r0
 800491c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800491e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	789b      	ldrb	r3, [r3, #2]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f8be 	bl	8004aa6 <RTC_ByteToBcd2>
 800492a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800492c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e00e      	b.n	800495a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	78db      	ldrb	r3, [r3, #3]
 8004940:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004948:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800494e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	22ca      	movs	r2, #202	; 0xca
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2253      	movs	r2, #83	; 0x53
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f86f 	bl	8004a4e <RTC_EnterInitMode>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	22ff      	movs	r2, #255	; 0xff
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2204      	movs	r2, #4
 8004982:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e033      	b.n	80049f6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800499c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d111      	bne.n	80049e0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f81e 	bl	80049fe <HAL_RTC_WaitForSynchro>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2204      	movs	r2, #4
 80049d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00a      	b.n	80049f6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1a:	f7fe fa5b 	bl	8002ed4 <HAL_GetTick>
 8004a1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a20:	e009      	b.n	8004a36 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a22:	f7fe fa57 	bl	8002ed4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a30:	d901      	bls.n	8004a36 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e007      	b.n	8004a46 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d119      	bne.n	8004a9c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a72:	f7fe fa2f 	bl	8002ed4 <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a78:	e009      	b.n	8004a8e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a7a:	f7fe fa2b 	bl	8002ed4 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a88:	d901      	bls.n	8004a8e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e007      	b.n	8004a9e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ee      	beq.n	8004a7a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004ab4:	e005      	b.n	8004ac2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	3b0a      	subs	r3, #10
 8004ac0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d8f6      	bhi.n	8004ab6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b2db      	uxtb	r3, r3
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e07b      	b.n	8004bec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d108      	bne.n	8004b0e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b04:	d009      	beq.n	8004b1a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	61da      	str	r2, [r3, #28]
 8004b0c:	e005      	b.n	8004b1a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fd fd53 	bl	80025e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	f003 0104 	and.w	r1, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0210 	and.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Transmit+0x22>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e126      	b.n	8004e64 <HAL_SPI_Transmit+0x270>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fe f959 	bl	8002ed4 <HAL_GetTick>
 8004c22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
 8004c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c38:	e10b      	b.n	8004e52 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit+0x52>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4a:	e102      	b.n	8004e52 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c92:	d10f      	bne.n	8004cb4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d007      	beq.n	8004cd2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d14b      	bne.n	8004d74 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0xf6>
 8004ce4:	8afb      	ldrh	r3, [r7, #22]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d13e      	bne.n	8004d68 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d0e:	e02b      	b.n	8004d68 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d112      	bne.n	8004d44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d42:	e011      	b.n	8004d68 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d44:	f7fe f8c6 	bl	8002ed4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d803      	bhi.n	8004d5c <HAL_SPI_Transmit+0x168>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Transmit+0x16e>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d66:	e074      	b.n	8004e52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ce      	bne.n	8004d10 <HAL_SPI_Transmit+0x11c>
 8004d72:	e04c      	b.n	8004e0e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Transmit+0x18e>
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d140      	bne.n	8004e04 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004da8:	e02c      	b.n	8004e04 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d113      	bne.n	8004de0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dde:	e011      	b.n	8004e04 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de0:	f7fe f878 	bl	8002ed4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d803      	bhi.n	8004df8 <HAL_SPI_Transmit+0x204>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d102      	bne.n	8004dfe <HAL_SPI_Transmit+0x20a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e02:	e026      	b.n	8004e52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1cd      	bne.n	8004daa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fcea 	bl	80057ec <SPI_EndRxTxTransaction>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e000      	b.n	8004e52 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e88:	d112      	bne.n	8004eb0 <HAL_SPI_Receive+0x44>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10e      	bne.n	8004eb0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2204      	movs	r2, #4
 8004e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f8f1 	bl	800508e <HAL_SPI_TransmitReceive>
 8004eac:	4603      	mov	r3, r0
 8004eae:	e0ea      	b.n	8005086 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Receive+0x52>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0e3      	b.n	8005086 <HAL_SPI_Receive+0x21a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec6:	f7fe f805 	bl	8002ed4 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004edc:	e0ca      	b.n	8005074 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_Receive+0x7e>
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eee:	e0c1      	b.n	8005074 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f36:	d10f      	bne.n	8004f58 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d007      	beq.n	8004f76 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d162      	bne.n	8005044 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f7e:	e02e      	b.n	8004fde <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d115      	bne.n	8004fba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f103 020c 	add.w	r2, r3, #12
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	7812      	ldrb	r2, [r2, #0]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb8:	e011      	b.n	8004fde <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fba:	f7fd ff8b 	bl	8002ed4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_Receive+0x166>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_Receive+0x16c>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fdc:	e04a      	b.n	8005074 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1cb      	bne.n	8004f80 <HAL_SPI_Receive+0x114>
 8004fe8:	e031      	b.n	800504e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d113      	bne.n	8005020 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	b292      	uxth	r2, r2
 8005004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800501e:	e011      	b.n	8005044 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005020:	f7fd ff58 	bl	8002ed4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d803      	bhi.n	8005038 <HAL_SPI_Receive+0x1cc>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d102      	bne.n	800503e <HAL_SPI_Receive+0x1d2>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005042:	e017      	b.n	8005074 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1cd      	bne.n	8004fea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fb64 	bl	8005720 <SPI_EndRxTransaction>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
 8005070:	e000      	b.n	8005074 <HAL_SPI_Receive+0x208>
  }

error :
 8005072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b08c      	sub	sp, #48	; 0x30
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800509c:	2301      	movs	r3, #1
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x26>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e18a      	b.n	80053ca <HAL_SPI_TransmitReceive+0x33c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050bc:	f7fd ff0a 	bl	8002ed4 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d00f      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x70>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e4:	d107      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x68>
 80050ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d003      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050fc:	e15b      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x82>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x82>
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005116:	e14e      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b04      	cmp	r3, #4
 8005122:	d003      	beq.n	800512c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2205      	movs	r2, #5
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	887a      	ldrh	r2, [r7, #2]
 8005142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	887a      	ldrh	r2, [r7, #2]
 8005154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d007      	beq.n	8005180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d178      	bne.n	800527c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x10a>
 8005192:	8b7b      	ldrh	r3, [r7, #26]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d166      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	881a      	ldrh	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	1c9a      	adds	r2, r3, #2
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051bc:	e053      	b.n	8005266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d11b      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x176>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x176>
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d113      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	1c9a      	adds	r2, r3, #2
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d119      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x1b8>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d014      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	b292      	uxth	r2, r2
 8005228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	1c9a      	adds	r2, r3, #2
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005242:	2301      	movs	r3, #1
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005246:	f7fd fe45 	bl	8002ed4 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005252:	429a      	cmp	r2, r3
 8005254:	d807      	bhi.n	8005266 <HAL_SPI_TransmitReceive+0x1d8>
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d003      	beq.n	8005266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005264:	e0a7      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1a6      	bne.n	80051be <HAL_SPI_TransmitReceive+0x130>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1a1      	bne.n	80051be <HAL_SPI_TransmitReceive+0x130>
 800527a:	e07c      	b.n	8005376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_SPI_TransmitReceive+0x1fc>
 8005284:	8b7b      	ldrh	r3, [r7, #26]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d16b      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b0:	e057      	b.n	8005362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d11c      	bne.n	80052fa <HAL_SPI_TransmitReceive+0x26c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_SPI_TransmitReceive+0x26c>
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d114      	bne.n	80052fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d119      	bne.n	800533c <HAL_SPI_TransmitReceive+0x2ae>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d014      	beq.n	800533c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005338:	2301      	movs	r3, #1
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800533c:	f7fd fdca 	bl	8002ed4 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005348:	429a      	cmp	r2, r3
 800534a:	d803      	bhi.n	8005354 <HAL_SPI_TransmitReceive+0x2c6>
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d102      	bne.n	800535a <HAL_SPI_TransmitReceive+0x2cc>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005360:	e029      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1a2      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x224>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d19d      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa36 	bl	80057ec <SPI_EndRxTxTransaction>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005392:	e010      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e000      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3730      	adds	r7, #48	; 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
    return;
 8005416:	e0d7      	b.n	80055c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_SPI_IRQHandler+0x66>
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	09db      	lsrs	r3, r3, #7
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
    return;
 8005438:	e0c6      	b.n	80055c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <HAL_SPI_IRQHandler+0x8c>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80b4 	beq.w	80055c8 <HAL_SPI_IRQHandler+0x1f4>
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80ad 	beq.w	80055c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	099b      	lsrs	r3, r3, #6
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d023      	beq.n	80054c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b03      	cmp	r3, #3
 8005484:	d011      	beq.n	80054aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f043 0204 	orr.w	r2, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	e00b      	b.n	80054c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
        return;
 80054c0:	e082      	b.n	80055c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d014      	beq.n	80054f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00c      	beq.n	800551e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f043 0208 	orr.w	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	2b00      	cmp	r3, #0
 8005524:	d04f      	beq.n	80055c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005534:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_SPI_IRQHandler+0x17e>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d034      	beq.n	80055bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0203 	bic.w	r2, r2, #3
 8005560:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d011      	beq.n	800558e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556e:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_SPI_IRQHandler+0x1fc>)
 8005570:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005576:	4618      	mov	r0, r3
 8005578:	f7fd fedc 	bl	8003334 <HAL_DMA_Abort_IT>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <HAL_SPI_IRQHandler+0x1fc>)
 800559c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fd fec6 	bl	8003334 <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80055ba:	e003      	b.n	80055c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f809 	bl	80055d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055c2:	e000      	b.n	80055c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80055c4:	bf00      	nop
    return;
 80055c6:	bf00      	nop
  }
}
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	080055e9 	.word	0x080055e9

080055d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff ffe6 	bl	80055d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005620:	f7fd fc58 	bl	8002ed4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4413      	add	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005630:	f7fd fc50 	bl	8002ed4 <HAL_GetTick>
 8005634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	0d1b      	lsrs	r3, r3, #20
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	fb02 f303 	mul.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005646:	e054      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d050      	beq.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005650:	f7fd fc40 	bl	8002ed4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	429a      	cmp	r2, r3
 800565e:	d902      	bls.n	8005666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d13d      	bne.n	80056e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d111      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005688:	d004      	beq.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d107      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d10f      	bne.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e017      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	d19b      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000030 	.word	0x20000030

08005720 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005734:	d111      	bne.n	800575a <SPI_EndRxTransaction+0x3a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573e:	d004      	beq.n	800574a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005748:	d107      	bne.n	800575a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d12a      	bne.n	80057ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576c:	d012      	beq.n	8005794 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ff49 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02d      	beq.n	80057e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e026      	b.n	80057e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	2101      	movs	r1, #1
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff ff36 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01a      	beq.n	80057e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e013      	b.n	80057e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	2101      	movs	r1, #1
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff ff23 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e000      	b.n	80057e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <SPI_EndRxTxTransaction+0x7c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <SPI_EndRxTxTransaction+0x80>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	0d5b      	lsrs	r3, r3, #21
 8005804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d112      	bne.n	800583e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff fef4 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e00f      	b.n	800585e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3b01      	subs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d0f2      	beq.n	800583e <SPI_EndRxTxTransaction+0x52>
 8005858:	e000      	b.n	800585c <SPI_EndRxTxTransaction+0x70>
        break;
 800585a:	bf00      	nop
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000030 	.word	0x20000030
 800586c:	165e9f81 	.word	0x165e9f81

08005870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e041      	b.n	8005906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc ff58 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fad4 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d001      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e04e      	b.n	80059c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a23      	ldr	r2, [pc, #140]	; (80059d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d01d      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x80>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <HAL_TIM_Base_Start_IT+0xdc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d111      	bne.n	80059b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d010      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	e007      	b.n	80059c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40010400 	.word	0x40010400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40001800 	.word	0x40001800

080059f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0202 	mvn.w	r2, #2
 8005a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f9f4 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f9e6 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f9f7 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0204 	mvn.w	r2, #4
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9ca 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9bc 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f9cd 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d122      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d11b      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0208 	mvn.w	r2, #8
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9a0 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f992 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9a3 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d122      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d11b      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0210 	mvn.w	r2, #16
 8005b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f976 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005b34:	e005      	b.n	8005b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f968 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f979 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d10e      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d107      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0201 	mvn.w	r2, #1
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fc fce0 	bl	8002534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fbac 	bl	80062f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d10e      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d107      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f93e 	bl	8005e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0220 	mvn.w	r2, #32
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb76 	bl	80062e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0b3      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x180>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c50:	d03e      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xd0>
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	f200 8087 	bhi.w	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	f000 8085 	beq.w	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c66:	d87f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d01a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xa2>
 8005c6c:	2b70      	cmp	r3, #112	; 0x70
 8005c6e:	d87b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c70:	2b60      	cmp	r3, #96	; 0x60
 8005c72:	d050      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x116>
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d877      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d03c      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xf6>
 8005c7c:	2b50      	cmp	r3, #80	; 0x50
 8005c7e:	d873      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d058      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x136>
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d86f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d064      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x156>
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d86b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d060      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x156>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d867      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05c      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x156>
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d05a      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ca0:	e062      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6899      	ldr	r1, [r3, #8]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f000 fa7b 	bl	80061ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	609a      	str	r2, [r3, #8]
      break;
 8005cce:	e04e      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f000 fa64 	bl	80061ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf2:	609a      	str	r2, [r3, #8]
      break;
 8005cf4:	e03b      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 f9d8 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2150      	movs	r1, #80	; 0x50
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fa31 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e02b      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 f9f7 	bl	8006116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2160      	movs	r1, #96	; 0x60
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa21 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e01b      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f000 f9b8 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fa11 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fa08 	bl	8006176 <TIM_ITRx_SetConfig>
        break;
 8005d66:	e002      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e031      	b.n	8005e04 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f8f2 	bl	8005f9c <TIM_SlaveTimer_SetConfig>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e018      	b.n	8005e04 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005df0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a40      	ldr	r2, [pc, #256]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <TIM_Base_SetConfig+0x118>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3c      	ldr	r2, [pc, #240]	; (8005f78 <TIM_Base_SetConfig+0x11c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3b      	ldr	r2, [pc, #236]	; (8005f7c <TIM_Base_SetConfig+0x120>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d02b      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d027      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	; (8005f74 <TIM_Base_SetConfig+0x118>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d023      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <TIM_Base_SetConfig+0x11c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01f      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2a      	ldr	r2, [pc, #168]	; (8005f7c <TIM_Base_SetConfig+0x120>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01b      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a29      	ldr	r2, [pc, #164]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d017      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <TIM_Base_SetConfig+0x128>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <TIM_Base_SetConfig+0x12c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00f      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <TIM_Base_SetConfig+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00b      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <TIM_Base_SetConfig+0x134>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d007      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a24      	ldr	r2, [pc, #144]	; (8005f94 <TIM_Base_SetConfig+0x138>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d003      	beq.n	8005f0e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a23      	ldr	r2, [pc, #140]	; (8005f98 <TIM_Base_SetConfig+0x13c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d108      	bne.n	8005f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_Base_SetConfig+0xf8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d103      	bne.n	8005f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	615a      	str	r2, [r3, #20]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800
 8005f90:	40001800 	.word	0x40001800
 8005f94:	40001c00 	.word	0x40001c00
 8005f98:	40002000 	.word	0x40002000

08005f9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0307 	bic.w	r3, r3, #7
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b70      	cmp	r3, #112	; 0x70
 8005fe0:	d01a      	beq.n	8006018 <TIM_SlaveTimer_SetConfig+0x7c>
 8005fe2:	2b70      	cmp	r3, #112	; 0x70
 8005fe4:	d860      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fe6:	2b60      	cmp	r3, #96	; 0x60
 8005fe8:	d054      	beq.n	8006094 <TIM_SlaveTimer_SetConfig+0xf8>
 8005fea:	2b60      	cmp	r3, #96	; 0x60
 8005fec:	d85c      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fee:	2b50      	cmp	r3, #80	; 0x50
 8005ff0:	d046      	beq.n	8006080 <TIM_SlaveTimer_SetConfig+0xe4>
 8005ff2:	2b50      	cmp	r3, #80	; 0x50
 8005ff4:	d858      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d019      	beq.n	800602e <TIM_SlaveTimer_SetConfig+0x92>
 8005ffa:	2b40      	cmp	r3, #64	; 0x40
 8005ffc:	d854      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d054      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x110>
 8006002:	2b30      	cmp	r3, #48	; 0x30
 8006004:	d850      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d050      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x110>
 800600a:	2b20      	cmp	r3, #32
 800600c:	d84c      	bhi.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04c      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x110>
 8006012:	2b10      	cmp	r3, #16
 8006014:	d04a      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006016:	e047      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68d9      	ldr	r1, [r3, #12]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f000 f8c0 	bl	80061ac <TIM_ETR_SetConfig>
      break;
 800602c:	e03f      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d101      	bne.n	800603a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e03a      	b.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006060:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	621a      	str	r2, [r3, #32]
      break;
 800607e:	e016      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	461a      	mov	r2, r3
 800608e:	f000 f813 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      break;
 8006092:	e00c      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f000 f838 	bl	8006116 <TIM_TI2_ConfigInputStage>
      break;
 80060a6:	e002      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80060a8:	bf00      	nop
 80060aa:	e000      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80060ac:	bf00      	nop
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0210 	bic.w	r2, r3, #16
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	f043 0307 	orr.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e05a      	b.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d022      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006250:	d01d      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d018      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00e      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a17      	ldr	r2, [pc, #92]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d10c      	bne.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4313      	orrs	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40010400 	.word	0x40010400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40001800 	.word	0x40001800

080062e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e03f      	b.n	800639e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fc fa48 	bl	80027c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800634e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc7b 	bl	8006c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b08a      	sub	sp, #40	; 0x28
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d17c      	bne.n	80064c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_UART_Transmit+0x2c>
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e075      	b.n	80064c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Transmit+0x3e>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e06e      	b.n	80064c2 <HAL_UART_Transmit+0x11c>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2221      	movs	r2, #33	; 0x21
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063fa:	f7fc fd6b 	bl	8002ed4 <HAL_GetTick>
 80063fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006414:	d108      	bne.n	8006428 <HAL_UART_Transmit+0x82>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e003      	b.n	8006430 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006438:	e02a      	b.n	8006490 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	2180      	movs	r1, #128	; 0x80
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fa3d 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e036      	b.n	80064c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	3302      	adds	r3, #2
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e007      	b.n	8006482 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	781a      	ldrb	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1cf      	bne.n	800643a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2200      	movs	r2, #0
 80064a2:	2140      	movs	r1, #64	; 0x40
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fa0d 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e006      	b.n	80064c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d11d      	bne.n	8006520 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Receive_IT+0x26>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e016      	b.n	8006522 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Receive_IT+0x38>
 80064fe:	2302      	movs	r3, #2
 8006500:	e00f      	b.n	8006522 <HAL_UART_Receive_IT+0x58>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	461a      	mov	r2, r3
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fa1e 	bl	8006958 <UART_Start_Receive_IT>
 800651c:	4603      	mov	r3, r0
 800651e:	e000      	b.n	8006522 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_UART_IRQHandler+0x52>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fad1 	bl	8006b1e <UART_Receive_IT>
      return;
 800657c:	e17c      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80b1 	beq.w	80066e8 <HAL_UART_IRQHandler+0x1bc>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_UART_IRQHandler+0x70>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a6 	beq.w	80066e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_UART_IRQHandler+0x90>
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_UART_IRQHandler+0xb0>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	f043 0202 	orr.w	r2, r3, #2
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_UART_IRQHandler+0xd0>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	f043 0204 	orr.w	r2, r3, #4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00f      	beq.n	8006626 <HAL_UART_IRQHandler+0xfa>
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <HAL_UART_IRQHandler+0xee>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f043 0208 	orr.w	r2, r3, #8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 811f 	beq.w	800686e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa6a 	bl	8006b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <HAL_UART_IRQHandler+0x146>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d031      	beq.n	80066d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9aa 	bl	80069cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d123      	bne.n	80066ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695a      	ldr	r2, [r3, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d013      	beq.n	80066c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	4a77      	ldr	r2, [pc, #476]	; (8006880 <HAL_UART_IRQHandler+0x354>)
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fc fe42 	bl	8003334 <HAL_DMA_Abort_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e00e      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8e6 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	e00a      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8e2 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e006      	b.n	80066e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8de 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066e2:	e0c4      	b.n	800686e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	bf00      	nop
    return;
 80066e6:	e0c2      	b.n	800686e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 80a2 	bne.w	8006836 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 809c 	beq.w	8006836 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8096 	beq.w	8006836 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d14f      	bne.n	80067ce <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006738:	8a3b      	ldrh	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8099 	beq.w	8006872 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006744:	8a3a      	ldrh	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	f080 8093 	bcs.w	8006872 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8a3a      	ldrh	r2, [r7, #16]
 8006750:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675c:	d02b      	beq.n	80067b6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800678c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0210 	bic.w	r2, r2, #16
 80067aa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fc fd4f 	bl	8003254 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f870 	bl	80068ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067cc:	e051      	b.n	8006872 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d047      	beq.n	8006876 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80067e6:	8a7b      	ldrh	r3, [r7, #18]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d044      	beq.n	8006876 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067fa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0210 	bic.w	r2, r2, #16
 8006828:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800682a:	8a7b      	ldrh	r3, [r7, #18]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f83c 	bl	80068ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006834:	e01f      	b.n	8006876 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_UART_IRQHandler+0x326>
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f8ff 	bl	8006a4e <UART_Transmit_IT>
    return;
 8006850:	e012      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <HAL_UART_IRQHandler+0x34c>
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f941 	bl	8006aee <UART_EndTransmit_IT>
    return;
 800686c:	e004      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
    return;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
      return;
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <HAL_UART_IRQHandler+0x34c>
      return;
 8006876:	bf00      	nop
  }
}
 8006878:	3728      	adds	r7, #40	; 0x28
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	08006a27 	.word	0x08006a27

08006884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e02c      	b.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d028      	beq.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e4:	f7fc faf6 	bl	8002ed4 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d21d      	bcs.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e00f      	b.n	8006950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4013      	ands	r3, r2
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	429a      	cmp	r2, r3
 800694c:	d0c3      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2222      	movs	r2, #34	; 0x22
 8006982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800699c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0220 	orr.w	r2, r2, #32
 80069bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0201 	bic.w	r2, r2, #1
 80069f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d107      	bne.n	8006a0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0210 	bic.w	r2, r2, #16
 8006a0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff29 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b21      	cmp	r3, #33	; 0x21
 8006a60:	d13e      	bne.n	8006ae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d114      	bne.n	8006a96 <UART_Transmit_IT+0x48>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d110      	bne.n	8006a96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]
 8006a94:	e008      	b.n	8006aa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6211      	str	r1, [r2, #32]
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10f      	bne.n	8006adc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff feb8 	bl	8006884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b22      	cmp	r3, #34	; 0x22
 8006b30:	f040 8087 	bne.w	8006c42 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d117      	bne.n	8006b6e <UART_Receive_IT+0x50>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d113      	bne.n	8006b6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b6c:	e026      	b.n	8006bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b80:	d007      	beq.n	8006b92 <UART_Receive_IT+0x74>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <UART_Receive_IT+0x82>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e008      	b.n	8006bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d136      	bne.n	8006c3e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0220 	bic.w	r2, r2, #32
 8006bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10e      	bne.n	8006c2e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0210 	bic.w	r2, r2, #16
 8006c1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fe40 	bl	80068ac <HAL_UARTEx_RxEventCallback>
 8006c2c:	e002      	b.n	8006c34 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fa fd52 	bl	80016d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e002      	b.n	8006c44 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	b09f      	sub	sp, #124	; 0x7c
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	68d9      	ldr	r1, [r3, #12]
 8006c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	ea40 0301 	orr.w	r3, r0, r1
 8006c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c90:	f021 010c 	bic.w	r1, r1, #12
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	6999      	ldr	r1, [r3, #24]
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	ea40 0301 	orr.w	r3, r0, r1
 8006cb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4bc5      	ldr	r3, [pc, #788]	; (8006fd0 <UART_SetConfig+0x384>)
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d004      	beq.n	8006cca <UART_SetConfig+0x7e>
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4bc3      	ldr	r3, [pc, #780]	; (8006fd4 <UART_SetConfig+0x388>)
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d103      	bne.n	8006cd2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cca:	f7fd fb7b 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8006cce:	6778      	str	r0, [r7, #116]	; 0x74
 8006cd0:	e002      	b.n	8006cd8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cd2:	f7fd fb63 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8006cd6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	f040 80b6 	bne.w	8006e50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce6:	461c      	mov	r4, r3
 8006ce8:	f04f 0500 	mov.w	r5, #0
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	6439      	str	r1, [r7, #64]	; 0x40
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cfc:	1912      	adds	r2, r2, r4
 8006cfe:	eb45 0303 	adc.w	r3, r5, r3
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	00d9      	lsls	r1, r3, #3
 8006d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d10:	00d0      	lsls	r0, r2, #3
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	1911      	adds	r1, r2, r4
 8006d18:	6639      	str	r1, [r7, #96]	; 0x60
 8006d1a:	416b      	adcs	r3, r5
 8006d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d38:	f7f9 faa2 	bl	8000280 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4ba5      	ldr	r3, [pc, #660]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006d42:	fba3 2302 	umull	r2, r3, r3, r2
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	011e      	lsls	r6, r3, #4
 8006d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	f04f 0500 	mov.w	r5, #0
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	1891      	adds	r1, r2, r2
 8006d58:	6339      	str	r1, [r7, #48]	; 0x30
 8006d5a:	415b      	adcs	r3, r3
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d62:	1912      	adds	r2, r2, r4
 8006d64:	eb45 0303 	adc.w	r3, r5, r3
 8006d68:	f04f 0000 	mov.w	r0, #0
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	00d9      	lsls	r1, r3, #3
 8006d72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d76:	00d0      	lsls	r0, r2, #3
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	1911      	adds	r1, r2, r4
 8006d7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d80:	416b      	adcs	r3, r5
 8006d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	1891      	adds	r1, r2, r2
 8006d90:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d92:	415b      	adcs	r3, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d9e:	f7f9 fa6f 	bl	8000280 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b8c      	ldr	r3, [pc, #560]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a87      	ldr	r2, [pc, #540]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dc8:	441e      	add	r6, r3
 8006dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	1894      	adds	r4, r2, r2
 8006dd8:	623c      	str	r4, [r7, #32]
 8006dda:	415b      	adcs	r3, r3
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006de2:	1812      	adds	r2, r2, r0
 8006de4:	eb41 0303 	adc.w	r3, r1, r3
 8006de8:	f04f 0400 	mov.w	r4, #0
 8006dec:	f04f 0500 	mov.w	r5, #0
 8006df0:	00dd      	lsls	r5, r3, #3
 8006df2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df6:	00d4      	lsls	r4, r2, #3
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	1814      	adds	r4, r2, r0
 8006dfe:	653c      	str	r4, [r7, #80]	; 0x50
 8006e00:	414b      	adcs	r3, r1
 8006e02:	657b      	str	r3, [r7, #84]	; 0x54
 8006e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	61b9      	str	r1, [r7, #24]
 8006e12:	415b      	adcs	r3, r3
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e1e:	f7f9 fa2f 	bl	8000280 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4b6c      	ldr	r3, [pc, #432]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006e28:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	2164      	movs	r1, #100	; 0x64
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	3332      	adds	r3, #50	; 0x32
 8006e3a:	4a67      	ldr	r2, [pc, #412]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 0207 	and.w	r2, r3, #7
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4432      	add	r2, r6
 8006e4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e4e:	e0b9      	b.n	8006fc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e52:	461c      	mov	r4, r3
 8006e54:	f04f 0500 	mov.w	r5, #0
 8006e58:	4622      	mov	r2, r4
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	1891      	adds	r1, r2, r2
 8006e5e:	6139      	str	r1, [r7, #16]
 8006e60:	415b      	adcs	r3, r3
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e68:	1912      	adds	r2, r2, r4
 8006e6a:	eb45 0303 	adc.w	r3, r5, r3
 8006e6e:	f04f 0000 	mov.w	r0, #0
 8006e72:	f04f 0100 	mov.w	r1, #0
 8006e76:	00d9      	lsls	r1, r3, #3
 8006e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e7c:	00d0      	lsls	r0, r2, #3
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	eb12 0804 	adds.w	r8, r2, r4
 8006e86:	eb43 0905 	adc.w	r9, r3, r5
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	008b      	lsls	r3, r1, #2
 8006e9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ea2:	0082      	lsls	r2, r0, #2
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 f9ea 	bl	8000280 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	011e      	lsls	r6, r3, #4
 8006eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	1894      	adds	r4, r2, r2
 8006ec8:	60bc      	str	r4, [r7, #8]
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ed2:	1812      	adds	r2, r2, r0
 8006ed4:	eb41 0303 	adc.w	r3, r1, r3
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	f04f 0500 	mov.w	r5, #0
 8006ee0:	00dd      	lsls	r5, r3, #3
 8006ee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ee6:	00d4      	lsls	r4, r2, #3
 8006ee8:	4622      	mov	r2, r4
 8006eea:	462b      	mov	r3, r5
 8006eec:	1814      	adds	r4, r2, r0
 8006eee:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ef0:	414b      	adcs	r3, r1
 8006ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f04f 0100 	mov.w	r1, #0
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	008b      	lsls	r3, r1, #2
 8006f08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f0c:	0082      	lsls	r2, r0, #2
 8006f0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f12:	f7f9 f9b5 	bl	8000280 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	; 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	3332      	adds	r3, #50	; 0x32
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3a:	441e      	add	r6, r3
 8006f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	1894      	adds	r4, r2, r2
 8006f4a:	603c      	str	r4, [r7, #0]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	1812      	adds	r2, r2, r0
 8006f56:	eb41 0303 	adc.w	r3, r1, r3
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	f04f 0500 	mov.w	r5, #0
 8006f62:	00dd      	lsls	r5, r3, #3
 8006f64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f68:	00d4      	lsls	r4, r2, #3
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	eb12 0a00 	adds.w	sl, r2, r0
 8006f72:	eb43 0b01 	adc.w	fp, r3, r1
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	008b      	lsls	r3, r1, #2
 8006f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f8e:	0082      	lsls	r2, r0, #2
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 f974 	bl	8000280 <__aeabi_uldivmod>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2164      	movs	r1, #100	; 0x64
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	3332      	adds	r3, #50	; 0x32
 8006fb0:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4432      	add	r2, r6
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	377c      	adds	r7, #124	; 0x7c
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	bf00      	nop
 8006fd0:	40011000 	.word	0x40011000
 8006fd4:	40011400 	.word	0x40011400
 8006fd8:	51eb851f 	.word	0x51eb851f

08006fdc <__errno>:
 8006fdc:	4b01      	ldr	r3, [pc, #4]	; (8006fe4 <__errno+0x8>)
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2000003c 	.word	0x2000003c

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4d0d      	ldr	r5, [pc, #52]	; (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	; (8007024 <__libc_init_array+0x3c>)
 8006fee:	1b64      	subs	r4, r4, r5
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	42a6      	cmp	r6, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4d0b      	ldr	r5, [pc, #44]	; (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	; (800702c <__libc_init_array+0x44>)
 8006ffc:	f001 f9be 	bl	800837c <_init>
 8007000:	1b64      	subs	r4, r4, r5
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2600      	movs	r6, #0
 8007006:	42a6      	cmp	r6, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007010:	4798      	blx	r3
 8007012:	3601      	adds	r6, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f855 3b04 	ldr.w	r3, [r5], #4
 800701a:	4798      	blx	r3
 800701c:	3601      	adds	r6, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	080086d4 	.word	0x080086d4
 8007024:	080086d4 	.word	0x080086d4
 8007028:	080086d4 	.word	0x080086d4
 800702c:	080086d8 	.word	0x080086d8

08007030 <memcpy>:
 8007030:	440a      	add	r2, r1
 8007032:	4291      	cmp	r1, r2
 8007034:	f100 33ff 	add.w	r3, r0, #4294967295
 8007038:	d100      	bne.n	800703c <memcpy+0xc>
 800703a:	4770      	bx	lr
 800703c:	b510      	push	{r4, lr}
 800703e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007046:	4291      	cmp	r1, r2
 8007048:	d1f9      	bne.n	800703e <memcpy+0xe>
 800704a:	bd10      	pop	{r4, pc}

0800704c <memset>:
 800704c:	4402      	add	r2, r0
 800704e:	4603      	mov	r3, r0
 8007050:	4293      	cmp	r3, r2
 8007052:	d100      	bne.n	8007056 <memset+0xa>
 8007054:	4770      	bx	lr
 8007056:	f803 1b01 	strb.w	r1, [r3], #1
 800705a:	e7f9      	b.n	8007050 <memset+0x4>

0800705c <_free_r>:
 800705c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800705e:	2900      	cmp	r1, #0
 8007060:	d048      	beq.n	80070f4 <_free_r+0x98>
 8007062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007066:	9001      	str	r0, [sp, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f1a1 0404 	sub.w	r4, r1, #4
 800706e:	bfb8      	it	lt
 8007070:	18e4      	addlt	r4, r4, r3
 8007072:	f000 fcb1 	bl	80079d8 <__malloc_lock>
 8007076:	4a20      	ldr	r2, [pc, #128]	; (80070f8 <_free_r+0x9c>)
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	4615      	mov	r5, r2
 800707e:	b933      	cbnz	r3, 800708e <_free_r+0x32>
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	6014      	str	r4, [r2, #0]
 8007084:	b003      	add	sp, #12
 8007086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800708a:	f000 bcab 	b.w	80079e4 <__malloc_unlock>
 800708e:	42a3      	cmp	r3, r4
 8007090:	d90b      	bls.n	80070aa <_free_r+0x4e>
 8007092:	6821      	ldr	r1, [r4, #0]
 8007094:	1862      	adds	r2, r4, r1
 8007096:	4293      	cmp	r3, r2
 8007098:	bf04      	itt	eq
 800709a:	681a      	ldreq	r2, [r3, #0]
 800709c:	685b      	ldreq	r3, [r3, #4]
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	bf04      	itt	eq
 80070a2:	1852      	addeq	r2, r2, r1
 80070a4:	6022      	streq	r2, [r4, #0]
 80070a6:	602c      	str	r4, [r5, #0]
 80070a8:	e7ec      	b.n	8007084 <_free_r+0x28>
 80070aa:	461a      	mov	r2, r3
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	b10b      	cbz	r3, 80070b4 <_free_r+0x58>
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	d9fa      	bls.n	80070aa <_free_r+0x4e>
 80070b4:	6811      	ldr	r1, [r2, #0]
 80070b6:	1855      	adds	r5, r2, r1
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	d10b      	bne.n	80070d4 <_free_r+0x78>
 80070bc:	6824      	ldr	r4, [r4, #0]
 80070be:	4421      	add	r1, r4
 80070c0:	1854      	adds	r4, r2, r1
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	6011      	str	r1, [r2, #0]
 80070c6:	d1dd      	bne.n	8007084 <_free_r+0x28>
 80070c8:	681c      	ldr	r4, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	6053      	str	r3, [r2, #4]
 80070ce:	4421      	add	r1, r4
 80070d0:	6011      	str	r1, [r2, #0]
 80070d2:	e7d7      	b.n	8007084 <_free_r+0x28>
 80070d4:	d902      	bls.n	80070dc <_free_r+0x80>
 80070d6:	230c      	movs	r3, #12
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	e7d3      	b.n	8007084 <_free_r+0x28>
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf04      	itt	eq
 80070e4:	6819      	ldreq	r1, [r3, #0]
 80070e6:	685b      	ldreq	r3, [r3, #4]
 80070e8:	6063      	str	r3, [r4, #4]
 80070ea:	bf04      	itt	eq
 80070ec:	1949      	addeq	r1, r1, r5
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	6054      	str	r4, [r2, #4]
 80070f2:	e7c7      	b.n	8007084 <_free_r+0x28>
 80070f4:	b003      	add	sp, #12
 80070f6:	bd30      	pop	{r4, r5, pc}
 80070f8:	200000d8 	.word	0x200000d8

080070fc <_malloc_r>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	1ccd      	adds	r5, r1, #3
 8007100:	f025 0503 	bic.w	r5, r5, #3
 8007104:	3508      	adds	r5, #8
 8007106:	2d0c      	cmp	r5, #12
 8007108:	bf38      	it	cc
 800710a:	250c      	movcc	r5, #12
 800710c:	2d00      	cmp	r5, #0
 800710e:	4606      	mov	r6, r0
 8007110:	db01      	blt.n	8007116 <_malloc_r+0x1a>
 8007112:	42a9      	cmp	r1, r5
 8007114:	d903      	bls.n	800711e <_malloc_r+0x22>
 8007116:	230c      	movs	r3, #12
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	2000      	movs	r0, #0
 800711c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800711e:	f000 fc5b 	bl	80079d8 <__malloc_lock>
 8007122:	4921      	ldr	r1, [pc, #132]	; (80071a8 <_malloc_r+0xac>)
 8007124:	680a      	ldr	r2, [r1, #0]
 8007126:	4614      	mov	r4, r2
 8007128:	b99c      	cbnz	r4, 8007152 <_malloc_r+0x56>
 800712a:	4f20      	ldr	r7, [pc, #128]	; (80071ac <_malloc_r+0xb0>)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	b923      	cbnz	r3, 800713a <_malloc_r+0x3e>
 8007130:	4621      	mov	r1, r4
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f8ca 	bl	80072cc <_sbrk_r>
 8007138:	6038      	str	r0, [r7, #0]
 800713a:	4629      	mov	r1, r5
 800713c:	4630      	mov	r0, r6
 800713e:	f000 f8c5 	bl	80072cc <_sbrk_r>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d123      	bne.n	800718e <_malloc_r+0x92>
 8007146:	230c      	movs	r3, #12
 8007148:	6033      	str	r3, [r6, #0]
 800714a:	4630      	mov	r0, r6
 800714c:	f000 fc4a 	bl	80079e4 <__malloc_unlock>
 8007150:	e7e3      	b.n	800711a <_malloc_r+0x1e>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	1b5b      	subs	r3, r3, r5
 8007156:	d417      	bmi.n	8007188 <_malloc_r+0x8c>
 8007158:	2b0b      	cmp	r3, #11
 800715a:	d903      	bls.n	8007164 <_malloc_r+0x68>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	441c      	add	r4, r3
 8007160:	6025      	str	r5, [r4, #0]
 8007162:	e004      	b.n	800716e <_malloc_r+0x72>
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	42a2      	cmp	r2, r4
 8007168:	bf0c      	ite	eq
 800716a:	600b      	streq	r3, [r1, #0]
 800716c:	6053      	strne	r3, [r2, #4]
 800716e:	4630      	mov	r0, r6
 8007170:	f000 fc38 	bl	80079e4 <__malloc_unlock>
 8007174:	f104 000b 	add.w	r0, r4, #11
 8007178:	1d23      	adds	r3, r4, #4
 800717a:	f020 0007 	bic.w	r0, r0, #7
 800717e:	1ac2      	subs	r2, r0, r3
 8007180:	d0cc      	beq.n	800711c <_malloc_r+0x20>
 8007182:	1a1b      	subs	r3, r3, r0
 8007184:	50a3      	str	r3, [r4, r2]
 8007186:	e7c9      	b.n	800711c <_malloc_r+0x20>
 8007188:	4622      	mov	r2, r4
 800718a:	6864      	ldr	r4, [r4, #4]
 800718c:	e7cc      	b.n	8007128 <_malloc_r+0x2c>
 800718e:	1cc4      	adds	r4, r0, #3
 8007190:	f024 0403 	bic.w	r4, r4, #3
 8007194:	42a0      	cmp	r0, r4
 8007196:	d0e3      	beq.n	8007160 <_malloc_r+0x64>
 8007198:	1a21      	subs	r1, r4, r0
 800719a:	4630      	mov	r0, r6
 800719c:	f000 f896 	bl	80072cc <_sbrk_r>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1dd      	bne.n	8007160 <_malloc_r+0x64>
 80071a4:	e7cf      	b.n	8007146 <_malloc_r+0x4a>
 80071a6:	bf00      	nop
 80071a8:	200000d8 	.word	0x200000d8
 80071ac:	200000dc 	.word	0x200000dc

080071b0 <iprintf>:
 80071b0:	b40f      	push	{r0, r1, r2, r3}
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <iprintf+0x2c>)
 80071b4:	b513      	push	{r0, r1, r4, lr}
 80071b6:	681c      	ldr	r4, [r3, #0]
 80071b8:	b124      	cbz	r4, 80071c4 <iprintf+0x14>
 80071ba:	69a3      	ldr	r3, [r4, #24]
 80071bc:	b913      	cbnz	r3, 80071c4 <iprintf+0x14>
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 faf4 	bl	80077ac <__sinit>
 80071c4:	ab05      	add	r3, sp, #20
 80071c6:	9a04      	ldr	r2, [sp, #16]
 80071c8:	68a1      	ldr	r1, [r4, #8]
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fd95 	bl	8007cfc <_vfiprintf_r>
 80071d2:	b002      	add	sp, #8
 80071d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d8:	b004      	add	sp, #16
 80071da:	4770      	bx	lr
 80071dc:	2000003c 	.word	0x2000003c

080071e0 <_puts_r>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	460e      	mov	r6, r1
 80071e4:	4605      	mov	r5, r0
 80071e6:	b118      	cbz	r0, 80071f0 <_puts_r+0x10>
 80071e8:	6983      	ldr	r3, [r0, #24]
 80071ea:	b90b      	cbnz	r3, 80071f0 <_puts_r+0x10>
 80071ec:	f000 fade 	bl	80077ac <__sinit>
 80071f0:	69ab      	ldr	r3, [r5, #24]
 80071f2:	68ac      	ldr	r4, [r5, #8]
 80071f4:	b913      	cbnz	r3, 80071fc <_puts_r+0x1c>
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fad8 	bl	80077ac <__sinit>
 80071fc:	4b2c      	ldr	r3, [pc, #176]	; (80072b0 <_puts_r+0xd0>)
 80071fe:	429c      	cmp	r4, r3
 8007200:	d120      	bne.n	8007244 <_puts_r+0x64>
 8007202:	686c      	ldr	r4, [r5, #4]
 8007204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007206:	07db      	lsls	r3, r3, #31
 8007208:	d405      	bmi.n	8007216 <_puts_r+0x36>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	0598      	lsls	r0, r3, #22
 800720e:	d402      	bmi.n	8007216 <_puts_r+0x36>
 8007210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007212:	f000 fb69 	bl	80078e8 <__retarget_lock_acquire_recursive>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	0719      	lsls	r1, r3, #28
 800721a:	d51d      	bpl.n	8007258 <_puts_r+0x78>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	b1db      	cbz	r3, 8007258 <_puts_r+0x78>
 8007220:	3e01      	subs	r6, #1
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007228:	3b01      	subs	r3, #1
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	bb39      	cbnz	r1, 800727e <_puts_r+0x9e>
 800722e:	2b00      	cmp	r3, #0
 8007230:	da38      	bge.n	80072a4 <_puts_r+0xc4>
 8007232:	4622      	mov	r2, r4
 8007234:	210a      	movs	r1, #10
 8007236:	4628      	mov	r0, r5
 8007238:	f000 f8bc 	bl	80073b4 <__swbuf_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d011      	beq.n	8007264 <_puts_r+0x84>
 8007240:	250a      	movs	r5, #10
 8007242:	e011      	b.n	8007268 <_puts_r+0x88>
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <_puts_r+0xd4>)
 8007246:	429c      	cmp	r4, r3
 8007248:	d101      	bne.n	800724e <_puts_r+0x6e>
 800724a:	68ac      	ldr	r4, [r5, #8]
 800724c:	e7da      	b.n	8007204 <_puts_r+0x24>
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <_puts_r+0xd8>)
 8007250:	429c      	cmp	r4, r3
 8007252:	bf08      	it	eq
 8007254:	68ec      	ldreq	r4, [r5, #12]
 8007256:	e7d5      	b.n	8007204 <_puts_r+0x24>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f90e 	bl	800747c <__swsetup_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	d0dd      	beq.n	8007220 <_puts_r+0x40>
 8007264:	f04f 35ff 	mov.w	r5, #4294967295
 8007268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800726a:	07da      	lsls	r2, r3, #31
 800726c:	d405      	bmi.n	800727a <_puts_r+0x9a>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	059b      	lsls	r3, r3, #22
 8007272:	d402      	bmi.n	800727a <_puts_r+0x9a>
 8007274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007276:	f000 fb38 	bl	80078ea <__retarget_lock_release_recursive>
 800727a:	4628      	mov	r0, r5
 800727c:	bd70      	pop	{r4, r5, r6, pc}
 800727e:	2b00      	cmp	r3, #0
 8007280:	da04      	bge.n	800728c <_puts_r+0xac>
 8007282:	69a2      	ldr	r2, [r4, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	dc06      	bgt.n	8007296 <_puts_r+0xb6>
 8007288:	290a      	cmp	r1, #10
 800728a:	d004      	beq.n	8007296 <_puts_r+0xb6>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	7019      	strb	r1, [r3, #0]
 8007294:	e7c5      	b.n	8007222 <_puts_r+0x42>
 8007296:	4622      	mov	r2, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f88b 	bl	80073b4 <__swbuf_r>
 800729e:	3001      	adds	r0, #1
 80072a0:	d1bf      	bne.n	8007222 <_puts_r+0x42>
 80072a2:	e7df      	b.n	8007264 <_puts_r+0x84>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	250a      	movs	r5, #10
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	701d      	strb	r5, [r3, #0]
 80072ae:	e7db      	b.n	8007268 <_puts_r+0x88>
 80072b0:	08008658 	.word	0x08008658
 80072b4:	08008678 	.word	0x08008678
 80072b8:	08008638 	.word	0x08008638

080072bc <puts>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <puts+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7ff bf8d 	b.w	80071e0 <_puts_r>
 80072c6:	bf00      	nop
 80072c8:	2000003c 	.word	0x2000003c

080072cc <_sbrk_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d06      	ldr	r5, [pc, #24]	; (80072e8 <_sbrk_r+0x1c>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7fb fd54 	bl	8002d84 <_sbrk>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_sbrk_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_sbrk_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200005b4 	.word	0x200005b4

080072ec <siprintf>:
 80072ec:	b40e      	push	{r1, r2, r3}
 80072ee:	b500      	push	{lr}
 80072f0:	b09c      	sub	sp, #112	; 0x70
 80072f2:	ab1d      	add	r3, sp, #116	; 0x74
 80072f4:	9002      	str	r0, [sp, #8]
 80072f6:	9006      	str	r0, [sp, #24]
 80072f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072fc:	4809      	ldr	r0, [pc, #36]	; (8007324 <siprintf+0x38>)
 80072fe:	9107      	str	r1, [sp, #28]
 8007300:	9104      	str	r1, [sp, #16]
 8007302:	4909      	ldr	r1, [pc, #36]	; (8007328 <siprintf+0x3c>)
 8007304:	f853 2b04 	ldr.w	r2, [r3], #4
 8007308:	9105      	str	r1, [sp, #20]
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	a902      	add	r1, sp, #8
 8007310:	f000 fbca 	bl	8007aa8 <_svfiprintf_r>
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	b01c      	add	sp, #112	; 0x70
 800731c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007320:	b003      	add	sp, #12
 8007322:	4770      	bx	lr
 8007324:	2000003c 	.word	0x2000003c
 8007328:	ffff0208 	.word	0xffff0208

0800732c <__sread>:
 800732c:	b510      	push	{r4, lr}
 800732e:	460c      	mov	r4, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	f000 ffa6 	bl	8008284 <_read_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	bfab      	itete	ge
 800733c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800733e:	89a3      	ldrhlt	r3, [r4, #12]
 8007340:	181b      	addge	r3, r3, r0
 8007342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007346:	bfac      	ite	ge
 8007348:	6563      	strge	r3, [r4, #84]	; 0x54
 800734a:	81a3      	strhlt	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__swrite>:
 800734e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007352:	461f      	mov	r7, r3
 8007354:	898b      	ldrh	r3, [r1, #12]
 8007356:	05db      	lsls	r3, r3, #23
 8007358:	4605      	mov	r5, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4616      	mov	r6, r2
 800735e:	d505      	bpl.n	800736c <__swrite+0x1e>
 8007360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007364:	2302      	movs	r3, #2
 8007366:	2200      	movs	r2, #0
 8007368:	f000 fac0 	bl	80078ec <_lseek_r>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	4632      	mov	r2, r6
 800737a:	463b      	mov	r3, r7
 800737c:	4628      	mov	r0, r5
 800737e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	f000 b869 	b.w	8007458 <_write_r>

08007386 <__sseek>:
 8007386:	b510      	push	{r4, lr}
 8007388:	460c      	mov	r4, r1
 800738a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738e:	f000 faad 	bl	80078ec <_lseek_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	bf15      	itete	ne
 8007398:	6560      	strne	r0, [r4, #84]	; 0x54
 800739a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800739e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073a2:	81a3      	strheq	r3, [r4, #12]
 80073a4:	bf18      	it	ne
 80073a6:	81a3      	strhne	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__sclose>:
 80073aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ae:	f000 b8d3 	b.w	8007558 <_close_r>
	...

080073b4 <__swbuf_r>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	460e      	mov	r6, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	4605      	mov	r5, r0
 80073bc:	b118      	cbz	r0, 80073c6 <__swbuf_r+0x12>
 80073be:	6983      	ldr	r3, [r0, #24]
 80073c0:	b90b      	cbnz	r3, 80073c6 <__swbuf_r+0x12>
 80073c2:	f000 f9f3 	bl	80077ac <__sinit>
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <__swbuf_r+0x98>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d12b      	bne.n	8007424 <__swbuf_r+0x70>
 80073cc:	686c      	ldr	r4, [r5, #4]
 80073ce:	69a3      	ldr	r3, [r4, #24]
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	071a      	lsls	r2, r3, #28
 80073d6:	d52f      	bpl.n	8007438 <__swbuf_r+0x84>
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	b36b      	cbz	r3, 8007438 <__swbuf_r+0x84>
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	1ac0      	subs	r0, r0, r3
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	b2f6      	uxtb	r6, r6
 80073e6:	4283      	cmp	r3, r0
 80073e8:	4637      	mov	r7, r6
 80073ea:	dc04      	bgt.n	80073f6 <__swbuf_r+0x42>
 80073ec:	4621      	mov	r1, r4
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 f948 	bl	8007684 <_fflush_r>
 80073f4:	bb30      	cbnz	r0, 8007444 <__swbuf_r+0x90>
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	701e      	strb	r6, [r3, #0]
 8007404:	6963      	ldr	r3, [r4, #20]
 8007406:	3001      	adds	r0, #1
 8007408:	4283      	cmp	r3, r0
 800740a:	d004      	beq.n	8007416 <__swbuf_r+0x62>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	07db      	lsls	r3, r3, #31
 8007410:	d506      	bpl.n	8007420 <__swbuf_r+0x6c>
 8007412:	2e0a      	cmp	r6, #10
 8007414:	d104      	bne.n	8007420 <__swbuf_r+0x6c>
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f933 	bl	8007684 <_fflush_r>
 800741e:	b988      	cbnz	r0, 8007444 <__swbuf_r+0x90>
 8007420:	4638      	mov	r0, r7
 8007422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <__swbuf_r+0x9c>)
 8007426:	429c      	cmp	r4, r3
 8007428:	d101      	bne.n	800742e <__swbuf_r+0x7a>
 800742a:	68ac      	ldr	r4, [r5, #8]
 800742c:	e7cf      	b.n	80073ce <__swbuf_r+0x1a>
 800742e:	4b09      	ldr	r3, [pc, #36]	; (8007454 <__swbuf_r+0xa0>)
 8007430:	429c      	cmp	r4, r3
 8007432:	bf08      	it	eq
 8007434:	68ec      	ldreq	r4, [r5, #12]
 8007436:	e7ca      	b.n	80073ce <__swbuf_r+0x1a>
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f81e 	bl	800747c <__swsetup_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	d0cb      	beq.n	80073dc <__swbuf_r+0x28>
 8007444:	f04f 37ff 	mov.w	r7, #4294967295
 8007448:	e7ea      	b.n	8007420 <__swbuf_r+0x6c>
 800744a:	bf00      	nop
 800744c:	08008658 	.word	0x08008658
 8007450:	08008678 	.word	0x08008678
 8007454:	08008638 	.word	0x08008638

08007458 <_write_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d07      	ldr	r5, [pc, #28]	; (8007478 <_write_r+0x20>)
 800745c:	4604      	mov	r4, r0
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	2200      	movs	r2, #0
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f7fa fa44 	bl	80018f4 <_write>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_write_r+0x1e>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_write_r+0x1e>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	200005b4 	.word	0x200005b4

0800747c <__swsetup_r>:
 800747c:	4b32      	ldr	r3, [pc, #200]	; (8007548 <__swsetup_r+0xcc>)
 800747e:	b570      	push	{r4, r5, r6, lr}
 8007480:	681d      	ldr	r5, [r3, #0]
 8007482:	4606      	mov	r6, r0
 8007484:	460c      	mov	r4, r1
 8007486:	b125      	cbz	r5, 8007492 <__swsetup_r+0x16>
 8007488:	69ab      	ldr	r3, [r5, #24]
 800748a:	b913      	cbnz	r3, 8007492 <__swsetup_r+0x16>
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f98d 	bl	80077ac <__sinit>
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <__swsetup_r+0xd0>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d10f      	bne.n	80074b8 <__swsetup_r+0x3c>
 8007498:	686c      	ldr	r4, [r5, #4]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a0:	0719      	lsls	r1, r3, #28
 80074a2:	d42c      	bmi.n	80074fe <__swsetup_r+0x82>
 80074a4:	06dd      	lsls	r5, r3, #27
 80074a6:	d411      	bmi.n	80074cc <__swsetup_r+0x50>
 80074a8:	2309      	movs	r3, #9
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	f04f 30ff 	mov.w	r0, #4294967295
 80074b6:	e03e      	b.n	8007536 <__swsetup_r+0xba>
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <__swsetup_r+0xd4>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d101      	bne.n	80074c2 <__swsetup_r+0x46>
 80074be:	68ac      	ldr	r4, [r5, #8]
 80074c0:	e7eb      	b.n	800749a <__swsetup_r+0x1e>
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <__swsetup_r+0xd8>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	bf08      	it	eq
 80074c8:	68ec      	ldreq	r4, [r5, #12]
 80074ca:	e7e6      	b.n	800749a <__swsetup_r+0x1e>
 80074cc:	0758      	lsls	r0, r3, #29
 80074ce:	d512      	bpl.n	80074f6 <__swsetup_r+0x7a>
 80074d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d2:	b141      	cbz	r1, 80074e6 <__swsetup_r+0x6a>
 80074d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074d8:	4299      	cmp	r1, r3
 80074da:	d002      	beq.n	80074e2 <__swsetup_r+0x66>
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff fdbd 	bl	800705c <_free_r>
 80074e2:	2300      	movs	r3, #0
 80074e4:	6363      	str	r3, [r4, #52]	; 0x34
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	2300      	movs	r3, #0
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0308 	orr.w	r3, r3, #8
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	b94b      	cbnz	r3, 8007516 <__swsetup_r+0x9a>
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	d003      	beq.n	8007516 <__swsetup_r+0x9a>
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	f000 fa21 	bl	8007958 <__smakebuf_r>
 8007516:	89a0      	ldrh	r0, [r4, #12]
 8007518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800751c:	f010 0301 	ands.w	r3, r0, #1
 8007520:	d00a      	beq.n	8007538 <__swsetup_r+0xbc>
 8007522:	2300      	movs	r3, #0
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	425b      	negs	r3, r3
 800752a:	61a3      	str	r3, [r4, #24]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	b943      	cbnz	r3, 8007542 <__swsetup_r+0xc6>
 8007530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007534:	d1ba      	bne.n	80074ac <__swsetup_r+0x30>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	0781      	lsls	r1, r0, #30
 800753a:	bf58      	it	pl
 800753c:	6963      	ldrpl	r3, [r4, #20]
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	e7f4      	b.n	800752c <__swsetup_r+0xb0>
 8007542:	2000      	movs	r0, #0
 8007544:	e7f7      	b.n	8007536 <__swsetup_r+0xba>
 8007546:	bf00      	nop
 8007548:	2000003c 	.word	0x2000003c
 800754c:	08008658 	.word	0x08008658
 8007550:	08008678 	.word	0x08008678
 8007554:	08008638 	.word	0x08008638

08007558 <_close_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	; (8007574 <_close_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7fb fbd9 	bl	8002d1a <_close>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_close_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_close_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	200005b4 	.word	0x200005b4

08007578 <__sflush_r>:
 8007578:	898a      	ldrh	r2, [r1, #12]
 800757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	4605      	mov	r5, r0
 8007580:	0710      	lsls	r0, r2, #28
 8007582:	460c      	mov	r4, r1
 8007584:	d458      	bmi.n	8007638 <__sflush_r+0xc0>
 8007586:	684b      	ldr	r3, [r1, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dc05      	bgt.n	8007598 <__sflush_r+0x20>
 800758c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	dc02      	bgt.n	8007598 <__sflush_r+0x20>
 8007592:	2000      	movs	r0, #0
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800759a:	2e00      	cmp	r6, #0
 800759c:	d0f9      	beq.n	8007592 <__sflush_r+0x1a>
 800759e:	2300      	movs	r3, #0
 80075a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075a4:	682f      	ldr	r7, [r5, #0]
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	d032      	beq.n	8007610 <__sflush_r+0x98>
 80075aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	075a      	lsls	r2, r3, #29
 80075b0:	d505      	bpl.n	80075be <__sflush_r+0x46>
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	1ac0      	subs	r0, r0, r3
 80075b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075b8:	b10b      	cbz	r3, 80075be <__sflush_r+0x46>
 80075ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075bc:	1ac0      	subs	r0, r0, r3
 80075be:	2300      	movs	r3, #0
 80075c0:	4602      	mov	r2, r0
 80075c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c4:	6a21      	ldr	r1, [r4, #32]
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b0      	blx	r6
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	d106      	bne.n	80075de <__sflush_r+0x66>
 80075d0:	6829      	ldr	r1, [r5, #0]
 80075d2:	291d      	cmp	r1, #29
 80075d4:	d82c      	bhi.n	8007630 <__sflush_r+0xb8>
 80075d6:	4a2a      	ldr	r2, [pc, #168]	; (8007680 <__sflush_r+0x108>)
 80075d8:	40ca      	lsrs	r2, r1
 80075da:	07d6      	lsls	r6, r2, #31
 80075dc:	d528      	bpl.n	8007630 <__sflush_r+0xb8>
 80075de:	2200      	movs	r2, #0
 80075e0:	6062      	str	r2, [r4, #4]
 80075e2:	04d9      	lsls	r1, r3, #19
 80075e4:	6922      	ldr	r2, [r4, #16]
 80075e6:	6022      	str	r2, [r4, #0]
 80075e8:	d504      	bpl.n	80075f4 <__sflush_r+0x7c>
 80075ea:	1c42      	adds	r2, r0, #1
 80075ec:	d101      	bne.n	80075f2 <__sflush_r+0x7a>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	b903      	cbnz	r3, 80075f4 <__sflush_r+0x7c>
 80075f2:	6560      	str	r0, [r4, #84]	; 0x54
 80075f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075f6:	602f      	str	r7, [r5, #0]
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d0ca      	beq.n	8007592 <__sflush_r+0x1a>
 80075fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007600:	4299      	cmp	r1, r3
 8007602:	d002      	beq.n	800760a <__sflush_r+0x92>
 8007604:	4628      	mov	r0, r5
 8007606:	f7ff fd29 	bl	800705c <_free_r>
 800760a:	2000      	movs	r0, #0
 800760c:	6360      	str	r0, [r4, #52]	; 0x34
 800760e:	e7c1      	b.n	8007594 <__sflush_r+0x1c>
 8007610:	6a21      	ldr	r1, [r4, #32]
 8007612:	2301      	movs	r3, #1
 8007614:	4628      	mov	r0, r5
 8007616:	47b0      	blx	r6
 8007618:	1c41      	adds	r1, r0, #1
 800761a:	d1c7      	bne.n	80075ac <__sflush_r+0x34>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0c4      	beq.n	80075ac <__sflush_r+0x34>
 8007622:	2b1d      	cmp	r3, #29
 8007624:	d001      	beq.n	800762a <__sflush_r+0xb2>
 8007626:	2b16      	cmp	r3, #22
 8007628:	d101      	bne.n	800762e <__sflush_r+0xb6>
 800762a:	602f      	str	r7, [r5, #0]
 800762c:	e7b1      	b.n	8007592 <__sflush_r+0x1a>
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	e7ad      	b.n	8007594 <__sflush_r+0x1c>
 8007638:	690f      	ldr	r7, [r1, #16]
 800763a:	2f00      	cmp	r7, #0
 800763c:	d0a9      	beq.n	8007592 <__sflush_r+0x1a>
 800763e:	0793      	lsls	r3, r2, #30
 8007640:	680e      	ldr	r6, [r1, #0]
 8007642:	bf08      	it	eq
 8007644:	694b      	ldreq	r3, [r1, #20]
 8007646:	600f      	str	r7, [r1, #0]
 8007648:	bf18      	it	ne
 800764a:	2300      	movne	r3, #0
 800764c:	eba6 0807 	sub.w	r8, r6, r7
 8007650:	608b      	str	r3, [r1, #8]
 8007652:	f1b8 0f00 	cmp.w	r8, #0
 8007656:	dd9c      	ble.n	8007592 <__sflush_r+0x1a>
 8007658:	6a21      	ldr	r1, [r4, #32]
 800765a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800765c:	4643      	mov	r3, r8
 800765e:	463a      	mov	r2, r7
 8007660:	4628      	mov	r0, r5
 8007662:	47b0      	blx	r6
 8007664:	2800      	cmp	r0, #0
 8007666:	dc06      	bgt.n	8007676 <__sflush_r+0xfe>
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	e78e      	b.n	8007594 <__sflush_r+0x1c>
 8007676:	4407      	add	r7, r0
 8007678:	eba8 0800 	sub.w	r8, r8, r0
 800767c:	e7e9      	b.n	8007652 <__sflush_r+0xda>
 800767e:	bf00      	nop
 8007680:	20400001 	.word	0x20400001

08007684 <_fflush_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	690b      	ldr	r3, [r1, #16]
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	b913      	cbnz	r3, 8007694 <_fflush_r+0x10>
 800768e:	2500      	movs	r5, #0
 8007690:	4628      	mov	r0, r5
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	b118      	cbz	r0, 800769e <_fflush_r+0x1a>
 8007696:	6983      	ldr	r3, [r0, #24]
 8007698:	b90b      	cbnz	r3, 800769e <_fflush_r+0x1a>
 800769a:	f000 f887 	bl	80077ac <__sinit>
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <_fflush_r+0x6c>)
 80076a0:	429c      	cmp	r4, r3
 80076a2:	d11b      	bne.n	80076dc <_fflush_r+0x58>
 80076a4:	686c      	ldr	r4, [r5, #4]
 80076a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ef      	beq.n	800768e <_fflush_r+0xa>
 80076ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076b0:	07d0      	lsls	r0, r2, #31
 80076b2:	d404      	bmi.n	80076be <_fflush_r+0x3a>
 80076b4:	0599      	lsls	r1, r3, #22
 80076b6:	d402      	bmi.n	80076be <_fflush_r+0x3a>
 80076b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ba:	f000 f915 	bl	80078e8 <__retarget_lock_acquire_recursive>
 80076be:	4628      	mov	r0, r5
 80076c0:	4621      	mov	r1, r4
 80076c2:	f7ff ff59 	bl	8007578 <__sflush_r>
 80076c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076c8:	07da      	lsls	r2, r3, #31
 80076ca:	4605      	mov	r5, r0
 80076cc:	d4e0      	bmi.n	8007690 <_fflush_r+0xc>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	059b      	lsls	r3, r3, #22
 80076d2:	d4dd      	bmi.n	8007690 <_fflush_r+0xc>
 80076d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076d6:	f000 f908 	bl	80078ea <__retarget_lock_release_recursive>
 80076da:	e7d9      	b.n	8007690 <_fflush_r+0xc>
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <_fflush_r+0x70>)
 80076de:	429c      	cmp	r4, r3
 80076e0:	d101      	bne.n	80076e6 <_fflush_r+0x62>
 80076e2:	68ac      	ldr	r4, [r5, #8]
 80076e4:	e7df      	b.n	80076a6 <_fflush_r+0x22>
 80076e6:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <_fflush_r+0x74>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	bf08      	it	eq
 80076ec:	68ec      	ldreq	r4, [r5, #12]
 80076ee:	e7da      	b.n	80076a6 <_fflush_r+0x22>
 80076f0:	08008658 	.word	0x08008658
 80076f4:	08008678 	.word	0x08008678
 80076f8:	08008638 	.word	0x08008638

080076fc <std>:
 80076fc:	2300      	movs	r3, #0
 80076fe:	b510      	push	{r4, lr}
 8007700:	4604      	mov	r4, r0
 8007702:	e9c0 3300 	strd	r3, r3, [r0]
 8007706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770a:	6083      	str	r3, [r0, #8]
 800770c:	8181      	strh	r1, [r0, #12]
 800770e:	6643      	str	r3, [r0, #100]	; 0x64
 8007710:	81c2      	strh	r2, [r0, #14]
 8007712:	6183      	str	r3, [r0, #24]
 8007714:	4619      	mov	r1, r3
 8007716:	2208      	movs	r2, #8
 8007718:	305c      	adds	r0, #92	; 0x5c
 800771a:	f7ff fc97 	bl	800704c <memset>
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <std+0x38>)
 8007720:	6263      	str	r3, [r4, #36]	; 0x24
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <std+0x3c>)
 8007724:	62a3      	str	r3, [r4, #40]	; 0x28
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <std+0x40>)
 8007728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x44>)
 800772c:	6224      	str	r4, [r4, #32]
 800772e:	6323      	str	r3, [r4, #48]	; 0x30
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	0800732d 	.word	0x0800732d
 8007738:	0800734f 	.word	0x0800734f
 800773c:	08007387 	.word	0x08007387
 8007740:	080073ab 	.word	0x080073ab

08007744 <_cleanup_r>:
 8007744:	4901      	ldr	r1, [pc, #4]	; (800774c <_cleanup_r+0x8>)
 8007746:	f000 b8af 	b.w	80078a8 <_fwalk_reent>
 800774a:	bf00      	nop
 800774c:	08007685 	.word	0x08007685

08007750 <__sfmoreglue>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	1e4a      	subs	r2, r1, #1
 8007754:	2568      	movs	r5, #104	; 0x68
 8007756:	4355      	muls	r5, r2
 8007758:	460e      	mov	r6, r1
 800775a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800775e:	f7ff fccd 	bl	80070fc <_malloc_r>
 8007762:	4604      	mov	r4, r0
 8007764:	b140      	cbz	r0, 8007778 <__sfmoreglue+0x28>
 8007766:	2100      	movs	r1, #0
 8007768:	e9c0 1600 	strd	r1, r6, [r0]
 800776c:	300c      	adds	r0, #12
 800776e:	60a0      	str	r0, [r4, #8]
 8007770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007774:	f7ff fc6a 	bl	800704c <memset>
 8007778:	4620      	mov	r0, r4
 800777a:	bd70      	pop	{r4, r5, r6, pc}

0800777c <__sfp_lock_acquire>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__sfp_lock_acquire+0x8>)
 800777e:	f000 b8b3 	b.w	80078e8 <__retarget_lock_acquire_recursive>
 8007782:	bf00      	nop
 8007784:	200005b0 	.word	0x200005b0

08007788 <__sfp_lock_release>:
 8007788:	4801      	ldr	r0, [pc, #4]	; (8007790 <__sfp_lock_release+0x8>)
 800778a:	f000 b8ae 	b.w	80078ea <__retarget_lock_release_recursive>
 800778e:	bf00      	nop
 8007790:	200005b0 	.word	0x200005b0

08007794 <__sinit_lock_acquire>:
 8007794:	4801      	ldr	r0, [pc, #4]	; (800779c <__sinit_lock_acquire+0x8>)
 8007796:	f000 b8a7 	b.w	80078e8 <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	200005ab 	.word	0x200005ab

080077a0 <__sinit_lock_release>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__sinit_lock_release+0x8>)
 80077a2:	f000 b8a2 	b.w	80078ea <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	200005ab 	.word	0x200005ab

080077ac <__sinit>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	f7ff fff0 	bl	8007794 <__sinit_lock_acquire>
 80077b4:	69a3      	ldr	r3, [r4, #24]
 80077b6:	b11b      	cbz	r3, 80077c0 <__sinit+0x14>
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	f7ff bff0 	b.w	80077a0 <__sinit_lock_release>
 80077c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077c4:	6523      	str	r3, [r4, #80]	; 0x50
 80077c6:	4b13      	ldr	r3, [pc, #76]	; (8007814 <__sinit+0x68>)
 80077c8:	4a13      	ldr	r2, [pc, #76]	; (8007818 <__sinit+0x6c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	bf04      	itt	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	61a3      	streq	r3, [r4, #24]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 f820 	bl	800781c <__sfp>
 80077dc:	6060      	str	r0, [r4, #4]
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 f81c 	bl	800781c <__sfp>
 80077e4:	60a0      	str	r0, [r4, #8]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f818 	bl	800781c <__sfp>
 80077ec:	2200      	movs	r2, #0
 80077ee:	60e0      	str	r0, [r4, #12]
 80077f0:	2104      	movs	r1, #4
 80077f2:	6860      	ldr	r0, [r4, #4]
 80077f4:	f7ff ff82 	bl	80076fc <std>
 80077f8:	68a0      	ldr	r0, [r4, #8]
 80077fa:	2201      	movs	r2, #1
 80077fc:	2109      	movs	r1, #9
 80077fe:	f7ff ff7d 	bl	80076fc <std>
 8007802:	68e0      	ldr	r0, [r4, #12]
 8007804:	2202      	movs	r2, #2
 8007806:	2112      	movs	r1, #18
 8007808:	f7ff ff78 	bl	80076fc <std>
 800780c:	2301      	movs	r3, #1
 800780e:	61a3      	str	r3, [r4, #24]
 8007810:	e7d2      	b.n	80077b8 <__sinit+0xc>
 8007812:	bf00      	nop
 8007814:	08008634 	.word	0x08008634
 8007818:	08007745 	.word	0x08007745

0800781c <__sfp>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	4607      	mov	r7, r0
 8007820:	f7ff ffac 	bl	800777c <__sfp_lock_acquire>
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <__sfp+0x84>)
 8007826:	681e      	ldr	r6, [r3, #0]
 8007828:	69b3      	ldr	r3, [r6, #24]
 800782a:	b913      	cbnz	r3, 8007832 <__sfp+0x16>
 800782c:	4630      	mov	r0, r6
 800782e:	f7ff ffbd 	bl	80077ac <__sinit>
 8007832:	3648      	adds	r6, #72	; 0x48
 8007834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007838:	3b01      	subs	r3, #1
 800783a:	d503      	bpl.n	8007844 <__sfp+0x28>
 800783c:	6833      	ldr	r3, [r6, #0]
 800783e:	b30b      	cbz	r3, 8007884 <__sfp+0x68>
 8007840:	6836      	ldr	r6, [r6, #0]
 8007842:	e7f7      	b.n	8007834 <__sfp+0x18>
 8007844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007848:	b9d5      	cbnz	r5, 8007880 <__sfp+0x64>
 800784a:	4b16      	ldr	r3, [pc, #88]	; (80078a4 <__sfp+0x88>)
 800784c:	60e3      	str	r3, [r4, #12]
 800784e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007852:	6665      	str	r5, [r4, #100]	; 0x64
 8007854:	f000 f847 	bl	80078e6 <__retarget_lock_init_recursive>
 8007858:	f7ff ff96 	bl	8007788 <__sfp_lock_release>
 800785c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007864:	6025      	str	r5, [r4, #0]
 8007866:	61a5      	str	r5, [r4, #24]
 8007868:	2208      	movs	r2, #8
 800786a:	4629      	mov	r1, r5
 800786c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007870:	f7ff fbec 	bl	800704c <memset>
 8007874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800787c:	4620      	mov	r0, r4
 800787e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007880:	3468      	adds	r4, #104	; 0x68
 8007882:	e7d9      	b.n	8007838 <__sfp+0x1c>
 8007884:	2104      	movs	r1, #4
 8007886:	4638      	mov	r0, r7
 8007888:	f7ff ff62 	bl	8007750 <__sfmoreglue>
 800788c:	4604      	mov	r4, r0
 800788e:	6030      	str	r0, [r6, #0]
 8007890:	2800      	cmp	r0, #0
 8007892:	d1d5      	bne.n	8007840 <__sfp+0x24>
 8007894:	f7ff ff78 	bl	8007788 <__sfp_lock_release>
 8007898:	230c      	movs	r3, #12
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	e7ee      	b.n	800787c <__sfp+0x60>
 800789e:	bf00      	nop
 80078a0:	08008634 	.word	0x08008634
 80078a4:	ffff0001 	.word	0xffff0001

080078a8 <_fwalk_reent>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4606      	mov	r6, r0
 80078ae:	4688      	mov	r8, r1
 80078b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078b4:	2700      	movs	r7, #0
 80078b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ba:	f1b9 0901 	subs.w	r9, r9, #1
 80078be:	d505      	bpl.n	80078cc <_fwalk_reent+0x24>
 80078c0:	6824      	ldr	r4, [r4, #0]
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d1f7      	bne.n	80078b6 <_fwalk_reent+0xe>
 80078c6:	4638      	mov	r0, r7
 80078c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078cc:	89ab      	ldrh	r3, [r5, #12]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d907      	bls.n	80078e2 <_fwalk_reent+0x3a>
 80078d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d6:	3301      	adds	r3, #1
 80078d8:	d003      	beq.n	80078e2 <_fwalk_reent+0x3a>
 80078da:	4629      	mov	r1, r5
 80078dc:	4630      	mov	r0, r6
 80078de:	47c0      	blx	r8
 80078e0:	4307      	orrs	r7, r0
 80078e2:	3568      	adds	r5, #104	; 0x68
 80078e4:	e7e9      	b.n	80078ba <_fwalk_reent+0x12>

080078e6 <__retarget_lock_init_recursive>:
 80078e6:	4770      	bx	lr

080078e8 <__retarget_lock_acquire_recursive>:
 80078e8:	4770      	bx	lr

080078ea <__retarget_lock_release_recursive>:
 80078ea:	4770      	bx	lr

080078ec <_lseek_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d07      	ldr	r5, [pc, #28]	; (800790c <_lseek_r+0x20>)
 80078f0:	4604      	mov	r4, r0
 80078f2:	4608      	mov	r0, r1
 80078f4:	4611      	mov	r1, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	f7fb fa34 	bl	8002d68 <_lseek>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_lseek_r+0x1e>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_lseek_r+0x1e>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200005b4 	.word	0x200005b4

08007910 <__swhatbuf_r>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	460e      	mov	r6, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	2900      	cmp	r1, #0
 800791a:	b096      	sub	sp, #88	; 0x58
 800791c:	4614      	mov	r4, r2
 800791e:	461d      	mov	r5, r3
 8007920:	da07      	bge.n	8007932 <__swhatbuf_r+0x22>
 8007922:	2300      	movs	r3, #0
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	89b3      	ldrh	r3, [r6, #12]
 8007928:	061a      	lsls	r2, r3, #24
 800792a:	d410      	bmi.n	800794e <__swhatbuf_r+0x3e>
 800792c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007930:	e00e      	b.n	8007950 <__swhatbuf_r+0x40>
 8007932:	466a      	mov	r2, sp
 8007934:	f000 fcb8 	bl	80082a8 <_fstat_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	dbf2      	blt.n	8007922 <__swhatbuf_r+0x12>
 800793c:	9a01      	ldr	r2, [sp, #4]
 800793e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007946:	425a      	negs	r2, r3
 8007948:	415a      	adcs	r2, r3
 800794a:	602a      	str	r2, [r5, #0]
 800794c:	e7ee      	b.n	800792c <__swhatbuf_r+0x1c>
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	2000      	movs	r0, #0
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	b016      	add	sp, #88	; 0x58
 8007956:	bd70      	pop	{r4, r5, r6, pc}

08007958 <__smakebuf_r>:
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800795c:	079d      	lsls	r5, r3, #30
 800795e:	4606      	mov	r6, r0
 8007960:	460c      	mov	r4, r1
 8007962:	d507      	bpl.n	8007974 <__smakebuf_r+0x1c>
 8007964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2301      	movs	r3, #1
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	b002      	add	sp, #8
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	ab01      	add	r3, sp, #4
 8007976:	466a      	mov	r2, sp
 8007978:	f7ff ffca 	bl	8007910 <__swhatbuf_r>
 800797c:	9900      	ldr	r1, [sp, #0]
 800797e:	4605      	mov	r5, r0
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff fbbb 	bl	80070fc <_malloc_r>
 8007986:	b948      	cbnz	r0, 800799c <__smakebuf_r+0x44>
 8007988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d4ef      	bmi.n	8007970 <__smakebuf_r+0x18>
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	e7e3      	b.n	8007964 <__smakebuf_r+0xc>
 800799c:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <__smakebuf_r+0x7c>)
 800799e:	62b3      	str	r3, [r6, #40]	; 0x28
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	6163      	str	r3, [r4, #20]
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	6120      	str	r0, [r4, #16]
 80079b2:	b15b      	cbz	r3, 80079cc <__smakebuf_r+0x74>
 80079b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 fc87 	bl	80082cc <_isatty_r>
 80079be:	b128      	cbz	r0, 80079cc <__smakebuf_r+0x74>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	89a0      	ldrh	r0, [r4, #12]
 80079ce:	4305      	orrs	r5, r0
 80079d0:	81a5      	strh	r5, [r4, #12]
 80079d2:	e7cd      	b.n	8007970 <__smakebuf_r+0x18>
 80079d4:	08007745 	.word	0x08007745

080079d8 <__malloc_lock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__malloc_lock+0x8>)
 80079da:	f7ff bf85 	b.w	80078e8 <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	200005ac 	.word	0x200005ac

080079e4 <__malloc_unlock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__malloc_unlock+0x8>)
 80079e6:	f7ff bf80 	b.w	80078ea <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	200005ac 	.word	0x200005ac

080079f0 <__ssputs_r>:
 80079f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f4:	688e      	ldr	r6, [r1, #8]
 80079f6:	429e      	cmp	r6, r3
 80079f8:	4682      	mov	sl, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	4690      	mov	r8, r2
 80079fe:	461f      	mov	r7, r3
 8007a00:	d838      	bhi.n	8007a74 <__ssputs_r+0x84>
 8007a02:	898a      	ldrh	r2, [r1, #12]
 8007a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a08:	d032      	beq.n	8007a70 <__ssputs_r+0x80>
 8007a0a:	6825      	ldr	r5, [r4, #0]
 8007a0c:	6909      	ldr	r1, [r1, #16]
 8007a0e:	eba5 0901 	sub.w	r9, r5, r1
 8007a12:	6965      	ldr	r5, [r4, #20]
 8007a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	444b      	add	r3, r9
 8007a20:	106d      	asrs	r5, r5, #1
 8007a22:	429d      	cmp	r5, r3
 8007a24:	bf38      	it	cc
 8007a26:	461d      	movcc	r5, r3
 8007a28:	0553      	lsls	r3, r2, #21
 8007a2a:	d531      	bpl.n	8007a90 <__ssputs_r+0xa0>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7ff fb65 	bl	80070fc <_malloc_r>
 8007a32:	4606      	mov	r6, r0
 8007a34:	b950      	cbnz	r0, 8007a4c <__ssputs_r+0x5c>
 8007a36:	230c      	movs	r3, #12
 8007a38:	f8ca 3000 	str.w	r3, [sl]
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	6921      	ldr	r1, [r4, #16]
 8007a4e:	464a      	mov	r2, r9
 8007a50:	f7ff faee 	bl	8007030 <memcpy>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	6126      	str	r6, [r4, #16]
 8007a62:	6165      	str	r5, [r4, #20]
 8007a64:	444e      	add	r6, r9
 8007a66:	eba5 0509 	sub.w	r5, r5, r9
 8007a6a:	6026      	str	r6, [r4, #0]
 8007a6c:	60a5      	str	r5, [r4, #8]
 8007a6e:	463e      	mov	r6, r7
 8007a70:	42be      	cmp	r6, r7
 8007a72:	d900      	bls.n	8007a76 <__ssputs_r+0x86>
 8007a74:	463e      	mov	r6, r7
 8007a76:	4632      	mov	r2, r6
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	f000 fc36 	bl	80082ec <memmove>
 8007a80:	68a3      	ldr	r3, [r4, #8]
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	1b9b      	subs	r3, r3, r6
 8007a86:	4432      	add	r2, r6
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	6022      	str	r2, [r4, #0]
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7db      	b.n	8007a48 <__ssputs_r+0x58>
 8007a90:	462a      	mov	r2, r5
 8007a92:	f000 fc45 	bl	8008320 <_realloc_r>
 8007a96:	4606      	mov	r6, r0
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1e1      	bne.n	8007a60 <__ssputs_r+0x70>
 8007a9c:	6921      	ldr	r1, [r4, #16]
 8007a9e:	4650      	mov	r0, sl
 8007aa0:	f7ff fadc 	bl	800705c <_free_r>
 8007aa4:	e7c7      	b.n	8007a36 <__ssputs_r+0x46>
	...

08007aa8 <_svfiprintf_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4698      	mov	r8, r3
 8007aae:	898b      	ldrh	r3, [r1, #12]
 8007ab0:	061b      	lsls	r3, r3, #24
 8007ab2:	b09d      	sub	sp, #116	; 0x74
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	4614      	mov	r4, r2
 8007aba:	d50e      	bpl.n	8007ada <_svfiprintf_r+0x32>
 8007abc:	690b      	ldr	r3, [r1, #16]
 8007abe:	b963      	cbnz	r3, 8007ada <_svfiprintf_r+0x32>
 8007ac0:	2140      	movs	r1, #64	; 0x40
 8007ac2:	f7ff fb1b 	bl	80070fc <_malloc_r>
 8007ac6:	6028      	str	r0, [r5, #0]
 8007ac8:	6128      	str	r0, [r5, #16]
 8007aca:	b920      	cbnz	r0, 8007ad6 <_svfiprintf_r+0x2e>
 8007acc:	230c      	movs	r3, #12
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e0d1      	b.n	8007c7a <_svfiprintf_r+0x1d2>
 8007ad6:	2340      	movs	r3, #64	; 0x40
 8007ad8:	616b      	str	r3, [r5, #20]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ade:	2320      	movs	r3, #32
 8007ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae8:	2330      	movs	r3, #48	; 0x30
 8007aea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c94 <_svfiprintf_r+0x1ec>
 8007aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af2:	f04f 0901 	mov.w	r9, #1
 8007af6:	4623      	mov	r3, r4
 8007af8:	469a      	mov	sl, r3
 8007afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afe:	b10a      	cbz	r2, 8007b04 <_svfiprintf_r+0x5c>
 8007b00:	2a25      	cmp	r2, #37	; 0x25
 8007b02:	d1f9      	bne.n	8007af8 <_svfiprintf_r+0x50>
 8007b04:	ebba 0b04 	subs.w	fp, sl, r4
 8007b08:	d00b      	beq.n	8007b22 <_svfiprintf_r+0x7a>
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff ff6d 	bl	80079f0 <__ssputs_r>
 8007b16:	3001      	adds	r0, #1
 8007b18:	f000 80aa 	beq.w	8007c70 <_svfiprintf_r+0x1c8>
 8007b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1e:	445a      	add	r2, fp
 8007b20:	9209      	str	r2, [sp, #36]	; 0x24
 8007b22:	f89a 3000 	ldrb.w	r3, [sl]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80a2 	beq.w	8007c70 <_svfiprintf_r+0x1c8>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b36:	f10a 0a01 	add.w	sl, sl, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b42:	931a      	str	r3, [sp, #104]	; 0x68
 8007b44:	4654      	mov	r4, sl
 8007b46:	2205      	movs	r2, #5
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	4851      	ldr	r0, [pc, #324]	; (8007c94 <_svfiprintf_r+0x1ec>)
 8007b4e:	f7f8 fb47 	bl	80001e0 <memchr>
 8007b52:	9a04      	ldr	r2, [sp, #16]
 8007b54:	b9d8      	cbnz	r0, 8007b8e <_svfiprintf_r+0xe6>
 8007b56:	06d0      	lsls	r0, r2, #27
 8007b58:	bf44      	itt	mi
 8007b5a:	2320      	movmi	r3, #32
 8007b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b60:	0711      	lsls	r1, r2, #28
 8007b62:	bf44      	itt	mi
 8007b64:	232b      	movmi	r3, #43	; 0x2b
 8007b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b70:	d015      	beq.n	8007b9e <_svfiprintf_r+0xf6>
 8007b72:	9a07      	ldr	r2, [sp, #28]
 8007b74:	4654      	mov	r4, sl
 8007b76:	2000      	movs	r0, #0
 8007b78:	f04f 0c0a 	mov.w	ip, #10
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b82:	3b30      	subs	r3, #48	; 0x30
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d94e      	bls.n	8007c26 <_svfiprintf_r+0x17e>
 8007b88:	b1b0      	cbz	r0, 8007bb8 <_svfiprintf_r+0x110>
 8007b8a:	9207      	str	r2, [sp, #28]
 8007b8c:	e014      	b.n	8007bb8 <_svfiprintf_r+0x110>
 8007b8e:	eba0 0308 	sub.w	r3, r0, r8
 8007b92:	fa09 f303 	lsl.w	r3, r9, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	46a2      	mov	sl, r4
 8007b9c:	e7d2      	b.n	8007b44 <_svfiprintf_r+0x9c>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	1d19      	adds	r1, r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfbb      	ittet	lt
 8007baa:	425b      	neglt	r3, r3
 8007bac:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb0:	9307      	strge	r3, [sp, #28]
 8007bb2:	9307      	strlt	r3, [sp, #28]
 8007bb4:	bfb8      	it	lt
 8007bb6:	9204      	strlt	r2, [sp, #16]
 8007bb8:	7823      	ldrb	r3, [r4, #0]
 8007bba:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbc:	d10c      	bne.n	8007bd8 <_svfiprintf_r+0x130>
 8007bbe:	7863      	ldrb	r3, [r4, #1]
 8007bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc2:	d135      	bne.n	8007c30 <_svfiprintf_r+0x188>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd4:	3402      	adds	r4, #2
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ca4 <_svfiprintf_r+0x1fc>
 8007bdc:	7821      	ldrb	r1, [r4, #0]
 8007bde:	2203      	movs	r2, #3
 8007be0:	4650      	mov	r0, sl
 8007be2:	f7f8 fafd 	bl	80001e0 <memchr>
 8007be6:	b140      	cbz	r0, 8007bfa <_svfiprintf_r+0x152>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	eba0 000a 	sub.w	r0, r0, sl
 8007bee:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf2:	9b04      	ldr	r3, [sp, #16]
 8007bf4:	4303      	orrs	r3, r0
 8007bf6:	3401      	adds	r4, #1
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfe:	4826      	ldr	r0, [pc, #152]	; (8007c98 <_svfiprintf_r+0x1f0>)
 8007c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c04:	2206      	movs	r2, #6
 8007c06:	f7f8 faeb 	bl	80001e0 <memchr>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d038      	beq.n	8007c80 <_svfiprintf_r+0x1d8>
 8007c0e:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <_svfiprintf_r+0x1f4>)
 8007c10:	bb1b      	cbnz	r3, 8007c5a <_svfiprintf_r+0x1b2>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	3307      	adds	r3, #7
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	9303      	str	r3, [sp, #12]
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	4433      	add	r3, r6
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	e767      	b.n	8007af6 <_svfiprintf_r+0x4e>
 8007c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	e7a5      	b.n	8007b7c <_svfiprintf_r+0xd4>
 8007c30:	2300      	movs	r3, #0
 8007c32:	3401      	adds	r4, #1
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	4619      	mov	r1, r3
 8007c38:	f04f 0c0a 	mov.w	ip, #10
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c42:	3a30      	subs	r2, #48	; 0x30
 8007c44:	2a09      	cmp	r2, #9
 8007c46:	d903      	bls.n	8007c50 <_svfiprintf_r+0x1a8>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0c5      	beq.n	8007bd8 <_svfiprintf_r+0x130>
 8007c4c:	9105      	str	r1, [sp, #20]
 8007c4e:	e7c3      	b.n	8007bd8 <_svfiprintf_r+0x130>
 8007c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c54:	4604      	mov	r4, r0
 8007c56:	2301      	movs	r3, #1
 8007c58:	e7f0      	b.n	8007c3c <_svfiprintf_r+0x194>
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <_svfiprintf_r+0x1f8>)
 8007c62:	a904      	add	r1, sp, #16
 8007c64:	4638      	mov	r0, r7
 8007c66:	f3af 8000 	nop.w
 8007c6a:	1c42      	adds	r2, r0, #1
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	d1d6      	bne.n	8007c1e <_svfiprintf_r+0x176>
 8007c70:	89ab      	ldrh	r3, [r5, #12]
 8007c72:	065b      	lsls	r3, r3, #25
 8007c74:	f53f af2c 	bmi.w	8007ad0 <_svfiprintf_r+0x28>
 8007c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c7a:	b01d      	add	sp, #116	; 0x74
 8007c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	462a      	mov	r2, r5
 8007c86:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <_svfiprintf_r+0x1f8>)
 8007c88:	a904      	add	r1, sp, #16
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f000 f9d4 	bl	8008038 <_printf_i>
 8007c90:	e7eb      	b.n	8007c6a <_svfiprintf_r+0x1c2>
 8007c92:	bf00      	nop
 8007c94:	08008698 	.word	0x08008698
 8007c98:	080086a2 	.word	0x080086a2
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	080079f1 	.word	0x080079f1
 8007ca4:	0800869e 	.word	0x0800869e

08007ca8 <__sfputc_r>:
 8007ca8:	6893      	ldr	r3, [r2, #8]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	b410      	push	{r4}
 8007cb0:	6093      	str	r3, [r2, #8]
 8007cb2:	da08      	bge.n	8007cc6 <__sfputc_r+0x1e>
 8007cb4:	6994      	ldr	r4, [r2, #24]
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	db01      	blt.n	8007cbe <__sfputc_r+0x16>
 8007cba:	290a      	cmp	r1, #10
 8007cbc:	d103      	bne.n	8007cc6 <__sfputc_r+0x1e>
 8007cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc2:	f7ff bb77 	b.w	80073b4 <__swbuf_r>
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	1c58      	adds	r0, r3, #1
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	7019      	strb	r1, [r3, #0]
 8007cce:	4608      	mov	r0, r1
 8007cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <__sfputs_r>:
 8007cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd8:	4606      	mov	r6, r0
 8007cda:	460f      	mov	r7, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	18d5      	adds	r5, r2, r3
 8007ce0:	42ac      	cmp	r4, r5
 8007ce2:	d101      	bne.n	8007ce8 <__sfputs_r+0x12>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e007      	b.n	8007cf8 <__sfputs_r+0x22>
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	463a      	mov	r2, r7
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff ffda 	bl	8007ca8 <__sfputc_r>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d1f3      	bne.n	8007ce0 <__sfputs_r+0xa>
 8007cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cfc <_vfiprintf_r>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	460d      	mov	r5, r1
 8007d02:	b09d      	sub	sp, #116	; 0x74
 8007d04:	4614      	mov	r4, r2
 8007d06:	4698      	mov	r8, r3
 8007d08:	4606      	mov	r6, r0
 8007d0a:	b118      	cbz	r0, 8007d14 <_vfiprintf_r+0x18>
 8007d0c:	6983      	ldr	r3, [r0, #24]
 8007d0e:	b90b      	cbnz	r3, 8007d14 <_vfiprintf_r+0x18>
 8007d10:	f7ff fd4c 	bl	80077ac <__sinit>
 8007d14:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <_vfiprintf_r+0x240>)
 8007d16:	429d      	cmp	r5, r3
 8007d18:	d11b      	bne.n	8007d52 <_vfiprintf_r+0x56>
 8007d1a:	6875      	ldr	r5, [r6, #4]
 8007d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d1e:	07d9      	lsls	r1, r3, #31
 8007d20:	d405      	bmi.n	8007d2e <_vfiprintf_r+0x32>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	059a      	lsls	r2, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_vfiprintf_r+0x32>
 8007d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2a:	f7ff fddd 	bl	80078e8 <__retarget_lock_acquire_recursive>
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	071b      	lsls	r3, r3, #28
 8007d32:	d501      	bpl.n	8007d38 <_vfiprintf_r+0x3c>
 8007d34:	692b      	ldr	r3, [r5, #16]
 8007d36:	b9eb      	cbnz	r3, 8007d74 <_vfiprintf_r+0x78>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff fb9e 	bl	800747c <__swsetup_r>
 8007d40:	b1c0      	cbz	r0, 8007d74 <_vfiprintf_r+0x78>
 8007d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d44:	07dc      	lsls	r4, r3, #31
 8007d46:	d50e      	bpl.n	8007d66 <_vfiprintf_r+0x6a>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b01d      	add	sp, #116	; 0x74
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	4b7b      	ldr	r3, [pc, #492]	; (8007f40 <_vfiprintf_r+0x244>)
 8007d54:	429d      	cmp	r5, r3
 8007d56:	d101      	bne.n	8007d5c <_vfiprintf_r+0x60>
 8007d58:	68b5      	ldr	r5, [r6, #8]
 8007d5a:	e7df      	b.n	8007d1c <_vfiprintf_r+0x20>
 8007d5c:	4b79      	ldr	r3, [pc, #484]	; (8007f44 <_vfiprintf_r+0x248>)
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	bf08      	it	eq
 8007d62:	68f5      	ldreq	r5, [r6, #12]
 8007d64:	e7da      	b.n	8007d1c <_vfiprintf_r+0x20>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	0598      	lsls	r0, r3, #22
 8007d6a:	d4ed      	bmi.n	8007d48 <_vfiprintf_r+0x4c>
 8007d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d6e:	f7ff fdbc 	bl	80078ea <__retarget_lock_release_recursive>
 8007d72:	e7e9      	b.n	8007d48 <_vfiprintf_r+0x4c>
 8007d74:	2300      	movs	r3, #0
 8007d76:	9309      	str	r3, [sp, #36]	; 0x24
 8007d78:	2320      	movs	r3, #32
 8007d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d82:	2330      	movs	r3, #48	; 0x30
 8007d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f48 <_vfiprintf_r+0x24c>
 8007d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8c:	f04f 0901 	mov.w	r9, #1
 8007d90:	4623      	mov	r3, r4
 8007d92:	469a      	mov	sl, r3
 8007d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d98:	b10a      	cbz	r2, 8007d9e <_vfiprintf_r+0xa2>
 8007d9a:	2a25      	cmp	r2, #37	; 0x25
 8007d9c:	d1f9      	bne.n	8007d92 <_vfiprintf_r+0x96>
 8007d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007da2:	d00b      	beq.n	8007dbc <_vfiprintf_r+0xc0>
 8007da4:	465b      	mov	r3, fp
 8007da6:	4622      	mov	r2, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ff93 	bl	8007cd6 <__sfputs_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	f000 80aa 	beq.w	8007f0a <_vfiprintf_r+0x20e>
 8007db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db8:	445a      	add	r2, fp
 8007dba:	9209      	str	r2, [sp, #36]	; 0x24
 8007dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a2 	beq.w	8007f0a <_vfiprintf_r+0x20e>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd0:	f10a 0a01 	add.w	sl, sl, #1
 8007dd4:	9304      	str	r3, [sp, #16]
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dde:	4654      	mov	r4, sl
 8007de0:	2205      	movs	r2, #5
 8007de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de6:	4858      	ldr	r0, [pc, #352]	; (8007f48 <_vfiprintf_r+0x24c>)
 8007de8:	f7f8 f9fa 	bl	80001e0 <memchr>
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	b9d8      	cbnz	r0, 8007e28 <_vfiprintf_r+0x12c>
 8007df0:	06d1      	lsls	r1, r2, #27
 8007df2:	bf44      	itt	mi
 8007df4:	2320      	movmi	r3, #32
 8007df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfa:	0713      	lsls	r3, r2, #28
 8007dfc:	bf44      	itt	mi
 8007dfe:	232b      	movmi	r3, #43	; 0x2b
 8007e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e04:	f89a 3000 	ldrb.w	r3, [sl]
 8007e08:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0a:	d015      	beq.n	8007e38 <_vfiprintf_r+0x13c>
 8007e0c:	9a07      	ldr	r2, [sp, #28]
 8007e0e:	4654      	mov	r4, sl
 8007e10:	2000      	movs	r0, #0
 8007e12:	f04f 0c0a 	mov.w	ip, #10
 8007e16:	4621      	mov	r1, r4
 8007e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e1c:	3b30      	subs	r3, #48	; 0x30
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d94e      	bls.n	8007ec0 <_vfiprintf_r+0x1c4>
 8007e22:	b1b0      	cbz	r0, 8007e52 <_vfiprintf_r+0x156>
 8007e24:	9207      	str	r2, [sp, #28]
 8007e26:	e014      	b.n	8007e52 <_vfiprintf_r+0x156>
 8007e28:	eba0 0308 	sub.w	r3, r0, r8
 8007e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	46a2      	mov	sl, r4
 8007e36:	e7d2      	b.n	8007dde <_vfiprintf_r+0xe2>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	1d19      	adds	r1, r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	9103      	str	r1, [sp, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bfbb      	ittet	lt
 8007e44:	425b      	neglt	r3, r3
 8007e46:	f042 0202 	orrlt.w	r2, r2, #2
 8007e4a:	9307      	strge	r3, [sp, #28]
 8007e4c:	9307      	strlt	r3, [sp, #28]
 8007e4e:	bfb8      	it	lt
 8007e50:	9204      	strlt	r2, [sp, #16]
 8007e52:	7823      	ldrb	r3, [r4, #0]
 8007e54:	2b2e      	cmp	r3, #46	; 0x2e
 8007e56:	d10c      	bne.n	8007e72 <_vfiprintf_r+0x176>
 8007e58:	7863      	ldrb	r3, [r4, #1]
 8007e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5c:	d135      	bne.n	8007eca <_vfiprintf_r+0x1ce>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	1d1a      	adds	r2, r3, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	9203      	str	r2, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e6e:	3402      	adds	r4, #2
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f58 <_vfiprintf_r+0x25c>
 8007e76:	7821      	ldrb	r1, [r4, #0]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7f8 f9b0 	bl	80001e0 <memchr>
 8007e80:	b140      	cbz	r0, 8007e94 <_vfiprintf_r+0x198>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	eba0 000a 	sub.w	r0, r0, sl
 8007e88:	fa03 f000 	lsl.w	r0, r3, r0
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4303      	orrs	r3, r0
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	482c      	ldr	r0, [pc, #176]	; (8007f4c <_vfiprintf_r+0x250>)
 8007e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f7f8 f99e 	bl	80001e0 <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d03f      	beq.n	8007f28 <_vfiprintf_r+0x22c>
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <_vfiprintf_r+0x254>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_vfiprintf_r+0x1f8>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	443b      	add	r3, r7
 8007ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebe:	e767      	b.n	8007d90 <_vfiprintf_r+0x94>
 8007ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e7a5      	b.n	8007e16 <_vfiprintf_r+0x11a>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	; 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_vfiprintf_r+0x1ee>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c5      	beq.n	8007e72 <_vfiprintf_r+0x176>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c3      	b.n	8007e72 <_vfiprintf_r+0x176>
 8007eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7f0      	b.n	8007ed6 <_vfiprintf_r+0x1da>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <_vfiprintf_r+0x258>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4630      	mov	r0, r6
 8007f00:	f3af 8000 	nop.w
 8007f04:	4607      	mov	r7, r0
 8007f06:	1c78      	adds	r0, r7, #1
 8007f08:	d1d6      	bne.n	8007eb8 <_vfiprintf_r+0x1bc>
 8007f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	d405      	bmi.n	8007f1c <_vfiprintf_r+0x220>
 8007f10:	89ab      	ldrh	r3, [r5, #12]
 8007f12:	059a      	lsls	r2, r3, #22
 8007f14:	d402      	bmi.n	8007f1c <_vfiprintf_r+0x220>
 8007f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f18:	f7ff fce7 	bl	80078ea <__retarget_lock_release_recursive>
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	065b      	lsls	r3, r3, #25
 8007f20:	f53f af12 	bmi.w	8007d48 <_vfiprintf_r+0x4c>
 8007f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f26:	e711      	b.n	8007d4c <_vfiprintf_r+0x50>
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <_vfiprintf_r+0x258>)
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 f880 	bl	8008038 <_printf_i>
 8007f38:	e7e4      	b.n	8007f04 <_vfiprintf_r+0x208>
 8007f3a:	bf00      	nop
 8007f3c:	08008658 	.word	0x08008658
 8007f40:	08008678 	.word	0x08008678
 8007f44:	08008638 	.word	0x08008638
 8007f48:	08008698 	.word	0x08008698
 8007f4c:	080086a2 	.word	0x080086a2
 8007f50:	00000000 	.word	0x00000000
 8007f54:	08007cd7 	.word	0x08007cd7
 8007f58:	0800869e 	.word	0x0800869e

08007f5c <_printf_common>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	4616      	mov	r6, r2
 8007f62:	4699      	mov	r9, r3
 8007f64:	688a      	ldr	r2, [r1, #8]
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bfb8      	it	lt
 8007f70:	4613      	movlt	r3, r2
 8007f72:	6033      	str	r3, [r6, #0]
 8007f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f78:	4607      	mov	r7, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b10a      	cbz	r2, 8007f82 <_printf_common+0x26>
 8007f7e:	3301      	adds	r3, #1
 8007f80:	6033      	str	r3, [r6, #0]
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	0699      	lsls	r1, r3, #26
 8007f86:	bf42      	ittt	mi
 8007f88:	6833      	ldrmi	r3, [r6, #0]
 8007f8a:	3302      	addmi	r3, #2
 8007f8c:	6033      	strmi	r3, [r6, #0]
 8007f8e:	6825      	ldr	r5, [r4, #0]
 8007f90:	f015 0506 	ands.w	r5, r5, #6
 8007f94:	d106      	bne.n	8007fa4 <_printf_common+0x48>
 8007f96:	f104 0a19 	add.w	sl, r4, #25
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	6832      	ldr	r2, [r6, #0]
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	dc26      	bgt.n	8007ff2 <_printf_common+0x96>
 8007fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fa8:	1e13      	subs	r3, r2, #0
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	bf18      	it	ne
 8007fae:	2301      	movne	r3, #1
 8007fb0:	0692      	lsls	r2, r2, #26
 8007fb2:	d42b      	bmi.n	800800c <_printf_common+0xb0>
 8007fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4638      	mov	r0, r7
 8007fbc:	47c0      	blx	r8
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d01e      	beq.n	8008000 <_printf_common+0xa4>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	68e5      	ldr	r5, [r4, #12]
 8007fc6:	6832      	ldr	r2, [r6, #0]
 8007fc8:	f003 0306 	and.w	r3, r3, #6
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	bf08      	it	eq
 8007fd0:	1aad      	subeq	r5, r5, r2
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	bf0c      	ite	eq
 8007fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fdc:	2500      	movne	r5, #0
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	bfc4      	itt	gt
 8007fe2:	1a9b      	subgt	r3, r3, r2
 8007fe4:	18ed      	addgt	r5, r5, r3
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	341a      	adds	r4, #26
 8007fea:	42b5      	cmp	r5, r6
 8007fec:	d11a      	bne.n	8008024 <_printf_common+0xc8>
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e008      	b.n	8008004 <_printf_common+0xa8>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	47c0      	blx	r8
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d103      	bne.n	8008008 <_printf_common+0xac>
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008008:	3501      	adds	r5, #1
 800800a:	e7c6      	b.n	8007f9a <_printf_common+0x3e>
 800800c:	18e1      	adds	r1, r4, r3
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	2030      	movs	r0, #48	; 0x30
 8008012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008016:	4422      	add	r2, r4
 8008018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800801c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008020:	3302      	adds	r3, #2
 8008022:	e7c7      	b.n	8007fb4 <_printf_common+0x58>
 8008024:	2301      	movs	r3, #1
 8008026:	4622      	mov	r2, r4
 8008028:	4649      	mov	r1, r9
 800802a:	4638      	mov	r0, r7
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d0e6      	beq.n	8008000 <_printf_common+0xa4>
 8008032:	3601      	adds	r6, #1
 8008034:	e7d9      	b.n	8007fea <_printf_common+0x8e>
	...

08008038 <_printf_i>:
 8008038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	4691      	mov	r9, r2
 8008040:	7e27      	ldrb	r7, [r4, #24]
 8008042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008044:	2f78      	cmp	r7, #120	; 0x78
 8008046:	4680      	mov	r8, r0
 8008048:	469a      	mov	sl, r3
 800804a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800804e:	d807      	bhi.n	8008060 <_printf_i+0x28>
 8008050:	2f62      	cmp	r7, #98	; 0x62
 8008052:	d80a      	bhi.n	800806a <_printf_i+0x32>
 8008054:	2f00      	cmp	r7, #0
 8008056:	f000 80d8 	beq.w	800820a <_printf_i+0x1d2>
 800805a:	2f58      	cmp	r7, #88	; 0x58
 800805c:	f000 80a3 	beq.w	80081a6 <_printf_i+0x16e>
 8008060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008068:	e03a      	b.n	80080e0 <_printf_i+0xa8>
 800806a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800806e:	2b15      	cmp	r3, #21
 8008070:	d8f6      	bhi.n	8008060 <_printf_i+0x28>
 8008072:	a001      	add	r0, pc, #4	; (adr r0, 8008078 <_printf_i+0x40>)
 8008074:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008078:	080080d1 	.word	0x080080d1
 800807c:	080080e5 	.word	0x080080e5
 8008080:	08008061 	.word	0x08008061
 8008084:	08008061 	.word	0x08008061
 8008088:	08008061 	.word	0x08008061
 800808c:	08008061 	.word	0x08008061
 8008090:	080080e5 	.word	0x080080e5
 8008094:	08008061 	.word	0x08008061
 8008098:	08008061 	.word	0x08008061
 800809c:	08008061 	.word	0x08008061
 80080a0:	08008061 	.word	0x08008061
 80080a4:	080081f1 	.word	0x080081f1
 80080a8:	08008115 	.word	0x08008115
 80080ac:	080081d3 	.word	0x080081d3
 80080b0:	08008061 	.word	0x08008061
 80080b4:	08008061 	.word	0x08008061
 80080b8:	08008213 	.word	0x08008213
 80080bc:	08008061 	.word	0x08008061
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008061 	.word	0x08008061
 80080c8:	08008061 	.word	0x08008061
 80080cc:	080081db 	.word	0x080081db
 80080d0:	680b      	ldr	r3, [r1, #0]
 80080d2:	1d1a      	adds	r2, r3, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	600a      	str	r2, [r1, #0]
 80080d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0a3      	b.n	800822c <_printf_i+0x1f4>
 80080e4:	6825      	ldr	r5, [r4, #0]
 80080e6:	6808      	ldr	r0, [r1, #0]
 80080e8:	062e      	lsls	r6, r5, #24
 80080ea:	f100 0304 	add.w	r3, r0, #4
 80080ee:	d50a      	bpl.n	8008106 <_printf_i+0xce>
 80080f0:	6805      	ldr	r5, [r0, #0]
 80080f2:	600b      	str	r3, [r1, #0]
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	da03      	bge.n	8008100 <_printf_i+0xc8>
 80080f8:	232d      	movs	r3, #45	; 0x2d
 80080fa:	426d      	negs	r5, r5
 80080fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008100:	485e      	ldr	r0, [pc, #376]	; (800827c <_printf_i+0x244>)
 8008102:	230a      	movs	r3, #10
 8008104:	e019      	b.n	800813a <_printf_i+0x102>
 8008106:	f015 0f40 	tst.w	r5, #64	; 0x40
 800810a:	6805      	ldr	r5, [r0, #0]
 800810c:	600b      	str	r3, [r1, #0]
 800810e:	bf18      	it	ne
 8008110:	b22d      	sxthne	r5, r5
 8008112:	e7ef      	b.n	80080f4 <_printf_i+0xbc>
 8008114:	680b      	ldr	r3, [r1, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	1d18      	adds	r0, r3, #4
 800811a:	6008      	str	r0, [r1, #0]
 800811c:	0628      	lsls	r0, r5, #24
 800811e:	d501      	bpl.n	8008124 <_printf_i+0xec>
 8008120:	681d      	ldr	r5, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0xf2>
 8008124:	0669      	lsls	r1, r5, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0xe8>
 8008128:	881d      	ldrh	r5, [r3, #0]
 800812a:	4854      	ldr	r0, [pc, #336]	; (800827c <_printf_i+0x244>)
 800812c:	2f6f      	cmp	r7, #111	; 0x6f
 800812e:	bf0c      	ite	eq
 8008130:	2308      	moveq	r3, #8
 8008132:	230a      	movne	r3, #10
 8008134:	2100      	movs	r1, #0
 8008136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800813a:	6866      	ldr	r6, [r4, #4]
 800813c:	60a6      	str	r6, [r4, #8]
 800813e:	2e00      	cmp	r6, #0
 8008140:	bfa2      	ittt	ge
 8008142:	6821      	ldrge	r1, [r4, #0]
 8008144:	f021 0104 	bicge.w	r1, r1, #4
 8008148:	6021      	strge	r1, [r4, #0]
 800814a:	b90d      	cbnz	r5, 8008150 <_printf_i+0x118>
 800814c:	2e00      	cmp	r6, #0
 800814e:	d04d      	beq.n	80081ec <_printf_i+0x1b4>
 8008150:	4616      	mov	r6, r2
 8008152:	fbb5 f1f3 	udiv	r1, r5, r3
 8008156:	fb03 5711 	mls	r7, r3, r1, r5
 800815a:	5dc7      	ldrb	r7, [r0, r7]
 800815c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008160:	462f      	mov	r7, r5
 8008162:	42bb      	cmp	r3, r7
 8008164:	460d      	mov	r5, r1
 8008166:	d9f4      	bls.n	8008152 <_printf_i+0x11a>
 8008168:	2b08      	cmp	r3, #8
 800816a:	d10b      	bne.n	8008184 <_printf_i+0x14c>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	07df      	lsls	r7, r3, #31
 8008170:	d508      	bpl.n	8008184 <_printf_i+0x14c>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4299      	cmp	r1, r3
 8008178:	bfde      	ittt	le
 800817a:	2330      	movle	r3, #48	; 0x30
 800817c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008184:	1b92      	subs	r2, r2, r6
 8008186:	6122      	str	r2, [r4, #16]
 8008188:	f8cd a000 	str.w	sl, [sp]
 800818c:	464b      	mov	r3, r9
 800818e:	aa03      	add	r2, sp, #12
 8008190:	4621      	mov	r1, r4
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fee2 	bl	8007f5c <_printf_common>
 8008198:	3001      	adds	r0, #1
 800819a:	d14c      	bne.n	8008236 <_printf_i+0x1fe>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	b004      	add	sp, #16
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	4835      	ldr	r0, [pc, #212]	; (800827c <_printf_i+0x244>)
 80081a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	680e      	ldr	r6, [r1, #0]
 80081b0:	061f      	lsls	r7, r3, #24
 80081b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80081b6:	600e      	str	r6, [r1, #0]
 80081b8:	d514      	bpl.n	80081e4 <_printf_i+0x1ac>
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	bf44      	itt	mi
 80081be:	f043 0320 	orrmi.w	r3, r3, #32
 80081c2:	6023      	strmi	r3, [r4, #0]
 80081c4:	b91d      	cbnz	r5, 80081ce <_printf_i+0x196>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f023 0320 	bic.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	2310      	movs	r3, #16
 80081d0:	e7b0      	b.n	8008134 <_printf_i+0xfc>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	2378      	movs	r3, #120	; 0x78
 80081dc:	4828      	ldr	r0, [pc, #160]	; (8008280 <_printf_i+0x248>)
 80081de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081e2:	e7e3      	b.n	80081ac <_printf_i+0x174>
 80081e4:	065e      	lsls	r6, r3, #25
 80081e6:	bf48      	it	mi
 80081e8:	b2ad      	uxthmi	r5, r5
 80081ea:	e7e6      	b.n	80081ba <_printf_i+0x182>
 80081ec:	4616      	mov	r6, r2
 80081ee:	e7bb      	b.n	8008168 <_printf_i+0x130>
 80081f0:	680b      	ldr	r3, [r1, #0]
 80081f2:	6826      	ldr	r6, [r4, #0]
 80081f4:	6960      	ldr	r0, [r4, #20]
 80081f6:	1d1d      	adds	r5, r3, #4
 80081f8:	600d      	str	r5, [r1, #0]
 80081fa:	0635      	lsls	r5, r6, #24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0x1cc>
 8008200:	6018      	str	r0, [r3, #0]
 8008202:	e002      	b.n	800820a <_printf_i+0x1d2>
 8008204:	0671      	lsls	r1, r6, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0x1c8>
 8008208:	8018      	strh	r0, [r3, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	4616      	mov	r6, r2
 8008210:	e7ba      	b.n	8008188 <_printf_i+0x150>
 8008212:	680b      	ldr	r3, [r1, #0]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	600a      	str	r2, [r1, #0]
 8008218:	681e      	ldr	r6, [r3, #0]
 800821a:	6862      	ldr	r2, [r4, #4]
 800821c:	2100      	movs	r1, #0
 800821e:	4630      	mov	r0, r6
 8008220:	f7f7 ffde 	bl	80001e0 <memchr>
 8008224:	b108      	cbz	r0, 800822a <_printf_i+0x1f2>
 8008226:	1b80      	subs	r0, r0, r6
 8008228:	6060      	str	r0, [r4, #4]
 800822a:	6863      	ldr	r3, [r4, #4]
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	2300      	movs	r3, #0
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	e7a8      	b.n	8008188 <_printf_i+0x150>
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	4632      	mov	r2, r6
 800823a:	4649      	mov	r1, r9
 800823c:	4640      	mov	r0, r8
 800823e:	47d0      	blx	sl
 8008240:	3001      	adds	r0, #1
 8008242:	d0ab      	beq.n	800819c <_printf_i+0x164>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	079b      	lsls	r3, r3, #30
 8008248:	d413      	bmi.n	8008272 <_printf_i+0x23a>
 800824a:	68e0      	ldr	r0, [r4, #12]
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	4298      	cmp	r0, r3
 8008250:	bfb8      	it	lt
 8008252:	4618      	movlt	r0, r3
 8008254:	e7a4      	b.n	80081a0 <_printf_i+0x168>
 8008256:	2301      	movs	r3, #1
 8008258:	4632      	mov	r2, r6
 800825a:	4649      	mov	r1, r9
 800825c:	4640      	mov	r0, r8
 800825e:	47d0      	blx	sl
 8008260:	3001      	adds	r0, #1
 8008262:	d09b      	beq.n	800819c <_printf_i+0x164>
 8008264:	3501      	adds	r5, #1
 8008266:	68e3      	ldr	r3, [r4, #12]
 8008268:	9903      	ldr	r1, [sp, #12]
 800826a:	1a5b      	subs	r3, r3, r1
 800826c:	42ab      	cmp	r3, r5
 800826e:	dcf2      	bgt.n	8008256 <_printf_i+0x21e>
 8008270:	e7eb      	b.n	800824a <_printf_i+0x212>
 8008272:	2500      	movs	r5, #0
 8008274:	f104 0619 	add.w	r6, r4, #25
 8008278:	e7f5      	b.n	8008266 <_printf_i+0x22e>
 800827a:	bf00      	nop
 800827c:	080086a9 	.word	0x080086a9
 8008280:	080086ba 	.word	0x080086ba

08008284 <_read_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	; (80082a4 <_read_r+0x20>)
 8008288:	4604      	mov	r4, r0
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	2200      	movs	r2, #0
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7fa fd24 	bl	8002ce0 <_read>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_read_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_read_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	200005b4 	.word	0x200005b4

080082a8 <_fstat_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_fstat_r+0x20>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f7fa fd3c 	bl	8002d32 <_fstat>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d102      	bne.n	80082c4 <_fstat_r+0x1c>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b103      	cbz	r3, 80082c4 <_fstat_r+0x1c>
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	bf00      	nop
 80082c8:	200005b4 	.word	0x200005b4

080082cc <_isatty_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_isatty_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7fa fd3b 	bl	8002d52 <_isatty>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_isatty_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_isatty_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200005b4 	.word	0x200005b4

080082ec <memmove>:
 80082ec:	4288      	cmp	r0, r1
 80082ee:	b510      	push	{r4, lr}
 80082f0:	eb01 0402 	add.w	r4, r1, r2
 80082f4:	d902      	bls.n	80082fc <memmove+0x10>
 80082f6:	4284      	cmp	r4, r0
 80082f8:	4623      	mov	r3, r4
 80082fa:	d807      	bhi.n	800830c <memmove+0x20>
 80082fc:	1e43      	subs	r3, r0, #1
 80082fe:	42a1      	cmp	r1, r4
 8008300:	d008      	beq.n	8008314 <memmove+0x28>
 8008302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800830a:	e7f8      	b.n	80082fe <memmove+0x12>
 800830c:	4402      	add	r2, r0
 800830e:	4601      	mov	r1, r0
 8008310:	428a      	cmp	r2, r1
 8008312:	d100      	bne.n	8008316 <memmove+0x2a>
 8008314:	bd10      	pop	{r4, pc}
 8008316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800831e:	e7f7      	b.n	8008310 <memmove+0x24>

08008320 <_realloc_r>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4607      	mov	r7, r0
 8008324:	4614      	mov	r4, r2
 8008326:	460e      	mov	r6, r1
 8008328:	b921      	cbnz	r1, 8008334 <_realloc_r+0x14>
 800832a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800832e:	4611      	mov	r1, r2
 8008330:	f7fe bee4 	b.w	80070fc <_malloc_r>
 8008334:	b922      	cbnz	r2, 8008340 <_realloc_r+0x20>
 8008336:	f7fe fe91 	bl	800705c <_free_r>
 800833a:	4625      	mov	r5, r4
 800833c:	4628      	mov	r0, r5
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008340:	f000 f814 	bl	800836c <_malloc_usable_size_r>
 8008344:	42a0      	cmp	r0, r4
 8008346:	d20f      	bcs.n	8008368 <_realloc_r+0x48>
 8008348:	4621      	mov	r1, r4
 800834a:	4638      	mov	r0, r7
 800834c:	f7fe fed6 	bl	80070fc <_malloc_r>
 8008350:	4605      	mov	r5, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d0f2      	beq.n	800833c <_realloc_r+0x1c>
 8008356:	4631      	mov	r1, r6
 8008358:	4622      	mov	r2, r4
 800835a:	f7fe fe69 	bl	8007030 <memcpy>
 800835e:	4631      	mov	r1, r6
 8008360:	4638      	mov	r0, r7
 8008362:	f7fe fe7b 	bl	800705c <_free_r>
 8008366:	e7e9      	b.n	800833c <_realloc_r+0x1c>
 8008368:	4635      	mov	r5, r6
 800836a:	e7e7      	b.n	800833c <_realloc_r+0x1c>

0800836c <_malloc_usable_size_r>:
 800836c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008370:	1f18      	subs	r0, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	bfbc      	itt	lt
 8008376:	580b      	ldrlt	r3, [r1, r0]
 8008378:	18c0      	addlt	r0, r0, r3
 800837a:	4770      	bx	lr

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr
