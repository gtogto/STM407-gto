
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b64  08005b64  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b6c  08005b6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000078  08005bec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08005bec  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122c6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c6  00000000  00000000  0003236e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00034938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  000359b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bc9  00000000  00000000  00036950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001185d  00000000  00000000  0003a519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3ab2  00000000  00000000  0004bd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d9c  00000000  00000000  0011f87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059a4 	.word	0x080059a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080059a4 	.word	0x080059a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <DWT_Delay_us+0x40>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000586:	f002 fab1 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <DWT_Delay_us+0x44>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9b      	lsrs	r3, r3, #18
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800059c:	bf00      	nop
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <DWT_Delay_us+0x40>)
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f8      	bcc.n	800059e <DWT_Delay_us+0x26>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <HAL_UART_RxCpltCallback>:

char 	compare_CMD[28] = "[FID=XX SLAVE ANCHOR DEVICE]";
char* 	reset_CMD;

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a71      	ldr	r2, [pc, #452]	; (8000794 <HAL_UART_RxCpltCallback+0x1d4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10d      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	4970      	ldr	r1, [pc, #448]	; (8000798 <HAL_UART_RxCpltCallback+0x1d8>)
 80005d6:	4871      	ldr	r0, [pc, #452]	; (800079c <HAL_UART_RxCpltCallback+0x1dc>)
 80005d8:	f003 fc55 	bl	8003e86 <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80005dc:	230a      	movs	r3, #10
 80005de:	2201      	movs	r2, #1
 80005e0:	496d      	ldr	r1, [pc, #436]	; (8000798 <HAL_UART_RxCpltCallback+0x1d8>)
 80005e2:	486e      	ldr	r0, [pc, #440]	; (800079c <HAL_UART_RxCpltCallback+0x1dc>)
 80005e4:	f003 fbbd 	bl	8003d62 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 80005e8:	4b6d      	ldr	r3, [pc, #436]	; (80007a0 <HAL_UART_RxCpltCallback+0x1e0>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a6c      	ldr	r2, [pc, #432]	; (80007a4 <HAL_UART_RxCpltCallback+0x1e4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d15e      	bne.n	80006b6 <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	496b      	ldr	r1, [pc, #428]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 80005fc:	486b      	ldr	r0, [pc, #428]	; (80007ac <HAL_UART_RxCpltCallback+0x1ec>)
 80005fe:	f003 fc42 	bl	8003e86 <HAL_UART_Receive_IT>

		switch(status){
 8000602:	4b6b      	ldr	r3, [pc, #428]	; (80007b0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d002      	beq.n	8000610 <HAL_UART_RxCpltCallback+0x50>
 800060a:	2b02      	cmp	r3, #2
 800060c:	d011      	beq.n	8000632 <HAL_UART_RxCpltCallback+0x72>
 800060e:	e055      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8000610:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b5b      	cmp	r3, #91	; 0x5b
 8000616:	d150      	bne.n	80006ba <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8000618:	4b66      	ldr	r3, [pc, #408]	; (80007b4 <HAL_UART_RxCpltCallback+0x1f4>)
 800061a:	225b      	movs	r2, #91	; 0x5b
 800061c:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 800061e:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000624:	4b62      	ldr	r3, [pc, #392]	; (80007b0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 800062a:	4b64      	ldr	r3, [pc, #400]	; (80007bc <HAL_UART_RxCpltCallback+0x1fc>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8000630:	e043      	b.n	80006ba <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8000632:	4b5d      	ldr	r3, [pc, #372]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b5b      	cmp	r3, #91	; 0x5b
 8000638:	d109      	bne.n	800064e <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <HAL_UART_RxCpltCallback+0x1f4>)
 800063c:	225b      	movs	r2, #91	; 0x5b
 800063e:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8000640:	4b5d      	ldr	r3, [pc, #372]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000646:	4b5a      	ldr	r3, [pc, #360]	; (80007b0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 800064c:	e036      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 800064e:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b5d      	cmp	r3, #93	; 0x5d
 8000654:	d115      	bne.n	8000682 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 8000656:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b22      	cmp	r3, #34	; 0x22
 800065c:	d10d      	bne.n	800067a <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 800065e:	4b56      	ldr	r3, [pc, #344]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	4a54      	ldr	r2, [pc, #336]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000668:	7011      	strb	r1, [r2, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4b4e      	ldr	r3, [pc, #312]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	4b50      	ldr	r3, [pc, #320]	; (80007b4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000672:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8000674:	4b51      	ldr	r3, [pc, #324]	; (80007bc <HAL_UART_RxCpltCallback+0x1fc>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
		            status = START ;
 800067a:	4b4d      	ldr	r3, [pc, #308]	; (80007b0 <HAL_UART_RxCpltCallback+0x1f0>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
		        break ;
 8000680:	e01c      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b24      	cmp	r3, #36	; 0x24
 8000688:	d80b      	bhi.n	80006a2 <HAL_UART_RxCpltCallback+0xe2>
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	b2d1      	uxtb	r1, r2
 8000692:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000694:	7011      	strb	r1, [r2, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <HAL_UART_RxCpltCallback+0x1e8>)
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <HAL_UART_RxCpltCallback+0x1f4>)
 800069e:	5499      	strb	r1, [r3, r2]
		        break ;
 80006a0:	e00c      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80006a2:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <HAL_UART_RxCpltCallback+0x1f0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <HAL_UART_RxCpltCallback+0x1f8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80006ae:	4b43      	ldr	r3, [pc, #268]	; (80007bc <HAL_UART_RxCpltCallback+0x1fc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		        break ;
 80006b4:	e002      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80006b6:	bf00      	nop
 80006b8:	e000      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80006ba:	bf00      	nop

	if (huart->Instance == USART6) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a3f      	ldr	r2, [pc, #252]	; (80007c0 <HAL_UART_RxCpltCallback+0x200>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d15e      	bne.n	8000784 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	493e      	ldr	r1, [pc, #248]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 80006ca:	483f      	ldr	r0, [pc, #252]	; (80007c8 <HAL_UART_RxCpltCallback+0x208>)
 80006cc:	f003 fbdb 	bl	8003e86 <HAL_UART_Receive_IT>

		switch(GTO_status){
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <HAL_UART_RxCpltCallback+0x20c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d002      	beq.n	80006de <HAL_UART_RxCpltCallback+0x11e>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d011      	beq.n	8000700 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 80006dc:	e055      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 80006de:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b28      	cmp	r3, #40	; 0x28
 80006e4:	d150      	bne.n	8000788 <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <HAL_UART_RxCpltCallback+0x210>)
 80006e8:	2228      	movs	r2, #40	; 0x28
 80006ea:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 80006ec:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <HAL_UART_RxCpltCallback+0x20c>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <HAL_UART_RxCpltCallback+0x218>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
					break ;
 80006fe:	e043      	b.n	8000788 <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b28      	cmp	r3, #40	; 0x28
 8000706:	d109      	bne.n	800071c <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <HAL_UART_RxCpltCallback+0x210>)
 800070a:	2228      	movs	r2, #40	; 0x28
 800070c:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <HAL_UART_RxCpltCallback+0x20c>)
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
					break ;
 800071a:	e036      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b29      	cmp	r3, #41	; 0x29
 8000722:	d115      	bne.n	8000750 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b0a      	cmp	r3, #10
 800072a:	d10d      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	b2d1      	uxtb	r1, r2
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000736:	7011      	strb	r1, [r2, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_UART_RxCpltCallback+0x210>)
 8000740:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <HAL_UART_RxCpltCallback+0x218>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_UART_RxCpltCallback+0x20c>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
					break ;
 800074e:	e01c      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b0c      	cmp	r3, #12
 8000756:	d80b      	bhi.n	8000770 <HAL_UART_RxCpltCallback+0x1b0>
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000762:	7011      	strb	r1, [r2, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_UART_RxCpltCallback+0x204>)
 8000768:	7819      	ldrb	r1, [r3, #0]
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_UART_RxCpltCallback+0x210>)
 800076c:	5499      	strb	r1, [r3, r2]
					break ;
 800076e:	e00c      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_UART_RxCpltCallback+0x20c>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_RxCpltCallback+0x214>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_UART_RxCpltCallback+0x218>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
					break ;
 8000782:	e002      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
	}
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40011000 	.word	0x40011000
 8000798:	20000201 	.word	0x20000201
 800079c:	20000144 	.word	0x20000144
 80007a0:	20000094 	.word	0x20000094
 80007a4:	40004400 	.word	0x40004400
 80007a8:	20000140 	.word	0x20000140
 80007ac:	20000314 	.word	0x20000314
 80007b0:	20000003 	.word	0x20000003
 80007b4:	200003f4 	.word	0x200003f4
 80007b8:	200000a5 	.word	0x200000a5
 80007bc:	20000095 	.word	0x20000095
 80007c0:	40011400 	.word	0x40011400
 80007c4:	200002b4 	.word	0x200002b4
 80007c8:	20000204 	.word	0x20000204
 80007cc:	20000004 	.word	0x20000004
 80007d0:	20000248 	.word	0x20000248
 80007d4:	20000420 	.word	0x20000420
 80007d8:	20000096 	.word	0x20000096

080007dc <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <_write+0x28>)
 80007f4:	f003 fab5 	bl	8003d62 <HAL_UART_Transmit>
	return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000144 	.word	0x20000144

08000808 <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	230a      	movs	r3, #10
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f003 fa9e 	bl	8003d62 <HAL_UART_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f7ff fcc9 	bl	80001d0 <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	b29a      	uxth	r2, r3
 8000842:	230a      	movs	r3, #10
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f003 fa8b 	bl	8003d62 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 800084c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000850:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000852:	f107 010c 	add.w	r1, r7, #12
 8000856:	230a      	movs	r3, #10
 8000858:	2202      	movs	r2, #2
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f003 fa81 	bl	8003d62 <HAL_UART_Transmit>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 f921 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f981 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fc3f 	bl	80010f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087a:	f000 fbbd 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800087e:	f000 fb91 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000882:	f000 fb3b 	bl	8000efc <MX_UART4_Init>
  MX_UART5_Init();
 8000886:	f000 fb63 	bl	8000f50 <MX_UART5_Init>
  MX_USART6_UART_Init();
 800088a:	f000 fc09 	bl	80010a0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800088e:	f000 fa61 	bl	8000d54 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000892:	f000 fa95 	bl	8000dc0 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000896:	f000 fafb 	bl	8000e90 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 800089a:	f000 fbd7 	bl	800104c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800089e:	f000 f9ff 	bl	8000ca0 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008a2:	f000 f9e9 	bl	8000c78 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	4995      	ldr	r1, [pc, #596]	; (8000b00 <main+0x298>)
 80008aa:	4896      	ldr	r0, [pc, #600]	; (8000b04 <main+0x29c>)
 80008ac:	f003 faeb 	bl	8003e86 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 80008b0:	2201      	movs	r2, #1
 80008b2:	4995      	ldr	r1, [pc, #596]	; (8000b08 <main+0x2a0>)
 80008b4:	4895      	ldr	r0, [pc, #596]	; (8000b0c <main+0x2a4>)
 80008b6:	f003 fae6 	bl	8003e86 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 80008ba:	2201      	movs	r2, #1
 80008bc:	4994      	ldr	r1, [pc, #592]	; (8000b10 <main+0x2a8>)
 80008be:	4895      	ldr	r0, [pc, #596]	; (8000b14 <main+0x2ac>)
 80008c0:	f003 fae1 	bl	8003e86 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit(&huart1, start_data, 17, 10);
  //debugPrintln(&huart1, "\n Start STM32F407");
  printf("\r\n Start STM32F407 - 20210804\r\n");
 80008c4:	4894      	ldr	r0, [pc, #592]	; (8000b18 <main+0x2b0>)
 80008c6:	f004 f9d1 	bl	8004c6c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4892      	ldr	r0, [pc, #584]	; (8000b1c <main+0x2b4>)
 80008d2:	f001 fcdd 	bl	8002290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	4891      	ldr	r0, [pc, #580]	; (8000b20 <main+0x2b8>)
 80008dc:	f001 fcd8 	bl	8002290 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 80008e0:	2201      	movs	r2, #1
 80008e2:	2102      	movs	r1, #2
 80008e4:	488f      	ldr	r0, [pc, #572]	; (8000b24 <main+0x2bc>)
 80008e6:	f001 fcd3 	bl	8002290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	488d      	ldr	r0, [pc, #564]	; (8000b24 <main+0x2bc>)
 80008f0:	f001 fcce 	bl	8002290 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);	// 1 second*/

	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  if (uart1_key_Flag){
 80008f4:	4b8c      	ldr	r3, [pc, #560]	; (8000b28 <main+0x2c0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 8091 	beq.w	8000a20 <main+0x1b8>
		  uart1_key_Flag = 0;
 80008fe:	4b8a      	ldr	r3, [pc, #552]	; (8000b28 <main+0x2c0>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 8000904:	4b7e      	ldr	r3, [pc, #504]	; (8000b00 <main+0x298>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b7a      	cmp	r3, #122	; 0x7a
 800090a:	f300 808a 	bgt.w	8000a22 <main+0x1ba>
 800090e:	2b61      	cmp	r3, #97	; 0x61
 8000910:	da04      	bge.n	800091c <main+0xb4>
 8000912:	2b32      	cmp	r3, #50	; 0x32
 8000914:	d04b      	beq.n	80009ae <main+0x146>
 8000916:	2b36      	cmp	r3, #54	; 0x36
 8000918:	d054      	beq.n	80009c4 <main+0x15c>
 800091a:	e082      	b.n	8000a22 <main+0x1ba>
 800091c:	3b61      	subs	r3, #97	; 0x61
 800091e:	2b19      	cmp	r3, #25
 8000920:	d87f      	bhi.n	8000a22 <main+0x1ba>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <main+0xc0>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000997 	.word	0x08000997
 800092c:	08000a23 	.word	0x08000a23
 8000930:	08000a13 	.word	0x08000a13
 8000934:	08000a23 	.word	0x08000a23
 8000938:	08000a23 	.word	0x08000a23
 800093c:	08000a23 	.word	0x08000a23
 8000940:	08000a23 	.word	0x08000a23
 8000944:	08000a23 	.word	0x08000a23
 8000948:	08000a23 	.word	0x08000a23
 800094c:	08000a23 	.word	0x08000a23
 8000950:	08000a23 	.word	0x08000a23
 8000954:	08000a23 	.word	0x08000a23
 8000958:	08000a23 	.word	0x08000a23
 800095c:	08000a23 	.word	0x08000a23
 8000960:	08000a23 	.word	0x08000a23
 8000964:	08000a23 	.word	0x08000a23
 8000968:	08000a23 	.word	0x08000a23
 800096c:	080009db 	.word	0x080009db
 8000970:	08000991 	.word	0x08000991
 8000974:	080009e9 	.word	0x080009e9
 8000978:	08000a23 	.word	0x08000a23
 800097c:	08000a23 	.word	0x08000a23
 8000980:	08000a23 	.word	0x08000a23
 8000984:	08000a05 	.word	0x08000a05
 8000988:	08000a23 	.word	0x08000a23
 800098c:	080009f7 	.word	0x080009f7

			  case 's':
				  Sync_out();
 8000990:	f000 fc88 	bl	80012a4 <Sync_out>

				  break;
 8000994:	e045      	b.n	8000a22 <main+0x1ba>

			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 8000996:	4965      	ldr	r1, [pc, #404]	; (8000b2c <main+0x2c4>)
 8000998:	485a      	ldr	r0, [pc, #360]	; (8000b04 <main+0x29c>)
 800099a:	f7ff ff35 	bl	8000808 <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 800099e:	4964      	ldr	r1, [pc, #400]	; (8000b30 <main+0x2c8>)
 80009a0:	4858      	ldr	r0, [pc, #352]	; (8000b04 <main+0x29c>)
 80009a2:	f7ff ff44 	bl	800082e <debugPrintln>
				  printf("printf test\r\n");
 80009a6:	4863      	ldr	r0, [pc, #396]	; (8000b34 <main+0x2cc>)
 80009a8:	f004 f960 	bl	8004c6c <puts>
				  break;
 80009ac:	e039      	b.n	8000a22 <main+0x1ba>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	485b      	ldr	r0, [pc, #364]	; (8000b20 <main+0x2b8>)
 80009b4:	f001 fc6c 	bl	8002290 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 80009b8:	2200      	movs	r2, #0
 80009ba:	2120      	movs	r1, #32
 80009bc:	4857      	ldr	r0, [pc, #348]	; (8000b1c <main+0x2b4>)
 80009be:	f001 fc67 	bl	8002290 <HAL_GPIO_WritePin>

				  break;
 80009c2:	e02e      	b.n	8000a22 <main+0x1ba>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	4855      	ldr	r0, [pc, #340]	; (8000b20 <main+0x2b8>)
 80009ca:	f001 fc61 	bl	8002290 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 80009ce:	2201      	movs	r2, #1
 80009d0:	2120      	movs	r1, #32
 80009d2:	4852      	ldr	r0, [pc, #328]	; (8000b1c <main+0x2b4>)
 80009d4:	f001 fc5c 	bl	8002290 <HAL_GPIO_WritePin>

				  break;
 80009d8:	e023      	b.n	8000a22 <main+0x1ba>


			  case 'r':
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 80009da:	230a      	movs	r3, #10
 80009dc:	2201      	movs	r2, #1
 80009de:	494a      	ldr	r1, [pc, #296]	; (8000b08 <main+0x2a0>)
 80009e0:	484a      	ldr	r0, [pc, #296]	; (8000b0c <main+0x2a4>)
 80009e2:	f003 f9be 	bl	8003d62 <HAL_UART_Transmit>

				  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  break;
 80009e6:	e01c      	b.n	8000a22 <main+0x1ba>

			  case 't':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 80009e8:	230a      	movs	r3, #10
 80009ea:	2201      	movs	r2, #1
 80009ec:	4952      	ldr	r1, [pc, #328]	; (8000b38 <main+0x2d0>)
 80009ee:	4849      	ldr	r0, [pc, #292]	; (8000b14 <main+0x2ac>)
 80009f0:	f003 f9b7 	bl	8003d62 <HAL_UART_Transmit>

				  break;
 80009f4:	e015      	b.n	8000a22 <main+0x1ba>
			  case 'z':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 10);
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
				  //HAL_GPIO_WritePin(GPIOC, RX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> rx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2223      	movs	r2, #35	; 0x23
 80009fa:	4950      	ldr	r1, [pc, #320]	; (8000b3c <main+0x2d4>)
 80009fc:	4843      	ldr	r0, [pc, #268]	; (8000b0c <main+0x2a4>)
 80009fe:	f003 f9b0 	bl	8003d62 <HAL_UART_Transmit>
				  /*if(uart2_key_Flag){
					  printf("PIC Received\r\n");
				  }*/


				  break;
 8000a02:	e00e      	b.n	8000a22 <main+0x1ba>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2223      	movs	r2, #35	; 0x23
 8000a08:	494d      	ldr	r1, [pc, #308]	; (8000b40 <main+0x2d8>)
 8000a0a:	4840      	ldr	r0, [pc, #256]	; (8000b0c <main+0x2a4>)
 8000a0c:	f003 f9a9 	bl	8003d62 <HAL_UART_Transmit>
				  break;
 8000a10:	e007      	b.n	8000a22 <main+0x1ba>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2223      	movs	r2, #35	; 0x23
 8000a16:	494b      	ldr	r1, [pc, #300]	; (8000b44 <main+0x2dc>)
 8000a18:	483c      	ldr	r0, [pc, #240]	; (8000b0c <main+0x2a4>)
 8000a1a:	f003 f9a2 	bl	8003d62 <HAL_UART_Transmit>

				  break;
 8000a1e:	e000      	b.n	8000a22 <main+0x1ba>

		  }
	  }
 8000a20:	bf00      	nop


	  if(uart2_key_Flag) {
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <main+0x2e0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d027      	beq.n	8000a7a <main+0x212>
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  uart2_key_Flag = 0;
 8000a2a:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <main+0x2e0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8000a30:	4846      	ldr	r0, [pc, #280]	; (8000b4c <main+0x2e4>)
 8000a32:	f004 f91b 	bl	8004c6c <puts>
		  //HAL_UART_Transmit(&huart1, "OK", 1, 10);
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  //HAL_UART_Receive_IT(&huart2, &data, 1); // interrupt uart 2

		  reset_CMD = SubStr(rxd, 0, 35);
 8000a36:	2223      	movs	r2, #35	; 0x23
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4845      	ldr	r0, [pc, #276]	; (8000b50 <main+0x2e8>)
 8000a3c:	f000 fc62 	bl	8001304 <SubStr>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a44      	ldr	r2, [pc, #272]	; (8000b54 <main+0x2ec>)
 8000a44:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <main+0x2ec>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4842      	ldr	r0, [pc, #264]	; (8000b58 <main+0x2f0>)
 8000a4e:	f004 f887 	bl	8004b60 <iprintf>

		  HAL_Delay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f001 f8a0 	bl	8001b98 <HAL_Delay>
		  for (int i = 0; i < LENGTH; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	e00a      	b.n	8000a74 <main+0x20c>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a3b      	ldr	r2, [pc, #236]	; (8000b50 <main+0x2e8>)
 8000a62:	1899      	adds	r1, r3, r2
 8000a64:	230a      	movs	r3, #10
 8000a66:	2201      	movs	r2, #1
 8000a68:	4826      	ldr	r0, [pc, #152]	; (8000b04 <main+0x29c>)
 8000a6a:	f003 f97a 	bl	8003d62 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3301      	adds	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b22      	cmp	r3, #34	; 0x22
 8000a78:	ddf1      	ble.n	8000a5e <main+0x1f6>
		  }

	  }

	  if(uart_6_flag) {
 8000a7a:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <main+0x2f4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d019      	beq.n	8000ab6 <main+0x24e>
		  uart_6_flag = 0;
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <main+0x2f4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 8000a88:	4835      	ldr	r0, [pc, #212]	; (8000b60 <main+0x2f8>)
 8000a8a:	f004 f8ef 	bl	8004c6c <puts>

		  HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 f882 	bl	8001b98 <HAL_Delay>

		  for (int i = 0; i < GTO_LENGTH; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	e00a      	b.n	8000ab0 <main+0x248>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <main+0x2fc>)
 8000a9e:	1899      	adds	r1, r3, r2
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <main+0x29c>)
 8000aa6:	f003 f95c 	bl	8003d62 <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	ddf1      	ble.n	8000a9a <main+0x232>
		  //printf("\r\n\r\n");

	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <main+0x2b4>)
 8000abc:	f001 fbd0 	bl	8002260 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <main+0x300>)
 8000ac6:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 8000ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <main+0x2b4>)
 8000ace:	f001 fbc7 	bl	8002260 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <main+0x304>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <main+0x2b4>)
 8000ae0:	f001 fbbe 	bl	8002260 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <main+0x308>)
 8000aea:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <main+0x2b4>)
 8000af2:	f001 fbb5 	bl	8002260 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <main+0x30c>)
 8000afc:	701a      	strb	r2, [r3, #0]
	  if (uart1_key_Flag){
 8000afe:	e6f9      	b.n	80008f4 <main+0x8c>
 8000b00:	20000201 	.word	0x20000201
 8000b04:	20000144 	.word	0x20000144
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000314 	.word	0x20000314
 8000b10:	200002b4 	.word	0x200002b4
 8000b14:	20000204 	.word	0x20000204
 8000b18:	080059bc 	.word	0x080059bc
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	20000094 	.word	0x20000094
 8000b2c:	080059dc 	.word	0x080059dc
 8000b30:	080059f0 	.word	0x080059f0
 8000b34:	08005a04 	.word	0x08005a04
 8000b38:	20000002 	.word	0x20000002
 8000b3c:	08005a14 	.word	0x08005a14
 8000b40:	08005a38 	.word	0x08005a38
 8000b44:	08005a5c 	.word	0x08005a5c
 8000b48:	20000095 	.word	0x20000095
 8000b4c:	08005a80 	.word	0x08005a80
 8000b50:	200003f4 	.word	0x200003f4
 8000b54:	200000f0 	.word	0x200000f0
 8000b58:	08005a90 	.word	0x08005a90
 8000b5c:	20000096 	.word	0x20000096
 8000b60:	08005aa0 	.word	0x08005aa0
 8000b64:	20000248 	.word	0x20000248
 8000b68:	200000f8 	.word	0x200000f8
 8000b6c:	200003f0 	.word	0x200003f0
 8000b70:	20000188 	.word	0x20000188
 8000b74:	200000a4 	.word	0x200000a4

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b098      	sub	sp, #96	; 0x60
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b82:	2230      	movs	r2, #48	; 0x30
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 ff38 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <SystemClock_Config+0xf8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <SystemClock_Config+0xf8>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <SystemClock_Config+0xf8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <SystemClock_Config+0xfc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <SystemClock_Config+0xfc>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <SystemClock_Config+0xfc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000be2:	230a      	movs	r3, #10
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be6:	2301      	movs	r3, #1
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bea:	2310      	movs	r3, #16
 8000bec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bfe:	23a8      	movs	r3, #168	; 0xa8
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fb58 	bl	80022c4 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c1a:	f000 fbb6 	bl	800138a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fdba 	bl	80027b4 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c46:	f000 fba0 	bl	800138a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c52:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 ff7b 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c64:	f000 fb91 	bl	800138a <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3760      	adds	r7, #96	; 0x60
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2025      	movs	r0, #37	; 0x25
 8000c82:	f001 f888 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c86:	2025      	movs	r0, #37	; 0x25
 8000c88:	f001 f8a1 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2047      	movs	r0, #71	; 0x47
 8000c92:	f001 f880 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000c96:	2047      	movs	r0, #71	; 0x47
 8000c98:	f001 f899 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cba:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <MX_RTC_Init+0xb0>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cc6:	227f      	movs	r2, #127	; 0x7f
 8000cc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_RTC_Init+0xac>)
 8000ccc:	22ff      	movs	r2, #255	; 0xff
 8000cce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_RTC_Init+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ce2:	481a      	ldr	r0, [pc, #104]	; (8000d4c <MX_RTC_Init+0xac>)
 8000ce4:	f002 f818 	bl	8002d18 <HAL_RTC_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 fb4c 	bl	800138a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <MX_RTC_Init+0xac>)
 8000d0e:	f002 f894 	bl	8002e3a <HAL_RTC_SetTime>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 fb37 	bl	800138a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d20:	2301      	movs	r3, #1
 8000d22:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_RTC_Init+0xac>)
 8000d34:	f002 f93e 	bl	8002fb4 <HAL_RTC_SetDate>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d3e:	f000 fb24 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000018c 	.word	0x2000018c
 8000d50:	40002800 	.word	0x40002800

08000d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <MX_SPI1_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000da0:	220a      	movs	r2, #10
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000da6:	f002 fa1e 	bl	80031e6 <HAL_SPI_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db0:	f000 faeb 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200002b8 	.word	0x200002b8
 8000dbc:	40013000 	.word	0x40013000

08000dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_TIM1_Init+0xcc>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e18:	481b      	ldr	r0, [pc, #108]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e1a:	f002 fa6d 	bl	80032f8 <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000e24:	f000 fab1 	bl	800138a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4619      	mov	r1, r3
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e36:	f002 fbb6 	bl	80035a6 <HAL_TIM_ConfigClockSource>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e40:	f000 faa3 	bl	800138a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e44:	2306      	movs	r3, #6
 8000e46:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e54:	f002 fc6b 	bl	800372e <HAL_TIM_SlaveConfigSynchro>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 fa94 	bl	800138a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM1_Init+0xc8>)
 8000e70:	f002 fe9a 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e7a:	f000 fa86 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001b4 	.word	0x200001b4
 8000e8c:	40010000 	.word	0x40010000

08000e90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000ea0:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <MX_TIM7_Init+0x68>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000ea6:	2229      	movs	r2, #41	; 0x29
 8000ea8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000ec0:	f002 fa1a 	bl	80032f8 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000eca:	f000 fa5e 	bl	800138a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM7_Init+0x64>)
 8000edc:	f002 fe64 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000ee6:	f000 fa50 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200003a8 	.word	0x200003a8
 8000ef8:	40001400 	.word	0x40001400

08000efc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_UART4_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_UART4_Init+0x4c>)
 8000f34:	f002 fec8 	bl	8003cc8 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 fa24 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000270 	.word	0x20000270
 8000f4c:	40004c00 	.word	0x40004c00

08000f50 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_UART5_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_UART5_Init+0x4c>)
 8000f88:	f002 fe9e 	bl	8003cc8 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f92:	f000 f9fa 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000fc 	.word	0x200000fc
 8000fa0:	40005000 	.word	0x40005000

08000fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f002 fe74 	bl	8003cc8 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f9d0 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000144 	.word	0x20000144
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART2_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001030:	f002 fe4a 	bl	8003cc8 <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 f9a6 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000314 	.word	0x20000314
 8001048:	40004400 	.word	0x40004400

0800104c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART3_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART3_UART_Init+0x4c>)
 8001084:	f002 fe20 	bl	8003cc8 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 f97c 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000a8 	.word	0x200000a8
 800109c:	40004800 	.word	0x40004800

080010a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART6_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <MX_USART6_UART_Init+0x54>)
 80010ae:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010c4:	220c      	movs	r2, #12
 80010c6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART6_UART_Init+0x4c>)
 80010d8:	f002 fdf6 	bl	8003cc8 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f000 f952 	bl	800138a <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000204 	.word	0x20000204
 80010f0:	40011400 	.word	0x40011400
 80010f4:	003d0900 	.word	0x003d0900

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <MX_GPIO_Init+0x198>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <MX_GPIO_Init+0x198>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <MX_GPIO_Init+0x198>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4b58      	ldr	r3, [pc, #352]	; (8001290 <MX_GPIO_Init+0x198>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a57      	ldr	r2, [pc, #348]	; (8001290 <MX_GPIO_Init+0x198>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b55      	ldr	r3, [pc, #340]	; (8001290 <MX_GPIO_Init+0x198>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <MX_GPIO_Init+0x198>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a50      	ldr	r2, [pc, #320]	; (8001290 <MX_GPIO_Init+0x198>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <MX_GPIO_Init+0x198>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <MX_GPIO_Init+0x198>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <MX_GPIO_Init+0x198>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <MX_GPIO_Init+0x198>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b43      	ldr	r3, [pc, #268]	; (8001290 <MX_GPIO_Init+0x198>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a42      	ldr	r2, [pc, #264]	; (8001290 <MX_GPIO_Init+0x198>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <MX_GPIO_Init+0x198>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <MX_GPIO_Init+0x198>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <MX_GPIO_Init+0x198>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_GPIO_Init+0x198>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210a      	movs	r1, #10
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <MX_GPIO_Init+0x19c>)
 80011bc:	f001 f868 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c6:	4834      	ldr	r0, [pc, #208]	; (8001298 <MX_GPIO_Init+0x1a0>)
 80011c8:	f001 f862 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 710c 	mov.w	r1, #560	; 0x230
 80011d2:	4832      	ldr	r0, [pc, #200]	; (800129c <MX_GPIO_Init+0x1a4>)
 80011d4:	f001 f85c 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	4830      	ldr	r0, [pc, #192]	; (80012a0 <MX_GPIO_Init+0x1a8>)
 80011de:	f001 f857 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011e2:	230a      	movs	r3, #10
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4826      	ldr	r0, [pc, #152]	; (8001294 <MX_GPIO_Init+0x19c>)
 80011fa:	f000 fe95 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011fe:	2310      	movs	r3, #16
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <MX_GPIO_Init+0x1a0>)
 8001212:	f000 fe89 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001216:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_GPIO_Init+0x1a4>)
 800122c:	f000 fe7c 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_GPIO_Init+0x1a0>)
 800124a:	f000 fe6d 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 800124e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_GPIO_Init+0x1a4>)
 8001268:	f000 fe5e 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_GPIO_Init+0x1a8>)
 8001284:	f000 fe50 	bl	8001f28 <HAL_GPIO_Init>

}
 8001288:	bf00      	nop
 800128a:	3730      	adds	r7, #48	; 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40021000 	.word	0x40021000

080012a4 <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <Sync_out+0x4c>)
 80012ae:	f000 ffef 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 80012b2:	2201      	movs	r2, #1
 80012b4:	2101      	movs	r1, #1
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <Sync_out+0x50>)
 80012b8:	f000 ffea 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <Sync_out+0x54>)
 80012c2:	f000 ffe5 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 80012c6:	230a      	movs	r3, #10
 80012c8:	2201      	movs	r2, #1
 80012ca:	490c      	ldr	r1, [pc, #48]	; (80012fc <Sync_out+0x58>)
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <Sync_out+0x5c>)
 80012ce:	f002 fd48 	bl	8003d62 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f7ff f950 	bl	8000578 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <Sync_out+0x54>)
 80012de:	f000 ffd7 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <Sync_out+0x50>)
 80012e8:	f000 ffd2 	bl	8002290 <HAL_GPIO_WritePin>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40020800 	.word	0x40020800
 80012fc:	20000001 	.word	0x20000001
 8001300:	20000204 	.word	0x20000204

08001304 <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <SubStr+0x16>
        return NULL ;
 8001316:	2300      	movs	r3, #0
 8001318:	e033      	b.n	8001382 <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fb64 	bl	80049ec <malloc>
 8001324:	4603      	mov	r3, r0
 8001326:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7fe ff51 	bl	80001d0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	429a      	cmp	r2, r3
 800133c:	dd03      	ble.n	8001346 <SubStr+0x42>
        nLength = nStart + nLen ;
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e00d      	b.n	8001368 <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	441a      	add	r2, r3
 8001352:	69f9      	ldr	r1, [r7, #28]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1acb      	subs	r3, r1, r3
 8001358:	4619      	mov	r1, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	440b      	add	r3, r1
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbed      	blt.n	800134c <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8001380:	697b      	ldr	r3, [r7, #20]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138e:	b672      	cpsid	i
}
 8001390:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001392:	e7fe      	b.n	8001392 <Error_Handler+0x8>

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_RTC_MspInit+0x24>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d102      	bne.n	80013fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RTC_MspInit+0x28>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40002800 	.word	0x40002800
 800140c:	42470e3c 	.word	0x42470e3c

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_SPI_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x88>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23e0      	movs	r3, #224	; 0xe0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_SPI_MspInit+0x8c>)
 8001486:	f000 fd4f 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40013000 	.word	0x40013000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_TIM_Base_MspInit+0x70>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80014ce:	e01a      	b.n	8001506 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_TIM_Base_MspInit+0x78>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d115      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_TIM_Base_MspInit+0x74>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2037      	movs	r0, #55	; 0x37
 80014fc:	f000 fc4b 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001500:	2037      	movs	r0, #55	; 0x37
 8001502:	f000 fc64 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000
 8001514:	40023800 	.word	0x40023800
 8001518:	40001400 	.word	0x40001400

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b094      	sub	sp, #80	; 0x50
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9c      	ldr	r2, [pc, #624]	; (80017ac <HAL_UART_MspInit+0x290>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d135      	bne.n	80015aa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
 8001542:	4b9b      	ldr	r3, [pc, #620]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a9a      	ldr	r2, [pc, #616]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b98      	ldr	r3, [pc, #608]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
 800155e:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a93      	ldr	r2, [pc, #588]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <HAL_UART_MspInit+0x294>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001576:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001588:	2308      	movs	r3, #8
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001590:	4619      	mov	r1, r3
 8001592:	4888      	ldr	r0, [pc, #544]	; (80017b4 <HAL_UART_MspInit+0x298>)
 8001594:	f000 fcc8 	bl	8001f28 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2034      	movs	r0, #52	; 0x34
 800159e:	f000 fbfa 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015a2:	2034      	movs	r0, #52	; 0x34
 80015a4:	f000 fc13 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015a8:	e145      	b.n	8001836 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a82      	ldr	r2, [pc, #520]	; (80017b8 <HAL_UART_MspInit+0x29c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d153      	bne.n	800165c <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
 80015b8:	4b7d      	ldr	r3, [pc, #500]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a7c      	ldr	r2, [pc, #496]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
 80015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f0:	4b6f      	ldr	r3, [pc, #444]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6313      	str	r3, [r2, #48]	; 0x30
 80015fc:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800161a:	2308      	movs	r3, #8
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001622:	4619      	mov	r1, r3
 8001624:	4863      	ldr	r0, [pc, #396]	; (80017b4 <HAL_UART_MspInit+0x298>)
 8001626:	f000 fc7f 	bl	8001f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800162a:	2304      	movs	r3, #4
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800163a:	2308      	movs	r3, #8
 800163c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001642:	4619      	mov	r1, r3
 8001644:	485d      	ldr	r0, [pc, #372]	; (80017bc <HAL_UART_MspInit+0x2a0>)
 8001646:	f000 fc6f 	bl	8001f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2035      	movs	r0, #53	; 0x35
 8001650:	f000 fba1 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001654:	2035      	movs	r0, #53	; 0x35
 8001656:	f000 fbba 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 800165a:	e0ec      	b.n	8001836 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_UART_MspInit+0x2a4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12d      	bne.n	80016c2 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_UART_MspInit+0x294>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a49      	ldr	r2, [pc, #292]	; (80017b0 <HAL_UART_MspInit+0x294>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4842      	ldr	r0, [pc, #264]	; (80017c4 <HAL_UART_MspInit+0x2a8>)
 80016bc:	f000 fc34 	bl	8001f28 <HAL_GPIO_Init>
}
 80016c0:	e0b9      	b.n	8001836 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <HAL_UART_MspInit+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d134      	bne.n	8001736 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_UART_MspInit+0x294>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001704:	230c      	movs	r3, #12
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001714:	2307      	movs	r3, #7
 8001716:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800171c:	4619      	mov	r1, r3
 800171e:	4829      	ldr	r0, [pc, #164]	; (80017c4 <HAL_UART_MspInit+0x2a8>)
 8001720:	f000 fc02 	bl	8001f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2026      	movs	r0, #38	; 0x26
 800172a:	f000 fb34 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172e:	2026      	movs	r0, #38	; 0x26
 8001730:	f000 fb4d 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 8001734:	e07f      	b.n	8001836 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_UART_MspInit+0x2b0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d149      	bne.n	80017d4 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0x294>)
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_UART_MspInit+0x294>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_UART_MspInit+0x294>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001778:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800178a:	2307      	movs	r3, #7
 800178c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001792:	4619      	mov	r1, r3
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <HAL_UART_MspInit+0x2b4>)
 8001796:	f000 fbc7 	bl	8001f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2027      	movs	r0, #39	; 0x27
 80017a0:	f000 faf9 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a4:	2027      	movs	r0, #39	; 0x27
 80017a6:	f000 fb12 	bl	8001dce <HAL_NVIC_EnableIRQ>
}
 80017aa:	e044      	b.n	8001836 <HAL_UART_MspInit+0x31a>
 80017ac:	40004c00 	.word	0x40004c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40005000 	.word	0x40005000
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40004800 	.word	0x40004800
 80017d0:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x324>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12b      	bne.n	8001836 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_UART_MspInit+0x328>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_UART_MspInit+0x328>)
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x328>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x328>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0x328>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0x328>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001816:	23c0      	movs	r3, #192	; 0xc0
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001826:	2308      	movs	r3, #8
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_MspInit+0x32c>)
 8001832:	f000 fb79 	bl	8001f28 <HAL_GPIO_Init>
}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	; 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40011400 	.word	0x40011400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020800 	.word	0x40020800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f95e 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART1_IRQHandler+0x10>)
 80018a6:	f002 fb1f 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000144 	.word	0x20000144

080018b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART2_IRQHandler+0x10>)
 80018ba:	f002 fb15 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000314 	.word	0x20000314

080018c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <USART3_IRQHandler+0x10>)
 80018ce:	f002 fb0b 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000a8 	.word	0x200000a8

080018dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <UART4_IRQHandler+0x10>)
 80018e2:	f002 fb01 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000270 	.word	0x20000270

080018f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <UART5_IRQHandler+0x10>)
 80018f6:	f002 faf7 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000fc 	.word	0x200000fc

08001904 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM7_IRQHandler+0x10>)
 800190a:	f001 fd44 	bl	8003396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003a8 	.word	0x200003a8

08001918 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <USART6_IRQHandler+0x10>)
 800191e:	f002 fae3 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000204 	.word	0x20000204

0800192c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
	}

return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f002 ffca 	bl	8004998 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20020000 	.word	0x20020000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	20000098 	.word	0x20000098
 8001a38:	20000438 	.word	0x20000438

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a8a:	f7ff ffd7 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f002 ff89 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7fe fee9 	bl	8000868 <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001aa4:	08005b74 	.word	0x08005b74
  ldr r2, =_sbss
 8001aa8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001aac:	20000438 	.word	0x20000438

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_Init+0x40>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_Init+0x40>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x40>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f94f 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fc54 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f967 	bl	8001dea <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f92f 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000010 	.word	0x20000010
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000010 	.word	0x20000010
 8001b7c:	20000424 	.word	0x20000424

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000424 	.word	0x20000424

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000010 	.word	0x20000010

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff8e 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff29 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff3e 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff8e 	bl	8001cd4 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5d 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff31 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff feb6 	bl	8001b80 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d008      	beq.n	8001e34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e052      	b.n	8001eda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0216 	bic.w	r2, r2, #22
 8001e42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <HAL_DMA_Abort+0x62>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0208 	bic.w	r2, r2, #8
 8001e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e013      	b.n	8001eae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fe7b 	bl	8001b80 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d90c      	bls.n	8001eae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e015      	b.n	8001eda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e4      	bne.n	8001e86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	223f      	movs	r2, #63	; 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d004      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00c      	b.n	8001f1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2205      	movs	r2, #5
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e16b      	b.n	800221c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 815a 	bne.w	8002216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d005      	beq.n	8001f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d017      	beq.n	8002018 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80b4 	beq.w	8002216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_GPIO_Init+0x310>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_GPIO_Init+0x314>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x226>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <HAL_GPIO_Init+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x222>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x31c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x21e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x320>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x21a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4e      	ldr	r2, [pc, #312]	; (800224c <HAL_GPIO_Init+0x324>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x216>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_GPIO_Init+0x328>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x212>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_GPIO_Init+0x32c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_GPIO_Init+0x330>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x20a>
 800212e:	2307      	movs	r3, #7
 8002130:	e00e      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002132:	2308      	movs	r3, #8
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002136:	2306      	movs	r3, #6
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x310>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_GPIO_Init+0x334>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_GPIO_Init+0x334>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_GPIO_Init+0x334>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_GPIO_Init+0x334>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_GPIO_Init+0x334>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_GPIO_Init+0x334>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae90 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40021c00 	.word	0x40021c00
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e264      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d075      	beq.n	80023ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e2:	4ba3      	ldr	r3, [pc, #652]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d00c      	beq.n	8002308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4b9d      	ldr	r3, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b99      	ldr	r3, [pc, #612]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05b      	beq.n	80023cc <HAL_RCC_OscConfig+0x108>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d157      	bne.n	80023cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e23f      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x74>
 800232a:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 800235c:	4b84      	ldr	r3, [pc, #528]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a83      	ldr	r2, [pc, #524]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fc00 	bl	8001b80 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fbfc 	bl	8001b80 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e204      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xc0>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fbec 	bl	8001b80 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fbe8 	bl	8001b80 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1f0      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0xe8>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b62      	ldr	r3, [pc, #392]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1c4      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b56      	ldr	r3, [pc, #344]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4952      	ldr	r1, [pc, #328]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e03a      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <HAL_RCC_OscConfig+0x2b0>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff fba1 	bl	8001b80 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fb9d 	bl	8001b80 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1a5      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4940      	ldr	r1, [pc, #256]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_OscConfig+0x2b0>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fb80 	bl	8001b80 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff fb7c 	bl	8001b80 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e184      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d030      	beq.n	8002510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCC_OscConfig+0x2b4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff fb60 	bl	8001b80 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fb5c 	bl	8001b80 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e164      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x200>
 80024e2:	e015      	b.n	8002510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_OscConfig+0x2b4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fb49 	bl	8001b80 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7ff fb45 	bl	8001b80 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e14d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a0 	beq.w	800265e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x2b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d121      	bne.n	800259e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCC_OscConfig+0x2b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <HAL_RCC_OscConfig+0x2b8>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7ff fb0b 	bl	8001b80 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e011      	b.n	8002592 <HAL_RCC_OscConfig+0x2ce>
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	42470000 	.word	0x42470000
 8002578:	42470e80 	.word	0x42470e80
 800257c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7ff fafe 	bl	8001b80 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e106      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b85      	ldr	r3, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x4e4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
 80025a6:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a80      	ldr	r2, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	e01c      	b.n	80025ee <HAL_RCC_OscConfig+0x32a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x312>
 80025bc:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a7a      	ldr	r2, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	4b78      	ldr	r3, [pc, #480]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a77      	ldr	r2, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x32a>
 80025d6:	4b75      	ldr	r3, [pc, #468]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a74      	ldr	r2, [pc, #464]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a71      	ldr	r2, [pc, #452]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff fac3 	bl	8001b80 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fabf 	bl	8001b80 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0c5      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ee      	beq.n	80025fe <HAL_RCC_OscConfig+0x33a>
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff faad 	bl	8001b80 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff faa9 	bl	8001b80 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0af      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 809b 	beq.w	800279e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d05c      	beq.n	800272e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d141      	bne.n	8002700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCC_OscConfig+0x4ec>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fa7d 	bl	8001b80 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff fa79 	bl	8001b80 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e081      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	019b      	lsls	r3, r3, #6
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	061b      	lsls	r3, r3, #24
 80026cc:	4937      	ldr	r1, [pc, #220]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x4ec>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fa52 	bl	8001b80 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fa4e 	bl	8001b80 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e056      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x41c>
 80026fe:	e04e      	b.n	800279e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_OscConfig+0x4ec>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff fa3b 	bl	8001b80 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fa37 	bl	8001b80 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e03f      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x44a>
 800272c:	e037      	b.n	800279e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e032      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_RCC_OscConfig+0x4e8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d028      	beq.n	800279a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d121      	bne.n	800279a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d11a      	bne.n	800279a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002770:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002772:	4293      	cmp	r3, r2
 8002774:	d111      	bne.n	800279a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d107      	bne.n	800279a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40007000 	.word	0x40007000
 80027ac:	40023800 	.word	0x40023800
 80027b0:	42470060 	.word	0x42470060

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0cc      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d90c      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d044      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d119      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286e:	2b03      	cmp	r3, #3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e067      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a4:	f7ff f96c 	bl	8001b80 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7ff f968 	bl	8001b80 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 020c 	and.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1eb      	bne.n	80028ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d20c      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f8cc 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00
 8002970:	40023800 	.word	0x40023800
 8002974:	08005ab4 	.word	0x08005ab4
 8002978:	20000008 	.word	0x20000008
 800297c:	2000000c 	.word	0x2000000c

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2100      	movs	r1, #0
 8002988:	6079      	str	r1, [r7, #4]
 800298a:	2100      	movs	r1, #0
 800298c:	60f9      	str	r1, [r7, #12]
 800298e:	2100      	movs	r1, #0
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2100      	movs	r1, #0
 8002994:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4952      	ldr	r1, [pc, #328]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002998:	6889      	ldr	r1, [r1, #8]
 800299a:	f001 010c 	and.w	r1, r1, #12
 800299e:	2908      	cmp	r1, #8
 80029a0:	d00d      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3e>
 80029a2:	2908      	cmp	r1, #8
 80029a4:	f200 8094 	bhi.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x150>
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029ac:	2904      	cmp	r1, #4
 80029ae:	d003      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029b0:	e08e      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x164>)
 80029b4:	60bb      	str	r3, [r7, #8]
       break;
 80029b6:	e08e      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b8:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80029ba:	60bb      	str	r3, [r7, #8]
      break;
 80029bc:	e08b      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029be:	4948      	ldr	r1, [pc, #288]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c0:	6849      	ldr	r1, [r1, #4]
 80029c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	4945      	ldr	r1, [pc, #276]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ca:	6849      	ldr	r1, [r1, #4]
 80029cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d024      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4942      	ldr	r1, [pc, #264]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029d6:	6849      	ldr	r1, [r1, #4]
 80029d8:	0989      	lsrs	r1, r1, #6
 80029da:	4608      	mov	r0, r1
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029e4:	f04f 0500 	mov.w	r5, #0
 80029e8:	ea00 0204 	and.w	r2, r0, r4
 80029ec:	ea01 0305 	and.w	r3, r1, r5
 80029f0:	493d      	ldr	r1, [pc, #244]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80029f2:	fb01 f003 	mul.w	r0, r1, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	fb01 f102 	mul.w	r1, r1, r2
 80029fc:	1844      	adds	r4, r0, r1
 80029fe:	493a      	ldr	r1, [pc, #232]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a00:	fba2 0101 	umull	r0, r1, r2, r1
 8002a04:	1863      	adds	r3, r4, r1
 8002a06:	4619      	mov	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f7fd fc36 	bl	8000280 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e04a      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	461a      	mov	r2, r3
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	ea02 0400 	and.w	r4, r2, r0
 8002a36:	ea03 0501 	and.w	r5, r3, r1
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	014b      	lsls	r3, r1, #5
 8002a48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a4c:	0142      	lsls	r2, r0, #5
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	1b00      	subs	r0, r0, r4
 8002a54:	eb61 0105 	sbc.w	r1, r1, r5
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	018b      	lsls	r3, r1, #6
 8002a62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a66:	0182      	lsls	r2, r0, #6
 8002a68:	1a12      	subs	r2, r2, r0
 8002a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	00d9      	lsls	r1, r3, #3
 8002a78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a7c:	00d0      	lsls	r0, r2, #3
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	1912      	adds	r2, r2, r4
 8002a84:	eb45 0303 	adc.w	r3, r5, r3
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0299      	lsls	r1, r3, #10
 8002a92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a96:	0290      	lsls	r0, r2, #10
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	f7fd fbea 	bl	8000280 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ad2:	60bb      	str	r3, [r7, #8]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	017d7840 	.word	0x017d7840

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08005ac4 	.word	0x08005ac4

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08005ac4 	.word	0x08005ac4

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d035      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b82:	f7fe fffd 	bl	8001b80 <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b8a:	f7fe fff9 	bl	8001b80 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0b0      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b9c:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	019a      	lsls	r2, r3, #6
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	071b      	lsls	r3, r3, #28
 8002bb4:	4955      	ldr	r1, [pc, #340]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bbc:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe ffdd 	bl	8001b80 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bca:	f7fe ffd9 	bl	8001b80 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e090      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8083 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3e      	ldr	r2, [pc, #248]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c1e:	f7fe ffaf 	bl	8001b80 <HAL_GetTick>
 8002c22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe ffab 	bl	8001b80 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e062      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02f      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d114      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe ff79 	bl	8001b80 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe ff75 	bl	8001b80 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e02a      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	490d      	ldr	r1, [pc, #52]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
 8002cdc:	e005      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	4905      	ldr	r1, [pc, #20]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	42470068 	.word	0x42470068
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000
 8002d14:	42470e40 	.word	0x42470e40

08002d18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e083      	b.n	8002e32 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7f5b      	ldrb	r3, [r3, #29]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fb52 	bl	80013e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ca      	movs	r2, #202	; 0xca
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2253      	movs	r2, #83	; 0x53
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9fb 	bl	8003152 <RTC_EnterInitMode>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e05e      	b.n	8002e32 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d86:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	041a      	lsls	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f98d 	bl	8003102 <HAL_RTC_WaitForSynchro>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e018      	b.n	8002e32 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e3a:	b590      	push	{r4, r7, lr}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	7f1b      	ldrb	r3, [r3, #28]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_RTC_SetTime+0x1c>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0aa      	b.n	8002fac <HAL_RTC_SetTime+0x172>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d126      	bne.n	8002eb6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f992 	bl	80031aa <RTC_ByteToBcd2>
 8002e86:	4603      	mov	r3, r0
 8002e88:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f98b 	bl	80031aa <RTC_ByteToBcd2>
 8002e94:	4603      	mov	r3, r0
 8002e96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e98:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f983 	bl	80031aa <RTC_ByteToBcd2>
 8002ea4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ea6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e018      	b.n	8002ee8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ed6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002edc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	78db      	ldrb	r3, [r3, #3]
 8002ee2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	22ca      	movs	r2, #202	; 0xca
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2253      	movs	r2, #83	; 0x53
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f92a 	bl	8003152 <RTC_EnterInitMode>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	22ff      	movs	r2, #255	; 0xff
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e047      	b.n	8002fac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f3a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d111      	bne.n	8002f96 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f8c5 	bl	8003102 <HAL_RTC_WaitForSynchro>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00a      	b.n	8002fac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	22ff      	movs	r2, #255	; 0xff
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002faa:	2300      	movs	r3, #0
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	7f1b      	ldrb	r3, [r3, #28]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_RTC_SetDate+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e094      	b.n	80030fa <HAL_RTC_SetDate+0x146>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_RTC_SetDate+0x4c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	330a      	adds	r3, #10
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11c      	bne.n	8003040 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f8cd 	bl	80031aa <RTC_ByteToBcd2>
 8003010:	4603      	mov	r3, r0
 8003012:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f8c6 	bl	80031aa <RTC_ByteToBcd2>
 800301e:	4603      	mov	r3, r0
 8003020:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003022:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	789b      	ldrb	r3, [r3, #2]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f8be 	bl	80031aa <RTC_ByteToBcd2>
 800302e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003030:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e00e      	b.n	800305e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	78db      	ldrb	r3, [r3, #3]
 8003044:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800304c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003052:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	22ca      	movs	r2, #202	; 0xca
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2253      	movs	r2, #83	; 0x53
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f86f 	bl	8003152 <RTC_EnterInitMode>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2204      	movs	r2, #4
 8003086:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e033      	b.n	80030fa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800309c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d111      	bne.n	80030e4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f81e 	bl	8003102 <HAL_RTC_WaitForSynchro>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2204      	movs	r2, #4
 80030d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e00a      	b.n	80030fa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	22ff      	movs	r2, #255	; 0xff
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}

08003102 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800311c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800311e:	f7fe fd2f 	bl	8001b80 <HAL_GetTick>
 8003122:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003124:	e009      	b.n	800313a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003126:	f7fe fd2b 	bl	8001b80 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003134:	d901      	bls.n	800313a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e007      	b.n	800314a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d119      	bne.n	80031a0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003176:	f7fe fd03 	bl	8001b80 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800317c:	e009      	b.n	8003192 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800317e:	f7fe fcff 	bl	8001b80 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318c:	d901      	bls.n	8003192 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e007      	b.n	80031a2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80031b8:	e005      	b.n	80031c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	3b0a      	subs	r3, #10
 80031c4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b09      	cmp	r3, #9
 80031ca:	d8f6      	bhi.n	80031ba <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b2db      	uxtb	r3, r3
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e07b      	b.n	80032f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d108      	bne.n	8003212 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003208:	d009      	beq.n	800321e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	61da      	str	r2, [r3, #28]
 8003210:	e005      	b.n	800321e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fe f8e9 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003254:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	f003 0104 	and.w	r1, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0210 	and.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe f8be 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fa6e 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d122      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d11b      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0202 	mvn.w	r2, #2
 80033c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9fe 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 80033de:	e005      	b.n	80033ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f9f0 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa01 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d122      	bne.n	8003446 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d11b      	bne.n	8003446 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f06f 0204 	mvn.w	r2, #4
 8003416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f9d4 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 8003432:	e005      	b.n	8003440 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9c6 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9d7 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d122      	bne.n	800349a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11b      	bne.n	800349a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0208 	mvn.w	r2, #8
 800346a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9aa 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 8003486:	e005      	b.n	8003494 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f99c 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9ad 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d122      	bne.n	80034ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d11b      	bne.n	80034ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0210 	mvn.w	r2, #16
 80034be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2208      	movs	r2, #8
 80034c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f980 	bl	80037da <HAL_TIM_IC_CaptureCallback>
 80034da:	e005      	b.n	80034e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f972 	bl	80037c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f983 	bl	80037ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10e      	bne.n	800351a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f06f 0201 	mvn.w	r2, #1
 8003512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f94c 	bl	80037b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b80      	cmp	r3, #128	; 0x80
 8003526:	d10e      	bne.n	8003546 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d107      	bne.n	8003546 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fbb7 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d10e      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f948 	bl	8003802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b20      	cmp	r3, #32
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0220 	mvn.w	r2, #32
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fb81 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_ConfigClockSource+0x18>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0b3      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x180>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d03e      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0xd0>
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fc:	f200 8087 	bhi.w	800370e <HAL_TIM_ConfigClockSource+0x168>
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003604:	f000 8085 	beq.w	8003712 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d87f      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 800360e:	2b70      	cmp	r3, #112	; 0x70
 8003610:	d01a      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xa2>
 8003612:	2b70      	cmp	r3, #112	; 0x70
 8003614:	d87b      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 8003616:	2b60      	cmp	r3, #96	; 0x60
 8003618:	d050      	beq.n	80036bc <HAL_TIM_ConfigClockSource+0x116>
 800361a:	2b60      	cmp	r3, #96	; 0x60
 800361c:	d877      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 800361e:	2b50      	cmp	r3, #80	; 0x50
 8003620:	d03c      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xf6>
 8003622:	2b50      	cmp	r3, #80	; 0x50
 8003624:	d873      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d058      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0x136>
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d86f      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 800362e:	2b30      	cmp	r3, #48	; 0x30
 8003630:	d064      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x156>
 8003632:	2b30      	cmp	r3, #48	; 0x30
 8003634:	d86b      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 8003636:	2b20      	cmp	r3, #32
 8003638:	d060      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x156>
 800363a:	2b20      	cmp	r3, #32
 800363c:	d867      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x168>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d05c      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x156>
 8003642:	2b10      	cmp	r3, #16
 8003644:	d05a      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003646:	e062      	b.n	800370e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f000 fa86 	bl	8003b68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800366a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
      break;
 8003674:	e04e      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f000 fa6f 	bl	8003b68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003698:	609a      	str	r2, [r3, #8]
      break;
 800369a:	e03b      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f000 f9e3 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2150      	movs	r1, #80	; 0x50
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa3c 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80036ba:	e02b      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f000 fa02 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2160      	movs	r1, #96	; 0x60
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa2c 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80036da:	e01b      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f000 f9c3 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2140      	movs	r1, #64	; 0x40
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fa1c 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80036fa:	e00b      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 fa13 	bl	8003b32 <TIM_ITRx_SetConfig>
        break;
 800370c:	e002      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003742:	2302      	movs	r3, #2
 8003744:	e031      	b.n	80037aa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8fd 	bl	8003958 <TIM_SlaveTimer_SetConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e018      	b.n	80037aa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003786:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003796:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a40      	ldr	r2, [pc, #256]	; (800392c <TIM_Base_SetConfig+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <TIM_Base_SetConfig+0x118>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <TIM_Base_SetConfig+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <TIM_Base_SetConfig+0x120>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3a      	ldr	r2, [pc, #232]	; (800393c <TIM_Base_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2f      	ldr	r2, [pc, #188]	; (800392c <TIM_Base_SetConfig+0x114>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d027      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2c      	ldr	r2, [pc, #176]	; (8003930 <TIM_Base_SetConfig+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d023      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <TIM_Base_SetConfig+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <TIM_Base_SetConfig+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <TIM_Base_SetConfig+0x124>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d017      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a28      	ldr	r2, [pc, #160]	; (8003940 <TIM_Base_SetConfig+0x128>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <TIM_Base_SetConfig+0x12c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a26      	ldr	r2, [pc, #152]	; (8003948 <TIM_Base_SetConfig+0x130>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <TIM_Base_SetConfig+0x134>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <TIM_Base_SetConfig+0x138>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <TIM_Base_SetConfig+0x13c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <TIM_Base_SetConfig+0x114>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <TIM_Base_SetConfig+0x124>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40010400 	.word	0x40010400
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	40001800 	.word	0x40001800
 8003950:	40001c00 	.word	0x40001c00
 8003954:	40002000 	.word	0x40002000

08003958 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b70      	cmp	r3, #112	; 0x70
 800399c:	d01a      	beq.n	80039d4 <TIM_SlaveTimer_SetConfig+0x7c>
 800399e:	2b70      	cmp	r3, #112	; 0x70
 80039a0:	d860      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039a2:	2b60      	cmp	r3, #96	; 0x60
 80039a4:	d054      	beq.n	8003a50 <TIM_SlaveTimer_SetConfig+0xf8>
 80039a6:	2b60      	cmp	r3, #96	; 0x60
 80039a8:	d85c      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039aa:	2b50      	cmp	r3, #80	; 0x50
 80039ac:	d046      	beq.n	8003a3c <TIM_SlaveTimer_SetConfig+0xe4>
 80039ae:	2b50      	cmp	r3, #80	; 0x50
 80039b0:	d858      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d019      	beq.n	80039ea <TIM_SlaveTimer_SetConfig+0x92>
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d854      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039ba:	2b30      	cmp	r3, #48	; 0x30
 80039bc:	d054      	beq.n	8003a68 <TIM_SlaveTimer_SetConfig+0x110>
 80039be:	2b30      	cmp	r3, #48	; 0x30
 80039c0:	d850      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d050      	beq.n	8003a68 <TIM_SlaveTimer_SetConfig+0x110>
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d84c      	bhi.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04c      	beq.n	8003a68 <TIM_SlaveTimer_SetConfig+0x110>
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d04a      	beq.n	8003a68 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80039d2:	e047      	b.n	8003a64 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f000 f8c0 	bl	8003b68 <TIM_ETR_SetConfig>
      break;
 80039e8:	e03f      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d101      	bne.n	80039f6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e03a      	b.n	8003a6c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
      break;
 8003a3a:	e016      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f813 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      break;
 8003a4e:	e00c      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6899      	ldr	r1, [r3, #8]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f000 f838 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
      break;
 8003a62:	e002      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003a68:	bf00      	nop
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f043 0307 	orr.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e05a      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d01d      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03f      	b.n	8003d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd fc14 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fc7b 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b08a      	sub	sp, #40	; 0x28
 8003d66:	af02      	add	r7, sp, #8
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d17c      	bne.n	8003e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_UART_Transmit+0x2c>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e075      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x3e>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e06e      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db6:	f7fd fee3 	bl	8001b80 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d108      	bne.n	8003de4 <HAL_UART_Transmit+0x82>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e003      	b.n	8003dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003df4:	e02a      	b.n	8003e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fa3d 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cf      	bne.n	8003df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fa0d 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d11d      	bne.n	8003edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Receive_IT+0x26>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e016      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Receive_IT+0x38>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e00f      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fa1e 	bl	8004314 <UART_Start_Receive_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e000      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x52>
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fad1 	bl	80044da <UART_Receive_IT>
      return;
 8003f38:	e17c      	b.n	8004234 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80b1 	beq.w	80040a4 <HAL_UART_IRQHandler+0x1bc>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_UART_IRQHandler+0x70>
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a6 	beq.w	80040a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_UART_IRQHandler+0x90>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_UART_IRQHandler+0xb0>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0202 	orr.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xd0>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f043 0204 	orr.w	r2, r3, #4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xfa>
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_UART_IRQHandler+0xee>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f043 0208 	orr.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 811f 	beq.w	800422a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <HAL_UART_IRQHandler+0x11e>
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa6a 	bl	80044da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_UART_IRQHandler+0x146>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d031      	beq.n	8004092 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9aa 	bl	8004388 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d123      	bne.n	800408a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004050:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	4a77      	ldr	r2, [pc, #476]	; (800423c <HAL_UART_IRQHandler+0x354>)
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd ff3b 	bl	8001ee2 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e00e      	b.n	80040a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8e6 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00a      	b.n	80040a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8e2 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e006      	b.n	80040a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8de 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800409e:	e0c4      	b.n	800422a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	bf00      	nop
    return;
 80040a2:	e0c2      	b.n	800422a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 80a2 	bne.w	80041f2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 809c 	beq.w	80041f2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8096 	beq.w	80041f2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d14f      	bne.n	800418a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80040f4:	8a3b      	ldrh	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8099 	beq.w	800422e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004100:	8a3a      	ldrh	r2, [r7, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	f080 8093 	bcs.w	800422e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8a3a      	ldrh	r2, [r7, #16]
 800410c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004118:	d02b      	beq.n	8004172 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004128:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004148:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0210 	bic.w	r2, r2, #16
 8004166:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fe48 	bl	8001e02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417a:	b29b      	uxth	r3, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	b29b      	uxth	r3, r3
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f870 	bl	8004268 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004188:	e051      	b.n	800422e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004192:	b29b      	uxth	r3, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d047      	beq.n	8004232 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80041a2:	8a7b      	ldrh	r3, [r7, #18]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d044      	beq.n	8004232 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041b6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041e6:	8a7b      	ldrh	r3, [r7, #18]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f83c 	bl	8004268 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041f0:	e01f      	b.n	8004232 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x326>
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8ff 	bl	800440a <UART_Transmit_IT>
    return;
 800420c:	e012      	b.n	8004234 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <HAL_UART_IRQHandler+0x34c>
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f941 	bl	80044aa <UART_EndTransmit_IT>
    return;
 8004228:	e004      	b.n	8004234 <HAL_UART_IRQHandler+0x34c>
    return;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_UART_IRQHandler+0x34c>
      return;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_UART_IRQHandler+0x34c>
      return;
 8004232:	bf00      	nop
  }
}
 8004234:	3728      	adds	r7, #40	; 0x28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	080043e3 	.word	0x080043e3

08004240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004290:	e02c      	b.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d028      	beq.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a0:	f7fd fc6e 	bl	8001b80 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d21d      	bcs.n	80042ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00f      	b.n	800430c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d0c3      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2222      	movs	r2, #34	; 0x22
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0220 	orr.w	r2, r2, #32
 8004378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800439e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0210 	bic.w	r2, r2, #16
 80043c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff ff29 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b21      	cmp	r3, #33	; 0x21
 800441c:	d13e      	bne.n	800449c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d114      	bne.n	8004452 <UART_Transmit_IT+0x48>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	1c9a      	adds	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]
 8004450:	e008      	b.n	8004464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6211      	str	r1, [r2, #32]
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29b      	uxth	r3, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4619      	mov	r1, r3
 8004472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10f      	bne.n	8004498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff feb8 	bl	8004240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b22      	cmp	r3, #34	; 0x22
 80044ec:	f040 8087 	bne.w	80045fe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f8:	d117      	bne.n	800452a <UART_Receive_IT+0x50>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d113      	bne.n	800452a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004518:	b29a      	uxth	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	1c9a      	adds	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
 8004528:	e026      	b.n	8004578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d007      	beq.n	800454e <UART_Receive_IT+0x74>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <UART_Receive_IT+0x82>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e008      	b.n	800456e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29b      	uxth	r3, r3
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4619      	mov	r1, r3
 8004586:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004588:	2b00      	cmp	r3, #0
 800458a:	d136      	bne.n	80045fa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0220 	bic.w	r2, r2, #32
 800459a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10e      	bne.n	80045ea <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fe40 	bl	8004268 <HAL_UARTEx_RxEventCallback>
 80045e8:	e002      	b.n	80045f0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fb ffe8 	bl	80005c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e002      	b.n	8004600 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	b09f      	sub	sp, #124	; 0x7c
 800460e:	af00      	add	r7, sp, #0
 8004610:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	68d9      	ldr	r1, [r3, #12]
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	ea40 0301 	orr.w	r3, r0, r1
 8004628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	431a      	orrs	r2, r3
 8004634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	431a      	orrs	r2, r3
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4313      	orrs	r3, r2
 8004640:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800464c:	f021 010c 	bic.w	r1, r1, #12
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004656:	430b      	orrs	r3, r1
 8004658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	6999      	ldr	r1, [r3, #24]
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	ea40 0301 	orr.w	r3, r0, r1
 8004670:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4bc5      	ldr	r3, [pc, #788]	; (800498c <UART_SetConfig+0x384>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d004      	beq.n	8004686 <UART_SetConfig+0x7e>
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4bc3      	ldr	r3, [pc, #780]	; (8004990 <UART_SetConfig+0x388>)
 8004682:	429a      	cmp	r2, r3
 8004684:	d103      	bne.n	800468e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004686:	f7fe fa51 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 800468a:	6778      	str	r0, [r7, #116]	; 0x74
 800468c:	e002      	b.n	8004694 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800468e:	f7fe fa39 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8004692:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	f040 80b6 	bne.w	800480c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a2:	461c      	mov	r4, r3
 80046a4:	f04f 0500 	mov.w	r5, #0
 80046a8:	4622      	mov	r2, r4
 80046aa:	462b      	mov	r3, r5
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	6439      	str	r1, [r7, #64]	; 0x40
 80046b0:	415b      	adcs	r3, r3
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046b8:	1912      	adds	r2, r2, r4
 80046ba:	eb45 0303 	adc.w	r3, r5, r3
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	00d9      	lsls	r1, r3, #3
 80046c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046cc:	00d0      	lsls	r0, r2, #3
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	1911      	adds	r1, r2, r4
 80046d4:	6639      	str	r1, [r7, #96]	; 0x60
 80046d6:	416b      	adcs	r3, r5
 80046d8:	667b      	str	r3, [r7, #100]	; 0x64
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	461a      	mov	r2, r3
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046f4:	f7fb fdc4 	bl	8000280 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4ba5      	ldr	r3, [pc, #660]	; (8004994 <UART_SetConfig+0x38c>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011e      	lsls	r6, r3, #4
 8004706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004708:	461c      	mov	r4, r3
 800470a:	f04f 0500 	mov.w	r5, #0
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	1891      	adds	r1, r2, r2
 8004714:	6339      	str	r1, [r7, #48]	; 0x30
 8004716:	415b      	adcs	r3, r3
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
 800471a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800471e:	1912      	adds	r2, r2, r4
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	00d9      	lsls	r1, r3, #3
 800472e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004732:	00d0      	lsls	r0, r2, #3
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	1911      	adds	r1, r2, r4
 800473a:	65b9      	str	r1, [r7, #88]	; 0x58
 800473c:	416b      	adcs	r3, r5
 800473e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	1891      	adds	r1, r2, r2
 800474c:	62b9      	str	r1, [r7, #40]	; 0x28
 800474e:	415b      	adcs	r3, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800475a:	f7fb fd91 	bl	8000280 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b8c      	ldr	r3, [pc, #560]	; (8004994 <UART_SetConfig+0x38c>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a87      	ldr	r2, [pc, #540]	; (8004994 <UART_SetConfig+0x38c>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004784:	441e      	add	r6, r3
 8004786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004788:	4618      	mov	r0, r3
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	1894      	adds	r4, r2, r2
 8004794:	623c      	str	r4, [r7, #32]
 8004796:	415b      	adcs	r3, r3
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479e:	1812      	adds	r2, r2, r0
 80047a0:	eb41 0303 	adc.w	r3, r1, r3
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	f04f 0500 	mov.w	r5, #0
 80047ac:	00dd      	lsls	r5, r3, #3
 80047ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047b2:	00d4      	lsls	r4, r2, #3
 80047b4:	4622      	mov	r2, r4
 80047b6:	462b      	mov	r3, r5
 80047b8:	1814      	adds	r4, r2, r0
 80047ba:	653c      	str	r4, [r7, #80]	; 0x50
 80047bc:	414b      	adcs	r3, r1
 80047be:	657b      	str	r3, [r7, #84]	; 0x54
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	461a      	mov	r2, r3
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	1891      	adds	r1, r2, r2
 80047cc:	61b9      	str	r1, [r7, #24]
 80047ce:	415b      	adcs	r3, r3
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047da:	f7fb fd51 	bl	8000280 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b6c      	ldr	r3, [pc, #432]	; (8004994 <UART_SetConfig+0x38c>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a67      	ldr	r2, [pc, #412]	; (8004994 <UART_SetConfig+0x38c>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4432      	add	r2, r6
 8004808:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800480a:	e0b9      	b.n	8004980 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800480c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480e:	461c      	mov	r4, r3
 8004810:	f04f 0500 	mov.w	r5, #0
 8004814:	4622      	mov	r2, r4
 8004816:	462b      	mov	r3, r5
 8004818:	1891      	adds	r1, r2, r2
 800481a:	6139      	str	r1, [r7, #16]
 800481c:	415b      	adcs	r3, r3
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004824:	1912      	adds	r2, r2, r4
 8004826:	eb45 0303 	adc.w	r3, r5, r3
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	00d9      	lsls	r1, r3, #3
 8004834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004838:	00d0      	lsls	r0, r2, #3
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	eb12 0804 	adds.w	r8, r2, r4
 8004842:	eb43 0905 	adc.w	r9, r3, r5
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	008b      	lsls	r3, r1, #2
 800485a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800485e:	0082      	lsls	r2, r0, #2
 8004860:	4640      	mov	r0, r8
 8004862:	4649      	mov	r1, r9
 8004864:	f7fb fd0c 	bl	8000280 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4b49      	ldr	r3, [pc, #292]	; (8004994 <UART_SetConfig+0x38c>)
 800486e:	fba3 2302 	umull	r2, r3, r3, r2
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	011e      	lsls	r6, r3, #4
 8004876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004878:	4618      	mov	r0, r3
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	1894      	adds	r4, r2, r2
 8004884:	60bc      	str	r4, [r7, #8]
 8004886:	415b      	adcs	r3, r3
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800488e:	1812      	adds	r2, r2, r0
 8004890:	eb41 0303 	adc.w	r3, r1, r3
 8004894:	f04f 0400 	mov.w	r4, #0
 8004898:	f04f 0500 	mov.w	r5, #0
 800489c:	00dd      	lsls	r5, r3, #3
 800489e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048a2:	00d4      	lsls	r4, r2, #3
 80048a4:	4622      	mov	r2, r4
 80048a6:	462b      	mov	r3, r5
 80048a8:	1814      	adds	r4, r2, r0
 80048aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80048ac:	414b      	adcs	r3, r1
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	008b      	lsls	r3, r1, #2
 80048c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048c8:	0082      	lsls	r2, r0, #2
 80048ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048ce:	f7fb fcd7 	bl	8000280 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <UART_SetConfig+0x38c>)
 80048d8:	fba3 1302 	umull	r1, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	2164      	movs	r1, #100	; 0x64
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	3332      	adds	r3, #50	; 0x32
 80048ea:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <UART_SetConfig+0x38c>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f6:	441e      	add	r6, r3
 80048f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fa:	4618      	mov	r0, r3
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	1894      	adds	r4, r2, r2
 8004906:	603c      	str	r4, [r7, #0]
 8004908:	415b      	adcs	r3, r3
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004910:	1812      	adds	r2, r2, r0
 8004912:	eb41 0303 	adc.w	r3, r1, r3
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	f04f 0500 	mov.w	r5, #0
 800491e:	00dd      	lsls	r5, r3, #3
 8004920:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004924:	00d4      	lsls	r4, r2, #3
 8004926:	4622      	mov	r2, r4
 8004928:	462b      	mov	r3, r5
 800492a:	eb12 0a00 	adds.w	sl, r2, r0
 800492e:	eb43 0b01 	adc.w	fp, r3, r1
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	008b      	lsls	r3, r1, #2
 8004946:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800494a:	0082      	lsls	r2, r0, #2
 800494c:	4650      	mov	r0, sl
 800494e:	4659      	mov	r1, fp
 8004950:	f7fb fc96 	bl	8000280 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <UART_SetConfig+0x38c>)
 800495a:	fba3 1302 	umull	r1, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2164      	movs	r1, #100	; 0x64
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	3332      	adds	r3, #50	; 0x32
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <UART_SetConfig+0x38c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4432      	add	r2, r6
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	377c      	adds	r7, #124	; 0x7c
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40011000 	.word	0x40011000
 8004990:	40011400 	.word	0x40011400
 8004994:	51eb851f 	.word	0x51eb851f

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000014 	.word	0x20000014

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 fff4 	bl	80059a4 <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08005b6c 	.word	0x08005b6c
 80049e0:	08005b6c 	.word	0x08005b6c
 80049e4:	08005b6c 	.word	0x08005b6c
 80049e8:	08005b70 	.word	0x08005b70

080049ec <malloc>:
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <malloc+0xc>)
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f000 b85b 	b.w	8004aac <_malloc_r>
 80049f6:	bf00      	nop
 80049f8:	20000014 	.word	0x20000014

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <_free_r>:
 8004a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	d048      	beq.n	8004aa4 <_free_r+0x98>
 8004a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a16:	9001      	str	r0, [sp, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a1e:	bfb8      	it	lt
 8004a20:	18e4      	addlt	r4, r4, r3
 8004a22:	f000 fc19 	bl	8005258 <__malloc_lock>
 8004a26:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <_free_r+0x9c>)
 8004a28:	9801      	ldr	r0, [sp, #4]
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	4615      	mov	r5, r2
 8004a2e:	b933      	cbnz	r3, 8004a3e <_free_r+0x32>
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	6014      	str	r4, [r2, #0]
 8004a34:	b003      	add	sp, #12
 8004a36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a3a:	f000 bc13 	b.w	8005264 <__malloc_unlock>
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	d90b      	bls.n	8004a5a <_free_r+0x4e>
 8004a42:	6821      	ldr	r1, [r4, #0]
 8004a44:	1862      	adds	r2, r4, r1
 8004a46:	4293      	cmp	r3, r2
 8004a48:	bf04      	itt	eq
 8004a4a:	681a      	ldreq	r2, [r3, #0]
 8004a4c:	685b      	ldreq	r3, [r3, #4]
 8004a4e:	6063      	str	r3, [r4, #4]
 8004a50:	bf04      	itt	eq
 8004a52:	1852      	addeq	r2, r2, r1
 8004a54:	6022      	streq	r2, [r4, #0]
 8004a56:	602c      	str	r4, [r5, #0]
 8004a58:	e7ec      	b.n	8004a34 <_free_r+0x28>
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	b10b      	cbz	r3, 8004a64 <_free_r+0x58>
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d9fa      	bls.n	8004a5a <_free_r+0x4e>
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	1855      	adds	r5, r2, r1
 8004a68:	42a5      	cmp	r5, r4
 8004a6a:	d10b      	bne.n	8004a84 <_free_r+0x78>
 8004a6c:	6824      	ldr	r4, [r4, #0]
 8004a6e:	4421      	add	r1, r4
 8004a70:	1854      	adds	r4, r2, r1
 8004a72:	42a3      	cmp	r3, r4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	d1dd      	bne.n	8004a34 <_free_r+0x28>
 8004a78:	681c      	ldr	r4, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	6053      	str	r3, [r2, #4]
 8004a7e:	4421      	add	r1, r4
 8004a80:	6011      	str	r1, [r2, #0]
 8004a82:	e7d7      	b.n	8004a34 <_free_r+0x28>
 8004a84:	d902      	bls.n	8004a8c <_free_r+0x80>
 8004a86:	230c      	movs	r3, #12
 8004a88:	6003      	str	r3, [r0, #0]
 8004a8a:	e7d3      	b.n	8004a34 <_free_r+0x28>
 8004a8c:	6825      	ldr	r5, [r4, #0]
 8004a8e:	1961      	adds	r1, r4, r5
 8004a90:	428b      	cmp	r3, r1
 8004a92:	bf04      	itt	eq
 8004a94:	6819      	ldreq	r1, [r3, #0]
 8004a96:	685b      	ldreq	r3, [r3, #4]
 8004a98:	6063      	str	r3, [r4, #4]
 8004a9a:	bf04      	itt	eq
 8004a9c:	1949      	addeq	r1, r1, r5
 8004a9e:	6021      	streq	r1, [r4, #0]
 8004aa0:	6054      	str	r4, [r2, #4]
 8004aa2:	e7c7      	b.n	8004a34 <_free_r+0x28>
 8004aa4:	b003      	add	sp, #12
 8004aa6:	bd30      	pop	{r4, r5, pc}
 8004aa8:	2000009c 	.word	0x2000009c

08004aac <_malloc_r>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	1ccd      	adds	r5, r1, #3
 8004ab0:	f025 0503 	bic.w	r5, r5, #3
 8004ab4:	3508      	adds	r5, #8
 8004ab6:	2d0c      	cmp	r5, #12
 8004ab8:	bf38      	it	cc
 8004aba:	250c      	movcc	r5, #12
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	4606      	mov	r6, r0
 8004ac0:	db01      	blt.n	8004ac6 <_malloc_r+0x1a>
 8004ac2:	42a9      	cmp	r1, r5
 8004ac4:	d903      	bls.n	8004ace <_malloc_r+0x22>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	6033      	str	r3, [r6, #0]
 8004aca:	2000      	movs	r0, #0
 8004acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ace:	f000 fbc3 	bl	8005258 <__malloc_lock>
 8004ad2:	4921      	ldr	r1, [pc, #132]	; (8004b58 <_malloc_r+0xac>)
 8004ad4:	680a      	ldr	r2, [r1, #0]
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	b99c      	cbnz	r4, 8004b02 <_malloc_r+0x56>
 8004ada:	4f20      	ldr	r7, [pc, #128]	; (8004b5c <_malloc_r+0xb0>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	b923      	cbnz	r3, 8004aea <_malloc_r+0x3e>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f8ca 	bl	8004c7c <_sbrk_r>
 8004ae8:	6038      	str	r0, [r7, #0]
 8004aea:	4629      	mov	r1, r5
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f8c5 	bl	8004c7c <_sbrk_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d123      	bne.n	8004b3e <_malloc_r+0x92>
 8004af6:	230c      	movs	r3, #12
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 fbb2 	bl	8005264 <__malloc_unlock>
 8004b00:	e7e3      	b.n	8004aca <_malloc_r+0x1e>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	1b5b      	subs	r3, r3, r5
 8004b06:	d417      	bmi.n	8004b38 <_malloc_r+0x8c>
 8004b08:	2b0b      	cmp	r3, #11
 8004b0a:	d903      	bls.n	8004b14 <_malloc_r+0x68>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	441c      	add	r4, r3
 8004b10:	6025      	str	r5, [r4, #0]
 8004b12:	e004      	b.n	8004b1e <_malloc_r+0x72>
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	42a2      	cmp	r2, r4
 8004b18:	bf0c      	ite	eq
 8004b1a:	600b      	streq	r3, [r1, #0]
 8004b1c:	6053      	strne	r3, [r2, #4]
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f000 fba0 	bl	8005264 <__malloc_unlock>
 8004b24:	f104 000b 	add.w	r0, r4, #11
 8004b28:	1d23      	adds	r3, r4, #4
 8004b2a:	f020 0007 	bic.w	r0, r0, #7
 8004b2e:	1ac2      	subs	r2, r0, r3
 8004b30:	d0cc      	beq.n	8004acc <_malloc_r+0x20>
 8004b32:	1a1b      	subs	r3, r3, r0
 8004b34:	50a3      	str	r3, [r4, r2]
 8004b36:	e7c9      	b.n	8004acc <_malloc_r+0x20>
 8004b38:	4622      	mov	r2, r4
 8004b3a:	6864      	ldr	r4, [r4, #4]
 8004b3c:	e7cc      	b.n	8004ad8 <_malloc_r+0x2c>
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d0e3      	beq.n	8004b10 <_malloc_r+0x64>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 f896 	bl	8004c7c <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1dd      	bne.n	8004b10 <_malloc_r+0x64>
 8004b54:	e7cf      	b.n	8004af6 <_malloc_r+0x4a>
 8004b56:	bf00      	nop
 8004b58:	2000009c 	.word	0x2000009c
 8004b5c:	200000a0 	.word	0x200000a0

08004b60 <iprintf>:
 8004b60:	b40f      	push	{r0, r1, r2, r3}
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <iprintf+0x2c>)
 8004b64:	b513      	push	{r0, r1, r4, lr}
 8004b66:	681c      	ldr	r4, [r3, #0]
 8004b68:	b124      	cbz	r4, 8004b74 <iprintf+0x14>
 8004b6a:	69a3      	ldr	r3, [r4, #24]
 8004b6c:	b913      	cbnz	r3, 8004b74 <iprintf+0x14>
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 fa6e 	bl	8005050 <__sinit>
 8004b74:	ab05      	add	r3, sp, #20
 8004b76:	9a04      	ldr	r2, [sp, #16]
 8004b78:	68a1      	ldr	r1, [r4, #8]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 fba1 	bl	80052c4 <_vfiprintf_r>
 8004b82:	b002      	add	sp, #8
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	b004      	add	sp, #16
 8004b8a:	4770      	bx	lr
 8004b8c:	20000014 	.word	0x20000014

08004b90 <_puts_r>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	460e      	mov	r6, r1
 8004b94:	4605      	mov	r5, r0
 8004b96:	b118      	cbz	r0, 8004ba0 <_puts_r+0x10>
 8004b98:	6983      	ldr	r3, [r0, #24]
 8004b9a:	b90b      	cbnz	r3, 8004ba0 <_puts_r+0x10>
 8004b9c:	f000 fa58 	bl	8005050 <__sinit>
 8004ba0:	69ab      	ldr	r3, [r5, #24]
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	b913      	cbnz	r3, 8004bac <_puts_r+0x1c>
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 fa52 	bl	8005050 <__sinit>
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <_puts_r+0xd0>)
 8004bae:	429c      	cmp	r4, r3
 8004bb0:	d120      	bne.n	8004bf4 <_puts_r+0x64>
 8004bb2:	686c      	ldr	r4, [r5, #4]
 8004bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bb6:	07db      	lsls	r3, r3, #31
 8004bb8:	d405      	bmi.n	8004bc6 <_puts_r+0x36>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	0598      	lsls	r0, r3, #22
 8004bbe:	d402      	bmi.n	8004bc6 <_puts_r+0x36>
 8004bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc2:	f000 fae3 	bl	800518c <__retarget_lock_acquire_recursive>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	0719      	lsls	r1, r3, #28
 8004bca:	d51d      	bpl.n	8004c08 <_puts_r+0x78>
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	b1db      	cbz	r3, 8004c08 <_puts_r+0x78>
 8004bd0:	3e01      	subs	r6, #1
 8004bd2:	68a3      	ldr	r3, [r4, #8]
 8004bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	bb39      	cbnz	r1, 8004c2e <_puts_r+0x9e>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da38      	bge.n	8004c54 <_puts_r+0xc4>
 8004be2:	4622      	mov	r2, r4
 8004be4:	210a      	movs	r1, #10
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 f858 	bl	8004c9c <__swbuf_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d011      	beq.n	8004c14 <_puts_r+0x84>
 8004bf0:	250a      	movs	r5, #10
 8004bf2:	e011      	b.n	8004c18 <_puts_r+0x88>
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <_puts_r+0xd4>)
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	d101      	bne.n	8004bfe <_puts_r+0x6e>
 8004bfa:	68ac      	ldr	r4, [r5, #8]
 8004bfc:	e7da      	b.n	8004bb4 <_puts_r+0x24>
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <_puts_r+0xd8>)
 8004c00:	429c      	cmp	r4, r3
 8004c02:	bf08      	it	eq
 8004c04:	68ec      	ldreq	r4, [r5, #12]
 8004c06:	e7d5      	b.n	8004bb4 <_puts_r+0x24>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f898 	bl	8004d40 <__swsetup_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0dd      	beq.n	8004bd0 <_puts_r+0x40>
 8004c14:	f04f 35ff 	mov.w	r5, #4294967295
 8004c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c1a:	07da      	lsls	r2, r3, #31
 8004c1c:	d405      	bmi.n	8004c2a <_puts_r+0x9a>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	059b      	lsls	r3, r3, #22
 8004c22:	d402      	bmi.n	8004c2a <_puts_r+0x9a>
 8004c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c26:	f000 fab2 	bl	800518e <__retarget_lock_release_recursive>
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da04      	bge.n	8004c3c <_puts_r+0xac>
 8004c32:	69a2      	ldr	r2, [r4, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	dc06      	bgt.n	8004c46 <_puts_r+0xb6>
 8004c38:	290a      	cmp	r1, #10
 8004c3a:	d004      	beq.n	8004c46 <_puts_r+0xb6>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	6022      	str	r2, [r4, #0]
 8004c42:	7019      	strb	r1, [r3, #0]
 8004c44:	e7c5      	b.n	8004bd2 <_puts_r+0x42>
 8004c46:	4622      	mov	r2, r4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f000 f827 	bl	8004c9c <__swbuf_r>
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d1bf      	bne.n	8004bd2 <_puts_r+0x42>
 8004c52:	e7df      	b.n	8004c14 <_puts_r+0x84>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	250a      	movs	r5, #10
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	701d      	strb	r5, [r3, #0]
 8004c5e:	e7db      	b.n	8004c18 <_puts_r+0x88>
 8004c60:	08005af0 	.word	0x08005af0
 8004c64:	08005b10 	.word	0x08005b10
 8004c68:	08005ad0 	.word	0x08005ad0

08004c6c <puts>:
 8004c6c:	4b02      	ldr	r3, [pc, #8]	; (8004c78 <puts+0xc>)
 8004c6e:	4601      	mov	r1, r0
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f7ff bf8d 	b.w	8004b90 <_puts_r>
 8004c76:	bf00      	nop
 8004c78:	20000014 	.word	0x20000014

08004c7c <_sbrk_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	; (8004c98 <_sbrk_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fc fea2 	bl	80019d0 <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_sbrk_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_sbrk_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	20000434 	.word	0x20000434

08004c9c <__swbuf_r>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	460e      	mov	r6, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	b118      	cbz	r0, 8004cae <__swbuf_r+0x12>
 8004ca6:	6983      	ldr	r3, [r0, #24]
 8004ca8:	b90b      	cbnz	r3, 8004cae <__swbuf_r+0x12>
 8004caa:	f000 f9d1 	bl	8005050 <__sinit>
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <__swbuf_r+0x98>)
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	d12b      	bne.n	8004d0c <__swbuf_r+0x70>
 8004cb4:	686c      	ldr	r4, [r5, #4]
 8004cb6:	69a3      	ldr	r3, [r4, #24]
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	071a      	lsls	r2, r3, #28
 8004cbe:	d52f      	bpl.n	8004d20 <__swbuf_r+0x84>
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	b36b      	cbz	r3, 8004d20 <__swbuf_r+0x84>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1ac0      	subs	r0, r0, r3
 8004cca:	6963      	ldr	r3, [r4, #20]
 8004ccc:	b2f6      	uxtb	r6, r6
 8004cce:	4283      	cmp	r3, r0
 8004cd0:	4637      	mov	r7, r6
 8004cd2:	dc04      	bgt.n	8004cde <__swbuf_r+0x42>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f926 	bl	8004f28 <_fflush_r>
 8004cdc:	bb30      	cbnz	r0, 8004d2c <__swbuf_r+0x90>
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	60a3      	str	r3, [r4, #8]
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	701e      	strb	r6, [r3, #0]
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	3001      	adds	r0, #1
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	d004      	beq.n	8004cfe <__swbuf_r+0x62>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	07db      	lsls	r3, r3, #31
 8004cf8:	d506      	bpl.n	8004d08 <__swbuf_r+0x6c>
 8004cfa:	2e0a      	cmp	r6, #10
 8004cfc:	d104      	bne.n	8004d08 <__swbuf_r+0x6c>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f911 	bl	8004f28 <_fflush_r>
 8004d06:	b988      	cbnz	r0, 8004d2c <__swbuf_r+0x90>
 8004d08:	4638      	mov	r0, r7
 8004d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <__swbuf_r+0x9c>)
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d101      	bne.n	8004d16 <__swbuf_r+0x7a>
 8004d12:	68ac      	ldr	r4, [r5, #8]
 8004d14:	e7cf      	b.n	8004cb6 <__swbuf_r+0x1a>
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <__swbuf_r+0xa0>)
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	bf08      	it	eq
 8004d1c:	68ec      	ldreq	r4, [r5, #12]
 8004d1e:	e7ca      	b.n	8004cb6 <__swbuf_r+0x1a>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 f80c 	bl	8004d40 <__swsetup_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0cb      	beq.n	8004cc4 <__swbuf_r+0x28>
 8004d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d30:	e7ea      	b.n	8004d08 <__swbuf_r+0x6c>
 8004d32:	bf00      	nop
 8004d34:	08005af0 	.word	0x08005af0
 8004d38:	08005b10 	.word	0x08005b10
 8004d3c:	08005ad0 	.word	0x08005ad0

08004d40 <__swsetup_r>:
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <__swsetup_r+0xcc>)
 8004d42:	b570      	push	{r4, r5, r6, lr}
 8004d44:	681d      	ldr	r5, [r3, #0]
 8004d46:	4606      	mov	r6, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	b125      	cbz	r5, 8004d56 <__swsetup_r+0x16>
 8004d4c:	69ab      	ldr	r3, [r5, #24]
 8004d4e:	b913      	cbnz	r3, 8004d56 <__swsetup_r+0x16>
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 f97d 	bl	8005050 <__sinit>
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <__swsetup_r+0xd0>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d10f      	bne.n	8004d7c <__swsetup_r+0x3c>
 8004d5c:	686c      	ldr	r4, [r5, #4]
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d64:	0719      	lsls	r1, r3, #28
 8004d66:	d42c      	bmi.n	8004dc2 <__swsetup_r+0x82>
 8004d68:	06dd      	lsls	r5, r3, #27
 8004d6a:	d411      	bmi.n	8004d90 <__swsetup_r+0x50>
 8004d6c:	2309      	movs	r3, #9
 8004d6e:	6033      	str	r3, [r6, #0]
 8004d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7a:	e03e      	b.n	8004dfa <__swsetup_r+0xba>
 8004d7c:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <__swsetup_r+0xd4>)
 8004d7e:	429c      	cmp	r4, r3
 8004d80:	d101      	bne.n	8004d86 <__swsetup_r+0x46>
 8004d82:	68ac      	ldr	r4, [r5, #8]
 8004d84:	e7eb      	b.n	8004d5e <__swsetup_r+0x1e>
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <__swsetup_r+0xd8>)
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	bf08      	it	eq
 8004d8c:	68ec      	ldreq	r4, [r5, #12]
 8004d8e:	e7e6      	b.n	8004d5e <__swsetup_r+0x1e>
 8004d90:	0758      	lsls	r0, r3, #29
 8004d92:	d512      	bpl.n	8004dba <__swsetup_r+0x7a>
 8004d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d96:	b141      	cbz	r1, 8004daa <__swsetup_r+0x6a>
 8004d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d002      	beq.n	8004da6 <__swsetup_r+0x66>
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fe33 	bl	8004a0c <_free_r>
 8004da6:	2300      	movs	r3, #0
 8004da8:	6363      	str	r3, [r4, #52]	; 0x34
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	2300      	movs	r3, #0
 8004db4:	6063      	str	r3, [r4, #4]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	b94b      	cbnz	r3, 8004dda <__swsetup_r+0x9a>
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d003      	beq.n	8004dda <__swsetup_r+0x9a>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f9ff 	bl	80051d8 <__smakebuf_r>
 8004dda:	89a0      	ldrh	r0, [r4, #12]
 8004ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004de0:	f010 0301 	ands.w	r3, r0, #1
 8004de4:	d00a      	beq.n	8004dfc <__swsetup_r+0xbc>
 8004de6:	2300      	movs	r3, #0
 8004de8:	60a3      	str	r3, [r4, #8]
 8004dea:	6963      	ldr	r3, [r4, #20]
 8004dec:	425b      	negs	r3, r3
 8004dee:	61a3      	str	r3, [r4, #24]
 8004df0:	6923      	ldr	r3, [r4, #16]
 8004df2:	b943      	cbnz	r3, 8004e06 <__swsetup_r+0xc6>
 8004df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004df8:	d1ba      	bne.n	8004d70 <__swsetup_r+0x30>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	0781      	lsls	r1, r0, #30
 8004dfe:	bf58      	it	pl
 8004e00:	6963      	ldrpl	r3, [r4, #20]
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	e7f4      	b.n	8004df0 <__swsetup_r+0xb0>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e7f7      	b.n	8004dfa <__swsetup_r+0xba>
 8004e0a:	bf00      	nop
 8004e0c:	20000014 	.word	0x20000014
 8004e10:	08005af0 	.word	0x08005af0
 8004e14:	08005b10 	.word	0x08005b10
 8004e18:	08005ad0 	.word	0x08005ad0

08004e1c <__sflush_r>:
 8004e1c:	898a      	ldrh	r2, [r1, #12]
 8004e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e22:	4605      	mov	r5, r0
 8004e24:	0710      	lsls	r0, r2, #28
 8004e26:	460c      	mov	r4, r1
 8004e28:	d458      	bmi.n	8004edc <__sflush_r+0xc0>
 8004e2a:	684b      	ldr	r3, [r1, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dc05      	bgt.n	8004e3c <__sflush_r+0x20>
 8004e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	dc02      	bgt.n	8004e3c <__sflush_r+0x20>
 8004e36:	2000      	movs	r0, #0
 8004e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d0f9      	beq.n	8004e36 <__sflush_r+0x1a>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e48:	682f      	ldr	r7, [r5, #0]
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	d032      	beq.n	8004eb4 <__sflush_r+0x98>
 8004e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	075a      	lsls	r2, r3, #29
 8004e54:	d505      	bpl.n	8004e62 <__sflush_r+0x46>
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	1ac0      	subs	r0, r0, r3
 8004e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e5c:	b10b      	cbz	r3, 8004e62 <__sflush_r+0x46>
 8004e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e60:	1ac0      	subs	r0, r0, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	4602      	mov	r2, r0
 8004e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e68:	6a21      	ldr	r1, [r4, #32]
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b0      	blx	r6
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	d106      	bne.n	8004e82 <__sflush_r+0x66>
 8004e74:	6829      	ldr	r1, [r5, #0]
 8004e76:	291d      	cmp	r1, #29
 8004e78:	d82c      	bhi.n	8004ed4 <__sflush_r+0xb8>
 8004e7a:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <__sflush_r+0x108>)
 8004e7c:	40ca      	lsrs	r2, r1
 8004e7e:	07d6      	lsls	r6, r2, #31
 8004e80:	d528      	bpl.n	8004ed4 <__sflush_r+0xb8>
 8004e82:	2200      	movs	r2, #0
 8004e84:	6062      	str	r2, [r4, #4]
 8004e86:	04d9      	lsls	r1, r3, #19
 8004e88:	6922      	ldr	r2, [r4, #16]
 8004e8a:	6022      	str	r2, [r4, #0]
 8004e8c:	d504      	bpl.n	8004e98 <__sflush_r+0x7c>
 8004e8e:	1c42      	adds	r2, r0, #1
 8004e90:	d101      	bne.n	8004e96 <__sflush_r+0x7a>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	b903      	cbnz	r3, 8004e98 <__sflush_r+0x7c>
 8004e96:	6560      	str	r0, [r4, #84]	; 0x54
 8004e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9a:	602f      	str	r7, [r5, #0]
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d0ca      	beq.n	8004e36 <__sflush_r+0x1a>
 8004ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	d002      	beq.n	8004eae <__sflush_r+0x92>
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f7ff fdaf 	bl	8004a0c <_free_r>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004eb2:	e7c1      	b.n	8004e38 <__sflush_r+0x1c>
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b0      	blx	r6
 8004ebc:	1c41      	adds	r1, r0, #1
 8004ebe:	d1c7      	bne.n	8004e50 <__sflush_r+0x34>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0c4      	beq.n	8004e50 <__sflush_r+0x34>
 8004ec6:	2b1d      	cmp	r3, #29
 8004ec8:	d001      	beq.n	8004ece <__sflush_r+0xb2>
 8004eca:	2b16      	cmp	r3, #22
 8004ecc:	d101      	bne.n	8004ed2 <__sflush_r+0xb6>
 8004ece:	602f      	str	r7, [r5, #0]
 8004ed0:	e7b1      	b.n	8004e36 <__sflush_r+0x1a>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	e7ad      	b.n	8004e38 <__sflush_r+0x1c>
 8004edc:	690f      	ldr	r7, [r1, #16]
 8004ede:	2f00      	cmp	r7, #0
 8004ee0:	d0a9      	beq.n	8004e36 <__sflush_r+0x1a>
 8004ee2:	0793      	lsls	r3, r2, #30
 8004ee4:	680e      	ldr	r6, [r1, #0]
 8004ee6:	bf08      	it	eq
 8004ee8:	694b      	ldreq	r3, [r1, #20]
 8004eea:	600f      	str	r7, [r1, #0]
 8004eec:	bf18      	it	ne
 8004eee:	2300      	movne	r3, #0
 8004ef0:	eba6 0807 	sub.w	r8, r6, r7
 8004ef4:	608b      	str	r3, [r1, #8]
 8004ef6:	f1b8 0f00 	cmp.w	r8, #0
 8004efa:	dd9c      	ble.n	8004e36 <__sflush_r+0x1a>
 8004efc:	6a21      	ldr	r1, [r4, #32]
 8004efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f00:	4643      	mov	r3, r8
 8004f02:	463a      	mov	r2, r7
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b0      	blx	r6
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	dc06      	bgt.n	8004f1a <__sflush_r+0xfe>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e78e      	b.n	8004e38 <__sflush_r+0x1c>
 8004f1a:	4407      	add	r7, r0
 8004f1c:	eba8 0800 	sub.w	r8, r8, r0
 8004f20:	e7e9      	b.n	8004ef6 <__sflush_r+0xda>
 8004f22:	bf00      	nop
 8004f24:	20400001 	.word	0x20400001

08004f28 <_fflush_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	690b      	ldr	r3, [r1, #16]
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	b913      	cbnz	r3, 8004f38 <_fflush_r+0x10>
 8004f32:	2500      	movs	r5, #0
 8004f34:	4628      	mov	r0, r5
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	b118      	cbz	r0, 8004f42 <_fflush_r+0x1a>
 8004f3a:	6983      	ldr	r3, [r0, #24]
 8004f3c:	b90b      	cbnz	r3, 8004f42 <_fflush_r+0x1a>
 8004f3e:	f000 f887 	bl	8005050 <__sinit>
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <_fflush_r+0x6c>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	d11b      	bne.n	8004f80 <_fflush_r+0x58>
 8004f48:	686c      	ldr	r4, [r5, #4]
 8004f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0ef      	beq.n	8004f32 <_fflush_r+0xa>
 8004f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f54:	07d0      	lsls	r0, r2, #31
 8004f56:	d404      	bmi.n	8004f62 <_fflush_r+0x3a>
 8004f58:	0599      	lsls	r1, r3, #22
 8004f5a:	d402      	bmi.n	8004f62 <_fflush_r+0x3a>
 8004f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5e:	f000 f915 	bl	800518c <__retarget_lock_acquire_recursive>
 8004f62:	4628      	mov	r0, r5
 8004f64:	4621      	mov	r1, r4
 8004f66:	f7ff ff59 	bl	8004e1c <__sflush_r>
 8004f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f6c:	07da      	lsls	r2, r3, #31
 8004f6e:	4605      	mov	r5, r0
 8004f70:	d4e0      	bmi.n	8004f34 <_fflush_r+0xc>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	059b      	lsls	r3, r3, #22
 8004f76:	d4dd      	bmi.n	8004f34 <_fflush_r+0xc>
 8004f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7a:	f000 f908 	bl	800518e <__retarget_lock_release_recursive>
 8004f7e:	e7d9      	b.n	8004f34 <_fflush_r+0xc>
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <_fflush_r+0x70>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <_fflush_r+0x62>
 8004f86:	68ac      	ldr	r4, [r5, #8]
 8004f88:	e7df      	b.n	8004f4a <_fflush_r+0x22>
 8004f8a:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <_fflush_r+0x74>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68ec      	ldreq	r4, [r5, #12]
 8004f92:	e7da      	b.n	8004f4a <_fflush_r+0x22>
 8004f94:	08005af0 	.word	0x08005af0
 8004f98:	08005b10 	.word	0x08005b10
 8004f9c:	08005ad0 	.word	0x08005ad0

08004fa0 <std>:
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fae:	6083      	str	r3, [r0, #8]
 8004fb0:	8181      	strh	r1, [r0, #12]
 8004fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fb4:	81c2      	strh	r2, [r0, #14]
 8004fb6:	6183      	str	r3, [r0, #24]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	2208      	movs	r2, #8
 8004fbc:	305c      	adds	r0, #92	; 0x5c
 8004fbe:	f7ff fd1d 	bl	80049fc <memset>
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <std+0x38>)
 8004fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <std+0x3c>)
 8004fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <std+0x40>)
 8004fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <std+0x44>)
 8004fd0:	6224      	str	r4, [r4, #32]
 8004fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	bf00      	nop
 8004fd8:	0800584d 	.word	0x0800584d
 8004fdc:	0800586f 	.word	0x0800586f
 8004fe0:	080058a7 	.word	0x080058a7
 8004fe4:	080058cb 	.word	0x080058cb

08004fe8 <_cleanup_r>:
 8004fe8:	4901      	ldr	r1, [pc, #4]	; (8004ff0 <_cleanup_r+0x8>)
 8004fea:	f000 b8af 	b.w	800514c <_fwalk_reent>
 8004fee:	bf00      	nop
 8004ff0:	08004f29 	.word	0x08004f29

08004ff4 <__sfmoreglue>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	1e4a      	subs	r2, r1, #1
 8004ff8:	2568      	movs	r5, #104	; 0x68
 8004ffa:	4355      	muls	r5, r2
 8004ffc:	460e      	mov	r6, r1
 8004ffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005002:	f7ff fd53 	bl	8004aac <_malloc_r>
 8005006:	4604      	mov	r4, r0
 8005008:	b140      	cbz	r0, 800501c <__sfmoreglue+0x28>
 800500a:	2100      	movs	r1, #0
 800500c:	e9c0 1600 	strd	r1, r6, [r0]
 8005010:	300c      	adds	r0, #12
 8005012:	60a0      	str	r0, [r4, #8]
 8005014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005018:	f7ff fcf0 	bl	80049fc <memset>
 800501c:	4620      	mov	r0, r4
 800501e:	bd70      	pop	{r4, r5, r6, pc}

08005020 <__sfp_lock_acquire>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__sfp_lock_acquire+0x8>)
 8005022:	f000 b8b3 	b.w	800518c <__retarget_lock_acquire_recursive>
 8005026:	bf00      	nop
 8005028:	20000430 	.word	0x20000430

0800502c <__sfp_lock_release>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__sfp_lock_release+0x8>)
 800502e:	f000 b8ae 	b.w	800518e <__retarget_lock_release_recursive>
 8005032:	bf00      	nop
 8005034:	20000430 	.word	0x20000430

08005038 <__sinit_lock_acquire>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__sinit_lock_acquire+0x8>)
 800503a:	f000 b8a7 	b.w	800518c <__retarget_lock_acquire_recursive>
 800503e:	bf00      	nop
 8005040:	2000042b 	.word	0x2000042b

08005044 <__sinit_lock_release>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__sinit_lock_release+0x8>)
 8005046:	f000 b8a2 	b.w	800518e <__retarget_lock_release_recursive>
 800504a:	bf00      	nop
 800504c:	2000042b 	.word	0x2000042b

08005050 <__sinit>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4604      	mov	r4, r0
 8005054:	f7ff fff0 	bl	8005038 <__sinit_lock_acquire>
 8005058:	69a3      	ldr	r3, [r4, #24]
 800505a:	b11b      	cbz	r3, 8005064 <__sinit+0x14>
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	f7ff bff0 	b.w	8005044 <__sinit_lock_release>
 8005064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005068:	6523      	str	r3, [r4, #80]	; 0x50
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <__sinit+0x68>)
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <__sinit+0x6c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	62a2      	str	r2, [r4, #40]	; 0x28
 8005072:	42a3      	cmp	r3, r4
 8005074:	bf04      	itt	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	61a3      	streq	r3, [r4, #24]
 800507a:	4620      	mov	r0, r4
 800507c:	f000 f820 	bl	80050c0 <__sfp>
 8005080:	6060      	str	r0, [r4, #4]
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f81c 	bl	80050c0 <__sfp>
 8005088:	60a0      	str	r0, [r4, #8]
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f818 	bl	80050c0 <__sfp>
 8005090:	2200      	movs	r2, #0
 8005092:	60e0      	str	r0, [r4, #12]
 8005094:	2104      	movs	r1, #4
 8005096:	6860      	ldr	r0, [r4, #4]
 8005098:	f7ff ff82 	bl	8004fa0 <std>
 800509c:	68a0      	ldr	r0, [r4, #8]
 800509e:	2201      	movs	r2, #1
 80050a0:	2109      	movs	r1, #9
 80050a2:	f7ff ff7d 	bl	8004fa0 <std>
 80050a6:	68e0      	ldr	r0, [r4, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff ff78 	bl	8004fa0 <std>
 80050b0:	2301      	movs	r3, #1
 80050b2:	61a3      	str	r3, [r4, #24]
 80050b4:	e7d2      	b.n	800505c <__sinit+0xc>
 80050b6:	bf00      	nop
 80050b8:	08005acc 	.word	0x08005acc
 80050bc:	08004fe9 	.word	0x08004fe9

080050c0 <__sfp>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	4607      	mov	r7, r0
 80050c4:	f7ff ffac 	bl	8005020 <__sfp_lock_acquire>
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <__sfp+0x84>)
 80050ca:	681e      	ldr	r6, [r3, #0]
 80050cc:	69b3      	ldr	r3, [r6, #24]
 80050ce:	b913      	cbnz	r3, 80050d6 <__sfp+0x16>
 80050d0:	4630      	mov	r0, r6
 80050d2:	f7ff ffbd 	bl	8005050 <__sinit>
 80050d6:	3648      	adds	r6, #72	; 0x48
 80050d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050dc:	3b01      	subs	r3, #1
 80050de:	d503      	bpl.n	80050e8 <__sfp+0x28>
 80050e0:	6833      	ldr	r3, [r6, #0]
 80050e2:	b30b      	cbz	r3, 8005128 <__sfp+0x68>
 80050e4:	6836      	ldr	r6, [r6, #0]
 80050e6:	e7f7      	b.n	80050d8 <__sfp+0x18>
 80050e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050ec:	b9d5      	cbnz	r5, 8005124 <__sfp+0x64>
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <__sfp+0x88>)
 80050f0:	60e3      	str	r3, [r4, #12]
 80050f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050f6:	6665      	str	r5, [r4, #100]	; 0x64
 80050f8:	f000 f847 	bl	800518a <__retarget_lock_init_recursive>
 80050fc:	f7ff ff96 	bl	800502c <__sfp_lock_release>
 8005100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005108:	6025      	str	r5, [r4, #0]
 800510a:	61a5      	str	r5, [r4, #24]
 800510c:	2208      	movs	r2, #8
 800510e:	4629      	mov	r1, r5
 8005110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005114:	f7ff fc72 	bl	80049fc <memset>
 8005118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800511c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005120:	4620      	mov	r0, r4
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	3468      	adds	r4, #104	; 0x68
 8005126:	e7d9      	b.n	80050dc <__sfp+0x1c>
 8005128:	2104      	movs	r1, #4
 800512a:	4638      	mov	r0, r7
 800512c:	f7ff ff62 	bl	8004ff4 <__sfmoreglue>
 8005130:	4604      	mov	r4, r0
 8005132:	6030      	str	r0, [r6, #0]
 8005134:	2800      	cmp	r0, #0
 8005136:	d1d5      	bne.n	80050e4 <__sfp+0x24>
 8005138:	f7ff ff78 	bl	800502c <__sfp_lock_release>
 800513c:	230c      	movs	r3, #12
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	e7ee      	b.n	8005120 <__sfp+0x60>
 8005142:	bf00      	nop
 8005144:	08005acc 	.word	0x08005acc
 8005148:	ffff0001 	.word	0xffff0001

0800514c <_fwalk_reent>:
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	4606      	mov	r6, r0
 8005152:	4688      	mov	r8, r1
 8005154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005158:	2700      	movs	r7, #0
 800515a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800515e:	f1b9 0901 	subs.w	r9, r9, #1
 8005162:	d505      	bpl.n	8005170 <_fwalk_reent+0x24>
 8005164:	6824      	ldr	r4, [r4, #0]
 8005166:	2c00      	cmp	r4, #0
 8005168:	d1f7      	bne.n	800515a <_fwalk_reent+0xe>
 800516a:	4638      	mov	r0, r7
 800516c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005170:	89ab      	ldrh	r3, [r5, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d907      	bls.n	8005186 <_fwalk_reent+0x3a>
 8005176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800517a:	3301      	adds	r3, #1
 800517c:	d003      	beq.n	8005186 <_fwalk_reent+0x3a>
 800517e:	4629      	mov	r1, r5
 8005180:	4630      	mov	r0, r6
 8005182:	47c0      	blx	r8
 8005184:	4307      	orrs	r7, r0
 8005186:	3568      	adds	r5, #104	; 0x68
 8005188:	e7e9      	b.n	800515e <_fwalk_reent+0x12>

0800518a <__retarget_lock_init_recursive>:
 800518a:	4770      	bx	lr

0800518c <__retarget_lock_acquire_recursive>:
 800518c:	4770      	bx	lr

0800518e <__retarget_lock_release_recursive>:
 800518e:	4770      	bx	lr

08005190 <__swhatbuf_r>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	460e      	mov	r6, r1
 8005194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005198:	2900      	cmp	r1, #0
 800519a:	b096      	sub	sp, #88	; 0x58
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	da07      	bge.n	80051b2 <__swhatbuf_r+0x22>
 80051a2:	2300      	movs	r3, #0
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	89b3      	ldrh	r3, [r6, #12]
 80051a8:	061a      	lsls	r2, r3, #24
 80051aa:	d410      	bmi.n	80051ce <__swhatbuf_r+0x3e>
 80051ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b0:	e00e      	b.n	80051d0 <__swhatbuf_r+0x40>
 80051b2:	466a      	mov	r2, sp
 80051b4:	f000 fbb0 	bl	8005918 <_fstat_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	dbf2      	blt.n	80051a2 <__swhatbuf_r+0x12>
 80051bc:	9a01      	ldr	r2, [sp, #4]
 80051be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051c6:	425a      	negs	r2, r3
 80051c8:	415a      	adcs	r2, r3
 80051ca:	602a      	str	r2, [r5, #0]
 80051cc:	e7ee      	b.n	80051ac <__swhatbuf_r+0x1c>
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	2000      	movs	r0, #0
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	b016      	add	sp, #88	; 0x58
 80051d6:	bd70      	pop	{r4, r5, r6, pc}

080051d8 <__smakebuf_r>:
 80051d8:	898b      	ldrh	r3, [r1, #12]
 80051da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051dc:	079d      	lsls	r5, r3, #30
 80051de:	4606      	mov	r6, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	d507      	bpl.n	80051f4 <__smakebuf_r+0x1c>
 80051e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	2301      	movs	r3, #1
 80051ee:	6163      	str	r3, [r4, #20]
 80051f0:	b002      	add	sp, #8
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	ab01      	add	r3, sp, #4
 80051f6:	466a      	mov	r2, sp
 80051f8:	f7ff ffca 	bl	8005190 <__swhatbuf_r>
 80051fc:	9900      	ldr	r1, [sp, #0]
 80051fe:	4605      	mov	r5, r0
 8005200:	4630      	mov	r0, r6
 8005202:	f7ff fc53 	bl	8004aac <_malloc_r>
 8005206:	b948      	cbnz	r0, 800521c <__smakebuf_r+0x44>
 8005208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520c:	059a      	lsls	r2, r3, #22
 800520e:	d4ef      	bmi.n	80051f0 <__smakebuf_r+0x18>
 8005210:	f023 0303 	bic.w	r3, r3, #3
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	e7e3      	b.n	80051e4 <__smakebuf_r+0xc>
 800521c:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <__smakebuf_r+0x7c>)
 800521e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005228:	81a3      	strh	r3, [r4, #12]
 800522a:	9b00      	ldr	r3, [sp, #0]
 800522c:	6163      	str	r3, [r4, #20]
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	6120      	str	r0, [r4, #16]
 8005232:	b15b      	cbz	r3, 800524c <__smakebuf_r+0x74>
 8005234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005238:	4630      	mov	r0, r6
 800523a:	f000 fb7f 	bl	800593c <_isatty_r>
 800523e:	b128      	cbz	r0, 800524c <__smakebuf_r+0x74>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	89a0      	ldrh	r0, [r4, #12]
 800524e:	4305      	orrs	r5, r0
 8005250:	81a5      	strh	r5, [r4, #12]
 8005252:	e7cd      	b.n	80051f0 <__smakebuf_r+0x18>
 8005254:	08004fe9 	.word	0x08004fe9

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_lock+0x8>)
 800525a:	f7ff bf97 	b.w	800518c <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	2000042c 	.word	0x2000042c

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_unlock+0x8>)
 8005266:	f7ff bf92 	b.w	800518e <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	2000042c 	.word	0x2000042c

08005270 <__sfputc_r>:
 8005270:	6893      	ldr	r3, [r2, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	b410      	push	{r4}
 8005278:	6093      	str	r3, [r2, #8]
 800527a:	da08      	bge.n	800528e <__sfputc_r+0x1e>
 800527c:	6994      	ldr	r4, [r2, #24]
 800527e:	42a3      	cmp	r3, r4
 8005280:	db01      	blt.n	8005286 <__sfputc_r+0x16>
 8005282:	290a      	cmp	r1, #10
 8005284:	d103      	bne.n	800528e <__sfputc_r+0x1e>
 8005286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800528a:	f7ff bd07 	b.w	8004c9c <__swbuf_r>
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	1c58      	adds	r0, r3, #1
 8005292:	6010      	str	r0, [r2, #0]
 8005294:	7019      	strb	r1, [r3, #0]
 8005296:	4608      	mov	r0, r1
 8005298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800529c:	4770      	bx	lr

0800529e <__sfputs_r>:
 800529e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	4614      	mov	r4, r2
 80052a6:	18d5      	adds	r5, r2, r3
 80052a8:	42ac      	cmp	r4, r5
 80052aa:	d101      	bne.n	80052b0 <__sfputs_r+0x12>
 80052ac:	2000      	movs	r0, #0
 80052ae:	e007      	b.n	80052c0 <__sfputs_r+0x22>
 80052b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b4:	463a      	mov	r2, r7
 80052b6:	4630      	mov	r0, r6
 80052b8:	f7ff ffda 	bl	8005270 <__sfputc_r>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d1f3      	bne.n	80052a8 <__sfputs_r+0xa>
 80052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052c4 <_vfiprintf_r>:
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	460d      	mov	r5, r1
 80052ca:	b09d      	sub	sp, #116	; 0x74
 80052cc:	4614      	mov	r4, r2
 80052ce:	4698      	mov	r8, r3
 80052d0:	4606      	mov	r6, r0
 80052d2:	b118      	cbz	r0, 80052dc <_vfiprintf_r+0x18>
 80052d4:	6983      	ldr	r3, [r0, #24]
 80052d6:	b90b      	cbnz	r3, 80052dc <_vfiprintf_r+0x18>
 80052d8:	f7ff feba 	bl	8005050 <__sinit>
 80052dc:	4b89      	ldr	r3, [pc, #548]	; (8005504 <_vfiprintf_r+0x240>)
 80052de:	429d      	cmp	r5, r3
 80052e0:	d11b      	bne.n	800531a <_vfiprintf_r+0x56>
 80052e2:	6875      	ldr	r5, [r6, #4]
 80052e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052e6:	07d9      	lsls	r1, r3, #31
 80052e8:	d405      	bmi.n	80052f6 <_vfiprintf_r+0x32>
 80052ea:	89ab      	ldrh	r3, [r5, #12]
 80052ec:	059a      	lsls	r2, r3, #22
 80052ee:	d402      	bmi.n	80052f6 <_vfiprintf_r+0x32>
 80052f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052f2:	f7ff ff4b 	bl	800518c <__retarget_lock_acquire_recursive>
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	d501      	bpl.n	8005300 <_vfiprintf_r+0x3c>
 80052fc:	692b      	ldr	r3, [r5, #16]
 80052fe:	b9eb      	cbnz	r3, 800533c <_vfiprintf_r+0x78>
 8005300:	4629      	mov	r1, r5
 8005302:	4630      	mov	r0, r6
 8005304:	f7ff fd1c 	bl	8004d40 <__swsetup_r>
 8005308:	b1c0      	cbz	r0, 800533c <_vfiprintf_r+0x78>
 800530a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800530c:	07dc      	lsls	r4, r3, #31
 800530e:	d50e      	bpl.n	800532e <_vfiprintf_r+0x6a>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	b01d      	add	sp, #116	; 0x74
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	4b7b      	ldr	r3, [pc, #492]	; (8005508 <_vfiprintf_r+0x244>)
 800531c:	429d      	cmp	r5, r3
 800531e:	d101      	bne.n	8005324 <_vfiprintf_r+0x60>
 8005320:	68b5      	ldr	r5, [r6, #8]
 8005322:	e7df      	b.n	80052e4 <_vfiprintf_r+0x20>
 8005324:	4b79      	ldr	r3, [pc, #484]	; (800550c <_vfiprintf_r+0x248>)
 8005326:	429d      	cmp	r5, r3
 8005328:	bf08      	it	eq
 800532a:	68f5      	ldreq	r5, [r6, #12]
 800532c:	e7da      	b.n	80052e4 <_vfiprintf_r+0x20>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	0598      	lsls	r0, r3, #22
 8005332:	d4ed      	bmi.n	8005310 <_vfiprintf_r+0x4c>
 8005334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005336:	f7ff ff2a 	bl	800518e <__retarget_lock_release_recursive>
 800533a:	e7e9      	b.n	8005310 <_vfiprintf_r+0x4c>
 800533c:	2300      	movs	r3, #0
 800533e:	9309      	str	r3, [sp, #36]	; 0x24
 8005340:	2320      	movs	r3, #32
 8005342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005346:	f8cd 800c 	str.w	r8, [sp, #12]
 800534a:	2330      	movs	r3, #48	; 0x30
 800534c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005510 <_vfiprintf_r+0x24c>
 8005350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005354:	f04f 0901 	mov.w	r9, #1
 8005358:	4623      	mov	r3, r4
 800535a:	469a      	mov	sl, r3
 800535c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005360:	b10a      	cbz	r2, 8005366 <_vfiprintf_r+0xa2>
 8005362:	2a25      	cmp	r2, #37	; 0x25
 8005364:	d1f9      	bne.n	800535a <_vfiprintf_r+0x96>
 8005366:	ebba 0b04 	subs.w	fp, sl, r4
 800536a:	d00b      	beq.n	8005384 <_vfiprintf_r+0xc0>
 800536c:	465b      	mov	r3, fp
 800536e:	4622      	mov	r2, r4
 8005370:	4629      	mov	r1, r5
 8005372:	4630      	mov	r0, r6
 8005374:	f7ff ff93 	bl	800529e <__sfputs_r>
 8005378:	3001      	adds	r0, #1
 800537a:	f000 80aa 	beq.w	80054d2 <_vfiprintf_r+0x20e>
 800537e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005380:	445a      	add	r2, fp
 8005382:	9209      	str	r2, [sp, #36]	; 0x24
 8005384:	f89a 3000 	ldrb.w	r3, [sl]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a2 	beq.w	80054d2 <_vfiprintf_r+0x20e>
 800538e:	2300      	movs	r3, #0
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005398:	f10a 0a01 	add.w	sl, sl, #1
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053a4:	931a      	str	r3, [sp, #104]	; 0x68
 80053a6:	4654      	mov	r4, sl
 80053a8:	2205      	movs	r2, #5
 80053aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ae:	4858      	ldr	r0, [pc, #352]	; (8005510 <_vfiprintf_r+0x24c>)
 80053b0:	f7fa ff16 	bl	80001e0 <memchr>
 80053b4:	9a04      	ldr	r2, [sp, #16]
 80053b6:	b9d8      	cbnz	r0, 80053f0 <_vfiprintf_r+0x12c>
 80053b8:	06d1      	lsls	r1, r2, #27
 80053ba:	bf44      	itt	mi
 80053bc:	2320      	movmi	r3, #32
 80053be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c2:	0713      	lsls	r3, r2, #28
 80053c4:	bf44      	itt	mi
 80053c6:	232b      	movmi	r3, #43	; 0x2b
 80053c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053cc:	f89a 3000 	ldrb.w	r3, [sl]
 80053d0:	2b2a      	cmp	r3, #42	; 0x2a
 80053d2:	d015      	beq.n	8005400 <_vfiprintf_r+0x13c>
 80053d4:	9a07      	ldr	r2, [sp, #28]
 80053d6:	4654      	mov	r4, sl
 80053d8:	2000      	movs	r0, #0
 80053da:	f04f 0c0a 	mov.w	ip, #10
 80053de:	4621      	mov	r1, r4
 80053e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053e4:	3b30      	subs	r3, #48	; 0x30
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	d94e      	bls.n	8005488 <_vfiprintf_r+0x1c4>
 80053ea:	b1b0      	cbz	r0, 800541a <_vfiprintf_r+0x156>
 80053ec:	9207      	str	r2, [sp, #28]
 80053ee:	e014      	b.n	800541a <_vfiprintf_r+0x156>
 80053f0:	eba0 0308 	sub.w	r3, r0, r8
 80053f4:	fa09 f303 	lsl.w	r3, r9, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	46a2      	mov	sl, r4
 80053fe:	e7d2      	b.n	80053a6 <_vfiprintf_r+0xe2>
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	1d19      	adds	r1, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfbb      	ittet	lt
 800540c:	425b      	neglt	r3, r3
 800540e:	f042 0202 	orrlt.w	r2, r2, #2
 8005412:	9307      	strge	r3, [sp, #28]
 8005414:	9307      	strlt	r3, [sp, #28]
 8005416:	bfb8      	it	lt
 8005418:	9204      	strlt	r2, [sp, #16]
 800541a:	7823      	ldrb	r3, [r4, #0]
 800541c:	2b2e      	cmp	r3, #46	; 0x2e
 800541e:	d10c      	bne.n	800543a <_vfiprintf_r+0x176>
 8005420:	7863      	ldrb	r3, [r4, #1]
 8005422:	2b2a      	cmp	r3, #42	; 0x2a
 8005424:	d135      	bne.n	8005492 <_vfiprintf_r+0x1ce>
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	9203      	str	r2, [sp, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	bfb8      	it	lt
 8005432:	f04f 33ff 	movlt.w	r3, #4294967295
 8005436:	3402      	adds	r4, #2
 8005438:	9305      	str	r3, [sp, #20]
 800543a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005520 <_vfiprintf_r+0x25c>
 800543e:	7821      	ldrb	r1, [r4, #0]
 8005440:	2203      	movs	r2, #3
 8005442:	4650      	mov	r0, sl
 8005444:	f7fa fecc 	bl	80001e0 <memchr>
 8005448:	b140      	cbz	r0, 800545c <_vfiprintf_r+0x198>
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	eba0 000a 	sub.w	r0, r0, sl
 8005450:	fa03 f000 	lsl.w	r0, r3, r0
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	4303      	orrs	r3, r0
 8005458:	3401      	adds	r4, #1
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005460:	482c      	ldr	r0, [pc, #176]	; (8005514 <_vfiprintf_r+0x250>)
 8005462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005466:	2206      	movs	r2, #6
 8005468:	f7fa feba 	bl	80001e0 <memchr>
 800546c:	2800      	cmp	r0, #0
 800546e:	d03f      	beq.n	80054f0 <_vfiprintf_r+0x22c>
 8005470:	4b29      	ldr	r3, [pc, #164]	; (8005518 <_vfiprintf_r+0x254>)
 8005472:	bb1b      	cbnz	r3, 80054bc <_vfiprintf_r+0x1f8>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	3307      	adds	r3, #7
 8005478:	f023 0307 	bic.w	r3, r3, #7
 800547c:	3308      	adds	r3, #8
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005482:	443b      	add	r3, r7
 8005484:	9309      	str	r3, [sp, #36]	; 0x24
 8005486:	e767      	b.n	8005358 <_vfiprintf_r+0x94>
 8005488:	fb0c 3202 	mla	r2, ip, r2, r3
 800548c:	460c      	mov	r4, r1
 800548e:	2001      	movs	r0, #1
 8005490:	e7a5      	b.n	80053de <_vfiprintf_r+0x11a>
 8005492:	2300      	movs	r3, #0
 8005494:	3401      	adds	r4, #1
 8005496:	9305      	str	r3, [sp, #20]
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 0c0a 	mov.w	ip, #10
 800549e:	4620      	mov	r0, r4
 80054a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a4:	3a30      	subs	r2, #48	; 0x30
 80054a6:	2a09      	cmp	r2, #9
 80054a8:	d903      	bls.n	80054b2 <_vfiprintf_r+0x1ee>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0c5      	beq.n	800543a <_vfiprintf_r+0x176>
 80054ae:	9105      	str	r1, [sp, #20]
 80054b0:	e7c3      	b.n	800543a <_vfiprintf_r+0x176>
 80054b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b6:	4604      	mov	r4, r0
 80054b8:	2301      	movs	r3, #1
 80054ba:	e7f0      	b.n	800549e <_vfiprintf_r+0x1da>
 80054bc:	ab03      	add	r3, sp, #12
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	462a      	mov	r2, r5
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <_vfiprintf_r+0x258>)
 80054c4:	a904      	add	r1, sp, #16
 80054c6:	4630      	mov	r0, r6
 80054c8:	f3af 8000 	nop.w
 80054cc:	4607      	mov	r7, r0
 80054ce:	1c78      	adds	r0, r7, #1
 80054d0:	d1d6      	bne.n	8005480 <_vfiprintf_r+0x1bc>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d4:	07d9      	lsls	r1, r3, #31
 80054d6:	d405      	bmi.n	80054e4 <_vfiprintf_r+0x220>
 80054d8:	89ab      	ldrh	r3, [r5, #12]
 80054da:	059a      	lsls	r2, r3, #22
 80054dc:	d402      	bmi.n	80054e4 <_vfiprintf_r+0x220>
 80054de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e0:	f7ff fe55 	bl	800518e <__retarget_lock_release_recursive>
 80054e4:	89ab      	ldrh	r3, [r5, #12]
 80054e6:	065b      	lsls	r3, r3, #25
 80054e8:	f53f af12 	bmi.w	8005310 <_vfiprintf_r+0x4c>
 80054ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ee:	e711      	b.n	8005314 <_vfiprintf_r+0x50>
 80054f0:	ab03      	add	r3, sp, #12
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	462a      	mov	r2, r5
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <_vfiprintf_r+0x258>)
 80054f8:	a904      	add	r1, sp, #16
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f880 	bl	8005600 <_printf_i>
 8005500:	e7e4      	b.n	80054cc <_vfiprintf_r+0x208>
 8005502:	bf00      	nop
 8005504:	08005af0 	.word	0x08005af0
 8005508:	08005b10 	.word	0x08005b10
 800550c:	08005ad0 	.word	0x08005ad0
 8005510:	08005b30 	.word	0x08005b30
 8005514:	08005b3a 	.word	0x08005b3a
 8005518:	00000000 	.word	0x00000000
 800551c:	0800529f 	.word	0x0800529f
 8005520:	08005b36 	.word	0x08005b36

08005524 <_printf_common>:
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	4616      	mov	r6, r2
 800552a:	4699      	mov	r9, r3
 800552c:	688a      	ldr	r2, [r1, #8]
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005534:	4293      	cmp	r3, r2
 8005536:	bfb8      	it	lt
 8005538:	4613      	movlt	r3, r2
 800553a:	6033      	str	r3, [r6, #0]
 800553c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005540:	4607      	mov	r7, r0
 8005542:	460c      	mov	r4, r1
 8005544:	b10a      	cbz	r2, 800554a <_printf_common+0x26>
 8005546:	3301      	adds	r3, #1
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	0699      	lsls	r1, r3, #26
 800554e:	bf42      	ittt	mi
 8005550:	6833      	ldrmi	r3, [r6, #0]
 8005552:	3302      	addmi	r3, #2
 8005554:	6033      	strmi	r3, [r6, #0]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d106      	bne.n	800556c <_printf_common+0x48>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	6832      	ldr	r2, [r6, #0]
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	42ab      	cmp	r3, r5
 800556a:	dc26      	bgt.n	80055ba <_printf_common+0x96>
 800556c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005570:	1e13      	subs	r3, r2, #0
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	2301      	movne	r3, #1
 8005578:	0692      	lsls	r2, r2, #26
 800557a:	d42b      	bmi.n	80055d4 <_printf_common+0xb0>
 800557c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005580:	4649      	mov	r1, r9
 8005582:	4638      	mov	r0, r7
 8005584:	47c0      	blx	r8
 8005586:	3001      	adds	r0, #1
 8005588:	d01e      	beq.n	80055c8 <_printf_common+0xa4>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	68e5      	ldr	r5, [r4, #12]
 800558e:	6832      	ldr	r2, [r6, #0]
 8005590:	f003 0306 	and.w	r3, r3, #6
 8005594:	2b04      	cmp	r3, #4
 8005596:	bf08      	it	eq
 8005598:	1aad      	subeq	r5, r5, r2
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	bf0c      	ite	eq
 80055a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a4:	2500      	movne	r5, #0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	bfc4      	itt	gt
 80055aa:	1a9b      	subgt	r3, r3, r2
 80055ac:	18ed      	addgt	r5, r5, r3
 80055ae:	2600      	movs	r6, #0
 80055b0:	341a      	adds	r4, #26
 80055b2:	42b5      	cmp	r5, r6
 80055b4:	d11a      	bne.n	80055ec <_printf_common+0xc8>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e008      	b.n	80055cc <_printf_common+0xa8>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4652      	mov	r2, sl
 80055be:	4649      	mov	r1, r9
 80055c0:	4638      	mov	r0, r7
 80055c2:	47c0      	blx	r8
 80055c4:	3001      	adds	r0, #1
 80055c6:	d103      	bne.n	80055d0 <_printf_common+0xac>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7c6      	b.n	8005562 <_printf_common+0x3e>
 80055d4:	18e1      	adds	r1, r4, r3
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	2030      	movs	r0, #48	; 0x30
 80055da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055de:	4422      	add	r2, r4
 80055e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e8:	3302      	adds	r3, #2
 80055ea:	e7c7      	b.n	800557c <_printf_common+0x58>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4622      	mov	r2, r4
 80055f0:	4649      	mov	r1, r9
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0e6      	beq.n	80055c8 <_printf_common+0xa4>
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7d9      	b.n	80055b2 <_printf_common+0x8e>
	...

08005600 <_printf_i>:
 8005600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	4691      	mov	r9, r2
 8005608:	7e27      	ldrb	r7, [r4, #24]
 800560a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800560c:	2f78      	cmp	r7, #120	; 0x78
 800560e:	4680      	mov	r8, r0
 8005610:	469a      	mov	sl, r3
 8005612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005616:	d807      	bhi.n	8005628 <_printf_i+0x28>
 8005618:	2f62      	cmp	r7, #98	; 0x62
 800561a:	d80a      	bhi.n	8005632 <_printf_i+0x32>
 800561c:	2f00      	cmp	r7, #0
 800561e:	f000 80d8 	beq.w	80057d2 <_printf_i+0x1d2>
 8005622:	2f58      	cmp	r7, #88	; 0x58
 8005624:	f000 80a3 	beq.w	800576e <_printf_i+0x16e>
 8005628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800562c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005630:	e03a      	b.n	80056a8 <_printf_i+0xa8>
 8005632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005636:	2b15      	cmp	r3, #21
 8005638:	d8f6      	bhi.n	8005628 <_printf_i+0x28>
 800563a:	a001      	add	r0, pc, #4	; (adr r0, 8005640 <_printf_i+0x40>)
 800563c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005640:	08005699 	.word	0x08005699
 8005644:	080056ad 	.word	0x080056ad
 8005648:	08005629 	.word	0x08005629
 800564c:	08005629 	.word	0x08005629
 8005650:	08005629 	.word	0x08005629
 8005654:	08005629 	.word	0x08005629
 8005658:	080056ad 	.word	0x080056ad
 800565c:	08005629 	.word	0x08005629
 8005660:	08005629 	.word	0x08005629
 8005664:	08005629 	.word	0x08005629
 8005668:	08005629 	.word	0x08005629
 800566c:	080057b9 	.word	0x080057b9
 8005670:	080056dd 	.word	0x080056dd
 8005674:	0800579b 	.word	0x0800579b
 8005678:	08005629 	.word	0x08005629
 800567c:	08005629 	.word	0x08005629
 8005680:	080057db 	.word	0x080057db
 8005684:	08005629 	.word	0x08005629
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005629 	.word	0x08005629
 8005690:	08005629 	.word	0x08005629
 8005694:	080057a3 	.word	0x080057a3
 8005698:	680b      	ldr	r3, [r1, #0]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	600a      	str	r2, [r1, #0]
 80056a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a3      	b.n	80057f4 <_printf_i+0x1f4>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	6808      	ldr	r0, [r1, #0]
 80056b0:	062e      	lsls	r6, r5, #24
 80056b2:	f100 0304 	add.w	r3, r0, #4
 80056b6:	d50a      	bpl.n	80056ce <_printf_i+0xce>
 80056b8:	6805      	ldr	r5, [r0, #0]
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	2d00      	cmp	r5, #0
 80056be:	da03      	bge.n	80056c8 <_printf_i+0xc8>
 80056c0:	232d      	movs	r3, #45	; 0x2d
 80056c2:	426d      	negs	r5, r5
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c8:	485e      	ldr	r0, [pc, #376]	; (8005844 <_printf_i+0x244>)
 80056ca:	230a      	movs	r3, #10
 80056cc:	e019      	b.n	8005702 <_printf_i+0x102>
 80056ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056d2:	6805      	ldr	r5, [r0, #0]
 80056d4:	600b      	str	r3, [r1, #0]
 80056d6:	bf18      	it	ne
 80056d8:	b22d      	sxthne	r5, r5
 80056da:	e7ef      	b.n	80056bc <_printf_i+0xbc>
 80056dc:	680b      	ldr	r3, [r1, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	1d18      	adds	r0, r3, #4
 80056e2:	6008      	str	r0, [r1, #0]
 80056e4:	0628      	lsls	r0, r5, #24
 80056e6:	d501      	bpl.n	80056ec <_printf_i+0xec>
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <_printf_i+0xf2>
 80056ec:	0669      	lsls	r1, r5, #25
 80056ee:	d5fb      	bpl.n	80056e8 <_printf_i+0xe8>
 80056f0:	881d      	ldrh	r5, [r3, #0]
 80056f2:	4854      	ldr	r0, [pc, #336]	; (8005844 <_printf_i+0x244>)
 80056f4:	2f6f      	cmp	r7, #111	; 0x6f
 80056f6:	bf0c      	ite	eq
 80056f8:	2308      	moveq	r3, #8
 80056fa:	230a      	movne	r3, #10
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005702:	6866      	ldr	r6, [r4, #4]
 8005704:	60a6      	str	r6, [r4, #8]
 8005706:	2e00      	cmp	r6, #0
 8005708:	bfa2      	ittt	ge
 800570a:	6821      	ldrge	r1, [r4, #0]
 800570c:	f021 0104 	bicge.w	r1, r1, #4
 8005710:	6021      	strge	r1, [r4, #0]
 8005712:	b90d      	cbnz	r5, 8005718 <_printf_i+0x118>
 8005714:	2e00      	cmp	r6, #0
 8005716:	d04d      	beq.n	80057b4 <_printf_i+0x1b4>
 8005718:	4616      	mov	r6, r2
 800571a:	fbb5 f1f3 	udiv	r1, r5, r3
 800571e:	fb03 5711 	mls	r7, r3, r1, r5
 8005722:	5dc7      	ldrb	r7, [r0, r7]
 8005724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005728:	462f      	mov	r7, r5
 800572a:	42bb      	cmp	r3, r7
 800572c:	460d      	mov	r5, r1
 800572e:	d9f4      	bls.n	800571a <_printf_i+0x11a>
 8005730:	2b08      	cmp	r3, #8
 8005732:	d10b      	bne.n	800574c <_printf_i+0x14c>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	07df      	lsls	r7, r3, #31
 8005738:	d508      	bpl.n	800574c <_printf_i+0x14c>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6861      	ldr	r1, [r4, #4]
 800573e:	4299      	cmp	r1, r3
 8005740:	bfde      	ittt	le
 8005742:	2330      	movle	r3, #48	; 0x30
 8005744:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005748:	f106 36ff 	addle.w	r6, r6, #4294967295
 800574c:	1b92      	subs	r2, r2, r6
 800574e:	6122      	str	r2, [r4, #16]
 8005750:	f8cd a000 	str.w	sl, [sp]
 8005754:	464b      	mov	r3, r9
 8005756:	aa03      	add	r2, sp, #12
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f7ff fee2 	bl	8005524 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	d14c      	bne.n	80057fe <_printf_i+0x1fe>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	b004      	add	sp, #16
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	4835      	ldr	r0, [pc, #212]	; (8005844 <_printf_i+0x244>)
 8005770:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	680e      	ldr	r6, [r1, #0]
 8005778:	061f      	lsls	r7, r3, #24
 800577a:	f856 5b04 	ldr.w	r5, [r6], #4
 800577e:	600e      	str	r6, [r1, #0]
 8005780:	d514      	bpl.n	80057ac <_printf_i+0x1ac>
 8005782:	07d9      	lsls	r1, r3, #31
 8005784:	bf44      	itt	mi
 8005786:	f043 0320 	orrmi.w	r3, r3, #32
 800578a:	6023      	strmi	r3, [r4, #0]
 800578c:	b91d      	cbnz	r5, 8005796 <_printf_i+0x196>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f023 0320 	bic.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	2310      	movs	r3, #16
 8005798:	e7b0      	b.n	80056fc <_printf_i+0xfc>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f043 0320 	orr.w	r3, r3, #32
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	2378      	movs	r3, #120	; 0x78
 80057a4:	4828      	ldr	r0, [pc, #160]	; (8005848 <_printf_i+0x248>)
 80057a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057aa:	e7e3      	b.n	8005774 <_printf_i+0x174>
 80057ac:	065e      	lsls	r6, r3, #25
 80057ae:	bf48      	it	mi
 80057b0:	b2ad      	uxthmi	r5, r5
 80057b2:	e7e6      	b.n	8005782 <_printf_i+0x182>
 80057b4:	4616      	mov	r6, r2
 80057b6:	e7bb      	b.n	8005730 <_printf_i+0x130>
 80057b8:	680b      	ldr	r3, [r1, #0]
 80057ba:	6826      	ldr	r6, [r4, #0]
 80057bc:	6960      	ldr	r0, [r4, #20]
 80057be:	1d1d      	adds	r5, r3, #4
 80057c0:	600d      	str	r5, [r1, #0]
 80057c2:	0635      	lsls	r5, r6, #24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	d501      	bpl.n	80057cc <_printf_i+0x1cc>
 80057c8:	6018      	str	r0, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <_printf_i+0x1d2>
 80057cc:	0671      	lsls	r1, r6, #25
 80057ce:	d5fb      	bpl.n	80057c8 <_printf_i+0x1c8>
 80057d0:	8018      	strh	r0, [r3, #0]
 80057d2:	2300      	movs	r3, #0
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	4616      	mov	r6, r2
 80057d8:	e7ba      	b.n	8005750 <_printf_i+0x150>
 80057da:	680b      	ldr	r3, [r1, #0]
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	600a      	str	r2, [r1, #0]
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	2100      	movs	r1, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7fa fcfa 	bl	80001e0 <memchr>
 80057ec:	b108      	cbz	r0, 80057f2 <_printf_i+0x1f2>
 80057ee:	1b80      	subs	r0, r0, r6
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fc:	e7a8      	b.n	8005750 <_printf_i+0x150>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d0ab      	beq.n	8005764 <_printf_i+0x164>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	079b      	lsls	r3, r3, #30
 8005810:	d413      	bmi.n	800583a <_printf_i+0x23a>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e7a4      	b.n	8005768 <_printf_i+0x168>
 800581e:	2301      	movs	r3, #1
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d09b      	beq.n	8005764 <_printf_i+0x164>
 800582c:	3501      	adds	r5, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	9903      	ldr	r1, [sp, #12]
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	42ab      	cmp	r3, r5
 8005836:	dcf2      	bgt.n	800581e <_printf_i+0x21e>
 8005838:	e7eb      	b.n	8005812 <_printf_i+0x212>
 800583a:	2500      	movs	r5, #0
 800583c:	f104 0619 	add.w	r6, r4, #25
 8005840:	e7f5      	b.n	800582e <_printf_i+0x22e>
 8005842:	bf00      	nop
 8005844:	08005b41 	.word	0x08005b41
 8005848:	08005b52 	.word	0x08005b52

0800584c <__sread>:
 800584c:	b510      	push	{r4, lr}
 800584e:	460c      	mov	r4, r1
 8005850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005854:	f000 f894 	bl	8005980 <_read_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	bfab      	itete	ge
 800585c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800585e:	89a3      	ldrhlt	r3, [r4, #12]
 8005860:	181b      	addge	r3, r3, r0
 8005862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005866:	bfac      	ite	ge
 8005868:	6563      	strge	r3, [r4, #84]	; 0x54
 800586a:	81a3      	strhlt	r3, [r4, #12]
 800586c:	bd10      	pop	{r4, pc}

0800586e <__swrite>:
 800586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	461f      	mov	r7, r3
 8005874:	898b      	ldrh	r3, [r1, #12]
 8005876:	05db      	lsls	r3, r3, #23
 8005878:	4605      	mov	r5, r0
 800587a:	460c      	mov	r4, r1
 800587c:	4616      	mov	r6, r2
 800587e:	d505      	bpl.n	800588c <__swrite+0x1e>
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2302      	movs	r3, #2
 8005886:	2200      	movs	r2, #0
 8005888:	f000 f868 	bl	800595c <_lseek_r>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	4632      	mov	r2, r6
 800589a:	463b      	mov	r3, r7
 800589c:	4628      	mov	r0, r5
 800589e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	f000 b817 	b.w	80058d4 <_write_r>

080058a6 <__sseek>:
 80058a6:	b510      	push	{r4, lr}
 80058a8:	460c      	mov	r4, r1
 80058aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ae:	f000 f855 	bl	800595c <_lseek_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	bf15      	itete	ne
 80058b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058c2:	81a3      	strheq	r3, [r4, #12]
 80058c4:	bf18      	it	ne
 80058c6:	81a3      	strhne	r3, [r4, #12]
 80058c8:	bd10      	pop	{r4, pc}

080058ca <__sclose>:
 80058ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ce:	f000 b813 	b.w	80058f8 <_close_r>
	...

080058d4 <_write_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d07      	ldr	r5, [pc, #28]	; (80058f4 <_write_r+0x20>)
 80058d8:	4604      	mov	r4, r0
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fa ff7a 	bl	80007dc <_write>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_write_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_write_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000434 	.word	0x20000434

080058f8 <_close_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4d06      	ldr	r5, [pc, #24]	; (8005914 <_close_r+0x1c>)
 80058fc:	2300      	movs	r3, #0
 80058fe:	4604      	mov	r4, r0
 8005900:	4608      	mov	r0, r1
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	f7fc f82f 	bl	8001966 <_close>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_close_r+0x1a>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_close_r+0x1a>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20000434 	.word	0x20000434

08005918 <_fstat_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d07      	ldr	r5, [pc, #28]	; (8005938 <_fstat_r+0x20>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	f7fc f82a 	bl	800197e <_fstat>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d102      	bne.n	8005934 <_fstat_r+0x1c>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	b103      	cbz	r3, 8005934 <_fstat_r+0x1c>
 8005932:	6023      	str	r3, [r4, #0]
 8005934:	bd38      	pop	{r3, r4, r5, pc}
 8005936:	bf00      	nop
 8005938:	20000434 	.word	0x20000434

0800593c <_isatty_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	; (8005958 <_isatty_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fc f829 	bl	800199e <_isatty>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_isatty_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_isatty_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20000434 	.word	0x20000434

0800595c <_lseek_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	; (800597c <_lseek_r+0x20>)
 8005960:	4604      	mov	r4, r0
 8005962:	4608      	mov	r0, r1
 8005964:	4611      	mov	r1, r2
 8005966:	2200      	movs	r2, #0
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fc f822 	bl	80019b4 <_lseek>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_lseek_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_lseek_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	20000434 	.word	0x20000434

08005980 <_read_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	; (80059a0 <_read_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fb ffcc 	bl	800192c <_read>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_read_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_read_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20000434 	.word	0x20000434

080059a4 <_init>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr

080059b0 <_fini>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr
