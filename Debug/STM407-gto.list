
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005194  08005194  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800519c  0800519c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000074  08005218  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08005218  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001213b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cd  00000000  00000000  000321df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00035828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b65  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011713  00000000  00000000  0003a31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d39da  00000000  00000000  0004ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  0011f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800507c 	.word	0x0800507c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800507c 	.word	0x0800507c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <DWT_Delay_us+0x40>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80004de:	f002 f97f 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <DWT_Delay_us+0x44>)
 80004e6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ea:	0c9b      	lsrs	r3, r3, #18
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80004f4:	bf00      	nop
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <DWT_Delay_us+0x40>)
 80004f8:	685a      	ldr	r2, [r3, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3f8      	bcc.n	80004f6 <DWT_Delay_us+0x26>
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	e0001000 	.word	0xe0001000
 8000514:	431bde83 	.word	0x431bde83

08000518 <HAL_UART_RxCpltCallback>:
uint8_t   rxdata;

uint8_t   data_receive_flag = 0;

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a3d      	ldr	r2, [pc, #244]	; (800061c <HAL_UART_RxCpltCallback+0x104>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.
			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	493c      	ldr	r1, [pc, #240]	; (8000620 <HAL_UART_RxCpltCallback+0x108>)
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <HAL_UART_RxCpltCallback+0x10c>)
 8000530:	f003 fb23 	bl	8003b7a <HAL_UART_Receive_IT>

	        // Send the received data.
			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8000534:	230a      	movs	r3, #10
 8000536:	2201      	movs	r2, #1
 8000538:	4939      	ldr	r1, [pc, #228]	; (8000620 <HAL_UART_RxCpltCallback+0x108>)
 800053a:	483a      	ldr	r0, [pc, #232]	; (8000624 <HAL_UART_RxCpltCallback+0x10c>)
 800053c:	f003 fa8b 	bl	8003a56 <HAL_UART_Transmit>
			uart1_key_Flag = 1;
 8000540:	4b39      	ldr	r3, [pc, #228]	; (8000628 <HAL_UART_RxCpltCallback+0x110>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
	/*if (huart->Instance == USART6) {
		HAL_UART_Receive_IT(&huart6, (uint8_t *) &data, 1);
		printf("received uart6 interrupt! \r\n");
	}*/

	if (huart->Instance == USART2) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <HAL_UART_RxCpltCallback+0x114>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d15e      	bne.n	800060e <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	4937      	ldr	r1, [pc, #220]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 8000554:	4837      	ldr	r0, [pc, #220]	; (8000634 <HAL_UART_RxCpltCallback+0x11c>)
 8000556:	f003 fb10 	bl	8003b7a <HAL_UART_Receive_IT>

		switch(status){
 800055a:	4b37      	ldr	r3, [pc, #220]	; (8000638 <HAL_UART_RxCpltCallback+0x120>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d002      	beq.n	8000568 <HAL_UART_RxCpltCallback+0x50>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d011      	beq.n	800058a <HAL_UART_RxCpltCallback+0x72>
		        }
		        break ;
		}

	}
}
 8000566:	e055      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
		        if( rxdata == START_CODE ) {
 8000568:	4b31      	ldr	r3, [pc, #196]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b5b      	cmp	r3, #91	; 0x5b
 800056e:	d150      	bne.n	8000612 <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8000570:	4b32      	ldr	r3, [pc, #200]	; (800063c <HAL_UART_RxCpltCallback+0x124>)
 8000572:	225b      	movs	r2, #91	; 0x5b
 8000574:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <HAL_UART_RxCpltCallback+0x120>)
 800057e:	2202      	movs	r2, #2
 8000580:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <HAL_UART_RxCpltCallback+0x12c>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
		        break ;
 8000588:	e043      	b.n	8000612 <HAL_UART_RxCpltCallback+0xfa>
		        if( rxdata == START_CODE ) {
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b5b      	cmp	r3, #91	; 0x5b
 8000590:	d109      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <HAL_UART_RxCpltCallback+0x124>)
 8000594:	225b      	movs	r2, #91	; 0x5b
 8000596:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <HAL_UART_RxCpltCallback+0x120>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	701a      	strb	r2, [r3, #0]
		        break ;
 80005a4:	e036      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b5d      	cmp	r3, #93	; 0x5d
 80005ac:	d115      	bne.n	80005da <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b23      	cmp	r3, #35	; 0x23
 80005b4:	d10d      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	b2d1      	uxtb	r1, r2
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005c0:	7011      	strb	r1, [r2, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 80005c6:	7819      	ldrb	r1, [r3, #0]
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_UART_RxCpltCallback+0x124>)
 80005ca:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <HAL_UART_RxCpltCallback+0x12c>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
		            status = START ;
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_UART_RxCpltCallback+0x120>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
		        break ;
 80005d8:	e01c      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b25      	cmp	r3, #37	; 0x25
 80005e0:	d80b      	bhi.n	80005fa <HAL_UART_RxCpltCallback+0xe2>
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	b2d1      	uxtb	r1, r2
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 80005ec:	7011      	strb	r1, [r2, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_UART_RxCpltCallback+0x118>)
 80005f2:	7819      	ldrb	r1, [r3, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_UART_RxCpltCallback+0x124>)
 80005f6:	5499      	strb	r1, [r3, r2]
		        break ;
 80005f8:	e00c      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_UART_RxCpltCallback+0x120>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_UART_RxCpltCallback+0x12c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
		        break ;
 800060c:	e002      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
	}
 800060e:	bf00      	nop
 8000610:	e000      	b.n	8000614 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 8000612:	bf00      	nop
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40011000 	.word	0x40011000
 8000620:	200001f4 	.word	0x200001f4
 8000624:	2000013c 	.word	0x2000013c
 8000628:	20000091 	.word	0x20000091
 800062c:	40004400 	.word	0x40004400
 8000630:	20000138 	.word	0x20000138
 8000634:	200002dc 	.word	0x200002dc
 8000638:	20000002 	.word	0x20000002
 800063c:	200003bc 	.word	0x200003bc
 8000640:	200000a1 	.word	0x200000a1
 8000644:	20000092 	.word	0x20000092

08000648 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29a      	uxth	r2, r3
 8000658:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800065c:	68b9      	ldr	r1, [r7, #8]
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <_write+0x28>)
 8000660:	f003 f9f9 	bl	8003a56 <HAL_UART_Transmit>
	return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000013c 	.word	0x2000013c

08000674 <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f7ff fda2 	bl	80001c8 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	230a      	movs	r3, #10
 800068a:	6839      	ldr	r1, [r7, #0]
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f003 f9e2 	bl	8003a56 <HAL_UART_Transmit>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f7ff fd8f 	bl	80001c8 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	230a      	movs	r3, #10
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f003 f9cf 	bl	8003a56 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 80006b8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80006bc:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 80006be:	f107 010c 	add.w	r1, r7, #12
 80006c2:	230a      	movs	r3, #10
 80006c4:	2202      	movs	r2, #2
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f003 f9c5 	bl	8003a56 <HAL_UART_Transmit>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f001 f889 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f92b 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fbe9 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 fb67 	bl	8000db8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006ea:	f000 fb3b 	bl	8000d64 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80006ee:	f000 fae5 	bl	8000cbc <MX_UART4_Init>
  MX_UART5_Init();
 80006f2:	f000 fb0d 	bl	8000d10 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80006f6:	f000 fbb3 	bl	8000e60 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80006fa:	f000 fa0b 	bl	8000b14 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006fe:	f000 fa3f 	bl	8000b80 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000702:	f000 faa5 	bl	8000c50 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000706:	f000 fb81 	bl	8000e0c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800070a:	f000 f9a9 	bl	8000a60 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800070e:	f000 f993 	bl	8000a38 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	4972      	ldr	r1, [pc, #456]	; (80008e0 <main+0x20c>)
 8000716:	4873      	ldr	r0, [pc, #460]	; (80008e4 <main+0x210>)
 8000718:	f003 fa2f 	bl	8003b7a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 800071c:	2201      	movs	r2, #1
 800071e:	4972      	ldr	r1, [pc, #456]	; (80008e8 <main+0x214>)
 8000720:	4872      	ldr	r0, [pc, #456]	; (80008ec <main+0x218>)
 8000722:	f003 fa2a 	bl	8003b7a <HAL_UART_Receive_IT>
  //HAL_UART_Transmit(&huart1, start_data, 17, 10);
  //debugPrintln(&huart1, "\n Start STM32F407");
  printf("\n Start STM32F407\r\n");
 8000726:	4872      	ldr	r0, [pc, #456]	; (80008f0 <main+0x21c>)
 8000728:	f004 f850 	bl	80047cc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); // GPIO PB9 OUTPUT LOW -> Down enable
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000732:	4870      	ldr	r0, [pc, #448]	; (80008f4 <main+0x220>)
 8000734:	f001 fc26 	bl	8001f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); // SYNC_GEN LOW
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	486e      	ldr	r0, [pc, #440]	; (80008f8 <main+0x224>)
 800073e:	f001 fc21 	bl	8001f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 8000742:	2201      	movs	r2, #1
 8000744:	2102      	movs	r1, #2
 8000746:	486d      	ldr	r0, [pc, #436]	; (80008fc <main+0x228>)
 8000748:	f001 fc1c 	bl	8001f84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);						// GPIO PC1 OUTPUT LOW -> tx enable
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);						// GPIO PE0 OUTPUT LOW -> SYNC_GEN

	  HAL_Delay(1000);	// 1 second*/

	  if (uart1_key_Flag){
 800074c:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <main+0x22c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 8083 	beq.w	800085c <main+0x188>
		  uart1_key_Flag = 0;
 8000756:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <main+0x22c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 800075c:	4b60      	ldr	r3, [pc, #384]	; (80008e0 <main+0x20c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b7a      	cmp	r3, #122	; 0x7a
 8000762:	dc7c      	bgt.n	800085e <main+0x18a>
 8000764:	2b61      	cmp	r3, #97	; 0x61
 8000766:	da04      	bge.n	8000772 <main+0x9e>
 8000768:	2b32      	cmp	r3, #50	; 0x32
 800076a:	d04c      	beq.n	8000806 <main+0x132>
 800076c:	2b36      	cmp	r3, #54	; 0x36
 800076e:	d055      	beq.n	800081c <main+0x148>
 8000770:	e075      	b.n	800085e <main+0x18a>
 8000772:	3b61      	subs	r3, #97	; 0x61
 8000774:	2b19      	cmp	r3, #25
 8000776:	d872      	bhi.n	800085e <main+0x18a>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <main+0xac>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	080007ef 	.word	0x080007ef
 8000784:	0800085f 	.word	0x0800085f
 8000788:	0800085f 	.word	0x0800085f
 800078c:	0800085f 	.word	0x0800085f
 8000790:	0800085f 	.word	0x0800085f
 8000794:	0800085f 	.word	0x0800085f
 8000798:	0800085f 	.word	0x0800085f
 800079c:	0800085f 	.word	0x0800085f
 80007a0:	0800085f 	.word	0x0800085f
 80007a4:	0800085f 	.word	0x0800085f
 80007a8:	0800085f 	.word	0x0800085f
 80007ac:	0800085f 	.word	0x0800085f
 80007b0:	0800085f 	.word	0x0800085f
 80007b4:	0800085f 	.word	0x0800085f
 80007b8:	0800085f 	.word	0x0800085f
 80007bc:	0800085f 	.word	0x0800085f
 80007c0:	0800085f 	.word	0x0800085f
 80007c4:	08000833 	.word	0x08000833
 80007c8:	080007e9 	.word	0x080007e9
 80007cc:	08000841 	.word	0x08000841
 80007d0:	0800085f 	.word	0x0800085f
 80007d4:	0800085f 	.word	0x0800085f
 80007d8:	0800085f 	.word	0x0800085f
 80007dc:	0800085f 	.word	0x0800085f
 80007e0:	0800085f 	.word	0x0800085f
 80007e4:	0800084f 	.word	0x0800084f

			  case 's':
				  Sync_out();
 80007e8:	f000 fc3c 	bl	8001064 <Sync_out>

				  break;
 80007ec:	e037      	b.n	800085e <main+0x18a>

			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 80007ee:	4945      	ldr	r1, [pc, #276]	; (8000904 <main+0x230>)
 80007f0:	483c      	ldr	r0, [pc, #240]	; (80008e4 <main+0x210>)
 80007f2:	f7ff ff3f 	bl	8000674 <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 80007f6:	4944      	ldr	r1, [pc, #272]	; (8000908 <main+0x234>)
 80007f8:	483a      	ldr	r0, [pc, #232]	; (80008e4 <main+0x210>)
 80007fa:	f7ff ff4e 	bl	800069a <debugPrintln>
				  printf("printf test\r\n");
 80007fe:	4843      	ldr	r0, [pc, #268]	; (800090c <main+0x238>)
 8000800:	f003 ffe4 	bl	80047cc <puts>
				  break;
 8000804:	e02b      	b.n	800085e <main+0x18a>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	483b      	ldr	r0, [pc, #236]	; (80008f8 <main+0x224>)
 800080c:	f001 fbba 	bl	8001f84 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4837      	ldr	r0, [pc, #220]	; (80008f4 <main+0x220>)
 8000816:	f001 fbb5 	bl	8001f84 <HAL_GPIO_WritePin>

				  break;
 800081a:	e020      	b.n	800085e <main+0x18a>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	4835      	ldr	r0, [pc, #212]	; (80008f8 <main+0x224>)
 8000822:	f001 fbaf 	bl	8001f84 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	4832      	ldr	r0, [pc, #200]	; (80008f4 <main+0x220>)
 800082c:	f001 fbaa 	bl	8001f84 <HAL_GPIO_WritePin>

				  break;
 8000830:	e015      	b.n	800085e <main+0x18a>


			  case 'r':
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 8000832:	230a      	movs	r3, #10
 8000834:	2201      	movs	r2, #1
 8000836:	492c      	ldr	r1, [pc, #176]	; (80008e8 <main+0x214>)
 8000838:	482c      	ldr	r0, [pc, #176]	; (80008ec <main+0x218>)
 800083a:	f003 f90c 	bl	8003a56 <HAL_UART_Transmit>

				  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  break;
 800083e:	e00e      	b.n	800085e <main+0x18a>

			  case 't':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)
				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);		// send data(0x00)
 8000840:	230a      	movs	r3, #10
 8000842:	2201      	movs	r2, #1
 8000844:	4932      	ldr	r1, [pc, #200]	; (8000910 <main+0x23c>)
 8000846:	4833      	ldr	r0, [pc, #204]	; (8000914 <main+0x240>)
 8000848:	f003 f905 	bl	8003a56 <HAL_UART_Transmit>

				  break;
 800084c:	e007      	b.n	800085e <main+0x18a>

			  case 'z':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 10);
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[ID=0101 SLAVE ANCHOR RE-SET DEVICE]", 36, 100);
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2224      	movs	r2, #36	; 0x24
 8000852:	4931      	ldr	r1, [pc, #196]	; (8000918 <main+0x244>)
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <main+0x218>)
 8000856:	f003 f8fe 	bl	8003a56 <HAL_UART_Transmit>

				  /*if(uart2_key_Flag){
					  printf("PIC Received\r\n");
				  }*/

				  break;
 800085a:	e000      	b.n	800085e <main+0x18a>

		  }
	  }
 800085c:	bf00      	nop


	  if(uart2_key_Flag) {
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <main+0x248>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d016      	beq.n	8000894 <main+0x1c0>
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  uart2_key_Flag = 0;
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <main+0x248>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 800086c:	482c      	ldr	r0, [pc, #176]	; (8000920 <main+0x24c>)
 800086e:	f003 ffad 	bl	80047cc <puts>
		  //HAL_UART_Transmit(&huart1, "OK", 1, 10);
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  //HAL_UART_Receive_IT(&huart2, &data, 1); // interrupt uart 2

		  for (int i = 0; i < LENGTH; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e00a      	b.n	800088e <main+0x1ba>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);				// send data(0x00)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <main+0x250>)
 800087c:	1899      	adds	r1, r3, r2
 800087e:	230a      	movs	r3, #10
 8000880:	2201      	movs	r2, #1
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <main+0x210>)
 8000884:	f003 f8e7 	bl	8003a56 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3301      	adds	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b23      	cmp	r3, #35	; 0x23
 8000892:	ddf1      	ble.n	8000878 <main+0x1a4>
		  }
	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	4816      	ldr	r0, [pc, #88]	; (80008f4 <main+0x220>)
 800089a:	f001 fb5b 	bl	8001f54 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <main+0x254>)
 80008a4:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <main+0x220>)
 80008ac:	f001 fb52 	bl	8001f54 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <main+0x258>)
 80008b6:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <main+0x220>)
 80008be:	f001 fb49 	bl	8001f54 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <main+0x25c>)
 80008c8:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 80008ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x220>)
 80008d0:	f001 fb40 	bl	8001f54 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <main+0x260>)
 80008da:	701a      	strb	r2, [r3, #0]
	  if (uart1_key_Flag){
 80008dc:	e736      	b.n	800074c <main+0x78>
 80008de:	bf00      	nop
 80008e0:	200001f4 	.word	0x200001f4
 80008e4:	2000013c 	.word	0x2000013c
 80008e8:	20000000 	.word	0x20000000
 80008ec:	200002dc 	.word	0x200002dc
 80008f0:	08005094 	.word	0x08005094
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40020800 	.word	0x40020800
 8000900:	20000091 	.word	0x20000091
 8000904:	080050a8 	.word	0x080050a8
 8000908:	080050bc 	.word	0x080050bc
 800090c:	080050d0 	.word	0x080050d0
 8000910:	20000090 	.word	0x20000090
 8000914:	200001f8 	.word	0x200001f8
 8000918:	080050e0 	.word	0x080050e0
 800091c:	20000092 	.word	0x20000092
 8000920:	08005108 	.word	0x08005108
 8000924:	200003bc 	.word	0x200003bc
 8000928:	200000f0 	.word	0x200000f0
 800092c:	200003b8 	.word	0x200003b8
 8000930:	20000180 	.word	0x20000180
 8000934:	200000a0 	.word	0x200000a0

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b098      	sub	sp, #96	; 0x60
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 feca 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <SystemClock_Config+0xf8>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <SystemClock_Config+0xf8>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <SystemClock_Config+0xf8>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <SystemClock_Config+0xfc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <SystemClock_Config+0xfc>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <SystemClock_Config+0xfc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009a2:	230a      	movs	r3, #10
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ba:	2308      	movs	r3, #8
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009be:	23a8      	movs	r3, #168	; 0xa8
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 faf2 	bl	8001fb8 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009da:	f000 fb73 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fd54 	bl	80024a8 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a06:	f000 fb5d 	bl	80010c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a12:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 ff15 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a24:	f000 fb4e 	bl	80010c4 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3760      	adds	r7, #96	; 0x60
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2025      	movs	r0, #37	; 0x25
 8000a42:	f001 f822 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a46:	2025      	movs	r0, #37	; 0x25
 8000a48:	f001 f83b 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2047      	movs	r0, #71	; 0x47
 8000a52:	f001 f81a 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a56:	2047      	movs	r0, #71	; 0x47
 8000a58:	f001 f833 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a7a:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <MX_RTC_Init+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a86:	227f      	movs	r2, #127	; 0x7f
 8000a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a8c:	22ff      	movs	r2, #255	; 0xff
 8000a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_RTC_Init+0xac>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa2:	481a      	ldr	r0, [pc, #104]	; (8000b0c <MX_RTC_Init+0xac>)
 8000aa4:	f001 ffb2 	bl	8002a0c <HAL_RTC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 fb09 	bl	80010c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4619      	mov	r1, r3
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <MX_RTC_Init+0xac>)
 8000ace:	f002 f82e 	bl	8002b2e <HAL_RTC_SetTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 faf4 	bl	80010c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000adc:	2301      	movs	r3, #1
 8000ade:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	2201      	movs	r2, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_RTC_Init+0xac>)
 8000af4:	f002 f8d8 	bl	8002ca8 <HAL_RTC_SetDate>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000afe:	f000 fae1 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000184 	.word	0x20000184
 8000b10:	40002800 	.word	0x40002800

08000b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_SPI1_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b66:	f002 f9b8 	bl	8002eda <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b70:	f000 faa8 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000280 	.word	0x20000280
 8000b7c:	40013000 	.word	0x40013000

08000b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bae:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <MX_TIM1_Init+0xcc>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bda:	f002 fa07 	bl	8002fec <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000be4:	f000 fa6e 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000bf6:	f002 fb50 	bl	800329a <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000c00:	f000 fa60 	bl	80010c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c04:	2306      	movs	r3, #6
 8000c06:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000c14:	f002 fc05 	bl	8003422 <HAL_TIM_SlaveConfigSynchro>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000c1e:	f000 fa51 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_TIM1_Init+0xc8>)
 8000c30:	f002 fe34 	bl	800389c <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c3a:	f000 fa43 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001ac 	.word	0x200001ac
 8000c4c:	40010000 	.word	0x40010000

08000c50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_TIM7_Init+0x68>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c66:	2229      	movs	r2, #41	; 0x29
 8000c68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c80:	f002 f9b4 	bl	8002fec <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c8a:	f000 fa1b 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c9c:	f002 fdfe 	bl	800389c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000ca6:	f000 fa0d 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000370 	.word	0x20000370
 8000cb8:	40001400 	.word	0x40001400

08000cbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_UART4_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_UART4_Init+0x4c>)
 8000cf4:	f002 fe62 	bl	80039bc <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f9e1 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000023c 	.word	0x2000023c
 8000d0c:	40004c00 	.word	0x40004c00

08000d10 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_UART5_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_UART5_Init+0x4c>)
 8000d48:	f002 fe38 	bl	80039bc <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f9b7 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	40005000 	.word	0x40005000

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART1_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f002 fe0e 	bl	80039bc <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 f98d 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000013c 	.word	0x2000013c
 8000db4:	40011000 	.word	0x40011000

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f002 fde4 	bl	80039bc <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f000 f963 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002dc 	.word	0x200002dc
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_USART3_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e44:	f002 fdba 	bl	80039bc <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 f939 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000a4 	.word	0x200000a4
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_USART6_UART_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <MX_USART6_UART_Init+0x54>)
 8000e6e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e84:	220c      	movs	r2, #12
 8000e86:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART6_UART_Init+0x4c>)
 8000e98:	f002 fd90 	bl	80039bc <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f000 f90f 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f8 	.word	0x200001f8
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	003d0900 	.word	0x003d0900

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	; (8001050 <MX_GPIO_Init+0x198>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	; (8001050 <MX_GPIO_Init+0x198>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b5c      	ldr	r3, [pc, #368]	; (8001050 <MX_GPIO_Init+0x198>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <MX_GPIO_Init+0x198>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a57      	ldr	r2, [pc, #348]	; (8001050 <MX_GPIO_Init+0x198>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <MX_GPIO_Init+0x198>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a50      	ldr	r2, [pc, #320]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a49      	ldr	r2, [pc, #292]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a42      	ldr	r2, [pc, #264]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f64:	f043 0310 	orr.w	r3, r3, #16
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <MX_GPIO_Init+0x198>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	210a      	movs	r1, #10
 8000f7a:	4836      	ldr	r0, [pc, #216]	; (8001054 <MX_GPIO_Init+0x19c>)
 8000f7c:	f001 f802 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f86:	4834      	ldr	r0, [pc, #208]	; (8001058 <MX_GPIO_Init+0x1a0>)
 8000f88:	f000 fffc 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8000f92:	4832      	ldr	r0, [pc, #200]	; (800105c <MX_GPIO_Init+0x1a4>)
 8000f94:	f000 fff6 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4830      	ldr	r0, [pc, #192]	; (8001060 <MX_GPIO_Init+0x1a8>)
 8000f9e:	f000 fff1 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4826      	ldr	r0, [pc, #152]	; (8001054 <MX_GPIO_Init+0x19c>)
 8000fba:	f000 fe2f 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x1a0>)
 8000fd2:	f000 fe23 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fd6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481c      	ldr	r0, [pc, #112]	; (800105c <MX_GPIO_Init+0x1a4>)
 8000fec:	f000 fe16 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_GPIO_Init+0x1a0>)
 800100a:	f000 fe07 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 800100e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_GPIO_Init+0x1a4>)
 8001028:	f000 fdf8 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_GPIO_Init+0x1a8>)
 8001044:	f000 fdea 	bl	8001c1c <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	; 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020800 	.word	0x40020800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40021000 	.word	0x40021000

08001064 <Sync_out>:

/* USER CODE BEGIN 4 */
/* Synchronization Function */

void Sync_out(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8001068:	2201      	movs	r2, #1
 800106a:	2120      	movs	r1, #32
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <Sync_out+0x4c>)
 800106e:	f000 ff89 	bl	8001f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <Sync_out+0x50>)
 8001078:	f000 ff84 	bl	8001f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <Sync_out+0x54>)
 8001082:	f000 ff7f 	bl	8001f84 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 8001086:	230a      	movs	r3, #10
 8001088:	2201      	movs	r2, #1
 800108a:	490c      	ldr	r1, [pc, #48]	; (80010bc <Sync_out+0x58>)
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <Sync_out+0x5c>)
 800108e:	f002 fce2 	bl	8003a56 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f7ff fa1c 	bl	80004d0 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <Sync_out+0x54>)
 800109e:	f000 ff71 	bl	8001f84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <Sync_out+0x50>)
 80010a8:	f000 ff6c 	bl	8001f84 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40020800 	.word	0x40020800
 80010bc:	20000001 	.word	0x20000001
 80010c0:	200001f8 	.word	0x200001f8

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <HAL_RTC_MspInit+0x24>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d102      	bne.n	8001138 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_RTC_MspInit+0x28>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40002800 	.word	0x40002800
 8001148:	42470e3c 	.word	0x42470e3c

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12b      	bne.n	80011c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2305      	movs	r3, #5
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c2:	f000 fd2b 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_TIM_Base_MspInit+0x70>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10e      	bne.n	800120c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800120a:	e01a      	b.n	8001242 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_TIM_Base_MspInit+0x78>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d115      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_TIM_Base_MspInit+0x74>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2037      	movs	r0, #55	; 0x37
 8001238:	f000 fc27 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800123c:	2037      	movs	r0, #55	; 0x37
 800123e:	f000 fc40 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000
 8001250:	40023800 	.word	0x40023800
 8001254:	40001400 	.word	0x40001400

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a9c      	ldr	r2, [pc, #624]	; (80014e8 <HAL_UART_MspInit+0x290>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d135      	bne.n	80012e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
 800127e:	4b9b      	ldr	r3, [pc, #620]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b98      	ldr	r3, [pc, #608]	; (80014ec <HAL_UART_MspInit+0x294>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
 800129a:	4b94      	ldr	r3, [pc, #592]	; (80014ec <HAL_UART_MspInit+0x294>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a93      	ldr	r2, [pc, #588]	; (80014ec <HAL_UART_MspInit+0x294>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b91      	ldr	r3, [pc, #580]	; (80014ec <HAL_UART_MspInit+0x294>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
 80012b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012c4:	2308      	movs	r3, #8
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4888      	ldr	r0, [pc, #544]	; (80014f0 <HAL_UART_MspInit+0x298>)
 80012d0:	f000 fca4 	bl	8001c1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2034      	movs	r0, #52	; 0x34
 80012da:	f000 fbd6 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80012de:	2034      	movs	r0, #52	; 0x34
 80012e0:	f000 fbef 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012e4:	e145      	b.n	8001572 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a82      	ldr	r2, [pc, #520]	; (80014f4 <HAL_UART_MspInit+0x29c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d153      	bne.n	8001398 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
 80012f4:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_UART_MspInit+0x294>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a7c      	ldr	r2, [pc, #496]	; (80014ec <HAL_UART_MspInit+0x294>)
 80012fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b7a      	ldr	r3, [pc, #488]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001310:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a75      	ldr	r2, [pc, #468]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b73      	ldr	r3, [pc, #460]	; (80014ec <HAL_UART_MspInit+0x294>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
 800132c:	4b6f      	ldr	r3, [pc, #444]	; (80014ec <HAL_UART_MspInit+0x294>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b6c      	ldr	r3, [pc, #432]	; (80014ec <HAL_UART_MspInit+0x294>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
 8001342:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134e:	2301      	movs	r3, #1
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001356:	2308      	movs	r3, #8
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135e:	4619      	mov	r1, r3
 8001360:	4863      	ldr	r0, [pc, #396]	; (80014f0 <HAL_UART_MspInit+0x298>)
 8001362:	f000 fc5b 	bl	8001c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001366:	2304      	movs	r3, #4
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001376:	2308      	movs	r3, #8
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800137e:	4619      	mov	r1, r3
 8001380:	485d      	ldr	r0, [pc, #372]	; (80014f8 <HAL_UART_MspInit+0x2a0>)
 8001382:	f000 fc4b 	bl	8001c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2035      	movs	r0, #53	; 0x35
 800138c:	f000 fb7d 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001390:	2035      	movs	r0, #53	; 0x35
 8001392:	f000 fb96 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 8001396:	e0ec      	b.n	8001572 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a57      	ldr	r2, [pc, #348]	; (80014fc <HAL_UART_MspInit+0x2a4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12d      	bne.n	80013fe <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b4e      	ldr	r3, [pc, #312]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_UART_MspInit+0x294>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ec:	2307      	movs	r3, #7
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f4:	4619      	mov	r1, r3
 80013f6:	4842      	ldr	r0, [pc, #264]	; (8001500 <HAL_UART_MspInit+0x2a8>)
 80013f8:	f000 fc10 	bl	8001c1c <HAL_GPIO_Init>
}
 80013fc:	e0b9      	b.n	8001572 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_UART_MspInit+0x2ac>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d134      	bne.n	8001472 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_UART_MspInit+0x294>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a36      	ldr	r2, [pc, #216]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_UART_MspInit+0x294>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_UART_MspInit+0x294>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <HAL_UART_MspInit+0x294>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001440:	230c      	movs	r3, #12
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001450:	2307      	movs	r3, #7
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001458:	4619      	mov	r1, r3
 800145a:	4829      	ldr	r0, [pc, #164]	; (8001500 <HAL_UART_MspInit+0x2a8>)
 800145c:	f000 fbde 	bl	8001c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2026      	movs	r0, #38	; 0x26
 8001466:	f000 fb10 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800146a:	2026      	movs	r0, #38	; 0x26
 800146c:	f000 fb29 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 8001470:	e07f      	b.n	8001572 <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_UART_MspInit+0x2b0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d149      	bne.n	8001510 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_UART_MspInit+0x294>)
 8001486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_UART_MspInit+0x294>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_UART_MspInit+0x294>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_UART_MspInit+0x294>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_UART_MspInit+0x294>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c6:	2307      	movs	r3, #7
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ce:	4619      	mov	r1, r3
 80014d0:	480e      	ldr	r0, [pc, #56]	; (800150c <HAL_UART_MspInit+0x2b4>)
 80014d2:	f000 fba3 	bl	8001c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2027      	movs	r0, #39	; 0x27
 80014dc:	f000 fad5 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014e0:	2027      	movs	r0, #39	; 0x27
 80014e2:	f000 faee 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
}
 80014e6:	e044      	b.n	8001572 <HAL_UART_MspInit+0x31a>
 80014e8:	40004c00 	.word	0x40004c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40005000 	.word	0x40005000
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40020000 	.word	0x40020000
 8001504:	40004400 	.word	0x40004400
 8001508:	40004800 	.word	0x40004800
 800150c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_UART_MspInit+0x324>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12b      	bne.n	8001572 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x328>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_UART_MspInit+0x328>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x328>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0x328>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_UART_MspInit+0x328>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_UART_MspInit+0x328>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001562:	2308      	movs	r3, #8
 8001564:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x32c>)
 800156e:	f000 fb55 	bl	8001c1c <HAL_GPIO_Init>
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	; 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40011400 	.word	0x40011400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020800 	.word	0x40020800

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f95e 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART1_IRQHandler+0x10>)
 80015e2:	f002 fafb 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000013c 	.word	0x2000013c

080015f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART2_IRQHandler+0x10>)
 80015f6:	f002 faf1 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002dc 	.word	0x200002dc

08001604 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <USART3_IRQHandler+0x10>)
 800160a:	f002 fae7 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000a4 	.word	0x200000a4

08001618 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <UART4_IRQHandler+0x10>)
 800161e:	f002 fadd 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000023c 	.word	0x2000023c

0800162c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <UART5_IRQHandler+0x10>)
 8001632:	f002 fad3 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200000f4 	.word	0x200000f4

08001640 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM7_IRQHandler+0x10>)
 8001646:	f001 fd20 	bl	800308a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000370 	.word	0x20000370

08001654 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USART6_IRQHandler+0x10>)
 800165a:	f002 fabf 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001f8 	.word	0x200001f8

08001668 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e00a      	b.n	8001690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167a:	f3af 8000 	nop.w
 800167e:	4601      	mov	r1, r0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf0      	blt.n	800167a <_read+0x12>
	}

return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	605a      	str	r2, [r3, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f002 ffa6 	bl	800468c <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20020000 	.word	0x20020000
 800176c:	00000400 	.word	0x00000400
 8001770:	20000094 	.word	0x20000094
 8001774:	20000400 	.word	0x20000400

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 ff65 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe ff81 	bl	80006d4 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017e0:	080051a4 	.word	0x080051a4
  ldr r2, =_sbss
 80017e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017e8:	200003fc 	.word	0x200003fc

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f92b 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fc54 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f943 	bl	8001ade <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f90b 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000004 	.word	0x20000004
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	200003e8 	.word	0x200003e8

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	200003e8 	.word	0x200003e8

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff3e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff31 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa2 	bl	8001a30 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff feda 	bl	80018bc <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d008      	beq.n	8001b28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e052      	b.n	8001bce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0216 	bic.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_DMA_Abort+0x62>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0208 	bic.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b78:	e013      	b.n	8001ba2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7a:	f7ff fe9f 	bl	80018bc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d90c      	bls.n	8001ba2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e015      	b.n	8001bce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e4      	bne.n	8001b7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d004      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00c      	b.n	8001c0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e16b      	b.n	8001f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 815a 	bne.w	8001f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80b4 	beq.w	8001f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a5f      	ldr	r2, [pc, #380]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x314>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x226>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x318>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x222>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x31c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x21e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x328>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x32c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x330>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00e      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e00c      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00a      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2e:	2305      	movs	r3, #5
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_GPIO_Init+0x334>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f ae90 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e264      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	4ba3      	ldr	r3, [pc, #652]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4ba0      	ldr	r3, [pc, #640]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b9d      	ldr	r3, [pc, #628]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b99      	ldr	r3, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x108>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e23f      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x74>
 800201e:	4b91      	ldr	r3, [pc, #580]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a90      	ldr	r2, [pc, #576]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b88      	ldr	r3, [pc, #544]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a87      	ldr	r2, [pc, #540]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 8002050:	4b84      	ldr	r3, [pc, #528]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a83      	ldr	r2, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b81      	ldr	r3, [pc, #516]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a80      	ldr	r2, [pc, #512]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fc24 	bl	80018bc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fc20 	bl	80018bc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e204      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xc0>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fc10 	bl	80018bc <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fc0c 	bl	80018bc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1f0      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0xe8>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b62      	ldr	r3, [pc, #392]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c4      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b56      	ldr	r3, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4952      	ldr	r1, [pc, #328]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b4f      	ldr	r3, [pc, #316]	; (8002268 <HAL_RCC_OscConfig+0x2b0>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff fbc5 	bl	80018bc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff fbc1 	bl	80018bc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a5      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4940      	ldr	r1, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_RCC_OscConfig+0x2b0>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff fba4 	bl	80018bc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff fba0 	bl	80018bc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e184      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d030      	beq.n	8002204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x2b4>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff fb84 	bl	80018bc <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7ff fb80 	bl	80018bc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e164      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x200>
 80021d6:	e015      	b.n	8002204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x2b4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff fb6d 	bl	80018bc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7ff fb69 	bl	80018bc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e14d      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a0 	beq.w	8002352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x2b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d121      	bne.n	8002292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCC_OscConfig+0x2b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_RCC_OscConfig+0x2b8>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb2f 	bl	80018bc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e011      	b.n	8002286 <HAL_RCC_OscConfig+0x2ce>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	42470000 	.word	0x42470000
 800226c:	42470e80 	.word	0x42470e80
 8002270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7ff fb22 	bl	80018bc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e106      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x4e4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
 800229a:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a80      	ldr	r2, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x32a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x312>
 80022b0:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x32a>
 80022ca:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a74      	ldr	r2, [pc, #464]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff fae7 	bl	80018bc <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff fae3 	bl	80018bc <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0c5      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x33a>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7ff fad1 	bl	80018bc <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7ff facd 	bl	80018bc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0af      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 809b 	beq.w	8002492 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235c:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d05c      	beq.n	8002422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d141      	bne.n	80023f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff faa1 	bl	80018bc <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff fa9d 	bl	80018bc <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e081      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	019b      	lsls	r3, r3, #6
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	3b01      	subs	r3, #1
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	061b      	lsls	r3, r3, #24
 80023c0:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fa76 	bl	80018bc <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d4:	f7ff fa72 	bl	80018bc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e056      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x41c>
 80023f2:	e04e      	b.n	8002492 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fa5f 	bl	80018bc <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff fa5b 	bl	80018bc <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e03f      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x44a>
 8002420:	e037      	b.n	8002492 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e032      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d028      	beq.n	800248e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d121      	bne.n	800248e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d11a      	bne.n	800248e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002464:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002466:	4293      	cmp	r3, r2
 8002468:	d111      	bne.n	800248e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d107      	bne.n	800248e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40007000 	.word	0x40007000
 80024a0:	40023800 	.word	0x40023800
 80024a4:	42470060 	.word	0x42470060

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7ff f990 	bl	80018bc <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7ff f98c 	bl	80018bc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f8f0 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	08005118 	.word	0x08005118
 800266c:	20000004 	.word	0x20000004
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800267a:	2100      	movs	r1, #0
 800267c:	6079      	str	r1, [r7, #4]
 800267e:	2100      	movs	r1, #0
 8002680:	60f9      	str	r1, [r7, #12]
 8002682:	2100      	movs	r1, #0
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002686:	2100      	movs	r1, #0
 8002688:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268a:	4952      	ldr	r1, [pc, #328]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800268c:	6889      	ldr	r1, [r1, #8]
 800268e:	f001 010c 	and.w	r1, r1, #12
 8002692:	2908      	cmp	r1, #8
 8002694:	d00d      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002696:	2908      	cmp	r1, #8
 8002698:	f200 8094 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x150>
 800269c:	2900      	cmp	r1, #0
 800269e:	d002      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x32>
 80026a0:	2904      	cmp	r1, #4
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x38>
 80026a4:	e08e      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80026a8:	60bb      	str	r3, [r7, #8]
       break;
 80026aa:	e08e      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_RCC_GetSysClockFreq+0x168>)
 80026ae:	60bb      	str	r3, [r7, #8]
      break;
 80026b0:	e08b      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b2:	4948      	ldr	r1, [pc, #288]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026b4:	6849      	ldr	r1, [r1, #4]
 80026b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026bc:	4945      	ldr	r1, [pc, #276]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026be:	6849      	ldr	r1, [r1, #4]
 80026c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d024      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4942      	ldr	r1, [pc, #264]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026ca:	6849      	ldr	r1, [r1, #4]
 80026cc:	0989      	lsrs	r1, r1, #6
 80026ce:	4608      	mov	r0, r1
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80026d8:	f04f 0500 	mov.w	r5, #0
 80026dc:	ea00 0204 	and.w	r2, r0, r4
 80026e0:	ea01 0305 	and.w	r3, r1, r5
 80026e4:	493d      	ldr	r1, [pc, #244]	; (80027dc <HAL_RCC_GetSysClockFreq+0x168>)
 80026e6:	fb01 f003 	mul.w	r0, r1, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	fb01 f102 	mul.w	r1, r1, r2
 80026f0:	1844      	adds	r4, r0, r1
 80026f2:	493a      	ldr	r1, [pc, #232]	; (80027dc <HAL_RCC_GetSysClockFreq+0x168>)
 80026f4:	fba2 0101 	umull	r0, r1, r2, r1
 80026f8:	1863      	adds	r3, r4, r1
 80026fa:	4619      	mov	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f7fd fd68 	bl	80001d8 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e04a      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	461a      	mov	r2, r3
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	ea02 0400 	and.w	r4, r2, r0
 800272a:	ea03 0501 	and.w	r5, r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	014b      	lsls	r3, r1, #5
 800273c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002740:	0142      	lsls	r2, r0, #5
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	1b00      	subs	r0, r0, r4
 8002748:	eb61 0105 	sbc.w	r1, r1, r5
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	018b      	lsls	r3, r1, #6
 8002756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800275a:	0182      	lsls	r2, r0, #6
 800275c:	1a12      	subs	r2, r2, r0
 800275e:	eb63 0301 	sbc.w	r3, r3, r1
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	00d9      	lsls	r1, r3, #3
 800276c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002770:	00d0      	lsls	r0, r2, #3
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	1912      	adds	r2, r2, r4
 8002778:	eb45 0303 	adc.w	r3, r5, r3
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0299      	lsls	r1, r3, #10
 8002786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800278a:	0290      	lsls	r0, r2, #10
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f7fd fd1c 	bl	80001d8 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	60bb      	str	r3, [r7, #8]
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80027c6:	60bb      	str	r3, [r7, #8]
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	68bb      	ldr	r3, [r7, #8]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	017d7840 	.word	0x017d7840

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	08005128 	.word	0x08005128

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffdc 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0b5b      	lsrs	r3, r3, #13
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	08005128 	.word	0x08005128

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800286c:	2b00      	cmp	r3, #0
 800286e:	d035      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002876:	f7ff f821 	bl	80018bc <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800287e:	f7ff f81d 	bl	80018bc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0b0      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002890:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	019a      	lsls	r2, r3, #6
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	071b      	lsls	r3, r3, #28
 80028a8:	4955      	ldr	r1, [pc, #340]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b0:	4b52      	ldr	r3, [pc, #328]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028b6:	f7ff f801 	bl	80018bc <HAL_GetTick>
 80028ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028be:	f7fe fffd 	bl	80018bc <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e090      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8083 	beq.w	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a43      	ldr	r2, [pc, #268]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3e      	ldr	r2, [pc, #248]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002912:	f7fe ffd3 	bl	80018bc <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe ffcf 	bl	80018bc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e062      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002938:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002940:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	429a      	cmp	r2, r3
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d114      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe ff9d 	bl	80018bc <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe ff99 	bl	80018bc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e02a      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ee      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b4:	d10d      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
 80029d0:	e005      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	4905      	ldr	r1, [pc, #20]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	42470068 	.word	0x42470068
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470e40 	.word	0x42470e40

08002a0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e083      	b.n	8002b26 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7f5b      	ldrb	r3, [r3, #29]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fb76 	bl	8001120 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	22ca      	movs	r2, #202	; 0xca
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2253      	movs	r2, #83	; 0x53
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9fb 	bl	8002e46 <RTC_EnterInitMode>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e05e      	b.n	8002b26 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6919      	ldr	r1, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10e      	bne.n	8002af4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f98d 	bl	8002df6 <HAL_RTC_WaitForSynchro>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	22ff      	movs	r2, #255	; 0xff
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e018      	b.n	8002b26 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	22ff      	movs	r2, #255	; 0xff
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b2e:	b590      	push	{r4, r7, lr}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	7f1b      	ldrb	r3, [r3, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_RTC_SetTime+0x1c>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0aa      	b.n	8002ca0 <HAL_RTC_SetTime+0x172>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2202      	movs	r2, #2
 8002b54:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d126      	bne.n	8002baa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f992 	bl	8002e9e <RTC_ByteToBcd2>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f98b 	bl	8002e9e <RTC_ByteToBcd2>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b8c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	789b      	ldrb	r3, [r3, #2]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f983 	bl	8002e9e <RTC_ByteToBcd2>
 8002b98:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b9a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	78db      	ldrb	r3, [r3, #3]
 8002ba2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e018      	b.n	8002bdc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bca:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002bd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	78db      	ldrb	r3, [r3, #3]
 8002bd6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	22ca      	movs	r2, #202	; 0xca
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2253      	movs	r2, #83	; 0x53
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f92a 	bl	8002e46 <RTC_EnterInitMode>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00b      	beq.n	8002c10 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2204      	movs	r2, #4
 8002c04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e047      	b.n	8002ca0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c1e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c2e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d111      	bne.n	8002c8a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8c5 	bl	8002df6 <HAL_RTC_WaitForSynchro>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00a      	b.n	8002ca0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}

08002ca8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	7f1b      	ldrb	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RTC_SetDate+0x1c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e094      	b.n	8002dee <HAL_RTC_SetDate+0x146>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_RTC_SetDate+0x4c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	330a      	adds	r3, #10
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	78db      	ldrb	r3, [r3, #3]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f8cd 	bl	8002e9e <RTC_ByteToBcd2>
 8002d04:	4603      	mov	r3, r0
 8002d06:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f8c6 	bl	8002e9e <RTC_ByteToBcd2>
 8002d12:	4603      	mov	r3, r0
 8002d14:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d16:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f8be 	bl	8002e9e <RTC_ByteToBcd2>
 8002d22:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d24:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00e      	b.n	8002d52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	78db      	ldrb	r3, [r3, #3]
 8002d38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d40:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002d46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ca      	movs	r2, #202	; 0xca
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2253      	movs	r2, #83	; 0x53
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f86f 	bl	8002e46 <RTC_EnterInitMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e033      	b.n	8002dee <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f81e 	bl	8002df6 <HAL_RTC_WaitForSynchro>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00a      	b.n	8002dee <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e12:	f7fe fd53 	bl	80018bc <HAL_GetTick>
 8002e16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e18:	e009      	b.n	8002e2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e1a:	f7fe fd4f 	bl	80018bc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e28:	d901      	bls.n	8002e2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e007      	b.n	8002e3e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d119      	bne.n	8002e94 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fd27 	bl	80018bc <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e70:	e009      	b.n	8002e86 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e72:	f7fe fd23 	bl	80018bc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e80:	d901      	bls.n	8002e86 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e007      	b.n	8002e96 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002eac:	e005      	b.n	8002eba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	3b0a      	subs	r3, #10
 8002eb8:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d8f6      	bhi.n	8002eae <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	b2db      	uxtb	r3, r3
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e07b      	b.n	8002fe4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efc:	d009      	beq.n	8002f12 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	61da      	str	r2, [r3, #28]
 8002f04:	e005      	b.n	8002f12 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe f90d 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	ea42 0103 	orr.w	r1, r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	f003 0104 	and.w	r1, r3, #4
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f003 0210 	and.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f8e2 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fa6e 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d122      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0202 	mvn.w	r2, #2
 80030b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f9fe 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 80030d2:	e005      	b.n	80030e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f9f0 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa01 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d122      	bne.n	800313a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d11b      	bne.n	800313a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0204 	mvn.w	r2, #4
 800310a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9d4 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 8003126:	e005      	b.n	8003134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9c6 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f9d7 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b08      	cmp	r3, #8
 8003146:	d122      	bne.n	800318e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11b      	bne.n	800318e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0208 	mvn.w	r2, #8
 800315e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2204      	movs	r2, #4
 8003164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f9aa 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 800317a:	e005      	b.n	8003188 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f99c 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9ad 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b10      	cmp	r3, #16
 800319a:	d122      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d11b      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0210 	mvn.w	r2, #16
 80031b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2208      	movs	r2, #8
 80031b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f980 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 80031ce:	e005      	b.n	80031dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f972 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f983 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0201 	mvn.w	r2, #1
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f94c 	bl	80034a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fbb7 	bl	80039a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d10e      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d107      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f948 	bl	80034f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b20      	cmp	r3, #32
 8003272:	d10e      	bne.n	8003292 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b20      	cmp	r3, #32
 8003280:	d107      	bne.n	8003292 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0220 	mvn.w	r2, #32
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fb81 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_ConfigClockSource+0x18>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0b3      	b.n	800341a <HAL_TIM_ConfigClockSource+0x180>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d03e      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xd0>
 80032ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f0:	f200 8087 	bhi.w	8003402 <HAL_TIM_ConfigClockSource+0x168>
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	f000 8085 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d87f      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 8003302:	2b70      	cmp	r3, #112	; 0x70
 8003304:	d01a      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xa2>
 8003306:	2b70      	cmp	r3, #112	; 0x70
 8003308:	d87b      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 800330a:	2b60      	cmp	r3, #96	; 0x60
 800330c:	d050      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x116>
 800330e:	2b60      	cmp	r3, #96	; 0x60
 8003310:	d877      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 8003312:	2b50      	cmp	r3, #80	; 0x50
 8003314:	d03c      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xf6>
 8003316:	2b50      	cmp	r3, #80	; 0x50
 8003318:	d873      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d058      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0x136>
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d86f      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 8003322:	2b30      	cmp	r3, #48	; 0x30
 8003324:	d064      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x156>
 8003326:	2b30      	cmp	r3, #48	; 0x30
 8003328:	d86b      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 800332a:	2b20      	cmp	r3, #32
 800332c:	d060      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x156>
 800332e:	2b20      	cmp	r3, #32
 8003330:	d867      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d05c      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x156>
 8003336:	2b10      	cmp	r3, #16
 8003338:	d05a      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800333a:	e062      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 fa86 	bl	800385c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800335e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e04e      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 fa6f 	bl	800385c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e03b      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	f000 f9e3 	bl	8003768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2150      	movs	r1, #80	; 0x50
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa3c 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80033ae:	e02b      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	461a      	mov	r2, r3
 80033be:	f000 fa02 	bl	80037c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2160      	movs	r1, #96	; 0x60
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fa2c 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80033ce:	e01b      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	461a      	mov	r2, r3
 80033de:	f000 f9c3 	bl	8003768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fa1c 	bl	8003826 <TIM_ITRx_SetConfig>
      break;
 80033ee:	e00b      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 fa13 	bl	8003826 <TIM_ITRx_SetConfig>
        break;
 8003400:	e002      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003436:	2302      	movs	r3, #2
 8003438:	e031      	b.n	800349e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8fd 	bl	800364c <TIM_SlaveTimer_SetConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e018      	b.n	800349e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800348a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d027      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d023      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0x124>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d017      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_Base_SetConfig+0x128>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_Base_SetConfig+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0x130>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0x134>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <TIM_Base_SetConfig+0x138>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <TIM_Base_SetConfig+0x13c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <TIM_Base_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40010400 	.word	0x40010400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800
 8003640:	40001800 	.word	0x40001800
 8003644:	40001c00 	.word	0x40001c00
 8003648:	40002000 	.word	0x40002000

0800364c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b70      	cmp	r3, #112	; 0x70
 8003690:	d01a      	beq.n	80036c8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003692:	2b70      	cmp	r3, #112	; 0x70
 8003694:	d860      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 8003696:	2b60      	cmp	r3, #96	; 0x60
 8003698:	d054      	beq.n	8003744 <TIM_SlaveTimer_SetConfig+0xf8>
 800369a:	2b60      	cmp	r3, #96	; 0x60
 800369c:	d85c      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 800369e:	2b50      	cmp	r3, #80	; 0x50
 80036a0:	d046      	beq.n	8003730 <TIM_SlaveTimer_SetConfig+0xe4>
 80036a2:	2b50      	cmp	r3, #80	; 0x50
 80036a4:	d858      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d019      	beq.n	80036de <TIM_SlaveTimer_SetConfig+0x92>
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d854      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 80036ae:	2b30      	cmp	r3, #48	; 0x30
 80036b0:	d054      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d850      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d050      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d84c      	bhi.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d04c      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d04a      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80036c6:	e047      	b.n	8003758 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68d9      	ldr	r1, [r3, #12]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f000 f8c0 	bl	800385c <TIM_ETR_SetConfig>
      break;
 80036dc:	e03f      	b.n	800375e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d101      	bne.n	80036ea <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e03a      	b.n	8003760 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003710:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	621a      	str	r2, [r3, #32]
      break;
 800372e:	e016      	b.n	800375e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 f813 	bl	8003768 <TIM_TI1_ConfigInputStage>
      break;
 8003742:	e00c      	b.n	800375e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6899      	ldr	r1, [r3, #8]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	461a      	mov	r2, r3
 8003752:	f000 f838 	bl	80037c6 <TIM_TI2_ConfigInputStage>
      break;
 8003756:	e002      	b.n	800375e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800375c:	bf00      	nop
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0201 	bic.w	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 030a 	bic.w	r3, r3, #10
 80037a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b087      	sub	sp, #28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0210 	bic.w	r2, r3, #16
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	f043 0307 	orr.w	r3, r3, #7
 8003848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	431a      	orrs	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e05a      	b.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d022      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d01d      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d018      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10c      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40010400 	.word	0x40010400
 800398c:	40014000 	.word	0x40014000
 8003990:	40001800 	.word	0x40001800

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e03f      	b.n	8003a4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd fc38 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fc7b 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d17c      	bne.n	8003b70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Transmit+0x2c>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e075      	b.n	8003b72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit+0x3e>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e06e      	b.n	8003b72 <HAL_UART_Transmit+0x11c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2221      	movs	r2, #33	; 0x21
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd ff07 	bl	80018bc <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_UART_Transmit+0x82>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e003      	b.n	8003ae0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ae8:	e02a      	b.n	8003b40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fa3d 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e036      	b.n	8003b72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e007      	b.n	8003b32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1cf      	bne.n	8003aea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2140      	movs	r1, #64	; 0x40
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa0d 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e006      	b.n	8003b72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d11d      	bne.n	8003bd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Receive_IT+0x26>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e016      	b.n	8003bd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Receive_IT+0x38>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e00f      	b.n	8003bd2 <HAL_UART_Receive_IT+0x58>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa1e 	bl	8004008 <UART_Start_Receive_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_UART_IRQHandler+0x52>
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fad1 	bl	80041ce <UART_Receive_IT>
      return;
 8003c2c:	e17c      	b.n	8003f28 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80b1 	beq.w	8003d98 <HAL_UART_IRQHandler+0x1bc>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_UART_IRQHandler+0x70>
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80a6 	beq.w	8003d98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_UART_IRQHandler+0x90>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_UART_IRQHandler+0xb0>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_UART_IRQHandler+0xd0>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00f      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xfa>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <HAL_UART_IRQHandler+0xee>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 811f 	beq.w	8003f1e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_UART_IRQHandler+0x11e>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa6a 	bl	80041ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_UART_IRQHandler+0x146>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d031      	beq.n	8003d86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9aa 	bl	800407c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d123      	bne.n	8003d7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	4a77      	ldr	r2, [pc, #476]	; (8003f30 <HAL_UART_IRQHandler+0x354>)
 8003d54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd ff3b 	bl	8001bd6 <HAL_DMA_Abort_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d70:	4610      	mov	r0, r2
 8003d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e00e      	b.n	8003d94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8e6 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e00a      	b.n	8003d94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8e2 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e006      	b.n	8003d94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8de 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d92:	e0c4      	b.n	8003f1e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	bf00      	nop
    return;
 8003d96:	e0c2      	b.n	8003f1e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 80a2 	bne.w	8003ee6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 809c 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8096 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d14f      	bne.n	8003e7e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003de8:	8a3b      	ldrh	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8099 	beq.w	8003f22 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003df4:	8a3a      	ldrh	r2, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	f080 8093 	bcs.w	8003f22 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8a3a      	ldrh	r2, [r7, #16]
 8003e00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	d02b      	beq.n	8003e66 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0210 	bic.w	r2, r2, #16
 8003e5a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd fe48 	bl	8001af6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f870 	bl	8003f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e7c:	e051      	b.n	8003f22 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d047      	beq.n	8003f26 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003e96:	8a7b      	ldrh	r3, [r7, #18]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d044      	beq.n	8003f26 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eaa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0210 	bic.w	r2, r2, #16
 8003ed8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eda:	8a7b      	ldrh	r3, [r7, #18]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f83c 	bl	8003f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ee4:	e01f      	b.n	8003f26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_UART_IRQHandler+0x326>
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8ff 	bl	80040fe <UART_Transmit_IT>
    return;
 8003f00:	e012      	b.n	8003f28 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_UART_IRQHandler+0x34c>
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f941 	bl	800419e <UART_EndTransmit_IT>
    return;
 8003f1c:	e004      	b.n	8003f28 <HAL_UART_IRQHandler+0x34c>
    return;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_UART_IRQHandler+0x34c>
      return;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_UART_IRQHandler+0x34c>
      return;
 8003f26:	bf00      	nop
  }
}
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	080040d7 	.word	0x080040d7

08003f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f84:	e02c      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d028      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f94:	f7fd fc92 	bl	80018bc <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d21d      	bcs.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e00f      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d0c3      	beq.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0220 	orr.w	r2, r2, #32
 800406c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0210 	bic.w	r2, r2, #16
 80040ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff29 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b21      	cmp	r3, #33	; 0x21
 8004110:	d13e      	bne.n	8004190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d114      	bne.n	8004146 <UART_Transmit_IT+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d110      	bne.n	8004146 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	1c9a      	adds	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]
 8004144:	e008      	b.n	8004158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6211      	str	r1, [r2, #32]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29b      	uxth	r3, r3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4619      	mov	r1, r3
 8004166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff feb8 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b22      	cmp	r3, #34	; 0x22
 80041e0:	f040 8087 	bne.w	80042f2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ec:	d117      	bne.n	800421e <UART_Receive_IT+0x50>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d113      	bne.n	800421e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420c:	b29a      	uxth	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
 800421c:	e026      	b.n	800426c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d007      	beq.n	8004242 <UART_Receive_IT+0x74>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <UART_Receive_IT+0x82>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e008      	b.n	8004262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29b      	uxth	r3, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4619      	mov	r1, r3
 800427a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800427c:	2b00      	cmp	r3, #0
 800427e:	d136      	bne.n	80042ee <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0220 	bic.w	r2, r2, #32
 800428e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800429e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10e      	bne.n	80042de <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0210 	bic.w	r2, r2, #16
 80042ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fe40 	bl	8003f5c <HAL_UARTEx_RxEventCallback>
 80042dc:	e002      	b.n	80042e4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc f91a 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e002      	b.n	80042f4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004300:	b09f      	sub	sp, #124	; 0x7c
 8004302:	af00      	add	r7, sp, #0
 8004304:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	68d9      	ldr	r1, [r3, #12]
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	ea40 0301 	orr.w	r3, r0, r1
 800431c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	431a      	orrs	r2, r3
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	431a      	orrs	r2, r3
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4313      	orrs	r3, r2
 8004334:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004340:	f021 010c 	bic.w	r1, r1, #12
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	6999      	ldr	r1, [r3, #24]
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	ea40 0301 	orr.w	r3, r0, r1
 8004364:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4bc5      	ldr	r3, [pc, #788]	; (8004680 <UART_SetConfig+0x384>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d004      	beq.n	800437a <UART_SetConfig+0x7e>
 8004370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4bc3      	ldr	r3, [pc, #780]	; (8004684 <UART_SetConfig+0x388>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d103      	bne.n	8004382 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800437a:	f7fe fa51 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 800437e:	6778      	str	r0, [r7, #116]	; 0x74
 8004380:	e002      	b.n	8004388 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004382:	f7fe fa39 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8004386:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004390:	f040 80b6 	bne.w	8004500 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004396:	461c      	mov	r4, r3
 8004398:	f04f 0500 	mov.w	r5, #0
 800439c:	4622      	mov	r2, r4
 800439e:	462b      	mov	r3, r5
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	6439      	str	r1, [r7, #64]	; 0x40
 80043a4:	415b      	adcs	r3, r3
 80043a6:	647b      	str	r3, [r7, #68]	; 0x44
 80043a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ac:	1912      	adds	r2, r2, r4
 80043ae:	eb45 0303 	adc.w	r3, r5, r3
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	00d9      	lsls	r1, r3, #3
 80043bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c0:	00d0      	lsls	r0, r2, #3
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	1911      	adds	r1, r2, r4
 80043c8:	6639      	str	r1, [r7, #96]	; 0x60
 80043ca:	416b      	adcs	r3, r5
 80043cc:	667b      	str	r3, [r7, #100]	; 0x64
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	63b9      	str	r1, [r7, #56]	; 0x38
 80043dc:	415b      	adcs	r3, r3
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043e8:	f7fb fef6 	bl	80001d8 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <UART_SetConfig+0x38c>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011e      	lsls	r6, r3, #4
 80043fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fc:	461c      	mov	r4, r3
 80043fe:	f04f 0500 	mov.w	r5, #0
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	1891      	adds	r1, r2, r2
 8004408:	6339      	str	r1, [r7, #48]	; 0x30
 800440a:	415b      	adcs	r3, r3
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004412:	1912      	adds	r2, r2, r4
 8004414:	eb45 0303 	adc.w	r3, r5, r3
 8004418:	f04f 0000 	mov.w	r0, #0
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	00d9      	lsls	r1, r3, #3
 8004422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004426:	00d0      	lsls	r0, r2, #3
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	1911      	adds	r1, r2, r4
 800442e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004430:	416b      	adcs	r3, r5
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	461a      	mov	r2, r3
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	1891      	adds	r1, r2, r2
 8004440:	62b9      	str	r1, [r7, #40]	; 0x28
 8004442:	415b      	adcs	r3, r3
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800444a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800444e:	f7fb fec3 	bl	80001d8 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4b8c      	ldr	r3, [pc, #560]	; (8004688 <UART_SetConfig+0x38c>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	2164      	movs	r1, #100	; 0x64
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	3332      	adds	r3, #50	; 0x32
 800446a:	4a87      	ldr	r2, [pc, #540]	; (8004688 <UART_SetConfig+0x38c>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004478:	441e      	add	r6, r3
 800447a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447c:	4618      	mov	r0, r3
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	1894      	adds	r4, r2, r2
 8004488:	623c      	str	r4, [r7, #32]
 800448a:	415b      	adcs	r3, r3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004492:	1812      	adds	r2, r2, r0
 8004494:	eb41 0303 	adc.w	r3, r1, r3
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	f04f 0500 	mov.w	r5, #0
 80044a0:	00dd      	lsls	r5, r3, #3
 80044a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044a6:	00d4      	lsls	r4, r2, #3
 80044a8:	4622      	mov	r2, r4
 80044aa:	462b      	mov	r3, r5
 80044ac:	1814      	adds	r4, r2, r0
 80044ae:	653c      	str	r4, [r7, #80]	; 0x50
 80044b0:	414b      	adcs	r3, r1
 80044b2:	657b      	str	r3, [r7, #84]	; 0x54
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	61b9      	str	r1, [r7, #24]
 80044c2:	415b      	adcs	r3, r3
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044ce:	f7fb fe83 	bl	80001d8 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <UART_SetConfig+0x38c>)
 80044d8:	fba3 1302 	umull	r1, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	2164      	movs	r1, #100	; 0x64
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3332      	adds	r3, #50	; 0x32
 80044ea:	4a67      	ldr	r2, [pc, #412]	; (8004688 <UART_SetConfig+0x38c>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4432      	add	r2, r6
 80044fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044fe:	e0b9      	b.n	8004674 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004502:	461c      	mov	r4, r3
 8004504:	f04f 0500 	mov.w	r5, #0
 8004508:	4622      	mov	r2, r4
 800450a:	462b      	mov	r3, r5
 800450c:	1891      	adds	r1, r2, r2
 800450e:	6139      	str	r1, [r7, #16]
 8004510:	415b      	adcs	r3, r3
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004518:	1912      	adds	r2, r2, r4
 800451a:	eb45 0303 	adc.w	r3, r5, r3
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	00d9      	lsls	r1, r3, #3
 8004528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800452c:	00d0      	lsls	r0, r2, #3
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	eb12 0804 	adds.w	r8, r2, r4
 8004536:	eb43 0905 	adc.w	r9, r3, r5
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	008b      	lsls	r3, r1, #2
 800454e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004552:	0082      	lsls	r2, r0, #2
 8004554:	4640      	mov	r0, r8
 8004556:	4649      	mov	r1, r9
 8004558:	f7fb fe3e 	bl	80001d8 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b49      	ldr	r3, [pc, #292]	; (8004688 <UART_SetConfig+0x38c>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011e      	lsls	r6, r3, #4
 800456a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456c:	4618      	mov	r0, r3
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	1894      	adds	r4, r2, r2
 8004578:	60bc      	str	r4, [r7, #8]
 800457a:	415b      	adcs	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004582:	1812      	adds	r2, r2, r0
 8004584:	eb41 0303 	adc.w	r3, r1, r3
 8004588:	f04f 0400 	mov.w	r4, #0
 800458c:	f04f 0500 	mov.w	r5, #0
 8004590:	00dd      	lsls	r5, r3, #3
 8004592:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004596:	00d4      	lsls	r4, r2, #3
 8004598:	4622      	mov	r2, r4
 800459a:	462b      	mov	r3, r5
 800459c:	1814      	adds	r4, r2, r0
 800459e:	64bc      	str	r4, [r7, #72]	; 0x48
 80045a0:	414b      	adcs	r3, r1
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f04f 0100 	mov.w	r1, #0
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045bc:	0082      	lsls	r2, r0, #2
 80045be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045c2:	f7fb fe09 	bl	80001d8 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <UART_SetConfig+0x38c>)
 80045cc:	fba3 1302 	umull	r1, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	2164      	movs	r1, #100	; 0x64
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	3332      	adds	r3, #50	; 0x32
 80045de:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <UART_SetConfig+0x38c>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ea:	441e      	add	r6, r3
 80045ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ee:	4618      	mov	r0, r3
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	1894      	adds	r4, r2, r2
 80045fa:	603c      	str	r4, [r7, #0]
 80045fc:	415b      	adcs	r3, r3
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004604:	1812      	adds	r2, r2, r0
 8004606:	eb41 0303 	adc.w	r3, r1, r3
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	f04f 0500 	mov.w	r5, #0
 8004612:	00dd      	lsls	r5, r3, #3
 8004614:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004618:	00d4      	lsls	r4, r2, #3
 800461a:	4622      	mov	r2, r4
 800461c:	462b      	mov	r3, r5
 800461e:	eb12 0a00 	adds.w	sl, r2, r0
 8004622:	eb43 0b01 	adc.w	fp, r3, r1
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	008b      	lsls	r3, r1, #2
 800463a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800463e:	0082      	lsls	r2, r0, #2
 8004640:	4650      	mov	r0, sl
 8004642:	4659      	mov	r1, fp
 8004644:	f7fb fdc8 	bl	80001d8 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <UART_SetConfig+0x38c>)
 800464e:	fba3 1302 	umull	r1, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2164      	movs	r1, #100	; 0x64
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <UART_SetConfig+0x38c>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4432      	add	r2, r6
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	377c      	adds	r7, #124	; 0x7c
 8004678:	46bd      	mov	sp, r7
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467e:	bf00      	nop
 8004680:	40011000 	.word	0x40011000
 8004684:	40011400 	.word	0x40011400
 8004688:	51eb851f 	.word	0x51eb851f

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4d0d      	ldr	r5, [pc, #52]	; (80046d0 <__libc_init_array+0x38>)
 800469c:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <__libc_init_array+0x3c>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	2600      	movs	r6, #0
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	4d0b      	ldr	r5, [pc, #44]	; (80046d8 <__libc_init_array+0x40>)
 80046aa:	4c0c      	ldr	r4, [pc, #48]	; (80046dc <__libc_init_array+0x44>)
 80046ac:	f000 fce6 	bl	800507c <_init>
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2600      	movs	r6, #0
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	0800519c 	.word	0x0800519c
 80046d4:	0800519c 	.word	0x0800519c
 80046d8:	0800519c 	.word	0x0800519c
 80046dc:	080051a0 	.word	0x080051a0

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <_puts_r>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	4605      	mov	r5, r0
 80046f6:	b118      	cbz	r0, 8004700 <_puts_r+0x10>
 80046f8:	6983      	ldr	r3, [r0, #24]
 80046fa:	b90b      	cbnz	r3, 8004700 <_puts_r+0x10>
 80046fc:	f000 fa48 	bl	8004b90 <__sinit>
 8004700:	69ab      	ldr	r3, [r5, #24]
 8004702:	68ac      	ldr	r4, [r5, #8]
 8004704:	b913      	cbnz	r3, 800470c <_puts_r+0x1c>
 8004706:	4628      	mov	r0, r5
 8004708:	f000 fa42 	bl	8004b90 <__sinit>
 800470c:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <_puts_r+0xd0>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d120      	bne.n	8004754 <_puts_r+0x64>
 8004712:	686c      	ldr	r4, [r5, #4]
 8004714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d405      	bmi.n	8004726 <_puts_r+0x36>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	0598      	lsls	r0, r3, #22
 800471e:	d402      	bmi.n	8004726 <_puts_r+0x36>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f000 fad3 	bl	8004ccc <__retarget_lock_acquire_recursive>
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	0719      	lsls	r1, r3, #28
 800472a:	d51d      	bpl.n	8004768 <_puts_r+0x78>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b1db      	cbz	r3, 8004768 <_puts_r+0x78>
 8004730:	3e01      	subs	r6, #1
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004738:	3b01      	subs	r3, #1
 800473a:	60a3      	str	r3, [r4, #8]
 800473c:	bb39      	cbnz	r1, 800478e <_puts_r+0x9e>
 800473e:	2b00      	cmp	r3, #0
 8004740:	da38      	bge.n	80047b4 <_puts_r+0xc4>
 8004742:	4622      	mov	r2, r4
 8004744:	210a      	movs	r1, #10
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f848 	bl	80047dc <__swbuf_r>
 800474c:	3001      	adds	r0, #1
 800474e:	d011      	beq.n	8004774 <_puts_r+0x84>
 8004750:	250a      	movs	r5, #10
 8004752:	e011      	b.n	8004778 <_puts_r+0x88>
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <_puts_r+0xd4>)
 8004756:	429c      	cmp	r4, r3
 8004758:	d101      	bne.n	800475e <_puts_r+0x6e>
 800475a:	68ac      	ldr	r4, [r5, #8]
 800475c:	e7da      	b.n	8004714 <_puts_r+0x24>
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <_puts_r+0xd8>)
 8004760:	429c      	cmp	r4, r3
 8004762:	bf08      	it	eq
 8004764:	68ec      	ldreq	r4, [r5, #12]
 8004766:	e7d5      	b.n	8004714 <_puts_r+0x24>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f888 	bl	8004880 <__swsetup_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0dd      	beq.n	8004730 <_puts_r+0x40>
 8004774:	f04f 35ff 	mov.w	r5, #4294967295
 8004778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477a:	07da      	lsls	r2, r3, #31
 800477c:	d405      	bmi.n	800478a <_puts_r+0x9a>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	059b      	lsls	r3, r3, #22
 8004782:	d402      	bmi.n	800478a <_puts_r+0x9a>
 8004784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004786:	f000 faa2 	bl	8004cce <__retarget_lock_release_recursive>
 800478a:	4628      	mov	r0, r5
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	2b00      	cmp	r3, #0
 8004790:	da04      	bge.n	800479c <_puts_r+0xac>
 8004792:	69a2      	ldr	r2, [r4, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	dc06      	bgt.n	80047a6 <_puts_r+0xb6>
 8004798:	290a      	cmp	r1, #10
 800479a:	d004      	beq.n	80047a6 <_puts_r+0xb6>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	7019      	strb	r1, [r3, #0]
 80047a4:	e7c5      	b.n	8004732 <_puts_r+0x42>
 80047a6:	4622      	mov	r2, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f817 	bl	80047dc <__swbuf_r>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d1bf      	bne.n	8004732 <_puts_r+0x42>
 80047b2:	e7df      	b.n	8004774 <_puts_r+0x84>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	250a      	movs	r5, #10
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	701d      	strb	r5, [r3, #0]
 80047be:	e7db      	b.n	8004778 <_puts_r+0x88>
 80047c0:	08005154 	.word	0x08005154
 80047c4:	08005174 	.word	0x08005174
 80047c8:	08005134 	.word	0x08005134

080047cc <puts>:
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <puts+0xc>)
 80047ce:	4601      	mov	r1, r0
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	f7ff bf8d 	b.w	80046f0 <_puts_r>
 80047d6:	bf00      	nop
 80047d8:	20000010 	.word	0x20000010

080047dc <__swbuf_r>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	460e      	mov	r6, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	4605      	mov	r5, r0
 80047e4:	b118      	cbz	r0, 80047ee <__swbuf_r+0x12>
 80047e6:	6983      	ldr	r3, [r0, #24]
 80047e8:	b90b      	cbnz	r3, 80047ee <__swbuf_r+0x12>
 80047ea:	f000 f9d1 	bl	8004b90 <__sinit>
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <__swbuf_r+0x98>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d12b      	bne.n	800484c <__swbuf_r+0x70>
 80047f4:	686c      	ldr	r4, [r5, #4]
 80047f6:	69a3      	ldr	r3, [r4, #24]
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	071a      	lsls	r2, r3, #28
 80047fe:	d52f      	bpl.n	8004860 <__swbuf_r+0x84>
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	b36b      	cbz	r3, 8004860 <__swbuf_r+0x84>
 8004804:	6923      	ldr	r3, [r4, #16]
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	1ac0      	subs	r0, r0, r3
 800480a:	6963      	ldr	r3, [r4, #20]
 800480c:	b2f6      	uxtb	r6, r6
 800480e:	4283      	cmp	r3, r0
 8004810:	4637      	mov	r7, r6
 8004812:	dc04      	bgt.n	800481e <__swbuf_r+0x42>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f926 	bl	8004a68 <_fflush_r>
 800481c:	bb30      	cbnz	r0, 800486c <__swbuf_r+0x90>
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	3b01      	subs	r3, #1
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	701e      	strb	r6, [r3, #0]
 800482c:	6963      	ldr	r3, [r4, #20]
 800482e:	3001      	adds	r0, #1
 8004830:	4283      	cmp	r3, r0
 8004832:	d004      	beq.n	800483e <__swbuf_r+0x62>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	07db      	lsls	r3, r3, #31
 8004838:	d506      	bpl.n	8004848 <__swbuf_r+0x6c>
 800483a:	2e0a      	cmp	r6, #10
 800483c:	d104      	bne.n	8004848 <__swbuf_r+0x6c>
 800483e:	4621      	mov	r1, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f911 	bl	8004a68 <_fflush_r>
 8004846:	b988      	cbnz	r0, 800486c <__swbuf_r+0x90>
 8004848:	4638      	mov	r0, r7
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <__swbuf_r+0x9c>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <__swbuf_r+0x7a>
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	e7cf      	b.n	80047f6 <__swbuf_r+0x1a>
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <__swbuf_r+0xa0>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68ec      	ldreq	r4, [r5, #12]
 800485e:	e7ca      	b.n	80047f6 <__swbuf_r+0x1a>
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f80c 	bl	8004880 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d0cb      	beq.n	8004804 <__swbuf_r+0x28>
 800486c:	f04f 37ff 	mov.w	r7, #4294967295
 8004870:	e7ea      	b.n	8004848 <__swbuf_r+0x6c>
 8004872:	bf00      	nop
 8004874:	08005154 	.word	0x08005154
 8004878:	08005174 	.word	0x08005174
 800487c:	08005134 	.word	0x08005134

08004880 <__swsetup_r>:
 8004880:	4b32      	ldr	r3, [pc, #200]	; (800494c <__swsetup_r+0xcc>)
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	681d      	ldr	r5, [r3, #0]
 8004886:	4606      	mov	r6, r0
 8004888:	460c      	mov	r4, r1
 800488a:	b125      	cbz	r5, 8004896 <__swsetup_r+0x16>
 800488c:	69ab      	ldr	r3, [r5, #24]
 800488e:	b913      	cbnz	r3, 8004896 <__swsetup_r+0x16>
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f97d 	bl	8004b90 <__sinit>
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <__swsetup_r+0xd0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d10f      	bne.n	80048bc <__swsetup_r+0x3c>
 800489c:	686c      	ldr	r4, [r5, #4]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d42c      	bmi.n	8004902 <__swsetup_r+0x82>
 80048a8:	06dd      	lsls	r5, r3, #27
 80048aa:	d411      	bmi.n	80048d0 <__swsetup_r+0x50>
 80048ac:	2309      	movs	r3, #9
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e03e      	b.n	800493a <__swsetup_r+0xba>
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <__swsetup_r+0xd4>)
 80048be:	429c      	cmp	r4, r3
 80048c0:	d101      	bne.n	80048c6 <__swsetup_r+0x46>
 80048c2:	68ac      	ldr	r4, [r5, #8]
 80048c4:	e7eb      	b.n	800489e <__swsetup_r+0x1e>
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <__swsetup_r+0xd8>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	bf08      	it	eq
 80048cc:	68ec      	ldreq	r4, [r5, #12]
 80048ce:	e7e6      	b.n	800489e <__swsetup_r+0x1e>
 80048d0:	0758      	lsls	r0, r3, #29
 80048d2:	d512      	bpl.n	80048fa <__swsetup_r+0x7a>
 80048d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048d6:	b141      	cbz	r1, 80048ea <__swsetup_r+0x6a>
 80048d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048dc:	4299      	cmp	r1, r3
 80048de:	d002      	beq.n	80048e6 <__swsetup_r+0x66>
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 fa59 	bl	8004d98 <_free_r>
 80048e6:	2300      	movs	r3, #0
 80048e8:	6363      	str	r3, [r4, #52]	; 0x34
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	2300      	movs	r3, #0
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	b94b      	cbnz	r3, 800491a <__swsetup_r+0x9a>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800490c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004910:	d003      	beq.n	800491a <__swsetup_r+0x9a>
 8004912:	4621      	mov	r1, r4
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f9ff 	bl	8004d18 <__smakebuf_r>
 800491a:	89a0      	ldrh	r0, [r4, #12]
 800491c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004920:	f010 0301 	ands.w	r3, r0, #1
 8004924:	d00a      	beq.n	800493c <__swsetup_r+0xbc>
 8004926:	2300      	movs	r3, #0
 8004928:	60a3      	str	r3, [r4, #8]
 800492a:	6963      	ldr	r3, [r4, #20]
 800492c:	425b      	negs	r3, r3
 800492e:	61a3      	str	r3, [r4, #24]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	b943      	cbnz	r3, 8004946 <__swsetup_r+0xc6>
 8004934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004938:	d1ba      	bne.n	80048b0 <__swsetup_r+0x30>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	0781      	lsls	r1, r0, #30
 800493e:	bf58      	it	pl
 8004940:	6963      	ldrpl	r3, [r4, #20]
 8004942:	60a3      	str	r3, [r4, #8]
 8004944:	e7f4      	b.n	8004930 <__swsetup_r+0xb0>
 8004946:	2000      	movs	r0, #0
 8004948:	e7f7      	b.n	800493a <__swsetup_r+0xba>
 800494a:	bf00      	nop
 800494c:	20000010 	.word	0x20000010
 8004950:	08005154 	.word	0x08005154
 8004954:	08005174 	.word	0x08005174
 8004958:	08005134 	.word	0x08005134

0800495c <__sflush_r>:
 800495c:	898a      	ldrh	r2, [r1, #12]
 800495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	4605      	mov	r5, r0
 8004964:	0710      	lsls	r0, r2, #28
 8004966:	460c      	mov	r4, r1
 8004968:	d458      	bmi.n	8004a1c <__sflush_r+0xc0>
 800496a:	684b      	ldr	r3, [r1, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dc05      	bgt.n	800497c <__sflush_r+0x20>
 8004970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	dc02      	bgt.n	800497c <__sflush_r+0x20>
 8004976:	2000      	movs	r0, #0
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800497e:	2e00      	cmp	r6, #0
 8004980:	d0f9      	beq.n	8004976 <__sflush_r+0x1a>
 8004982:	2300      	movs	r3, #0
 8004984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004988:	682f      	ldr	r7, [r5, #0]
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	d032      	beq.n	80049f4 <__sflush_r+0x98>
 800498e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	075a      	lsls	r2, r3, #29
 8004994:	d505      	bpl.n	80049a2 <__sflush_r+0x46>
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	1ac0      	subs	r0, r0, r3
 800499a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800499c:	b10b      	cbz	r3, 80049a2 <__sflush_r+0x46>
 800499e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049a0:	1ac0      	subs	r0, r0, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	4602      	mov	r2, r0
 80049a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049a8:	6a21      	ldr	r1, [r4, #32]
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b0      	blx	r6
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	d106      	bne.n	80049c2 <__sflush_r+0x66>
 80049b4:	6829      	ldr	r1, [r5, #0]
 80049b6:	291d      	cmp	r1, #29
 80049b8:	d82c      	bhi.n	8004a14 <__sflush_r+0xb8>
 80049ba:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <__sflush_r+0x108>)
 80049bc:	40ca      	lsrs	r2, r1
 80049be:	07d6      	lsls	r6, r2, #31
 80049c0:	d528      	bpl.n	8004a14 <__sflush_r+0xb8>
 80049c2:	2200      	movs	r2, #0
 80049c4:	6062      	str	r2, [r4, #4]
 80049c6:	04d9      	lsls	r1, r3, #19
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	d504      	bpl.n	80049d8 <__sflush_r+0x7c>
 80049ce:	1c42      	adds	r2, r0, #1
 80049d0:	d101      	bne.n	80049d6 <__sflush_r+0x7a>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	b903      	cbnz	r3, 80049d8 <__sflush_r+0x7c>
 80049d6:	6560      	str	r0, [r4, #84]	; 0x54
 80049d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049da:	602f      	str	r7, [r5, #0]
 80049dc:	2900      	cmp	r1, #0
 80049de:	d0ca      	beq.n	8004976 <__sflush_r+0x1a>
 80049e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <__sflush_r+0x92>
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f9d5 	bl	8004d98 <_free_r>
 80049ee:	2000      	movs	r0, #0
 80049f0:	6360      	str	r0, [r4, #52]	; 0x34
 80049f2:	e7c1      	b.n	8004978 <__sflush_r+0x1c>
 80049f4:	6a21      	ldr	r1, [r4, #32]
 80049f6:	2301      	movs	r3, #1
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b0      	blx	r6
 80049fc:	1c41      	adds	r1, r0, #1
 80049fe:	d1c7      	bne.n	8004990 <__sflush_r+0x34>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0c4      	beq.n	8004990 <__sflush_r+0x34>
 8004a06:	2b1d      	cmp	r3, #29
 8004a08:	d001      	beq.n	8004a0e <__sflush_r+0xb2>
 8004a0a:	2b16      	cmp	r3, #22
 8004a0c:	d101      	bne.n	8004a12 <__sflush_r+0xb6>
 8004a0e:	602f      	str	r7, [r5, #0]
 8004a10:	e7b1      	b.n	8004976 <__sflush_r+0x1a>
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	e7ad      	b.n	8004978 <__sflush_r+0x1c>
 8004a1c:	690f      	ldr	r7, [r1, #16]
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	d0a9      	beq.n	8004976 <__sflush_r+0x1a>
 8004a22:	0793      	lsls	r3, r2, #30
 8004a24:	680e      	ldr	r6, [r1, #0]
 8004a26:	bf08      	it	eq
 8004a28:	694b      	ldreq	r3, [r1, #20]
 8004a2a:	600f      	str	r7, [r1, #0]
 8004a2c:	bf18      	it	ne
 8004a2e:	2300      	movne	r3, #0
 8004a30:	eba6 0807 	sub.w	r8, r6, r7
 8004a34:	608b      	str	r3, [r1, #8]
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	dd9c      	ble.n	8004976 <__sflush_r+0x1a>
 8004a3c:	6a21      	ldr	r1, [r4, #32]
 8004a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a40:	4643      	mov	r3, r8
 8004a42:	463a      	mov	r2, r7
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b0      	blx	r6
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	dc06      	bgt.n	8004a5a <__sflush_r+0xfe>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e78e      	b.n	8004978 <__sflush_r+0x1c>
 8004a5a:	4407      	add	r7, r0
 8004a5c:	eba8 0800 	sub.w	r8, r8, r0
 8004a60:	e7e9      	b.n	8004a36 <__sflush_r+0xda>
 8004a62:	bf00      	nop
 8004a64:	20400001 	.word	0x20400001

08004a68 <_fflush_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b913      	cbnz	r3, 8004a78 <_fflush_r+0x10>
 8004a72:	2500      	movs	r5, #0
 8004a74:	4628      	mov	r0, r5
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	b118      	cbz	r0, 8004a82 <_fflush_r+0x1a>
 8004a7a:	6983      	ldr	r3, [r0, #24]
 8004a7c:	b90b      	cbnz	r3, 8004a82 <_fflush_r+0x1a>
 8004a7e:	f000 f887 	bl	8004b90 <__sinit>
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <_fflush_r+0x6c>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d11b      	bne.n	8004ac0 <_fflush_r+0x58>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ef      	beq.n	8004a72 <_fflush_r+0xa>
 8004a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a94:	07d0      	lsls	r0, r2, #31
 8004a96:	d404      	bmi.n	8004aa2 <_fflush_r+0x3a>
 8004a98:	0599      	lsls	r1, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_fflush_r+0x3a>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9e:	f000 f915 	bl	8004ccc <__retarget_lock_acquire_recursive>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f7ff ff59 	bl	800495c <__sflush_r>
 8004aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	4605      	mov	r5, r0
 8004ab0:	d4e0      	bmi.n	8004a74 <_fflush_r+0xc>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	d4dd      	bmi.n	8004a74 <_fflush_r+0xc>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aba:	f000 f908 	bl	8004cce <__retarget_lock_release_recursive>
 8004abe:	e7d9      	b.n	8004a74 <_fflush_r+0xc>
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <_fflush_r+0x70>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d101      	bne.n	8004aca <_fflush_r+0x62>
 8004ac6:	68ac      	ldr	r4, [r5, #8]
 8004ac8:	e7df      	b.n	8004a8a <_fflush_r+0x22>
 8004aca:	4b04      	ldr	r3, [pc, #16]	; (8004adc <_fflush_r+0x74>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	bf08      	it	eq
 8004ad0:	68ec      	ldreq	r4, [r5, #12]
 8004ad2:	e7da      	b.n	8004a8a <_fflush_r+0x22>
 8004ad4:	08005154 	.word	0x08005154
 8004ad8:	08005174 	.word	0x08005174
 8004adc:	08005134 	.word	0x08005134

08004ae0 <std>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aee:	6083      	str	r3, [r0, #8]
 8004af0:	8181      	strh	r1, [r0, #12]
 8004af2:	6643      	str	r3, [r0, #100]	; 0x64
 8004af4:	81c2      	strh	r2, [r0, #14]
 8004af6:	6183      	str	r3, [r0, #24]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2208      	movs	r2, #8
 8004afc:	305c      	adds	r0, #92	; 0x5c
 8004afe:	f7ff fdef 	bl	80046e0 <memset>
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <std+0x38>)
 8004b04:	6263      	str	r3, [r4, #36]	; 0x24
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <std+0x3c>)
 8004b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <std+0x40>)
 8004b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <std+0x44>)
 8004b10:	6224      	str	r4, [r4, #32]
 8004b12:	6323      	str	r3, [r4, #48]	; 0x30
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop
 8004b18:	08004f0d 	.word	0x08004f0d
 8004b1c:	08004f2f 	.word	0x08004f2f
 8004b20:	08004f67 	.word	0x08004f67
 8004b24:	08004f8b 	.word	0x08004f8b

08004b28 <_cleanup_r>:
 8004b28:	4901      	ldr	r1, [pc, #4]	; (8004b30 <_cleanup_r+0x8>)
 8004b2a:	f000 b8af 	b.w	8004c8c <_fwalk_reent>
 8004b2e:	bf00      	nop
 8004b30:	08004a69 	.word	0x08004a69

08004b34 <__sfmoreglue>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	1e4a      	subs	r2, r1, #1
 8004b38:	2568      	movs	r5, #104	; 0x68
 8004b3a:	4355      	muls	r5, r2
 8004b3c:	460e      	mov	r6, r1
 8004b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b42:	f000 f979 	bl	8004e38 <_malloc_r>
 8004b46:	4604      	mov	r4, r0
 8004b48:	b140      	cbz	r0, 8004b5c <__sfmoreglue+0x28>
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b50:	300c      	adds	r0, #12
 8004b52:	60a0      	str	r0, [r4, #8]
 8004b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b58:	f7ff fdc2 	bl	80046e0 <memset>
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <__sfp_lock_acquire>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__sfp_lock_acquire+0x8>)
 8004b62:	f000 b8b3 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	200003f4 	.word	0x200003f4

08004b6c <__sfp_lock_release>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__sfp_lock_release+0x8>)
 8004b6e:	f000 b8ae 	b.w	8004cce <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	200003f4 	.word	0x200003f4

08004b78 <__sinit_lock_acquire>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__sinit_lock_acquire+0x8>)
 8004b7a:	f000 b8a7 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	200003ef 	.word	0x200003ef

08004b84 <__sinit_lock_release>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__sinit_lock_release+0x8>)
 8004b86:	f000 b8a2 	b.w	8004cce <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	200003ef 	.word	0x200003ef

08004b90 <__sinit>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	f7ff fff0 	bl	8004b78 <__sinit_lock_acquire>
 8004b98:	69a3      	ldr	r3, [r4, #24]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <__sinit+0x14>
 8004b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba0:	f7ff bff0 	b.w	8004b84 <__sinit_lock_release>
 8004ba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ba8:	6523      	str	r3, [r4, #80]	; 0x50
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <__sinit+0x68>)
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <__sinit+0x6c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	bf04      	itt	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	61a3      	streq	r3, [r4, #24]
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 f820 	bl	8004c00 <__sfp>
 8004bc0:	6060      	str	r0, [r4, #4]
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 f81c 	bl	8004c00 <__sfp>
 8004bc8:	60a0      	str	r0, [r4, #8]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 f818 	bl	8004c00 <__sfp>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60e0      	str	r0, [r4, #12]
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	6860      	ldr	r0, [r4, #4]
 8004bd8:	f7ff ff82 	bl	8004ae0 <std>
 8004bdc:	68a0      	ldr	r0, [r4, #8]
 8004bde:	2201      	movs	r2, #1
 8004be0:	2109      	movs	r1, #9
 8004be2:	f7ff ff7d 	bl	8004ae0 <std>
 8004be6:	68e0      	ldr	r0, [r4, #12]
 8004be8:	2202      	movs	r2, #2
 8004bea:	2112      	movs	r1, #18
 8004bec:	f7ff ff78 	bl	8004ae0 <std>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	61a3      	str	r3, [r4, #24]
 8004bf4:	e7d2      	b.n	8004b9c <__sinit+0xc>
 8004bf6:	bf00      	nop
 8004bf8:	08005130 	.word	0x08005130
 8004bfc:	08004b29 	.word	0x08004b29

08004c00 <__sfp>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	4607      	mov	r7, r0
 8004c04:	f7ff ffac 	bl	8004b60 <__sfp_lock_acquire>
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <__sfp+0x84>)
 8004c0a:	681e      	ldr	r6, [r3, #0]
 8004c0c:	69b3      	ldr	r3, [r6, #24]
 8004c0e:	b913      	cbnz	r3, 8004c16 <__sfp+0x16>
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ffbd 	bl	8004b90 <__sinit>
 8004c16:	3648      	adds	r6, #72	; 0x48
 8004c18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	d503      	bpl.n	8004c28 <__sfp+0x28>
 8004c20:	6833      	ldr	r3, [r6, #0]
 8004c22:	b30b      	cbz	r3, 8004c68 <__sfp+0x68>
 8004c24:	6836      	ldr	r6, [r6, #0]
 8004c26:	e7f7      	b.n	8004c18 <__sfp+0x18>
 8004c28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c2c:	b9d5      	cbnz	r5, 8004c64 <__sfp+0x64>
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <__sfp+0x88>)
 8004c30:	60e3      	str	r3, [r4, #12]
 8004c32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c36:	6665      	str	r5, [r4, #100]	; 0x64
 8004c38:	f000 f847 	bl	8004cca <__retarget_lock_init_recursive>
 8004c3c:	f7ff ff96 	bl	8004b6c <__sfp_lock_release>
 8004c40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c48:	6025      	str	r5, [r4, #0]
 8004c4a:	61a5      	str	r5, [r4, #24]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c54:	f7ff fd44 	bl	80046e0 <memset>
 8004c58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c60:	4620      	mov	r0, r4
 8004c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c64:	3468      	adds	r4, #104	; 0x68
 8004c66:	e7d9      	b.n	8004c1c <__sfp+0x1c>
 8004c68:	2104      	movs	r1, #4
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f7ff ff62 	bl	8004b34 <__sfmoreglue>
 8004c70:	4604      	mov	r4, r0
 8004c72:	6030      	str	r0, [r6, #0]
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1d5      	bne.n	8004c24 <__sfp+0x24>
 8004c78:	f7ff ff78 	bl	8004b6c <__sfp_lock_release>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	e7ee      	b.n	8004c60 <__sfp+0x60>
 8004c82:	bf00      	nop
 8004c84:	08005130 	.word	0x08005130
 8004c88:	ffff0001 	.word	0xffff0001

08004c8c <_fwalk_reent>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	4606      	mov	r6, r0
 8004c92:	4688      	mov	r8, r1
 8004c94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c98:	2700      	movs	r7, #0
 8004c9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca2:	d505      	bpl.n	8004cb0 <_fwalk_reent+0x24>
 8004ca4:	6824      	ldr	r4, [r4, #0]
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	d1f7      	bne.n	8004c9a <_fwalk_reent+0xe>
 8004caa:	4638      	mov	r0, r7
 8004cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb0:	89ab      	ldrh	r3, [r5, #12]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d907      	bls.n	8004cc6 <_fwalk_reent+0x3a>
 8004cb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	d003      	beq.n	8004cc6 <_fwalk_reent+0x3a>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	47c0      	blx	r8
 8004cc4:	4307      	orrs	r7, r0
 8004cc6:	3568      	adds	r5, #104	; 0x68
 8004cc8:	e7e9      	b.n	8004c9e <_fwalk_reent+0x12>

08004cca <__retarget_lock_init_recursive>:
 8004cca:	4770      	bx	lr

08004ccc <__retarget_lock_acquire_recursive>:
 8004ccc:	4770      	bx	lr

08004cce <__retarget_lock_release_recursive>:
 8004cce:	4770      	bx	lr

08004cd0 <__swhatbuf_r>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	b096      	sub	sp, #88	; 0x58
 8004cdc:	4614      	mov	r4, r2
 8004cde:	461d      	mov	r5, r3
 8004ce0:	da07      	bge.n	8004cf2 <__swhatbuf_r+0x22>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	89b3      	ldrh	r3, [r6, #12]
 8004ce8:	061a      	lsls	r2, r3, #24
 8004cea:	d410      	bmi.n	8004d0e <__swhatbuf_r+0x3e>
 8004cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf0:	e00e      	b.n	8004d10 <__swhatbuf_r+0x40>
 8004cf2:	466a      	mov	r2, sp
 8004cf4:	f000 f970 	bl	8004fd8 <_fstat_r>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	dbf2      	blt.n	8004ce2 <__swhatbuf_r+0x12>
 8004cfc:	9a01      	ldr	r2, [sp, #4]
 8004cfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d06:	425a      	negs	r2, r3
 8004d08:	415a      	adcs	r2, r3
 8004d0a:	602a      	str	r2, [r5, #0]
 8004d0c:	e7ee      	b.n	8004cec <__swhatbuf_r+0x1c>
 8004d0e:	2340      	movs	r3, #64	; 0x40
 8004d10:	2000      	movs	r0, #0
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	b016      	add	sp, #88	; 0x58
 8004d16:	bd70      	pop	{r4, r5, r6, pc}

08004d18 <__smakebuf_r>:
 8004d18:	898b      	ldrh	r3, [r1, #12]
 8004d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d1c:	079d      	lsls	r5, r3, #30
 8004d1e:	4606      	mov	r6, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	d507      	bpl.n	8004d34 <__smakebuf_r+0x1c>
 8004d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	6163      	str	r3, [r4, #20]
 8004d30:	b002      	add	sp, #8
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	ab01      	add	r3, sp, #4
 8004d36:	466a      	mov	r2, sp
 8004d38:	f7ff ffca 	bl	8004cd0 <__swhatbuf_r>
 8004d3c:	9900      	ldr	r1, [sp, #0]
 8004d3e:	4605      	mov	r5, r0
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 f879 	bl	8004e38 <_malloc_r>
 8004d46:	b948      	cbnz	r0, 8004d5c <__smakebuf_r+0x44>
 8004d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d4c:	059a      	lsls	r2, r3, #22
 8004d4e:	d4ef      	bmi.n	8004d30 <__smakebuf_r+0x18>
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	e7e3      	b.n	8004d24 <__smakebuf_r+0xc>
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <__smakebuf_r+0x7c>)
 8004d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	9b00      	ldr	r3, [sp, #0]
 8004d6c:	6163      	str	r3, [r4, #20]
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	6120      	str	r0, [r4, #16]
 8004d72:	b15b      	cbz	r3, 8004d8c <__smakebuf_r+0x74>
 8004d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f000 f93f 	bl	8004ffc <_isatty_r>
 8004d7e:	b128      	cbz	r0, 8004d8c <__smakebuf_r+0x74>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	89a0      	ldrh	r0, [r4, #12]
 8004d8e:	4305      	orrs	r5, r0
 8004d90:	81a5      	strh	r5, [r4, #12]
 8004d92:	e7cd      	b.n	8004d30 <__smakebuf_r+0x18>
 8004d94:	08004b29 	.word	0x08004b29

08004d98 <_free_r>:
 8004d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	d048      	beq.n	8004e30 <_free_r+0x98>
 8004d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f1a1 0404 	sub.w	r4, r1, #4
 8004daa:	bfb8      	it	lt
 8004dac:	18e4      	addlt	r4, r4, r3
 8004dae:	f000 f947 	bl	8005040 <__malloc_lock>
 8004db2:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <_free_r+0x9c>)
 8004db4:	9801      	ldr	r0, [sp, #4]
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	4615      	mov	r5, r2
 8004dba:	b933      	cbnz	r3, 8004dca <_free_r+0x32>
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6014      	str	r4, [r2, #0]
 8004dc0:	b003      	add	sp, #12
 8004dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc6:	f000 b941 	b.w	800504c <__malloc_unlock>
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d90b      	bls.n	8004de6 <_free_r+0x4e>
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	1862      	adds	r2, r4, r1
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf04      	itt	eq
 8004dd6:	681a      	ldreq	r2, [r3, #0]
 8004dd8:	685b      	ldreq	r3, [r3, #4]
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	bf04      	itt	eq
 8004dde:	1852      	addeq	r2, r2, r1
 8004de0:	6022      	streq	r2, [r4, #0]
 8004de2:	602c      	str	r4, [r5, #0]
 8004de4:	e7ec      	b.n	8004dc0 <_free_r+0x28>
 8004de6:	461a      	mov	r2, r3
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b10b      	cbz	r3, 8004df0 <_free_r+0x58>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d9fa      	bls.n	8004de6 <_free_r+0x4e>
 8004df0:	6811      	ldr	r1, [r2, #0]
 8004df2:	1855      	adds	r5, r2, r1
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d10b      	bne.n	8004e10 <_free_r+0x78>
 8004df8:	6824      	ldr	r4, [r4, #0]
 8004dfa:	4421      	add	r1, r4
 8004dfc:	1854      	adds	r4, r2, r1
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	d1dd      	bne.n	8004dc0 <_free_r+0x28>
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	6053      	str	r3, [r2, #4]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	e7d7      	b.n	8004dc0 <_free_r+0x28>
 8004e10:	d902      	bls.n	8004e18 <_free_r+0x80>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	e7d3      	b.n	8004dc0 <_free_r+0x28>
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf04      	itt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	bf04      	itt	eq
 8004e28:	1949      	addeq	r1, r1, r5
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	6054      	str	r4, [r2, #4]
 8004e2e:	e7c7      	b.n	8004dc0 <_free_r+0x28>
 8004e30:	b003      	add	sp, #12
 8004e32:	bd30      	pop	{r4, r5, pc}
 8004e34:	20000098 	.word	0x20000098

08004e38 <_malloc_r>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	1ccd      	adds	r5, r1, #3
 8004e3c:	f025 0503 	bic.w	r5, r5, #3
 8004e40:	3508      	adds	r5, #8
 8004e42:	2d0c      	cmp	r5, #12
 8004e44:	bf38      	it	cc
 8004e46:	250c      	movcc	r5, #12
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	db01      	blt.n	8004e52 <_malloc_r+0x1a>
 8004e4e:	42a9      	cmp	r1, r5
 8004e50:	d903      	bls.n	8004e5a <_malloc_r+0x22>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5a:	f000 f8f1 	bl	8005040 <__malloc_lock>
 8004e5e:	4921      	ldr	r1, [pc, #132]	; (8004ee4 <_malloc_r+0xac>)
 8004e60:	680a      	ldr	r2, [r1, #0]
 8004e62:	4614      	mov	r4, r2
 8004e64:	b99c      	cbnz	r4, 8004e8e <_malloc_r+0x56>
 8004e66:	4f20      	ldr	r7, [pc, #128]	; (8004ee8 <_malloc_r+0xb0>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b923      	cbnz	r3, 8004e76 <_malloc_r+0x3e>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f83c 	bl	8004eec <_sbrk_r>
 8004e74:	6038      	str	r0, [r7, #0]
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f837 	bl	8004eec <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d123      	bne.n	8004eca <_malloc_r+0x92>
 8004e82:	230c      	movs	r3, #12
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f8e0 	bl	800504c <__malloc_unlock>
 8004e8c:	e7e3      	b.n	8004e56 <_malloc_r+0x1e>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	1b5b      	subs	r3, r3, r5
 8004e92:	d417      	bmi.n	8004ec4 <_malloc_r+0x8c>
 8004e94:	2b0b      	cmp	r3, #11
 8004e96:	d903      	bls.n	8004ea0 <_malloc_r+0x68>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	441c      	add	r4, r3
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	e004      	b.n	8004eaa <_malloc_r+0x72>
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	bf0c      	ite	eq
 8004ea6:	600b      	streq	r3, [r1, #0]
 8004ea8:	6053      	strne	r3, [r2, #4]
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f000 f8ce 	bl	800504c <__malloc_unlock>
 8004eb0:	f104 000b 	add.w	r0, r4, #11
 8004eb4:	1d23      	adds	r3, r4, #4
 8004eb6:	f020 0007 	bic.w	r0, r0, #7
 8004eba:	1ac2      	subs	r2, r0, r3
 8004ebc:	d0cc      	beq.n	8004e58 <_malloc_r+0x20>
 8004ebe:	1a1b      	subs	r3, r3, r0
 8004ec0:	50a3      	str	r3, [r4, r2]
 8004ec2:	e7c9      	b.n	8004e58 <_malloc_r+0x20>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	6864      	ldr	r4, [r4, #4]
 8004ec8:	e7cc      	b.n	8004e64 <_malloc_r+0x2c>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d0e3      	beq.n	8004e9c <_malloc_r+0x64>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f808 	bl	8004eec <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d1dd      	bne.n	8004e9c <_malloc_r+0x64>
 8004ee0:	e7cf      	b.n	8004e82 <_malloc_r+0x4a>
 8004ee2:	bf00      	nop
 8004ee4:	20000098 	.word	0x20000098
 8004ee8:	2000009c 	.word	0x2000009c

08004eec <_sbrk_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d06      	ldr	r5, [pc, #24]	; (8004f08 <_sbrk_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fc fc08 	bl	800170c <_sbrk>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_sbrk_r+0x1a>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_sbrk_r+0x1a>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200003f8 	.word	0x200003f8

08004f0c <__sread>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	460c      	mov	r4, r1
 8004f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f14:	f000 f8a0 	bl	8005058 <_read_r>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	bfab      	itete	ge
 8004f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f20:	181b      	addge	r3, r3, r0
 8004f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f26:	bfac      	ite	ge
 8004f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f2a:	81a3      	strhlt	r3, [r4, #12]
 8004f2c:	bd10      	pop	{r4, pc}

08004f2e <__swrite>:
 8004f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f32:	461f      	mov	r7, r3
 8004f34:	898b      	ldrh	r3, [r1, #12]
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	4605      	mov	r5, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	d505      	bpl.n	8004f4c <__swrite+0x1e>
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	2302      	movs	r3, #2
 8004f46:	2200      	movs	r2, #0
 8004f48:	f000 f868 	bl	800501c <_lseek_r>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	f000 b817 	b.w	8004f94 <_write_r>

08004f66 <__sseek>:
 8004f66:	b510      	push	{r4, lr}
 8004f68:	460c      	mov	r4, r1
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 f855 	bl	800501c <_lseek_r>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	bf15      	itete	ne
 8004f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strheq	r3, [r4, #12]
 8004f84:	bf18      	it	ne
 8004f86:	81a3      	strhne	r3, [r4, #12]
 8004f88:	bd10      	pop	{r4, pc}

08004f8a <__sclose>:
 8004f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8e:	f000 b813 	b.w	8004fb8 <_close_r>
	...

08004f94 <_write_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	; (8004fb4 <_write_r+0x20>)
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fb fb50 	bl	8000648 <_write>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_write_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_write_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	200003f8 	.word	0x200003f8

08004fb8 <_close_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d06      	ldr	r5, [pc, #24]	; (8004fd4 <_close_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	f7fc fb6d 	bl	80016a2 <_close>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_close_r+0x1a>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_close_r+0x1a>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	200003f8 	.word	0x200003f8

08004fd8 <_fstat_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d07      	ldr	r5, [pc, #28]	; (8004ff8 <_fstat_r+0x20>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	f7fc fb68 	bl	80016ba <_fstat>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d102      	bne.n	8004ff4 <_fstat_r+0x1c>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	b103      	cbz	r3, 8004ff4 <_fstat_r+0x1c>
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200003f8 	.word	0x200003f8

08004ffc <_isatty_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_isatty_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc fb67 	bl	80016da <_isatty>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_isatty_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_isatty_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200003f8 	.word	0x200003f8

0800501c <_lseek_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	; (800503c <_lseek_r+0x20>)
 8005020:	4604      	mov	r4, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	2200      	movs	r2, #0
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fc fb60 	bl	80016f0 <_lseek>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_lseek_r+0x1e>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_lseek_r+0x1e>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	200003f8 	.word	0x200003f8

08005040 <__malloc_lock>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__malloc_lock+0x8>)
 8005042:	f7ff be43 	b.w	8004ccc <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	200003f0 	.word	0x200003f0

0800504c <__malloc_unlock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_unlock+0x8>)
 800504e:	f7ff be3e 	b.w	8004cce <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	200003f0 	.word	0x200003f0

08005058 <_read_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d07      	ldr	r5, [pc, #28]	; (8005078 <_read_r+0x20>)
 800505c:	4604      	mov	r4, r0
 800505e:	4608      	mov	r0, r1
 8005060:	4611      	mov	r1, r2
 8005062:	2200      	movs	r2, #0
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fc fafe 	bl	8001668 <_read>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_read_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_read_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	200003f8 	.word	0x200003f8

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
