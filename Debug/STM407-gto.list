
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000074  08005a90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08005a90  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121fe  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e4  00000000  00000000  000322a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00034888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b9b  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117bb  00000000  00000000  0003a43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a2e  00000000  00000000  0004bbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d9c  00000000  00000000  0011f678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005844 	.word	0x08005844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005844 	.word	0x08005844

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <DWT_Delay_us+0x40>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000586:	f002 fa01 	bl	800298c <HAL_RCC_GetHCLKFreq>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <DWT_Delay_us+0x44>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9b      	lsrs	r3, r3, #18
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800059c:	bf00      	nop
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <DWT_Delay_us+0x40>)
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f8      	bcc.n	800059e <DWT_Delay_us+0x26>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	431bde83 	.word	0x431bde83

080005c0 <HAL_UART_RxCpltCallback>:

char 	compare_CMD[28] = "[FID=XX SLAVE ANCHOR DEVICE]";
char* 	reset_CMD;

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a44      	ldr	r2, [pc, #272]	; (80006e0 <HAL_UART_RxCpltCallback+0x120>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10d      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.
			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	4943      	ldr	r1, [pc, #268]	; (80006e4 <HAL_UART_RxCpltCallback+0x124>)
 80005d6:	4844      	ldr	r0, [pc, #272]	; (80006e8 <HAL_UART_RxCpltCallback+0x128>)
 80005d8:	f003 fba5 	bl	8003d26 <HAL_UART_Receive_IT>

	        // Send the received data.
			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80005dc:	230a      	movs	r3, #10
 80005de:	2201      	movs	r2, #1
 80005e0:	4940      	ldr	r1, [pc, #256]	; (80006e4 <HAL_UART_RxCpltCallback+0x124>)
 80005e2:	4841      	ldr	r0, [pc, #260]	; (80006e8 <HAL_UART_RxCpltCallback+0x128>)
 80005e4:	f003 fb0d 	bl	8003c02 <HAL_UART_Transmit>
			uart1_key_Flag = 1;
 80005e8:	4b40      	ldr	r3, [pc, #256]	; (80006ec <HAL_UART_RxCpltCallback+0x12c>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a3f      	ldr	r2, [pc, #252]	; (80006f0 <HAL_UART_RxCpltCallback+0x130>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d15e      	bne.n	80006b6 <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	493e      	ldr	r1, [pc, #248]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 80005fc:	483e      	ldr	r0, [pc, #248]	; (80006f8 <HAL_UART_RxCpltCallback+0x138>)
 80005fe:	f003 fb92 	bl	8003d26 <HAL_UART_Receive_IT>

		switch(status){
 8000602:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <HAL_UART_RxCpltCallback+0x13c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d002      	beq.n	8000610 <HAL_UART_RxCpltCallback+0x50>
 800060a:	2b02      	cmp	r3, #2
 800060c:	d011      	beq.n	8000632 <HAL_UART_RxCpltCallback+0x72>
 800060e:	e055      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8000610:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b5b      	cmp	r3, #91	; 0x5b
 8000616:	d150      	bne.n	80006ba <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <HAL_UART_RxCpltCallback+0x140>)
 800061a:	225b      	movs	r2, #91	; 0x5b
 800061c:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 800061e:	4b39      	ldr	r3, [pc, #228]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <HAL_UART_RxCpltCallback+0x13c>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <HAL_UART_RxCpltCallback+0x148>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8000630:	e043      	b.n	80006ba <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b5b      	cmp	r3, #91	; 0x5b
 8000638:	d109      	bne.n	800064e <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <HAL_UART_RxCpltCallback+0x140>)
 800063c:	225b      	movs	r2, #91	; 0x5b
 800063e:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <HAL_UART_RxCpltCallback+0x13c>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 800064c:	e036      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b5d      	cmp	r3, #93	; 0x5d
 8000654:	d115      	bne.n	8000682 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b22      	cmp	r3, #34	; 0x22
 800065c:	d10d      	bne.n	800067a <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000668:	7011      	strb	r1, [r2, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <HAL_UART_RxCpltCallback+0x140>)
 8000672:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <HAL_UART_RxCpltCallback+0x148>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
		            status = START ;
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <HAL_UART_RxCpltCallback+0x13c>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
		        break ;
 8000680:	e01c      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b24      	cmp	r3, #36	; 0x24
 8000688:	d80b      	bhi.n	80006a2 <HAL_UART_RxCpltCallback+0xe2>
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	b2d1      	uxtb	r1, r2
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 8000694:	7011      	strb	r1, [r2, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_UART_RxCpltCallback+0x134>)
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_UART_RxCpltCallback+0x140>)
 800069e:	5499      	strb	r1, [r3, r2]
		        break ;
 80006a0:	e00c      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_UART_RxCpltCallback+0x13c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_UART_RxCpltCallback+0x144>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_UART_RxCpltCallback+0x148>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		        break ;
 80006b4:	e002      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80006b6:	bf00      	nop
 80006b8:	e000      	b.n	80006bc <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80006ba:	bf00      	nop

	if (huart->Instance == USART6) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <HAL_UART_RxCpltCallback+0x14c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d107      	bne.n	80006d6 <HAL_UART_RxCpltCallback+0x116>
		HAL_UART_Receive_IT(&huart6, (uint8_t *) &data, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	4911      	ldr	r1, [pc, #68]	; (8000710 <HAL_UART_RxCpltCallback+0x150>)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <HAL_UART_RxCpltCallback+0x154>)
 80006cc:	f003 fb2b 	bl	8003d26 <HAL_UART_Receive_IT>
		printf("received uart6 interrupt! \r\n");
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <HAL_UART_RxCpltCallback+0x158>)
 80006d2:	f004 fa1b 	bl	8004b0c <puts>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40011000 	.word	0x40011000
 80006e4:	200001f8 	.word	0x200001f8
 80006e8:	20000140 	.word	0x20000140
 80006ec:	20000090 	.word	0x20000090
 80006f0:	40004400 	.word	0x40004400
 80006f4:	2000013c 	.word	0x2000013c
 80006f8:	200002e0 	.word	0x200002e0
 80006fc:	20000003 	.word	0x20000003
 8000700:	200003c0 	.word	0x200003c0
 8000704:	200000a1 	.word	0x200000a1
 8000708:	20000091 	.word	0x20000091
 800070c:	40011400 	.word	0x40011400
 8000710:	20000000 	.word	0x20000000
 8000714:	200001fc 	.word	0x200001fc
 8000718:	0800585c 	.word	0x0800585c

0800071c <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b29a      	uxth	r2, r3
 800072c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <_write+0x28>)
 8000734:	f003 fa65 	bl	8003c02 <HAL_UART_Transmit>
	return len;
 8000738:	687b      	ldr	r3, [r7, #4]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000140 	.word	0x20000140

08000748 <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8000752:	6838      	ldr	r0, [r7, #0]
 8000754:	f7ff fd3c 	bl	80001d0 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	230a      	movs	r3, #10
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f003 fa4e 	bl	8003c02 <HAL_UART_Transmit>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f7ff fd29 	bl	80001d0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	230a      	movs	r3, #10
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f003 fa3b 	bl	8003c02 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 800078c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000790:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000792:	f107 010c 	add.w	r1, r7, #12
 8000796:	230a      	movs	r3, #10
 8000798:	2202      	movs	r2, #2
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f003 fa31 	bl	8003c02 <HAL_UART_Transmit>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f001 f8f5 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f955 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 fc13 	bl	8000fe0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 fb91 	bl	8000ee0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007be:	f000 fb65 	bl	8000e8c <MX_USART1_UART_Init>
  MX_UART4_Init();
 80007c2:	f000 fb0f 	bl	8000de4 <MX_UART4_Init>
  MX_UART5_Init();
 80007c6:	f000 fb37 	bl	8000e38 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80007ca:	f000 fbdd 	bl	8000f88 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80007ce:	f000 fa35 	bl	8000c3c <MX_SPI1_Init>
  MX_TIM1_Init();
 80007d2:	f000 fa69 	bl	8000ca8 <MX_TIM1_Init>
  MX_TIM7_Init();
 80007d6:	f000 facf 	bl	8000d78 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80007da:	f000 fbab 	bl	8000f34 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80007de:	f000 f9d3 	bl	8000b88 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007e2:	f000 f9bd 	bl	8000b60 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	4983      	ldr	r1, [pc, #524]	; (80009f8 <main+0x250>)
 80007ea:	4884      	ldr	r0, [pc, #528]	; (80009fc <main+0x254>)
 80007ec:	f003 fa9b 	bl	8003d26 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 80007f0:	2201      	movs	r2, #1
 80007f2:	4983      	ldr	r1, [pc, #524]	; (8000a00 <main+0x258>)
 80007f4:	4883      	ldr	r0, [pc, #524]	; (8000a04 <main+0x25c>)
 80007f6:	f003 fa96 	bl	8003d26 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit(&huart1, start_data, 17, 10);
  //debugPrintln(&huart1, "\n Start STM32F407");
  printf("\r\n Start STM32F407 - 20210804\r\n");
 80007fa:	4883      	ldr	r0, [pc, #524]	; (8000a08 <main+0x260>)
 80007fc:	f004 f986 	bl	8004b0c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000806:	4881      	ldr	r0, [pc, #516]	; (8000a0c <main+0x264>)
 8000808:	f001 fc92 	bl	8002130 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	487f      	ldr	r0, [pc, #508]	; (8000a10 <main+0x268>)
 8000812:	f001 fc8d 	bl	8002130 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	487e      	ldr	r0, [pc, #504]	; (8000a14 <main+0x26c>)
 800081c:	f001 fc88 	bl	8002130 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 8000820:	2200      	movs	r2, #0
 8000822:	2108      	movs	r1, #8
 8000824:	487b      	ldr	r0, [pc, #492]	; (8000a14 <main+0x26c>)
 8000826:	f001 fc83 	bl	8002130 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);	// 1 second*/

	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  if (uart1_key_Flag){
 800082a:	4b7b      	ldr	r3, [pc, #492]	; (8000a18 <main+0x270>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 8092 	beq.w	8000958 <main+0x1b0>
		  uart1_key_Flag = 0;
 8000834:	4b78      	ldr	r3, [pc, #480]	; (8000a18 <main+0x270>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <main+0x250>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7a      	cmp	r3, #122	; 0x7a
 8000840:	f300 808b 	bgt.w	800095a <main+0x1b2>
 8000844:	2b61      	cmp	r3, #97	; 0x61
 8000846:	da04      	bge.n	8000852 <main+0xaa>
 8000848:	2b32      	cmp	r3, #50	; 0x32
 800084a:	d04c      	beq.n	80008e6 <main+0x13e>
 800084c:	2b36      	cmp	r3, #54	; 0x36
 800084e:	d055      	beq.n	80008fc <main+0x154>
 8000850:	e083      	b.n	800095a <main+0x1b2>
 8000852:	3b61      	subs	r3, #97	; 0x61
 8000854:	2b19      	cmp	r3, #25
 8000856:	f200 8080 	bhi.w	800095a <main+0x1b2>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <main+0xb8>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080008cf 	.word	0x080008cf
 8000864:	0800095b 	.word	0x0800095b
 8000868:	0800094b 	.word	0x0800094b
 800086c:	0800095b 	.word	0x0800095b
 8000870:	0800095b 	.word	0x0800095b
 8000874:	0800095b 	.word	0x0800095b
 8000878:	0800095b 	.word	0x0800095b
 800087c:	0800095b 	.word	0x0800095b
 8000880:	0800095b 	.word	0x0800095b
 8000884:	0800095b 	.word	0x0800095b
 8000888:	0800095b 	.word	0x0800095b
 800088c:	0800095b 	.word	0x0800095b
 8000890:	0800095b 	.word	0x0800095b
 8000894:	0800095b 	.word	0x0800095b
 8000898:	0800095b 	.word	0x0800095b
 800089c:	0800095b 	.word	0x0800095b
 80008a0:	0800095b 	.word	0x0800095b
 80008a4:	08000913 	.word	0x08000913
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	08000921 	.word	0x08000921
 80008b0:	0800095b 	.word	0x0800095b
 80008b4:	0800095b 	.word	0x0800095b
 80008b8:	0800095b 	.word	0x0800095b
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	0800095b 	.word	0x0800095b
 80008c4:	0800092f 	.word	0x0800092f

			  case 's':
				  Sync_out();
 80008c8:	f000 fc60 	bl	800118c <Sync_out>

				  break;
 80008cc:	e045      	b.n	800095a <main+0x1b2>

			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 80008ce:	4953      	ldr	r1, [pc, #332]	; (8000a1c <main+0x274>)
 80008d0:	484a      	ldr	r0, [pc, #296]	; (80009fc <main+0x254>)
 80008d2:	f7ff ff39 	bl	8000748 <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 80008d6:	4952      	ldr	r1, [pc, #328]	; (8000a20 <main+0x278>)
 80008d8:	4848      	ldr	r0, [pc, #288]	; (80009fc <main+0x254>)
 80008da:	f7ff ff48 	bl	800076e <debugPrintln>
				  printf("printf test\r\n");
 80008de:	4851      	ldr	r0, [pc, #324]	; (8000a24 <main+0x27c>)
 80008e0:	f004 f914 	bl	8004b0c <puts>
				  break;
 80008e4:	e039      	b.n	800095a <main+0x1b2>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	4849      	ldr	r0, [pc, #292]	; (8000a10 <main+0x268>)
 80008ec:	f001 fc20 	bl	8002130 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 80008f0:	2200      	movs	r2, #0
 80008f2:	2120      	movs	r1, #32
 80008f4:	4845      	ldr	r0, [pc, #276]	; (8000a0c <main+0x264>)
 80008f6:	f001 fc1b 	bl	8002130 <HAL_GPIO_WritePin>

				  break;
 80008fa:	e02e      	b.n	800095a <main+0x1b2>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x268>)
 8000902:	f001 fc15 	bl	8002130 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8000906:	2201      	movs	r2, #1
 8000908:	2120      	movs	r1, #32
 800090a:	4840      	ldr	r0, [pc, #256]	; (8000a0c <main+0x264>)
 800090c:	f001 fc10 	bl	8002130 <HAL_GPIO_WritePin>

				  break;
 8000910:	e023      	b.n	800095a <main+0x1b2>


			  case 'r':
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 8000912:	230a      	movs	r3, #10
 8000914:	2201      	movs	r2, #1
 8000916:	493a      	ldr	r1, [pc, #232]	; (8000a00 <main+0x258>)
 8000918:	483a      	ldr	r0, [pc, #232]	; (8000a04 <main+0x25c>)
 800091a:	f003 f972 	bl	8003c02 <HAL_UART_Transmit>

				  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  break;
 800091e:	e01c      	b.n	800095a <main+0x1b2>

			  case 't':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)
				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);				// send data(0x00)
 8000920:	230a      	movs	r3, #10
 8000922:	2201      	movs	r2, #1
 8000924:	4940      	ldr	r1, [pc, #256]	; (8000a28 <main+0x280>)
 8000926:	4841      	ldr	r0, [pc, #260]	; (8000a2c <main+0x284>)
 8000928:	f003 f96b 	bl	8003c02 <HAL_UART_Transmit>

				  break;
 800092c:	e015      	b.n	800095a <main+0x1b2>

			  case 'z':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 10);
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
				  //HAL_GPIO_WritePin(GPIOC, RX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> rx enable
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2223      	movs	r2, #35	; 0x23
 8000932:	493f      	ldr	r1, [pc, #252]	; (8000a30 <main+0x288>)
 8000934:	4833      	ldr	r0, [pc, #204]	; (8000a04 <main+0x25c>)
 8000936:	f003 f964 	bl	8003c02 <HAL_UART_Transmit>
				  /*if(uart2_key_Flag){
					  printf("PIC Received\r\n");
				  }*/


				  break;
 800093a:	e00e      	b.n	800095a <main+0x1b2>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	2223      	movs	r2, #35	; 0x23
 8000940:	493c      	ldr	r1, [pc, #240]	; (8000a34 <main+0x28c>)
 8000942:	4830      	ldr	r0, [pc, #192]	; (8000a04 <main+0x25c>)
 8000944:	f003 f95d 	bl	8003c02 <HAL_UART_Transmit>
				  break;
 8000948:	e007      	b.n	800095a <main+0x1b2>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	2223      	movs	r2, #35	; 0x23
 800094e:	493a      	ldr	r1, [pc, #232]	; (8000a38 <main+0x290>)
 8000950:	482c      	ldr	r0, [pc, #176]	; (8000a04 <main+0x25c>)
 8000952:	f003 f956 	bl	8003c02 <HAL_UART_Transmit>

				  break;
 8000956:	e000      	b.n	800095a <main+0x1b2>

		  }
	  }
 8000958:	bf00      	nop


	  if(uart2_key_Flag) {
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <main+0x294>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d024      	beq.n	80009ac <main+0x204>
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  uart2_key_Flag = 0;
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <main+0x294>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8000968:	4835      	ldr	r0, [pc, #212]	; (8000a40 <main+0x298>)
 800096a:	f004 f8cf 	bl	8004b0c <puts>
		  //HAL_UART_Transmit(&huart1, "OK", 1, 10);
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  //HAL_UART_Receive_IT(&huart2, &data, 1); // interrupt uart 2

		  reset_CMD = SubStr(rxd, 0, 35);
 800096e:	2223      	movs	r2, #35	; 0x23
 8000970:	2100      	movs	r1, #0
 8000972:	4834      	ldr	r0, [pc, #208]	; (8000a44 <main+0x29c>)
 8000974:	f000 fc3a 	bl	80011ec <SubStr>
 8000978:	4603      	mov	r3, r0
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <main+0x2a0>)
 800097c:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 800097e:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <main+0x2a0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	4831      	ldr	r0, [pc, #196]	; (8000a4c <main+0x2a4>)
 8000986:	f004 f83b 	bl	8004a00 <iprintf>

		  for (int i = 0; i < LENGTH; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e00a      	b.n	80009a6 <main+0x1fe>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <main+0x29c>)
 8000994:	1899      	adds	r1, r3, r2
 8000996:	230a      	movs	r3, #10
 8000998:	2201      	movs	r2, #1
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <main+0x254>)
 800099c:	f003 f931 	bl	8003c02 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b22      	cmp	r3, #34	; 0x22
 80009aa:	ddf1      	ble.n	8000990 <main+0x1e8>
		  }

	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 80009ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <main+0x264>)
 80009b2:	f001 fba5 	bl	8002100 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <main+0x2a8>)
 80009bc:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <main+0x264>)
 80009c4:	f001 fb9c 	bl	8002100 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <main+0x2ac>)
 80009ce:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 80009d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <main+0x264>)
 80009d6:	f001 fb93 	bl	8002100 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <main+0x2b0>)
 80009e0:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 80009e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <main+0x264>)
 80009e8:	f001 fb8a 	bl	8002100 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <main+0x2b4>)
 80009f2:	701a      	strb	r2, [r3, #0]
	  if (uart1_key_Flag){
 80009f4:	e719      	b.n	800082a <main+0x82>
 80009f6:	bf00      	nop
 80009f8:	200001f8 	.word	0x200001f8
 80009fc:	20000140 	.word	0x20000140
 8000a00:	20000000 	.word	0x20000000
 8000a04:	200002e0 	.word	0x200002e0
 8000a08:	08005878 	.word	0x08005878
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	20000090 	.word	0x20000090
 8000a1c:	08005898 	.word	0x08005898
 8000a20:	080058ac 	.word	0x080058ac
 8000a24:	080058c0 	.word	0x080058c0
 8000a28:	20000002 	.word	0x20000002
 8000a2c:	200001fc 	.word	0x200001fc
 8000a30:	080058d0 	.word	0x080058d0
 8000a34:	080058f4 	.word	0x080058f4
 8000a38:	08005918 	.word	0x08005918
 8000a3c:	20000091 	.word	0x20000091
 8000a40:	0800593c 	.word	0x0800593c
 8000a44:	200003c0 	.word	0x200003c0
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	0800594c 	.word	0x0800594c
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	200003bc 	.word	0x200003bc
 8000a58:	20000184 	.word	0x20000184
 8000a5c:	200000a0 	.word	0x200000a0

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b098      	sub	sp, #96	; 0x60
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 ff14 	bl	800489c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <SystemClock_Config+0xf8>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <SystemClock_Config+0xf8>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <SystemClock_Config+0xf8>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <SystemClock_Config+0xfc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <SystemClock_Config+0xfc>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <SystemClock_Config+0xfc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aca:	230a      	movs	r3, #10
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae6:	23a8      	movs	r3, #168	; 0xa8
 8000ae8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fb34 	bl	8002164 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b02:	f000 fbb6 	bl	8001272 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fd96 	bl	8002654 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b2e:	f000 fba0 	bl	8001272 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 ff57 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000b4c:	f000 fb91 	bl	8001272 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3760      	adds	r7, #96	; 0x60
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f001 f864 	bl	8001c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6e:	2025      	movs	r0, #37	; 0x25
 8000b70:	f001 f87d 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2047      	movs	r0, #71	; 0x47
 8000b7a:	f001 f85c 	bl	8001c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b7e:	2047      	movs	r0, #71	; 0x47
 8000b80:	f001 f875 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_RTC_Init+0xac>)
 8000ba2:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <MX_RTC_Init+0xb0>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_RTC_Init+0xac>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bae:	227f      	movs	r2, #127	; 0x7f
 8000bb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bb4:	22ff      	movs	r2, #255	; 0xff
 8000bb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bca:	481a      	ldr	r0, [pc, #104]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bcc:	f001 fff4 	bl	8002bb8 <HAL_RTC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 fb4c 	bl	8001272 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <MX_RTC_Init+0xac>)
 8000bf6:	f002 f870 	bl	8002cda <HAL_RTC_SetTime>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fb37 	bl	8001272 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	2201      	movs	r2, #1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_RTC_Init+0xac>)
 8000c1c:	f002 f91a 	bl	8002e54 <HAL_RTC_SetDate>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c26:	f000 fb24 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000188 	.word	0x20000188
 8000c38:	40002800 	.word	0x40002800

08000c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_SPI1_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c8e:	f002 f9fa 	bl	8003086 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 faeb 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000284 	.word	0x20000284
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <MX_TIM1_Init+0xcc>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d00:	481b      	ldr	r0, [pc, #108]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000d02:	f002 fa49 	bl	8003198 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000d0c:	f000 fab1 	bl	8001272 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000d1e:	f002 fb92 	bl	8003446 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d28:	f000 faa3 	bl	8001272 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000d3c:	f002 fc47 	bl	80035ce <HAL_TIM_SlaveConfigSynchro>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000d46:	f000 fa94 	bl	8001272 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM1_Init+0xc8>)
 8000d58:	f002 fe76 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000d62:	f000 fa86 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001b0 	.word	0x200001b0
 8000d74:	40010000 	.word	0x40010000

08000d78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_TIM7_Init+0x68>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000d8e:	2229      	movs	r2, #41	; 0x29
 8000d90:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000da8:	f002 f9f6 	bl	8003198 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000db2:	f000 fa5e 	bl	8001272 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM7_Init+0x64>)
 8000dc4:	f002 fe40 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000dce:	f000 fa50 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000374 	.word	0x20000374
 8000de0:	40001400 	.word	0x40001400

08000de4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_UART4_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_UART4_Init+0x4c>)
 8000e1c:	f002 fea4 	bl	8003b68 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 fa24 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000240 	.word	0x20000240
 8000e34:	40004c00 	.word	0x40004c00

08000e38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_UART5_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_UART5_Init+0x4c>)
 8000e70:	f002 fe7a 	bl	8003b68 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f9fa 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000f8 	.word	0x200000f8
 8000e88:	40005000 	.word	0x40005000

08000e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_USART1_UART_Init+0x50>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	f002 fe50 	bl	8003b68 <HAL_UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ece:	f000 f9d0 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000140 	.word	0x20000140
 8000edc:	40011000 	.word	0x40011000

08000ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART2_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f18:	f002 fe26 	bl	8003b68 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 f9a6 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002e0 	.word	0x200002e0
 8000f30:	40004400 	.word	0x40004400

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART3_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	f002 fdfc 	bl	8003b68 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f000 f97c 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	40004800 	.word	0x40004800

08000f88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <MX_USART6_UART_Init+0x54>)
 8000f96:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fac:	220c      	movs	r2, #12
 8000fae:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	f002 fdd2 	bl	8003b68 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 f952 	bl	8001272 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001fc 	.word	0x200001fc
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	003d0900 	.word	0x003d0900

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <MX_GPIO_Init+0x198>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <MX_GPIO_Init+0x198>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <MX_GPIO_Init+0x198>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4b58      	ldr	r3, [pc, #352]	; (8001178 <MX_GPIO_Init+0x198>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a57      	ldr	r2, [pc, #348]	; (8001178 <MX_GPIO_Init+0x198>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b55      	ldr	r3, [pc, #340]	; (8001178 <MX_GPIO_Init+0x198>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <MX_GPIO_Init+0x198>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <MX_GPIO_Init+0x198>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <MX_GPIO_Init+0x198>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <MX_GPIO_Init+0x198>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a49      	ldr	r2, [pc, #292]	; (8001178 <MX_GPIO_Init+0x198>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b47      	ldr	r3, [pc, #284]	; (8001178 <MX_GPIO_Init+0x198>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b43      	ldr	r3, [pc, #268]	; (8001178 <MX_GPIO_Init+0x198>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <MX_GPIO_Init+0x198>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <MX_GPIO_Init+0x198>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <MX_GPIO_Init+0x198>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <MX_GPIO_Init+0x198>)
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <MX_GPIO_Init+0x198>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	210a      	movs	r1, #10
 80010a2:	4836      	ldr	r0, [pc, #216]	; (800117c <MX_GPIO_Init+0x19c>)
 80010a4:	f001 f844 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4834      	ldr	r0, [pc, #208]	; (8001180 <MX_GPIO_Init+0x1a0>)
 80010b0:	f001 f83e 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80010ba:	4832      	ldr	r0, [pc, #200]	; (8001184 <MX_GPIO_Init+0x1a4>)
 80010bc:	f001 f838 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	4830      	ldr	r0, [pc, #192]	; (8001188 <MX_GPIO_Init+0x1a8>)
 80010c6:	f001 f833 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010ca:	230a      	movs	r3, #10
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4826      	ldr	r0, [pc, #152]	; (800117c <MX_GPIO_Init+0x19c>)
 80010e2:	f000 fe71 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e6:	2310      	movs	r3, #16
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4821      	ldr	r0, [pc, #132]	; (8001180 <MX_GPIO_Init+0x1a0>)
 80010fa:	f000 fe65 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <MX_GPIO_Init+0x1a4>)
 8001114:	f000 fe58 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_GPIO_Init+0x1a0>)
 8001132:	f000 fe49 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 8001136:	f44f 730c 	mov.w	r3, #560	; 0x230
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_GPIO_Init+0x1a4>)
 8001150:	f000 fe3a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_GPIO_Init+0x1a8>)
 800116c:	f000 fe2c 	bl	8001dc8 <HAL_GPIO_Init>

}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	; 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40020800 	.word	0x40020800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40021000 	.word	0x40021000

0800118c <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4810      	ldr	r0, [pc, #64]	; (80011d8 <Sync_out+0x4c>)
 8001196:	f000 ffcb 	bl	8002130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 800119a:	2201      	movs	r2, #1
 800119c:	2101      	movs	r1, #1
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <Sync_out+0x50>)
 80011a0:	f000 ffc6 	bl	8002130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 80011a4:	2201      	movs	r2, #1
 80011a6:	2102      	movs	r1, #2
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <Sync_out+0x54>)
 80011aa:	f000 ffc1 	bl	8002130 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 80011ae:	230a      	movs	r3, #10
 80011b0:	2201      	movs	r2, #1
 80011b2:	490c      	ldr	r1, [pc, #48]	; (80011e4 <Sync_out+0x58>)
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <Sync_out+0x5c>)
 80011b6:	f002 fd24 	bl	8003c02 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f7ff f9dc 	bl	8000578 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <Sync_out+0x54>)
 80011c6:	f000 ffb3 	bl	8002130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <Sync_out+0x50>)
 80011d0:	f000 ffae 	bl	8002130 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40020800 	.word	0x40020800
 80011e4:	20000001 	.word	0x20000001
 80011e8:	200001fc 	.word	0x200001fc

080011ec <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <SubStr+0x16>
        return NULL ;
 80011fe:	2300      	movs	r3, #0
 8001200:	e033      	b.n	800126a <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fb40 	bl	800488c <malloc>
 800120c:	4603      	mov	r3, r0
 800120e:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7fe ffdd 	bl	80001d0 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	429a      	cmp	r2, r3
 8001224:	dd03      	ble.n	800122e <SubStr+0x42>
        nLength = nStart + nLen ;
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e00d      	b.n	8001250 <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	441a      	add	r2, r3
 800123a:	69f9      	ldr	r1, [r7, #28]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1acb      	subs	r3, r1, r3
 8001240:	4619      	mov	r1, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	440b      	add	r3, r1
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbed      	blt.n	8001234 <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	461a      	mov	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8001268:	697b      	ldr	r3, [r7, #20]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001276:	b672      	cpsid	i
}
 8001278:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127a:	e7fe      	b.n	800127a <Error_Handler+0x8>

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <HAL_RTC_MspInit+0x24>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d102      	bne.n	80012e4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RTC_MspInit+0x28>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40002800 	.word	0x40002800
 80012f4:	42470e3c 	.word	0x42470e3c

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23e0      	movs	r3, #224	; 0xe0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001362:	2305      	movs	r3, #5
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800136e:	f000 fd2b 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40013000 	.word	0x40013000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <HAL_TIM_Base_MspInit+0x70>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10e      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a16      	ldr	r2, [pc, #88]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013b6:	e01a      	b.n	80013ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d115      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x74>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2037      	movs	r0, #55	; 0x37
 80013e4:	f000 fc27 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013e8:	2037      	movs	r0, #55	; 0x37
 80013ea:	f000 fc40 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40001400 	.word	0x40001400

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a9c      	ldr	r2, [pc, #624]	; (8001694 <HAL_UART_MspInit+0x290>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d135      	bne.n	8001492 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
 800142a:	4b9b      	ldr	r3, [pc, #620]	; (8001698 <HAL_UART_MspInit+0x294>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a9a      	ldr	r2, [pc, #616]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b98      	ldr	r3, [pc, #608]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001440:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
 8001446:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a93      	ldr	r2, [pc, #588]	; (8001698 <HAL_UART_MspInit+0x294>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800145e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001470:	2308      	movs	r3, #8
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001478:	4619      	mov	r1, r3
 800147a:	4888      	ldr	r0, [pc, #544]	; (800169c <HAL_UART_MspInit+0x298>)
 800147c:	f000 fca4 	bl	8001dc8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2034      	movs	r0, #52	; 0x34
 8001486:	f000 fbd6 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800148a:	2034      	movs	r0, #52	; 0x34
 800148c:	f000 fbef 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001490:	e145      	b.n	800171e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a82      	ldr	r2, [pc, #520]	; (80016a0 <HAL_UART_MspInit+0x29c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d153      	bne.n	8001544 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
 80014a0:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a7c      	ldr	r2, [pc, #496]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
 80014b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a75      	ldr	r2, [pc, #468]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d8:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_UART_MspInit+0x294>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001502:	2308      	movs	r3, #8
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800150a:	4619      	mov	r1, r3
 800150c:	4863      	ldr	r0, [pc, #396]	; (800169c <HAL_UART_MspInit+0x298>)
 800150e:	f000 fc5b 	bl	8001dc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001512:	2304      	movs	r3, #4
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001522:	2308      	movs	r3, #8
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800152a:	4619      	mov	r1, r3
 800152c:	485d      	ldr	r0, [pc, #372]	; (80016a4 <HAL_UART_MspInit+0x2a0>)
 800152e:	f000 fc4b 	bl	8001dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2035      	movs	r0, #53	; 0x35
 8001538:	f000 fb7d 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800153c:	2035      	movs	r0, #53	; 0x35
 800153e:	f000 fb96 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 8001542:	e0ec      	b.n	800171e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_UART_MspInit+0x2a4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12d      	bne.n	80015aa <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a49      	ldr	r2, [pc, #292]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_UART_MspInit+0x294>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	623b      	str	r3, [r7, #32]
 8001584:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015a0:	4619      	mov	r1, r3
 80015a2:	4842      	ldr	r0, [pc, #264]	; (80016ac <HAL_UART_MspInit+0x2a8>)
 80015a4:	f000 fc10 	bl	8001dc8 <HAL_GPIO_Init>
}
 80015a8:	e0b9      	b.n	800171e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a40      	ldr	r2, [pc, #256]	; (80016b0 <HAL_UART_MspInit+0x2ac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d134      	bne.n	800161e <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_UART_MspInit+0x294>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ec:	230c      	movs	r3, #12
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fc:	2307      	movs	r3, #7
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001604:	4619      	mov	r1, r3
 8001606:	4829      	ldr	r0, [pc, #164]	; (80016ac <HAL_UART_MspInit+0x2a8>)
 8001608:	f000 fbde 	bl	8001dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2026      	movs	r0, #38	; 0x26
 8001612:	f000 fb10 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001616:	2026      	movs	r0, #38	; 0x26
 8001618:	f000 fb29 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 800161c:	e07f      	b.n	800171e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_UART_MspInit+0x2b0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d149      	bne.n	80016bc <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_UART_MspInit+0x294>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_UART_MspInit+0x294>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_UART_MspInit+0x294>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_UART_MspInit+0x294>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_UART_MspInit+0x294>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001660:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001672:	2307      	movs	r3, #7
 8001674:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800167a:	4619      	mov	r1, r3
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <HAL_UART_MspInit+0x2b4>)
 800167e:	f000 fba3 	bl	8001dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2027      	movs	r0, #39	; 0x27
 8001688:	f000 fad5 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800168c:	2027      	movs	r0, #39	; 0x27
 800168e:	f000 faee 	bl	8001c6e <HAL_NVIC_EnableIRQ>
}
 8001692:	e044      	b.n	800171e <HAL_UART_MspInit+0x31a>
 8001694:	40004c00 	.word	0x40004c00
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40005000 	.word	0x40005000
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40004800 	.word	0x40004800
 80016b8:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_UART_MspInit+0x324>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12b      	bne.n	800171e <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x328>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_UART_MspInit+0x328>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x328>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_UART_MspInit+0x328>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_UART_MspInit+0x328>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_UART_MspInit+0x328>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800170e:	2308      	movs	r3, #8
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_UART_MspInit+0x32c>)
 800171a:	f000 fb55 	bl	8001dc8 <HAL_GPIO_Init>
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40011400 	.word	0x40011400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f95e 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART1_IRQHandler+0x10>)
 800178e:	f002 fafb 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000140 	.word	0x20000140

0800179c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <USART2_IRQHandler+0x10>)
 80017a2:	f002 faf1 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002e0 	.word	0x200002e0

080017b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <USART3_IRQHandler+0x10>)
 80017b6:	f002 fae7 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000a4 	.word	0x200000a4

080017c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <UART4_IRQHandler+0x10>)
 80017ca:	f002 fadd 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000240 	.word	0x20000240

080017d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <UART5_IRQHandler+0x10>)
 80017de:	f002 fad3 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000f8 	.word	0x200000f8

080017ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM7_IRQHandler+0x10>)
 80017f2:	f001 fd20 	bl	8003236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000374 	.word	0x20000374

08001800 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <USART6_IRQHandler+0x10>)
 8001806:	f002 fabf 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200001fc 	.word	0x200001fc

08001814 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e00a      	b.n	800183c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001826:	f3af 8000 	nop.w
 800182a:	4601      	mov	r1, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf0      	blt.n	8001826 <_read+0x12>
	}

return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:
	}
	return len;
}

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	605a      	str	r2, [r3, #4]
	return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
	return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f002 ffa6 	bl	8004838 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20020000 	.word	0x20020000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000094 	.word	0x20000094
 8001920:	20000400 	.word	0x20000400

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001972:	f7ff ffd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f002 ff65 	bl	8004844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7fe ff15 	bl	80007a8 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800198c:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8001990:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001994:	20000400 	.word	0x20000400

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f92b 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fc54 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f943 	bl	8001c8a <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 f90b 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000004 	.word	0x20000004
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	200003ec 	.word	0x200003ec

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200003ec 	.word	0x200003ec

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff29 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff3e 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff31 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa2 	bl	8001bdc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff feda 	bl	8001a68 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d008      	beq.n	8001cd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e052      	b.n	8001d7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0216 	bic.w	r2, r2, #22
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d103      	bne.n	8001d04 <HAL_DMA_Abort+0x62>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0208 	bic.w	r2, r2, #8
 8001d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	e013      	b.n	8001d4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d26:	f7ff fe9f 	bl	8001a68 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d90c      	bls.n	8001d4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e015      	b.n	8001d7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e4      	bne.n	8001d26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	223f      	movs	r2, #63	; 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e00c      	b.n	8001dba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2205      	movs	r2, #5
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e16b      	b.n	80020bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 815a 	bne.w	80020b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d130      	bne.n	8001e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0201 	and.w	r2, r3, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d017      	beq.n	8001eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80b4 	beq.w	80020b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a5f      	ldr	r2, [pc, #380]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x216>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_GPIO_Init+0x328>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x212>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x32c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x20a>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e00e      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e00c      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002032:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_GPIO_Init+0x334>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_GPIO_Init+0x334>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x334>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_GPIO_Init+0x334>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f67f ae90 	bls.w	8001de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40021400 	.word	0x40021400
 80020f4:	40021800 	.word	0x40021800
 80020f8:	40021c00 	.word	0x40021c00
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e264      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d075      	beq.n	800226e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e23f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x74>
 80021ca:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a87      	ldr	r2, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fc24 	bl	8001a68 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fc20 	bl	8001a68 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e204      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xc0>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fc10 	bl	8001a68 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fc0c 	bl	8001a68 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1f0      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0xe8>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1c4      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4952      	ldr	r1, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff fbc5 	bl	8001a68 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fbc1 	bl	8001a68 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1a5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4940      	ldr	r1, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fba4 	bl	8001a68 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fba0 	bl	8001a68 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e184      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d030      	beq.n	80023b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7ff fb84 	bl	8001a68 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fb80 	bl	8001a68 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e164      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x200>
 8002382:	e015      	b.n	80023b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb6d 	bl	8001a68 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002392:	f7ff fb69 	bl	8001a68 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e14d      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb2f 	bl	8001a68 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e011      	b.n	8002432 <HAL_RCC_OscConfig+0x2ce>
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
 800241c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7ff fb22 	bl	8001a68 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e106      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x4e4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002476:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff fae7 	bl	8001a68 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fae3 	bl	8001a68 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0c5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x33a>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fad1 	bl	8001a68 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7ff facd 	bl	8001a68 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0af      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 809b 	beq.w	800263e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d05c      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d141      	bne.n	80025a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff faa1 	bl	8001a68 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fa9d 	bl	8001a68 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e081      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fa76 	bl	8001a68 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff fa72 	bl	8001a68 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e056      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x41c>
 800259e:	e04e      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fa5f 	bl	8001a68 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fa5b 	bl	8001a68 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80025cc:	e037      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e032      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d028      	beq.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d121      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11a      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002610:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d107      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40007000 	.word	0x40007000
 800264c:	40023800 	.word	0x40023800
 8002650:	42470060 	.word	0x42470060

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0cc      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90c      	bls.n	8002690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e067      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff f990 	bl	8001a68 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff f98c 	bl	8001a68 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e04f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20c      	bcs.n	800279c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f8f0 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	0800595c 	.word	0x0800595c
 8002818:	20000004 	.word	0x20000004
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002826:	2100      	movs	r1, #0
 8002828:	6079      	str	r1, [r7, #4]
 800282a:	2100      	movs	r1, #0
 800282c:	60f9      	str	r1, [r7, #12]
 800282e:	2100      	movs	r1, #0
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002832:	2100      	movs	r1, #0
 8002834:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002836:	4952      	ldr	r1, [pc, #328]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002838:	6889      	ldr	r1, [r1, #8]
 800283a:	f001 010c 	and.w	r1, r1, #12
 800283e:	2908      	cmp	r1, #8
 8002840:	d00d      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x3e>
 8002842:	2908      	cmp	r1, #8
 8002844:	f200 8094 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x150>
 8002848:	2900      	cmp	r1, #0
 800284a:	d002      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0x32>
 800284c:	2904      	cmp	r1, #4
 800284e:	d003      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x38>
 8002850:	e08e      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_GetSysClockFreq+0x164>)
 8002854:	60bb      	str	r3, [r7, #8]
       break;
 8002856:	e08e      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 800285a:	60bb      	str	r3, [r7, #8]
      break;
 800285c:	e08b      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285e:	4948      	ldr	r1, [pc, #288]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002860:	6849      	ldr	r1, [r1, #4]
 8002862:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002866:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4945      	ldr	r1, [pc, #276]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 800286a:	6849      	ldr	r1, [r1, #4]
 800286c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002870:	2900      	cmp	r1, #0
 8002872:	d024      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4942      	ldr	r1, [pc, #264]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002876:	6849      	ldr	r1, [r1, #4]
 8002878:	0989      	lsrs	r1, r1, #6
 800287a:	4608      	mov	r0, r1
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002884:	f04f 0500 	mov.w	r5, #0
 8002888:	ea00 0204 	and.w	r2, r0, r4
 800288c:	ea01 0305 	and.w	r3, r1, r5
 8002890:	493d      	ldr	r1, [pc, #244]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 8002892:	fb01 f003 	mul.w	r0, r1, r3
 8002896:	2100      	movs	r1, #0
 8002898:	fb01 f102 	mul.w	r1, r1, r2
 800289c:	1844      	adds	r4, r0, r1
 800289e:	493a      	ldr	r1, [pc, #232]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 80028a0:	fba2 0101 	umull	r0, r1, r2, r1
 80028a4:	1863      	adds	r3, r4, r1
 80028a6:	4619      	mov	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	f7fd fce6 	bl	8000280 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e04a      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	461a      	mov	r2, r3
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	ea02 0400 	and.w	r4, r2, r0
 80028d6:	ea03 0501 	and.w	r5, r3, r1
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	014b      	lsls	r3, r1, #5
 80028e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ec:	0142      	lsls	r2, r0, #5
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	1b00      	subs	r0, r0, r4
 80028f4:	eb61 0105 	sbc.w	r1, r1, r5
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	018b      	lsls	r3, r1, #6
 8002902:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002906:	0182      	lsls	r2, r0, #6
 8002908:	1a12      	subs	r2, r2, r0
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	00d9      	lsls	r1, r3, #3
 8002918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800291c:	00d0      	lsls	r0, r2, #3
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	1912      	adds	r2, r2, r4
 8002924:	eb45 0303 	adc.w	r3, r5, r3
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0299      	lsls	r1, r3, #10
 8002932:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002936:	0290      	lsls	r0, r2, #10
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f7fd fc9a 	bl	8000280 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	60bb      	str	r3, [r7, #8]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_GetSysClockFreq+0x164>)
 8002972:	60bb      	str	r3, [r7, #8]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	68bb      	ldr	r3, [r7, #8]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	017d7840 	.word	0x017d7840

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a8:	f7ff fff0 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	0800596c 	.word	0x0800596c

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029d0:	f7ff ffdc 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0b5b      	lsrs	r3, r3, #13
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	0800596c 	.word	0x0800596c

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d035      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a22:	f7ff f821 	bl	8001a68 <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a2a:	f7ff f81d 	bl	8001a68 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0b0      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a3c:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	019a      	lsls	r2, r3, #6
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	071b      	lsls	r3, r3, #28
 8002a54:	4955      	ldr	r1, [pc, #340]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a62:	f7ff f801 	bl	8001a68 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a6a:	f7fe fffd 	bl	8001a68 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e090      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8083 	beq.w	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a3e      	ldr	r2, [pc, #248]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002abe:	f7fe ffd3 	bl	8001a68 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe ffcf 	bl	8001a68 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e062      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d028      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d114      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff9d 	bl	8001a68 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe ff99 	bl	8001a68 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e02a      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b60:	d10d      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	490d      	ldr	r1, [pc, #52]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
 8002b7c:	e005      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b88:	6093      	str	r3, [r2, #8]
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	4905      	ldr	r1, [pc, #20]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	42470068 	.word	0x42470068
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42470e40 	.word	0x42470e40

08002bb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e083      	b.n	8002cd2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7f5b      	ldrb	r3, [r3, #29]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fb76 	bl	80012cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	22ca      	movs	r2, #202	; 0xca
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2253      	movs	r2, #83	; 0x53
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9fb 	bl	8002ff2 <RTC_EnterInitMode>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e05e      	b.n	8002cd2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	041a      	lsls	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f98d 	bl	8002fa2 <HAL_RTC_WaitForSynchro>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e018      	b.n	8002cd2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cda:	b590      	push	{r4, r7, lr}
 8002cdc:	b087      	sub	sp, #28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	7f1b      	ldrb	r3, [r3, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RTC_SetTime+0x1c>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0aa      	b.n	8002e4c <HAL_RTC_SetTime+0x172>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d126      	bne.n	8002d56 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f992 	bl	800304a <RTC_ByteToBcd2>
 8002d26:	4603      	mov	r3, r0
 8002d28:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f98b 	bl	800304a <RTC_ByteToBcd2>
 8002d34:	4603      	mov	r3, r0
 8002d36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d38:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f983 	bl	800304a <RTC_ByteToBcd2>
 8002d44:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	78db      	ldrb	r3, [r3, #3]
 8002d4e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e018      	b.n	8002d88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d76:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	78db      	ldrb	r3, [r3, #3]
 8002d82:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	22ca      	movs	r2, #202	; 0xca
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2253      	movs	r2, #83	; 0x53
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f92a 	bl	8002ff2 <RTC_EnterInitMode>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2204      	movs	r2, #4
 8002db0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e047      	b.n	8002e4c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dda:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d111      	bne.n	8002e36 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8c5 	bl	8002fa2 <HAL_RTC_WaitForSynchro>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00a      	b.n	8002e4c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd90      	pop	{r4, r7, pc}

08002e54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	7f1b      	ldrb	r3, [r3, #28]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_RTC_SetDate+0x1c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e094      	b.n	8002f9a <HAL_RTC_SetDate+0x146>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10e      	bne.n	8002ea0 <HAL_RTC_SetDate+0x4c>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	785b      	ldrb	r3, [r3, #1]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	f023 0310 	bic.w	r3, r3, #16
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	330a      	adds	r3, #10
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	78db      	ldrb	r3, [r3, #3]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f8cd 	bl	800304a <RTC_ByteToBcd2>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f8c6 	bl	800304a <RTC_ByteToBcd2>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ec2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	789b      	ldrb	r3, [r3, #2]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f8be 	bl	800304a <RTC_ByteToBcd2>
 8002ece:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ed0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e00e      	b.n	8002efe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ef2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	22ca      	movs	r2, #202	; 0xca
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2253      	movs	r2, #83	; 0x53
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f86f 	bl	8002ff2 <RTC_EnterInitMode>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2204      	movs	r2, #4
 8002f26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e033      	b.n	8002f9a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f81e 	bl	8002fa2 <HAL_RTC_WaitForSynchro>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2204      	movs	r2, #4
 8002f78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e00a      	b.n	8002f9a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}

08002fa2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fd53 	bl	8001a68 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fc4:	e009      	b.n	8002fda <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fc6:	f7fe fd4f 	bl	8001a68 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd4:	d901      	bls.n	8002fda <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e007      	b.n	8002fea <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d119      	bne.n	8003040 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7fe fd27 	bl	8001a68 <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800301c:	e009      	b.n	8003032 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800301e:	f7fe fd23 	bl	8001a68 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302c:	d901      	bls.n	8003032 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e007      	b.n	8003042 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003058:	e005      	b.n	8003066 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	3b0a      	subs	r3, #10
 8003064:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2b09      	cmp	r3, #9
 800306a:	d8f6      	bhi.n	800305a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	b2da      	uxtb	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4313      	orrs	r3, r2
 8003078:	b2db      	uxtb	r3, r3
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e07b      	b.n	8003190 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a8:	d009      	beq.n	80030be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	61da      	str	r2, [r3, #28]
 80030b0:	e005      	b.n	80030be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f90d 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	ea42 0103 	orr.w	r1, r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	f003 0104 	and.w	r1, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0210 	and.w	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe f8e2 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fa6e 	bl	80036b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d122      	bne.n	8003292 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d11b      	bne.n	8003292 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0202 	mvn.w	r2, #2
 8003262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f9fe 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 800327e:	e005      	b.n	800328c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9f0 	bl	8003666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa01 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d122      	bne.n	80032e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0204 	mvn.w	r2, #4
 80032b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f9d4 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 80032d2:	e005      	b.n	80032e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f9c6 	bl	8003666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9d7 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d122      	bne.n	800333a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11b      	bne.n	800333a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0208 	mvn.w	r2, #8
 800330a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2204      	movs	r2, #4
 8003310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9aa 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f99c 	bl	8003666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9ad 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b10      	cmp	r3, #16
 8003346:	d122      	bne.n	800338e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b10      	cmp	r3, #16
 8003354:	d11b      	bne.n	800338e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0210 	mvn.w	r2, #16
 800335e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2208      	movs	r2, #8
 8003364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f980 	bl	800367a <HAL_TIM_IC_CaptureCallback>
 800337a:	e005      	b.n	8003388 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f972 	bl	8003666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f983 	bl	800368e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10e      	bne.n	80033ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0201 	mvn.w	r2, #1
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f94c 	bl	8003652 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d10e      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d107      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fbb7 	bl	8003b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d10e      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d107      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800340a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f948 	bl	80036a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b20      	cmp	r3, #32
 800341e:	d10e      	bne.n	800343e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b20      	cmp	r3, #32
 800342c:	d107      	bne.n	800343e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0220 	mvn.w	r2, #32
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb81 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_TIM_ConfigClockSource+0x18>
 800345a:	2302      	movs	r3, #2
 800345c:	e0b3      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x180>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800347c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003484:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d03e      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0xd0>
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	f200 8087 	bhi.w	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	f000 8085 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d87f      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034ae:	2b70      	cmp	r3, #112	; 0x70
 80034b0:	d01a      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0xa2>
 80034b2:	2b70      	cmp	r3, #112	; 0x70
 80034b4:	d87b      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034b6:	2b60      	cmp	r3, #96	; 0x60
 80034b8:	d050      	beq.n	800355c <HAL_TIM_ConfigClockSource+0x116>
 80034ba:	2b60      	cmp	r3, #96	; 0x60
 80034bc:	d877      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034be:	2b50      	cmp	r3, #80	; 0x50
 80034c0:	d03c      	beq.n	800353c <HAL_TIM_ConfigClockSource+0xf6>
 80034c2:	2b50      	cmp	r3, #80	; 0x50
 80034c4:	d873      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d058      	beq.n	800357c <HAL_TIM_ConfigClockSource+0x136>
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d86f      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d064      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x156>
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d86b      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d060      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x156>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d867      	bhi.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d05c      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x156>
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d05a      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034e6:	e062      	b.n	80035ae <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f000 fa86 	bl	8003a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800350a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
      break;
 8003514:	e04e      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f000 fa6f 	bl	8003a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003538:	609a      	str	r2, [r3, #8]
      break;
 800353a:	e03b      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	461a      	mov	r2, r3
 800354a:	f000 f9e3 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2150      	movs	r1, #80	; 0x50
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fa3c 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800355a:	e02b      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	461a      	mov	r2, r3
 800356a:	f000 fa02 	bl	8003972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2160      	movs	r1, #96	; 0x60
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fa2c 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800357a:	e01b      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	461a      	mov	r2, r3
 800358a:	f000 f9c3 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fa1c 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800359a:	e00b      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 fa13 	bl	80039d2 <TIM_ITRx_SetConfig>
        break;
 80035ac:	e002      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e031      	b.n	800364a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8fd 	bl	80037f8 <TIM_SlaveTimer_SetConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e018      	b.n	800364a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003626:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003636:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <TIM_Base_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d00f      	beq.n	80036f8 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3d      	ldr	r2, [pc, #244]	; (80037d0 <TIM_Base_SetConfig+0x118>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00b      	beq.n	80036f8 <TIM_Base_SetConfig+0x40>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3c      	ldr	r2, [pc, #240]	; (80037d4 <TIM_Base_SetConfig+0x11c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <TIM_Base_SetConfig+0x40>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a3b      	ldr	r2, [pc, #236]	; (80037d8 <TIM_Base_SetConfig+0x120>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_Base_SetConfig+0x40>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a3a      	ldr	r2, [pc, #232]	; (80037dc <TIM_Base_SetConfig+0x124>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d108      	bne.n	800370a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <TIM_Base_SetConfig+0x114>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02b      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d027      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <TIM_Base_SetConfig+0x118>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d023      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <TIM_Base_SetConfig+0x11c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01f      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2a      	ldr	r2, [pc, #168]	; (80037d8 <TIM_Base_SetConfig+0x120>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01b      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a29      	ldr	r2, [pc, #164]	; (80037dc <TIM_Base_SetConfig+0x124>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d017      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <TIM_Base_SetConfig+0x128>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <TIM_Base_SetConfig+0x12c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00f      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <TIM_Base_SetConfig+0x130>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a25      	ldr	r2, [pc, #148]	; (80037ec <TIM_Base_SetConfig+0x134>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <TIM_Base_SetConfig+0x138>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <TIM_Base_SetConfig+0x13c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <TIM_Base_SetConfig+0x114>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0xf8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <TIM_Base_SetConfig+0x124>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d103      	bne.n	80037b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	615a      	str	r2, [r3, #20]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40014400 	.word	0x40014400
 80037e8:	40014800 	.word	0x40014800
 80037ec:	40001800 	.word	0x40001800
 80037f0:	40001c00 	.word	0x40001c00
 80037f4:	40002000 	.word	0x40002000

080037f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b70      	cmp	r3, #112	; 0x70
 800383c:	d01a      	beq.n	8003874 <TIM_SlaveTimer_SetConfig+0x7c>
 800383e:	2b70      	cmp	r3, #112	; 0x70
 8003840:	d860      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 8003842:	2b60      	cmp	r3, #96	; 0x60
 8003844:	d054      	beq.n	80038f0 <TIM_SlaveTimer_SetConfig+0xf8>
 8003846:	2b60      	cmp	r3, #96	; 0x60
 8003848:	d85c      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 800384a:	2b50      	cmp	r3, #80	; 0x50
 800384c:	d046      	beq.n	80038dc <TIM_SlaveTimer_SetConfig+0xe4>
 800384e:	2b50      	cmp	r3, #80	; 0x50
 8003850:	d858      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d019      	beq.n	800388a <TIM_SlaveTimer_SetConfig+0x92>
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d854      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	d054      	beq.n	8003908 <TIM_SlaveTimer_SetConfig+0x110>
 800385e:	2b30      	cmp	r3, #48	; 0x30
 8003860:	d850      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 8003862:	2b20      	cmp	r3, #32
 8003864:	d050      	beq.n	8003908 <TIM_SlaveTimer_SetConfig+0x110>
 8003866:	2b20      	cmp	r3, #32
 8003868:	d84c      	bhi.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d04c      	beq.n	8003908 <TIM_SlaveTimer_SetConfig+0x110>
 800386e:	2b10      	cmp	r3, #16
 8003870:	d04a      	beq.n	8003908 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003872:	e047      	b.n	8003904 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f000 f8c0 	bl	8003a08 <TIM_ETR_SetConfig>
      break;
 8003888:	e03f      	b.n	800390a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d101      	bne.n	8003896 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03a      	b.n	800390c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038bc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
      break;
 80038da:	e016      	b.n	800390a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f000 f813 	bl	8003914 <TIM_TI1_ConfigInputStage>
      break;
 80038ee:	e00c      	b.n	800390a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	461a      	mov	r2, r3
 80038fe:	f000 f838 	bl	8003972 <TIM_TI2_ConfigInputStage>
      break;
 8003902:	e002      	b.n	800390a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003908:	bf00      	nop
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 030a 	bic.w	r3, r3, #10
 8003950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e05a      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d01d      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40001800 	.word	0x40001800

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e03f      	b.n	8003bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fc38 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fc7b 	bl	80044a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d17c      	bne.n	8003d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Transmit+0x2c>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e075      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit+0x3e>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e06e      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2221      	movs	r2, #33	; 0x21
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c56:	f7fd ff07 	bl	8001a68 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d108      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c94:	e02a      	b.n	8003cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa3d 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e007      	b.n	8003cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1cf      	bne.n	8003c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fa0d 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e006      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d11d      	bne.n	8003d7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Receive_IT+0x26>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e016      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Receive_IT+0x38>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e00f      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa1e 	bl	80041b4 <UART_Start_Receive_IT>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	e000      	b.n	8003d7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x52>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fad1 	bl	800437a <UART_Receive_IT>
      return;
 8003dd8:	e17c      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80b1 	beq.w	8003f44 <HAL_UART_IRQHandler+0x1bc>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_UART_IRQHandler+0x70>
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80a6 	beq.w	8003f44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_UART_IRQHandler+0x90>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_UART_IRQHandler+0xb0>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f043 0202 	orr.w	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_UART_IRQHandler+0xd0>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <HAL_UART_IRQHandler+0xfa>
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_UART_IRQHandler+0xee>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0208 	orr.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 811f 	beq.w	80040ca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x11e>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa6a 	bl	800437a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_UART_IRQHandler+0x146>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d031      	beq.n	8003f32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9aa 	bl	8004228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d123      	bne.n	8003f2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d013      	beq.n	8003f22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4a77      	ldr	r2, [pc, #476]	; (80040dc <HAL_UART_IRQHandler+0x354>)
 8003f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd ff3b 	bl	8001d82 <HAL_DMA_Abort_IT>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	e00e      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8e6 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	e00a      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8e2 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	e006      	b.n	8003f40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8de 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f3e:	e0c4      	b.n	80040ca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	bf00      	nop
    return;
 8003f42:	e0c2      	b.n	80040ca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80a2 	bne.w	8004092 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 809c 	beq.w	8004092 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8096 	beq.w	8004092 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d14f      	bne.n	800402a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f94:	8a3b      	ldrh	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8099 	beq.w	80040ce <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa0:	8a3a      	ldrh	r2, [r7, #16]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	f080 8093 	bcs.w	80040ce <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8a3a      	ldrh	r2, [r7, #16]
 8003fac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d02b      	beq.n	8004012 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0210 	bic.w	r2, r2, #16
 8004006:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fe48 	bl	8001ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f870 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004028:	e051      	b.n	80040ce <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d047      	beq.n	80040d2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004042:	8a7b      	ldrh	r3, [r7, #18]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d044      	beq.n	80040d2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004056:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0210 	bic.w	r2, r2, #16
 8004084:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f83c 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004090:	e01f      	b.n	80040d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x326>
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8ff 	bl	80042aa <UART_Transmit_IT>
    return;
 80040ac:	e012      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_UART_IRQHandler+0x34c>
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f941 	bl	800434a <UART_EndTransmit_IT>
    return;
 80040c8:	e004      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
    return;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80040d2:	bf00      	nop
  }
}
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	08004283 	.word	0x08004283

080040e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e02c      	b.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d028      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 8004140:	f7fd fc92 	bl	8001a68 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d21d      	bcs.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00f      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d0c3      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2222      	movs	r2, #34	; 0x22
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800423e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff ff29 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b21      	cmp	r3, #33	; 0x21
 80042bc:	d13e      	bne.n	800433c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d114      	bne.n	80042f2 <UART_Transmit_IT+0x48>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d110      	bne.n	80042f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	1c9a      	adds	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]
 80042f0:	e008      	b.n	8004304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6211      	str	r1, [r2, #32]
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff feb8 	bl	80040e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b22      	cmp	r3, #34	; 0x22
 800438c:	f040 8087 	bne.w	800449e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d117      	bne.n	80043ca <UART_Receive_IT+0x50>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
 80043c8:	e026      	b.n	8004418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d007      	beq.n	80043ee <UART_Receive_IT+0x74>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <UART_Receive_IT+0x82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e008      	b.n	800440e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004428:	2b00      	cmp	r3, #0
 800442a:	d136      	bne.n	800449a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0220 	bic.w	r2, r2, #32
 800443a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10e      	bne.n	800448a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0210 	bic.w	r2, r2, #16
 800447a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe40 	bl	8004108 <HAL_UARTEx_RxEventCallback>
 8004488:	e002      	b.n	8004490 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc f898 	bl	80005c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e002      	b.n	80044a0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	b09f      	sub	sp, #124	; 0x7c
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	431a      	orrs	r2, r3
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f6:	430b      	orrs	r3, r1
 80044f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	6999      	ldr	r1, [r3, #24]
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	ea40 0301 	orr.w	r3, r0, r1
 8004510:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4bc5      	ldr	r3, [pc, #788]	; (800482c <UART_SetConfig+0x384>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d004      	beq.n	8004526 <UART_SetConfig+0x7e>
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4bc3      	ldr	r3, [pc, #780]	; (8004830 <UART_SetConfig+0x388>)
 8004522:	429a      	cmp	r2, r3
 8004524:	d103      	bne.n	800452e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004526:	f7fe fa51 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 800452a:	6778      	str	r0, [r7, #116]	; 0x74
 800452c:	e002      	b.n	8004534 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452e:	f7fe fa39 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8004532:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	f040 80b6 	bne.w	80046ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004542:	461c      	mov	r4, r3
 8004544:	f04f 0500 	mov.w	r5, #0
 8004548:	4622      	mov	r2, r4
 800454a:	462b      	mov	r3, r5
 800454c:	1891      	adds	r1, r2, r2
 800454e:	6439      	str	r1, [r7, #64]	; 0x40
 8004550:	415b      	adcs	r3, r3
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
 8004554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004558:	1912      	adds	r2, r2, r4
 800455a:	eb45 0303 	adc.w	r3, r5, r3
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	00d9      	lsls	r1, r3, #3
 8004568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800456c:	00d0      	lsls	r0, r2, #3
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	1911      	adds	r1, r2, r4
 8004574:	6639      	str	r1, [r7, #96]	; 0x60
 8004576:	416b      	adcs	r3, r5
 8004578:	667b      	str	r3, [r7, #100]	; 0x64
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	461a      	mov	r2, r3
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	1891      	adds	r1, r2, r2
 8004586:	63b9      	str	r1, [r7, #56]	; 0x38
 8004588:	415b      	adcs	r3, r3
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004590:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004594:	f7fb fe74 	bl	8000280 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <UART_SetConfig+0x38c>)
 800459e:	fba3 2302 	umull	r2, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	011e      	lsls	r6, r3, #4
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	461c      	mov	r4, r3
 80045aa:	f04f 0500 	mov.w	r5, #0
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	6339      	str	r1, [r7, #48]	; 0x30
 80045b6:	415b      	adcs	r3, r3
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045be:	1912      	adds	r2, r2, r4
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	00d9      	lsls	r1, r3, #3
 80045ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d2:	00d0      	lsls	r0, r2, #3
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	1911      	adds	r1, r2, r4
 80045da:	65b9      	str	r1, [r7, #88]	; 0x58
 80045dc:	416b      	adcs	r3, r5
 80045de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ee:	415b      	adcs	r3, r3
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045fa:	f7fb fe41 	bl	8000280 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <UART_SetConfig+0x38c>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a87      	ldr	r2, [pc, #540]	; (8004834 <UART_SetConfig+0x38c>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004624:	441e      	add	r6, r3
 8004626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004628:	4618      	mov	r0, r3
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	1894      	adds	r4, r2, r2
 8004634:	623c      	str	r4, [r7, #32]
 8004636:	415b      	adcs	r3, r3
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463e:	1812      	adds	r2, r2, r0
 8004640:	eb41 0303 	adc.w	r3, r1, r3
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	f04f 0500 	mov.w	r5, #0
 800464c:	00dd      	lsls	r5, r3, #3
 800464e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004652:	00d4      	lsls	r4, r2, #3
 8004654:	4622      	mov	r2, r4
 8004656:	462b      	mov	r3, r5
 8004658:	1814      	adds	r4, r2, r0
 800465a:	653c      	str	r4, [r7, #80]	; 0x50
 800465c:	414b      	adcs	r3, r1
 800465e:	657b      	str	r3, [r7, #84]	; 0x54
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	461a      	mov	r2, r3
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	1891      	adds	r1, r2, r2
 800466c:	61b9      	str	r1, [r7, #24]
 800466e:	415b      	adcs	r3, r3
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004676:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800467a:	f7fb fe01 	bl	8000280 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <UART_SetConfig+0x38c>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a67      	ldr	r2, [pc, #412]	; (8004834 <UART_SetConfig+0x38c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4432      	add	r2, r6
 80046a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046aa:	e0b9      	b.n	8004820 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ae:	461c      	mov	r4, r3
 80046b0:	f04f 0500 	mov.w	r5, #0
 80046b4:	4622      	mov	r2, r4
 80046b6:	462b      	mov	r3, r5
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	6139      	str	r1, [r7, #16]
 80046bc:	415b      	adcs	r3, r3
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046c4:	1912      	adds	r2, r2, r4
 80046c6:	eb45 0303 	adc.w	r3, r5, r3
 80046ca:	f04f 0000 	mov.w	r0, #0
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	00d9      	lsls	r1, r3, #3
 80046d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d8:	00d0      	lsls	r0, r2, #3
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	eb12 0804 	adds.w	r8, r2, r4
 80046e2:	eb43 0905 	adc.w	r9, r3, r5
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046fe:	0082      	lsls	r2, r0, #2
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb fdbc 	bl	8000280 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b49      	ldr	r3, [pc, #292]	; (8004834 <UART_SetConfig+0x38c>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	011e      	lsls	r6, r3, #4
 8004716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004718:	4618      	mov	r0, r3
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	1894      	adds	r4, r2, r2
 8004724:	60bc      	str	r4, [r7, #8]
 8004726:	415b      	adcs	r3, r3
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472e:	1812      	adds	r2, r2, r0
 8004730:	eb41 0303 	adc.w	r3, r1, r3
 8004734:	f04f 0400 	mov.w	r4, #0
 8004738:	f04f 0500 	mov.w	r5, #0
 800473c:	00dd      	lsls	r5, r3, #3
 800473e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004742:	00d4      	lsls	r4, r2, #3
 8004744:	4622      	mov	r2, r4
 8004746:	462b      	mov	r3, r5
 8004748:	1814      	adds	r4, r2, r0
 800474a:	64bc      	str	r4, [r7, #72]	; 0x48
 800474c:	414b      	adcs	r3, r1
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004768:	0082      	lsls	r2, r0, #2
 800476a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800476e:	f7fb fd87 	bl	8000280 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <UART_SetConfig+0x38c>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	; 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	3332      	adds	r3, #50	; 0x32
 800478a:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <UART_SetConfig+0x38c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004796:	441e      	add	r6, r3
 8004798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479a:	4618      	mov	r0, r3
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	1894      	adds	r4, r2, r2
 80047a6:	603c      	str	r4, [r7, #0]
 80047a8:	415b      	adcs	r3, r3
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b0:	1812      	adds	r2, r2, r0
 80047b2:	eb41 0303 	adc.w	r3, r1, r3
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	f04f 0500 	mov.w	r5, #0
 80047be:	00dd      	lsls	r5, r3, #3
 80047c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c4:	00d4      	lsls	r4, r2, #3
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	eb12 0a00 	adds.w	sl, r2, r0
 80047ce:	eb43 0b01 	adc.w	fp, r3, r1
 80047d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	008b      	lsls	r3, r1, #2
 80047e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ea:	0082      	lsls	r2, r0, #2
 80047ec:	4650      	mov	r0, sl
 80047ee:	4659      	mov	r1, fp
 80047f0:	f7fb fd46 	bl	8000280 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <UART_SetConfig+0x38c>)
 80047fa:	fba3 1302 	umull	r1, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2164      	movs	r1, #100	; 0x64
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a09      	ldr	r2, [pc, #36]	; (8004834 <UART_SetConfig+0x38c>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4432      	add	r2, r6
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	377c      	adds	r7, #124	; 0x7c
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <__errno>:
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <__errno+0x8>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000010 	.word	0x20000010

08004844 <__libc_init_array>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4d0d      	ldr	r5, [pc, #52]	; (800487c <__libc_init_array+0x38>)
 8004848:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <__libc_init_array+0x3c>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	2600      	movs	r6, #0
 8004850:	42a6      	cmp	r6, r4
 8004852:	d109      	bne.n	8004868 <__libc_init_array+0x24>
 8004854:	4d0b      	ldr	r5, [pc, #44]	; (8004884 <__libc_init_array+0x40>)
 8004856:	4c0c      	ldr	r4, [pc, #48]	; (8004888 <__libc_init_array+0x44>)
 8004858:	f000 fff4 	bl	8005844 <_init>
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	2600      	movs	r6, #0
 8004862:	42a6      	cmp	r6, r4
 8004864:	d105      	bne.n	8004872 <__libc_init_array+0x2e>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	f855 3b04 	ldr.w	r3, [r5], #4
 800486c:	4798      	blx	r3
 800486e:	3601      	adds	r6, #1
 8004870:	e7ee      	b.n	8004850 <__libc_init_array+0xc>
 8004872:	f855 3b04 	ldr.w	r3, [r5], #4
 8004876:	4798      	blx	r3
 8004878:	3601      	adds	r6, #1
 800487a:	e7f2      	b.n	8004862 <__libc_init_array+0x1e>
 800487c:	08005a14 	.word	0x08005a14
 8004880:	08005a14 	.word	0x08005a14
 8004884:	08005a14 	.word	0x08005a14
 8004888:	08005a18 	.word	0x08005a18

0800488c <malloc>:
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <malloc+0xc>)
 800488e:	4601      	mov	r1, r0
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f000 b85b 	b.w	800494c <_malloc_r>
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010

0800489c <memset>:
 800489c:	4402      	add	r2, r0
 800489e:	4603      	mov	r3, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <_free_r>:
 80048ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ae:	2900      	cmp	r1, #0
 80048b0:	d048      	beq.n	8004944 <_free_r+0x98>
 80048b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b6:	9001      	str	r0, [sp, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f1a1 0404 	sub.w	r4, r1, #4
 80048be:	bfb8      	it	lt
 80048c0:	18e4      	addlt	r4, r4, r3
 80048c2:	f000 fc19 	bl	80050f8 <__malloc_lock>
 80048c6:	4a20      	ldr	r2, [pc, #128]	; (8004948 <_free_r+0x9c>)
 80048c8:	9801      	ldr	r0, [sp, #4]
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	4615      	mov	r5, r2
 80048ce:	b933      	cbnz	r3, 80048de <_free_r+0x32>
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	6014      	str	r4, [r2, #0]
 80048d4:	b003      	add	sp, #12
 80048d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048da:	f000 bc13 	b.w	8005104 <__malloc_unlock>
 80048de:	42a3      	cmp	r3, r4
 80048e0:	d90b      	bls.n	80048fa <_free_r+0x4e>
 80048e2:	6821      	ldr	r1, [r4, #0]
 80048e4:	1862      	adds	r2, r4, r1
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bf04      	itt	eq
 80048ea:	681a      	ldreq	r2, [r3, #0]
 80048ec:	685b      	ldreq	r3, [r3, #4]
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	bf04      	itt	eq
 80048f2:	1852      	addeq	r2, r2, r1
 80048f4:	6022      	streq	r2, [r4, #0]
 80048f6:	602c      	str	r4, [r5, #0]
 80048f8:	e7ec      	b.n	80048d4 <_free_r+0x28>
 80048fa:	461a      	mov	r2, r3
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b10b      	cbz	r3, 8004904 <_free_r+0x58>
 8004900:	42a3      	cmp	r3, r4
 8004902:	d9fa      	bls.n	80048fa <_free_r+0x4e>
 8004904:	6811      	ldr	r1, [r2, #0]
 8004906:	1855      	adds	r5, r2, r1
 8004908:	42a5      	cmp	r5, r4
 800490a:	d10b      	bne.n	8004924 <_free_r+0x78>
 800490c:	6824      	ldr	r4, [r4, #0]
 800490e:	4421      	add	r1, r4
 8004910:	1854      	adds	r4, r2, r1
 8004912:	42a3      	cmp	r3, r4
 8004914:	6011      	str	r1, [r2, #0]
 8004916:	d1dd      	bne.n	80048d4 <_free_r+0x28>
 8004918:	681c      	ldr	r4, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	6053      	str	r3, [r2, #4]
 800491e:	4421      	add	r1, r4
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	e7d7      	b.n	80048d4 <_free_r+0x28>
 8004924:	d902      	bls.n	800492c <_free_r+0x80>
 8004926:	230c      	movs	r3, #12
 8004928:	6003      	str	r3, [r0, #0]
 800492a:	e7d3      	b.n	80048d4 <_free_r+0x28>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	1961      	adds	r1, r4, r5
 8004930:	428b      	cmp	r3, r1
 8004932:	bf04      	itt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	bf04      	itt	eq
 800493c:	1949      	addeq	r1, r1, r5
 800493e:	6021      	streq	r1, [r4, #0]
 8004940:	6054      	str	r4, [r2, #4]
 8004942:	e7c7      	b.n	80048d4 <_free_r+0x28>
 8004944:	b003      	add	sp, #12
 8004946:	bd30      	pop	{r4, r5, pc}
 8004948:	20000098 	.word	0x20000098

0800494c <_malloc_r>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	1ccd      	adds	r5, r1, #3
 8004950:	f025 0503 	bic.w	r5, r5, #3
 8004954:	3508      	adds	r5, #8
 8004956:	2d0c      	cmp	r5, #12
 8004958:	bf38      	it	cc
 800495a:	250c      	movcc	r5, #12
 800495c:	2d00      	cmp	r5, #0
 800495e:	4606      	mov	r6, r0
 8004960:	db01      	blt.n	8004966 <_malloc_r+0x1a>
 8004962:	42a9      	cmp	r1, r5
 8004964:	d903      	bls.n	800496e <_malloc_r+0x22>
 8004966:	230c      	movs	r3, #12
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	2000      	movs	r0, #0
 800496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800496e:	f000 fbc3 	bl	80050f8 <__malloc_lock>
 8004972:	4921      	ldr	r1, [pc, #132]	; (80049f8 <_malloc_r+0xac>)
 8004974:	680a      	ldr	r2, [r1, #0]
 8004976:	4614      	mov	r4, r2
 8004978:	b99c      	cbnz	r4, 80049a2 <_malloc_r+0x56>
 800497a:	4f20      	ldr	r7, [pc, #128]	; (80049fc <_malloc_r+0xb0>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b923      	cbnz	r3, 800498a <_malloc_r+0x3e>
 8004980:	4621      	mov	r1, r4
 8004982:	4630      	mov	r0, r6
 8004984:	f000 f8ca 	bl	8004b1c <_sbrk_r>
 8004988:	6038      	str	r0, [r7, #0]
 800498a:	4629      	mov	r1, r5
 800498c:	4630      	mov	r0, r6
 800498e:	f000 f8c5 	bl	8004b1c <_sbrk_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d123      	bne.n	80049de <_malloc_r+0x92>
 8004996:	230c      	movs	r3, #12
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	4630      	mov	r0, r6
 800499c:	f000 fbb2 	bl	8005104 <__malloc_unlock>
 80049a0:	e7e3      	b.n	800496a <_malloc_r+0x1e>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	1b5b      	subs	r3, r3, r5
 80049a6:	d417      	bmi.n	80049d8 <_malloc_r+0x8c>
 80049a8:	2b0b      	cmp	r3, #11
 80049aa:	d903      	bls.n	80049b4 <_malloc_r+0x68>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	441c      	add	r4, r3
 80049b0:	6025      	str	r5, [r4, #0]
 80049b2:	e004      	b.n	80049be <_malloc_r+0x72>
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	42a2      	cmp	r2, r4
 80049b8:	bf0c      	ite	eq
 80049ba:	600b      	streq	r3, [r1, #0]
 80049bc:	6053      	strne	r3, [r2, #4]
 80049be:	4630      	mov	r0, r6
 80049c0:	f000 fba0 	bl	8005104 <__malloc_unlock>
 80049c4:	f104 000b 	add.w	r0, r4, #11
 80049c8:	1d23      	adds	r3, r4, #4
 80049ca:	f020 0007 	bic.w	r0, r0, #7
 80049ce:	1ac2      	subs	r2, r0, r3
 80049d0:	d0cc      	beq.n	800496c <_malloc_r+0x20>
 80049d2:	1a1b      	subs	r3, r3, r0
 80049d4:	50a3      	str	r3, [r4, r2]
 80049d6:	e7c9      	b.n	800496c <_malloc_r+0x20>
 80049d8:	4622      	mov	r2, r4
 80049da:	6864      	ldr	r4, [r4, #4]
 80049dc:	e7cc      	b.n	8004978 <_malloc_r+0x2c>
 80049de:	1cc4      	adds	r4, r0, #3
 80049e0:	f024 0403 	bic.w	r4, r4, #3
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d0e3      	beq.n	80049b0 <_malloc_r+0x64>
 80049e8:	1a21      	subs	r1, r4, r0
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f896 	bl	8004b1c <_sbrk_r>
 80049f0:	3001      	adds	r0, #1
 80049f2:	d1dd      	bne.n	80049b0 <_malloc_r+0x64>
 80049f4:	e7cf      	b.n	8004996 <_malloc_r+0x4a>
 80049f6:	bf00      	nop
 80049f8:	20000098 	.word	0x20000098
 80049fc:	2000009c 	.word	0x2000009c

08004a00 <iprintf>:
 8004a00:	b40f      	push	{r0, r1, r2, r3}
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <iprintf+0x2c>)
 8004a04:	b513      	push	{r0, r1, r4, lr}
 8004a06:	681c      	ldr	r4, [r3, #0]
 8004a08:	b124      	cbz	r4, 8004a14 <iprintf+0x14>
 8004a0a:	69a3      	ldr	r3, [r4, #24]
 8004a0c:	b913      	cbnz	r3, 8004a14 <iprintf+0x14>
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 fa6e 	bl	8004ef0 <__sinit>
 8004a14:	ab05      	add	r3, sp, #20
 8004a16:	9a04      	ldr	r2, [sp, #16]
 8004a18:	68a1      	ldr	r1, [r4, #8]
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 fba1 	bl	8005164 <_vfiprintf_r>
 8004a22:	b002      	add	sp, #8
 8004a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a28:	b004      	add	sp, #16
 8004a2a:	4770      	bx	lr
 8004a2c:	20000010 	.word	0x20000010

08004a30 <_puts_r>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	460e      	mov	r6, r1
 8004a34:	4605      	mov	r5, r0
 8004a36:	b118      	cbz	r0, 8004a40 <_puts_r+0x10>
 8004a38:	6983      	ldr	r3, [r0, #24]
 8004a3a:	b90b      	cbnz	r3, 8004a40 <_puts_r+0x10>
 8004a3c:	f000 fa58 	bl	8004ef0 <__sinit>
 8004a40:	69ab      	ldr	r3, [r5, #24]
 8004a42:	68ac      	ldr	r4, [r5, #8]
 8004a44:	b913      	cbnz	r3, 8004a4c <_puts_r+0x1c>
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fa52 	bl	8004ef0 <__sinit>
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <_puts_r+0xd0>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d120      	bne.n	8004a94 <_puts_r+0x64>
 8004a52:	686c      	ldr	r4, [r5, #4]
 8004a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a56:	07db      	lsls	r3, r3, #31
 8004a58:	d405      	bmi.n	8004a66 <_puts_r+0x36>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	0598      	lsls	r0, r3, #22
 8004a5e:	d402      	bmi.n	8004a66 <_puts_r+0x36>
 8004a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a62:	f000 fae3 	bl	800502c <__retarget_lock_acquire_recursive>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	0719      	lsls	r1, r3, #28
 8004a6a:	d51d      	bpl.n	8004aa8 <_puts_r+0x78>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	b1db      	cbz	r3, 8004aa8 <_puts_r+0x78>
 8004a70:	3e01      	subs	r6, #1
 8004a72:	68a3      	ldr	r3, [r4, #8]
 8004a74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	60a3      	str	r3, [r4, #8]
 8004a7c:	bb39      	cbnz	r1, 8004ace <_puts_r+0x9e>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da38      	bge.n	8004af4 <_puts_r+0xc4>
 8004a82:	4622      	mov	r2, r4
 8004a84:	210a      	movs	r1, #10
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 f858 	bl	8004b3c <__swbuf_r>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d011      	beq.n	8004ab4 <_puts_r+0x84>
 8004a90:	250a      	movs	r5, #10
 8004a92:	e011      	b.n	8004ab8 <_puts_r+0x88>
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <_puts_r+0xd4>)
 8004a96:	429c      	cmp	r4, r3
 8004a98:	d101      	bne.n	8004a9e <_puts_r+0x6e>
 8004a9a:	68ac      	ldr	r4, [r5, #8]
 8004a9c:	e7da      	b.n	8004a54 <_puts_r+0x24>
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <_puts_r+0xd8>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	bf08      	it	eq
 8004aa4:	68ec      	ldreq	r4, [r5, #12]
 8004aa6:	e7d5      	b.n	8004a54 <_puts_r+0x24>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f898 	bl	8004be0 <__swsetup_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d0dd      	beq.n	8004a70 <_puts_r+0x40>
 8004ab4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aba:	07da      	lsls	r2, r3, #31
 8004abc:	d405      	bmi.n	8004aca <_puts_r+0x9a>
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	059b      	lsls	r3, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_puts_r+0x9a>
 8004ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ac6:	f000 fab2 	bl	800502e <__retarget_lock_release_recursive>
 8004aca:	4628      	mov	r0, r5
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da04      	bge.n	8004adc <_puts_r+0xac>
 8004ad2:	69a2      	ldr	r2, [r4, #24]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	dc06      	bgt.n	8004ae6 <_puts_r+0xb6>
 8004ad8:	290a      	cmp	r1, #10
 8004ada:	d004      	beq.n	8004ae6 <_puts_r+0xb6>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	7019      	strb	r1, [r3, #0]
 8004ae4:	e7c5      	b.n	8004a72 <_puts_r+0x42>
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 f827 	bl	8004b3c <__swbuf_r>
 8004aee:	3001      	adds	r0, #1
 8004af0:	d1bf      	bne.n	8004a72 <_puts_r+0x42>
 8004af2:	e7df      	b.n	8004ab4 <_puts_r+0x84>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	250a      	movs	r5, #10
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	701d      	strb	r5, [r3, #0]
 8004afe:	e7db      	b.n	8004ab8 <_puts_r+0x88>
 8004b00:	08005998 	.word	0x08005998
 8004b04:	080059b8 	.word	0x080059b8
 8004b08:	08005978 	.word	0x08005978

08004b0c <puts>:
 8004b0c:	4b02      	ldr	r3, [pc, #8]	; (8004b18 <puts+0xc>)
 8004b0e:	4601      	mov	r1, r0
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	f7ff bf8d 	b.w	8004a30 <_puts_r>
 8004b16:	bf00      	nop
 8004b18:	20000010 	.word	0x20000010

08004b1c <_sbrk_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d06      	ldr	r5, [pc, #24]	; (8004b38 <_sbrk_r+0x1c>)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	f7fc fec6 	bl	80018b8 <_sbrk>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_sbrk_r+0x1a>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_sbrk_r+0x1a>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	200003fc 	.word	0x200003fc

08004b3c <__swbuf_r>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	460e      	mov	r6, r1
 8004b40:	4614      	mov	r4, r2
 8004b42:	4605      	mov	r5, r0
 8004b44:	b118      	cbz	r0, 8004b4e <__swbuf_r+0x12>
 8004b46:	6983      	ldr	r3, [r0, #24]
 8004b48:	b90b      	cbnz	r3, 8004b4e <__swbuf_r+0x12>
 8004b4a:	f000 f9d1 	bl	8004ef0 <__sinit>
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <__swbuf_r+0x98>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	d12b      	bne.n	8004bac <__swbuf_r+0x70>
 8004b54:	686c      	ldr	r4, [r5, #4]
 8004b56:	69a3      	ldr	r3, [r4, #24]
 8004b58:	60a3      	str	r3, [r4, #8]
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	071a      	lsls	r2, r3, #28
 8004b5e:	d52f      	bpl.n	8004bc0 <__swbuf_r+0x84>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	b36b      	cbz	r3, 8004bc0 <__swbuf_r+0x84>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	6820      	ldr	r0, [r4, #0]
 8004b68:	1ac0      	subs	r0, r0, r3
 8004b6a:	6963      	ldr	r3, [r4, #20]
 8004b6c:	b2f6      	uxtb	r6, r6
 8004b6e:	4283      	cmp	r3, r0
 8004b70:	4637      	mov	r7, r6
 8004b72:	dc04      	bgt.n	8004b7e <__swbuf_r+0x42>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f926 	bl	8004dc8 <_fflush_r>
 8004b7c:	bb30      	cbnz	r0, 8004bcc <__swbuf_r+0x90>
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	701e      	strb	r6, [r3, #0]
 8004b8c:	6963      	ldr	r3, [r4, #20]
 8004b8e:	3001      	adds	r0, #1
 8004b90:	4283      	cmp	r3, r0
 8004b92:	d004      	beq.n	8004b9e <__swbuf_r+0x62>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	07db      	lsls	r3, r3, #31
 8004b98:	d506      	bpl.n	8004ba8 <__swbuf_r+0x6c>
 8004b9a:	2e0a      	cmp	r6, #10
 8004b9c:	d104      	bne.n	8004ba8 <__swbuf_r+0x6c>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f911 	bl	8004dc8 <_fflush_r>
 8004ba6:	b988      	cbnz	r0, 8004bcc <__swbuf_r+0x90>
 8004ba8:	4638      	mov	r0, r7
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <__swbuf_r+0x9c>)
 8004bae:	429c      	cmp	r4, r3
 8004bb0:	d101      	bne.n	8004bb6 <__swbuf_r+0x7a>
 8004bb2:	68ac      	ldr	r4, [r5, #8]
 8004bb4:	e7cf      	b.n	8004b56 <__swbuf_r+0x1a>
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <__swbuf_r+0xa0>)
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	bf08      	it	eq
 8004bbc:	68ec      	ldreq	r4, [r5, #12]
 8004bbe:	e7ca      	b.n	8004b56 <__swbuf_r+0x1a>
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	f000 f80c 	bl	8004be0 <__swsetup_r>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d0cb      	beq.n	8004b64 <__swbuf_r+0x28>
 8004bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd0:	e7ea      	b.n	8004ba8 <__swbuf_r+0x6c>
 8004bd2:	bf00      	nop
 8004bd4:	08005998 	.word	0x08005998
 8004bd8:	080059b8 	.word	0x080059b8
 8004bdc:	08005978 	.word	0x08005978

08004be0 <__swsetup_r>:
 8004be0:	4b32      	ldr	r3, [pc, #200]	; (8004cac <__swsetup_r+0xcc>)
 8004be2:	b570      	push	{r4, r5, r6, lr}
 8004be4:	681d      	ldr	r5, [r3, #0]
 8004be6:	4606      	mov	r6, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	b125      	cbz	r5, 8004bf6 <__swsetup_r+0x16>
 8004bec:	69ab      	ldr	r3, [r5, #24]
 8004bee:	b913      	cbnz	r3, 8004bf6 <__swsetup_r+0x16>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 f97d 	bl	8004ef0 <__sinit>
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <__swsetup_r+0xd0>)
 8004bf8:	429c      	cmp	r4, r3
 8004bfa:	d10f      	bne.n	8004c1c <__swsetup_r+0x3c>
 8004bfc:	686c      	ldr	r4, [r5, #4]
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c04:	0719      	lsls	r1, r3, #28
 8004c06:	d42c      	bmi.n	8004c62 <__swsetup_r+0x82>
 8004c08:	06dd      	lsls	r5, r3, #27
 8004c0a:	d411      	bmi.n	8004c30 <__swsetup_r+0x50>
 8004c0c:	2309      	movs	r3, #9
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1a:	e03e      	b.n	8004c9a <__swsetup_r+0xba>
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <__swsetup_r+0xd4>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d101      	bne.n	8004c26 <__swsetup_r+0x46>
 8004c22:	68ac      	ldr	r4, [r5, #8]
 8004c24:	e7eb      	b.n	8004bfe <__swsetup_r+0x1e>
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <__swsetup_r+0xd8>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	bf08      	it	eq
 8004c2c:	68ec      	ldreq	r4, [r5, #12]
 8004c2e:	e7e6      	b.n	8004bfe <__swsetup_r+0x1e>
 8004c30:	0758      	lsls	r0, r3, #29
 8004c32:	d512      	bpl.n	8004c5a <__swsetup_r+0x7a>
 8004c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c36:	b141      	cbz	r1, 8004c4a <__swsetup_r+0x6a>
 8004c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	d002      	beq.n	8004c46 <__swsetup_r+0x66>
 8004c40:	4630      	mov	r0, r6
 8004c42:	f7ff fe33 	bl	80048ac <_free_r>
 8004c46:	2300      	movs	r3, #0
 8004c48:	6363      	str	r3, [r4, #52]	; 0x34
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6063      	str	r3, [r4, #4]
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f043 0308 	orr.w	r3, r3, #8
 8004c60:	81a3      	strh	r3, [r4, #12]
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	b94b      	cbnz	r3, 8004c7a <__swsetup_r+0x9a>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c70:	d003      	beq.n	8004c7a <__swsetup_r+0x9a>
 8004c72:	4621      	mov	r1, r4
 8004c74:	4630      	mov	r0, r6
 8004c76:	f000 f9ff 	bl	8005078 <__smakebuf_r>
 8004c7a:	89a0      	ldrh	r0, [r4, #12]
 8004c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c80:	f010 0301 	ands.w	r3, r0, #1
 8004c84:	d00a      	beq.n	8004c9c <__swsetup_r+0xbc>
 8004c86:	2300      	movs	r3, #0
 8004c88:	60a3      	str	r3, [r4, #8]
 8004c8a:	6963      	ldr	r3, [r4, #20]
 8004c8c:	425b      	negs	r3, r3
 8004c8e:	61a3      	str	r3, [r4, #24]
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	b943      	cbnz	r3, 8004ca6 <__swsetup_r+0xc6>
 8004c94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c98:	d1ba      	bne.n	8004c10 <__swsetup_r+0x30>
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	0781      	lsls	r1, r0, #30
 8004c9e:	bf58      	it	pl
 8004ca0:	6963      	ldrpl	r3, [r4, #20]
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	e7f4      	b.n	8004c90 <__swsetup_r+0xb0>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e7f7      	b.n	8004c9a <__swsetup_r+0xba>
 8004caa:	bf00      	nop
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	08005998 	.word	0x08005998
 8004cb4:	080059b8 	.word	0x080059b8
 8004cb8:	08005978 	.word	0x08005978

08004cbc <__sflush_r>:
 8004cbc:	898a      	ldrh	r2, [r1, #12]
 8004cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	0710      	lsls	r0, r2, #28
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	d458      	bmi.n	8004d7c <__sflush_r+0xc0>
 8004cca:	684b      	ldr	r3, [r1, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dc05      	bgt.n	8004cdc <__sflush_r+0x20>
 8004cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	dc02      	bgt.n	8004cdc <__sflush_r+0x20>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	d0f9      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce8:	682f      	ldr	r7, [r5, #0]
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	d032      	beq.n	8004d54 <__sflush_r+0x98>
 8004cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	075a      	lsls	r2, r3, #29
 8004cf4:	d505      	bpl.n	8004d02 <__sflush_r+0x46>
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	1ac0      	subs	r0, r0, r3
 8004cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cfc:	b10b      	cbz	r3, 8004d02 <__sflush_r+0x46>
 8004cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	4602      	mov	r2, r0
 8004d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b0      	blx	r6
 8004d0e:	1c43      	adds	r3, r0, #1
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	d106      	bne.n	8004d22 <__sflush_r+0x66>
 8004d14:	6829      	ldr	r1, [r5, #0]
 8004d16:	291d      	cmp	r1, #29
 8004d18:	d82c      	bhi.n	8004d74 <__sflush_r+0xb8>
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <__sflush_r+0x108>)
 8004d1c:	40ca      	lsrs	r2, r1
 8004d1e:	07d6      	lsls	r6, r2, #31
 8004d20:	d528      	bpl.n	8004d74 <__sflush_r+0xb8>
 8004d22:	2200      	movs	r2, #0
 8004d24:	6062      	str	r2, [r4, #4]
 8004d26:	04d9      	lsls	r1, r3, #19
 8004d28:	6922      	ldr	r2, [r4, #16]
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	d504      	bpl.n	8004d38 <__sflush_r+0x7c>
 8004d2e:	1c42      	adds	r2, r0, #1
 8004d30:	d101      	bne.n	8004d36 <__sflush_r+0x7a>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	b903      	cbnz	r3, 8004d38 <__sflush_r+0x7c>
 8004d36:	6560      	str	r0, [r4, #84]	; 0x54
 8004d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3a:	602f      	str	r7, [r5, #0]
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d0ca      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__sflush_r+0x92>
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f7ff fdaf 	bl	80048ac <_free_r>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6360      	str	r0, [r4, #52]	; 0x34
 8004d52:	e7c1      	b.n	8004cd8 <__sflush_r+0x1c>
 8004d54:	6a21      	ldr	r1, [r4, #32]
 8004d56:	2301      	movs	r3, #1
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b0      	blx	r6
 8004d5c:	1c41      	adds	r1, r0, #1
 8004d5e:	d1c7      	bne.n	8004cf0 <__sflush_r+0x34>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0c4      	beq.n	8004cf0 <__sflush_r+0x34>
 8004d66:	2b1d      	cmp	r3, #29
 8004d68:	d001      	beq.n	8004d6e <__sflush_r+0xb2>
 8004d6a:	2b16      	cmp	r3, #22
 8004d6c:	d101      	bne.n	8004d72 <__sflush_r+0xb6>
 8004d6e:	602f      	str	r7, [r5, #0]
 8004d70:	e7b1      	b.n	8004cd6 <__sflush_r+0x1a>
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	e7ad      	b.n	8004cd8 <__sflush_r+0x1c>
 8004d7c:	690f      	ldr	r7, [r1, #16]
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d0a9      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004d82:	0793      	lsls	r3, r2, #30
 8004d84:	680e      	ldr	r6, [r1, #0]
 8004d86:	bf08      	it	eq
 8004d88:	694b      	ldreq	r3, [r1, #20]
 8004d8a:	600f      	str	r7, [r1, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	2300      	movne	r3, #0
 8004d90:	eba6 0807 	sub.w	r8, r6, r7
 8004d94:	608b      	str	r3, [r1, #8]
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	dd9c      	ble.n	8004cd6 <__sflush_r+0x1a>
 8004d9c:	6a21      	ldr	r1, [r4, #32]
 8004d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da0:	4643      	mov	r3, r8
 8004da2:	463a      	mov	r2, r7
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b0      	blx	r6
 8004da8:	2800      	cmp	r0, #0
 8004daa:	dc06      	bgt.n	8004dba <__sflush_r+0xfe>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e78e      	b.n	8004cd8 <__sflush_r+0x1c>
 8004dba:	4407      	add	r7, r0
 8004dbc:	eba8 0800 	sub.w	r8, r8, r0
 8004dc0:	e7e9      	b.n	8004d96 <__sflush_r+0xda>
 8004dc2:	bf00      	nop
 8004dc4:	20400001 	.word	0x20400001

08004dc8 <_fflush_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	690b      	ldr	r3, [r1, #16]
 8004dcc:	4605      	mov	r5, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	b913      	cbnz	r3, 8004dd8 <_fflush_r+0x10>
 8004dd2:	2500      	movs	r5, #0
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	b118      	cbz	r0, 8004de2 <_fflush_r+0x1a>
 8004dda:	6983      	ldr	r3, [r0, #24]
 8004ddc:	b90b      	cbnz	r3, 8004de2 <_fflush_r+0x1a>
 8004dde:	f000 f887 	bl	8004ef0 <__sinit>
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <_fflush_r+0x6c>)
 8004de4:	429c      	cmp	r4, r3
 8004de6:	d11b      	bne.n	8004e20 <_fflush_r+0x58>
 8004de8:	686c      	ldr	r4, [r5, #4]
 8004dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ef      	beq.n	8004dd2 <_fflush_r+0xa>
 8004df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004df4:	07d0      	lsls	r0, r2, #31
 8004df6:	d404      	bmi.n	8004e02 <_fflush_r+0x3a>
 8004df8:	0599      	lsls	r1, r3, #22
 8004dfa:	d402      	bmi.n	8004e02 <_fflush_r+0x3a>
 8004dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfe:	f000 f915 	bl	800502c <__retarget_lock_acquire_recursive>
 8004e02:	4628      	mov	r0, r5
 8004e04:	4621      	mov	r1, r4
 8004e06:	f7ff ff59 	bl	8004cbc <__sflush_r>
 8004e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e0c:	07da      	lsls	r2, r3, #31
 8004e0e:	4605      	mov	r5, r0
 8004e10:	d4e0      	bmi.n	8004dd4 <_fflush_r+0xc>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	059b      	lsls	r3, r3, #22
 8004e16:	d4dd      	bmi.n	8004dd4 <_fflush_r+0xc>
 8004e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1a:	f000 f908 	bl	800502e <__retarget_lock_release_recursive>
 8004e1e:	e7d9      	b.n	8004dd4 <_fflush_r+0xc>
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <_fflush_r+0x70>)
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d101      	bne.n	8004e2a <_fflush_r+0x62>
 8004e26:	68ac      	ldr	r4, [r5, #8]
 8004e28:	e7df      	b.n	8004dea <_fflush_r+0x22>
 8004e2a:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <_fflush_r+0x74>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	bf08      	it	eq
 8004e30:	68ec      	ldreq	r4, [r5, #12]
 8004e32:	e7da      	b.n	8004dea <_fflush_r+0x22>
 8004e34:	08005998 	.word	0x08005998
 8004e38:	080059b8 	.word	0x080059b8
 8004e3c:	08005978 	.word	0x08005978

08004e40 <std>:
 8004e40:	2300      	movs	r3, #0
 8004e42:	b510      	push	{r4, lr}
 8004e44:	4604      	mov	r4, r0
 8004e46:	e9c0 3300 	strd	r3, r3, [r0]
 8004e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4e:	6083      	str	r3, [r0, #8]
 8004e50:	8181      	strh	r1, [r0, #12]
 8004e52:	6643      	str	r3, [r0, #100]	; 0x64
 8004e54:	81c2      	strh	r2, [r0, #14]
 8004e56:	6183      	str	r3, [r0, #24]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	305c      	adds	r0, #92	; 0x5c
 8004e5e:	f7ff fd1d 	bl	800489c <memset>
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x38>)
 8004e64:	6263      	str	r3, [r4, #36]	; 0x24
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x3c>)
 8004e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <std+0x40>)
 8004e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x44>)
 8004e70:	6224      	str	r4, [r4, #32]
 8004e72:	6323      	str	r3, [r4, #48]	; 0x30
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	080056ed 	.word	0x080056ed
 8004e7c:	0800570f 	.word	0x0800570f
 8004e80:	08005747 	.word	0x08005747
 8004e84:	0800576b 	.word	0x0800576b

08004e88 <_cleanup_r>:
 8004e88:	4901      	ldr	r1, [pc, #4]	; (8004e90 <_cleanup_r+0x8>)
 8004e8a:	f000 b8af 	b.w	8004fec <_fwalk_reent>
 8004e8e:	bf00      	nop
 8004e90:	08004dc9 	.word	0x08004dc9

08004e94 <__sfmoreglue>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	1e4a      	subs	r2, r1, #1
 8004e98:	2568      	movs	r5, #104	; 0x68
 8004e9a:	4355      	muls	r5, r2
 8004e9c:	460e      	mov	r6, r1
 8004e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ea2:	f7ff fd53 	bl	800494c <_malloc_r>
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	b140      	cbz	r0, 8004ebc <__sfmoreglue+0x28>
 8004eaa:	2100      	movs	r1, #0
 8004eac:	e9c0 1600 	strd	r1, r6, [r0]
 8004eb0:	300c      	adds	r0, #12
 8004eb2:	60a0      	str	r0, [r4, #8]
 8004eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eb8:	f7ff fcf0 	bl	800489c <memset>
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}

08004ec0 <__sfp_lock_acquire>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__sfp_lock_acquire+0x8>)
 8004ec2:	f000 b8b3 	b.w	800502c <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	200003f8 	.word	0x200003f8

08004ecc <__sfp_lock_release>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sfp_lock_release+0x8>)
 8004ece:	f000 b8ae 	b.w	800502e <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	200003f8 	.word	0x200003f8

08004ed8 <__sinit_lock_acquire>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__sinit_lock_acquire+0x8>)
 8004eda:	f000 b8a7 	b.w	800502c <__retarget_lock_acquire_recursive>
 8004ede:	bf00      	nop
 8004ee0:	200003f3 	.word	0x200003f3

08004ee4 <__sinit_lock_release>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sinit_lock_release+0x8>)
 8004ee6:	f000 b8a2 	b.w	800502e <__retarget_lock_release_recursive>
 8004eea:	bf00      	nop
 8004eec:	200003f3 	.word	0x200003f3

08004ef0 <__sinit>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	f7ff fff0 	bl	8004ed8 <__sinit_lock_acquire>
 8004ef8:	69a3      	ldr	r3, [r4, #24]
 8004efa:	b11b      	cbz	r3, 8004f04 <__sinit+0x14>
 8004efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f00:	f7ff bff0 	b.w	8004ee4 <__sinit_lock_release>
 8004f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f08:	6523      	str	r3, [r4, #80]	; 0x50
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <__sinit+0x68>)
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <__sinit+0x6c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	bf04      	itt	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	61a3      	streq	r3, [r4, #24]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f820 	bl	8004f60 <__sfp>
 8004f20:	6060      	str	r0, [r4, #4]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f81c 	bl	8004f60 <__sfp>
 8004f28:	60a0      	str	r0, [r4, #8]
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 f818 	bl	8004f60 <__sfp>
 8004f30:	2200      	movs	r2, #0
 8004f32:	60e0      	str	r0, [r4, #12]
 8004f34:	2104      	movs	r1, #4
 8004f36:	6860      	ldr	r0, [r4, #4]
 8004f38:	f7ff ff82 	bl	8004e40 <std>
 8004f3c:	68a0      	ldr	r0, [r4, #8]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2109      	movs	r1, #9
 8004f42:	f7ff ff7d 	bl	8004e40 <std>
 8004f46:	68e0      	ldr	r0, [r4, #12]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	2112      	movs	r1, #18
 8004f4c:	f7ff ff78 	bl	8004e40 <std>
 8004f50:	2301      	movs	r3, #1
 8004f52:	61a3      	str	r3, [r4, #24]
 8004f54:	e7d2      	b.n	8004efc <__sinit+0xc>
 8004f56:	bf00      	nop
 8004f58:	08005974 	.word	0x08005974
 8004f5c:	08004e89 	.word	0x08004e89

08004f60 <__sfp>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	4607      	mov	r7, r0
 8004f64:	f7ff ffac 	bl	8004ec0 <__sfp_lock_acquire>
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <__sfp+0x84>)
 8004f6a:	681e      	ldr	r6, [r3, #0]
 8004f6c:	69b3      	ldr	r3, [r6, #24]
 8004f6e:	b913      	cbnz	r3, 8004f76 <__sfp+0x16>
 8004f70:	4630      	mov	r0, r6
 8004f72:	f7ff ffbd 	bl	8004ef0 <__sinit>
 8004f76:	3648      	adds	r6, #72	; 0x48
 8004f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	d503      	bpl.n	8004f88 <__sfp+0x28>
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	b30b      	cbz	r3, 8004fc8 <__sfp+0x68>
 8004f84:	6836      	ldr	r6, [r6, #0]
 8004f86:	e7f7      	b.n	8004f78 <__sfp+0x18>
 8004f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f8c:	b9d5      	cbnz	r5, 8004fc4 <__sfp+0x64>
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <__sfp+0x88>)
 8004f90:	60e3      	str	r3, [r4, #12]
 8004f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f96:	6665      	str	r5, [r4, #100]	; 0x64
 8004f98:	f000 f847 	bl	800502a <__retarget_lock_init_recursive>
 8004f9c:	f7ff ff96 	bl	8004ecc <__sfp_lock_release>
 8004fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fa8:	6025      	str	r5, [r4, #0]
 8004faa:	61a5      	str	r5, [r4, #24]
 8004fac:	2208      	movs	r2, #8
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fb4:	f7ff fc72 	bl	800489c <memset>
 8004fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc4:	3468      	adds	r4, #104	; 0x68
 8004fc6:	e7d9      	b.n	8004f7c <__sfp+0x1c>
 8004fc8:	2104      	movs	r1, #4
 8004fca:	4638      	mov	r0, r7
 8004fcc:	f7ff ff62 	bl	8004e94 <__sfmoreglue>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	6030      	str	r0, [r6, #0]
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d1d5      	bne.n	8004f84 <__sfp+0x24>
 8004fd8:	f7ff ff78 	bl	8004ecc <__sfp_lock_release>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	e7ee      	b.n	8004fc0 <__sfp+0x60>
 8004fe2:	bf00      	nop
 8004fe4:	08005974 	.word	0x08005974
 8004fe8:	ffff0001 	.word	0xffff0001

08004fec <_fwalk_reent>:
 8004fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	4688      	mov	r8, r1
 8004ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ff8:	2700      	movs	r7, #0
 8004ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8005002:	d505      	bpl.n	8005010 <_fwalk_reent+0x24>
 8005004:	6824      	ldr	r4, [r4, #0]
 8005006:	2c00      	cmp	r4, #0
 8005008:	d1f7      	bne.n	8004ffa <_fwalk_reent+0xe>
 800500a:	4638      	mov	r0, r7
 800500c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005010:	89ab      	ldrh	r3, [r5, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d907      	bls.n	8005026 <_fwalk_reent+0x3a>
 8005016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800501a:	3301      	adds	r3, #1
 800501c:	d003      	beq.n	8005026 <_fwalk_reent+0x3a>
 800501e:	4629      	mov	r1, r5
 8005020:	4630      	mov	r0, r6
 8005022:	47c0      	blx	r8
 8005024:	4307      	orrs	r7, r0
 8005026:	3568      	adds	r5, #104	; 0x68
 8005028:	e7e9      	b.n	8004ffe <_fwalk_reent+0x12>

0800502a <__retarget_lock_init_recursive>:
 800502a:	4770      	bx	lr

0800502c <__retarget_lock_acquire_recursive>:
 800502c:	4770      	bx	lr

0800502e <__retarget_lock_release_recursive>:
 800502e:	4770      	bx	lr

08005030 <__swhatbuf_r>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	460e      	mov	r6, r1
 8005034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005038:	2900      	cmp	r1, #0
 800503a:	b096      	sub	sp, #88	; 0x58
 800503c:	4614      	mov	r4, r2
 800503e:	461d      	mov	r5, r3
 8005040:	da07      	bge.n	8005052 <__swhatbuf_r+0x22>
 8005042:	2300      	movs	r3, #0
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	89b3      	ldrh	r3, [r6, #12]
 8005048:	061a      	lsls	r2, r3, #24
 800504a:	d410      	bmi.n	800506e <__swhatbuf_r+0x3e>
 800504c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005050:	e00e      	b.n	8005070 <__swhatbuf_r+0x40>
 8005052:	466a      	mov	r2, sp
 8005054:	f000 fbb0 	bl	80057b8 <_fstat_r>
 8005058:	2800      	cmp	r0, #0
 800505a:	dbf2      	blt.n	8005042 <__swhatbuf_r+0x12>
 800505c:	9a01      	ldr	r2, [sp, #4]
 800505e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005066:	425a      	negs	r2, r3
 8005068:	415a      	adcs	r2, r3
 800506a:	602a      	str	r2, [r5, #0]
 800506c:	e7ee      	b.n	800504c <__swhatbuf_r+0x1c>
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	2000      	movs	r0, #0
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	b016      	add	sp, #88	; 0x58
 8005076:	bd70      	pop	{r4, r5, r6, pc}

08005078 <__smakebuf_r>:
 8005078:	898b      	ldrh	r3, [r1, #12]
 800507a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800507c:	079d      	lsls	r5, r3, #30
 800507e:	4606      	mov	r6, r0
 8005080:	460c      	mov	r4, r1
 8005082:	d507      	bpl.n	8005094 <__smakebuf_r+0x1c>
 8005084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	2301      	movs	r3, #1
 800508e:	6163      	str	r3, [r4, #20]
 8005090:	b002      	add	sp, #8
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	ab01      	add	r3, sp, #4
 8005096:	466a      	mov	r2, sp
 8005098:	f7ff ffca 	bl	8005030 <__swhatbuf_r>
 800509c:	9900      	ldr	r1, [sp, #0]
 800509e:	4605      	mov	r5, r0
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff fc53 	bl	800494c <_malloc_r>
 80050a6:	b948      	cbnz	r0, 80050bc <__smakebuf_r+0x44>
 80050a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d4ef      	bmi.n	8005090 <__smakebuf_r+0x18>
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	f043 0302 	orr.w	r3, r3, #2
 80050b8:	81a3      	strh	r3, [r4, #12]
 80050ba:	e7e3      	b.n	8005084 <__smakebuf_r+0xc>
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <__smakebuf_r+0x7c>)
 80050be:	62b3      	str	r3, [r6, #40]	; 0x28
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	6020      	str	r0, [r4, #0]
 80050c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	6163      	str	r3, [r4, #20]
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	6120      	str	r0, [r4, #16]
 80050d2:	b15b      	cbz	r3, 80050ec <__smakebuf_r+0x74>
 80050d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d8:	4630      	mov	r0, r6
 80050da:	f000 fb7f 	bl	80057dc <_isatty_r>
 80050de:	b128      	cbz	r0, 80050ec <__smakebuf_r+0x74>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	89a0      	ldrh	r0, [r4, #12]
 80050ee:	4305      	orrs	r5, r0
 80050f0:	81a5      	strh	r5, [r4, #12]
 80050f2:	e7cd      	b.n	8005090 <__smakebuf_r+0x18>
 80050f4:	08004e89 	.word	0x08004e89

080050f8 <__malloc_lock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__malloc_lock+0x8>)
 80050fa:	f7ff bf97 	b.w	800502c <__retarget_lock_acquire_recursive>
 80050fe:	bf00      	nop
 8005100:	200003f4 	.word	0x200003f4

08005104 <__malloc_unlock>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__malloc_unlock+0x8>)
 8005106:	f7ff bf92 	b.w	800502e <__retarget_lock_release_recursive>
 800510a:	bf00      	nop
 800510c:	200003f4 	.word	0x200003f4

08005110 <__sfputc_r>:
 8005110:	6893      	ldr	r3, [r2, #8]
 8005112:	3b01      	subs	r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	b410      	push	{r4}
 8005118:	6093      	str	r3, [r2, #8]
 800511a:	da08      	bge.n	800512e <__sfputc_r+0x1e>
 800511c:	6994      	ldr	r4, [r2, #24]
 800511e:	42a3      	cmp	r3, r4
 8005120:	db01      	blt.n	8005126 <__sfputc_r+0x16>
 8005122:	290a      	cmp	r1, #10
 8005124:	d103      	bne.n	800512e <__sfputc_r+0x1e>
 8005126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800512a:	f7ff bd07 	b.w	8004b3c <__swbuf_r>
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	1c58      	adds	r0, r3, #1
 8005132:	6010      	str	r0, [r2, #0]
 8005134:	7019      	strb	r1, [r3, #0]
 8005136:	4608      	mov	r0, r1
 8005138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800513c:	4770      	bx	lr

0800513e <__sfputs_r>:
 800513e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005140:	4606      	mov	r6, r0
 8005142:	460f      	mov	r7, r1
 8005144:	4614      	mov	r4, r2
 8005146:	18d5      	adds	r5, r2, r3
 8005148:	42ac      	cmp	r4, r5
 800514a:	d101      	bne.n	8005150 <__sfputs_r+0x12>
 800514c:	2000      	movs	r0, #0
 800514e:	e007      	b.n	8005160 <__sfputs_r+0x22>
 8005150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005154:	463a      	mov	r2, r7
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffda 	bl	8005110 <__sfputc_r>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d1f3      	bne.n	8005148 <__sfputs_r+0xa>
 8005160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005164 <_vfiprintf_r>:
 8005164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	460d      	mov	r5, r1
 800516a:	b09d      	sub	sp, #116	; 0x74
 800516c:	4614      	mov	r4, r2
 800516e:	4698      	mov	r8, r3
 8005170:	4606      	mov	r6, r0
 8005172:	b118      	cbz	r0, 800517c <_vfiprintf_r+0x18>
 8005174:	6983      	ldr	r3, [r0, #24]
 8005176:	b90b      	cbnz	r3, 800517c <_vfiprintf_r+0x18>
 8005178:	f7ff feba 	bl	8004ef0 <__sinit>
 800517c:	4b89      	ldr	r3, [pc, #548]	; (80053a4 <_vfiprintf_r+0x240>)
 800517e:	429d      	cmp	r5, r3
 8005180:	d11b      	bne.n	80051ba <_vfiprintf_r+0x56>
 8005182:	6875      	ldr	r5, [r6, #4]
 8005184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005186:	07d9      	lsls	r1, r3, #31
 8005188:	d405      	bmi.n	8005196 <_vfiprintf_r+0x32>
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	059a      	lsls	r2, r3, #22
 800518e:	d402      	bmi.n	8005196 <_vfiprintf_r+0x32>
 8005190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005192:	f7ff ff4b 	bl	800502c <__retarget_lock_acquire_recursive>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	d501      	bpl.n	80051a0 <_vfiprintf_r+0x3c>
 800519c:	692b      	ldr	r3, [r5, #16]
 800519e:	b9eb      	cbnz	r3, 80051dc <_vfiprintf_r+0x78>
 80051a0:	4629      	mov	r1, r5
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7ff fd1c 	bl	8004be0 <__swsetup_r>
 80051a8:	b1c0      	cbz	r0, 80051dc <_vfiprintf_r+0x78>
 80051aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ac:	07dc      	lsls	r4, r3, #31
 80051ae:	d50e      	bpl.n	80051ce <_vfiprintf_r+0x6a>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	b01d      	add	sp, #116	; 0x74
 80051b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ba:	4b7b      	ldr	r3, [pc, #492]	; (80053a8 <_vfiprintf_r+0x244>)
 80051bc:	429d      	cmp	r5, r3
 80051be:	d101      	bne.n	80051c4 <_vfiprintf_r+0x60>
 80051c0:	68b5      	ldr	r5, [r6, #8]
 80051c2:	e7df      	b.n	8005184 <_vfiprintf_r+0x20>
 80051c4:	4b79      	ldr	r3, [pc, #484]	; (80053ac <_vfiprintf_r+0x248>)
 80051c6:	429d      	cmp	r5, r3
 80051c8:	bf08      	it	eq
 80051ca:	68f5      	ldreq	r5, [r6, #12]
 80051cc:	e7da      	b.n	8005184 <_vfiprintf_r+0x20>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	0598      	lsls	r0, r3, #22
 80051d2:	d4ed      	bmi.n	80051b0 <_vfiprintf_r+0x4c>
 80051d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d6:	f7ff ff2a 	bl	800502e <__retarget_lock_release_recursive>
 80051da:	e7e9      	b.n	80051b0 <_vfiprintf_r+0x4c>
 80051dc:	2300      	movs	r3, #0
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	2320      	movs	r3, #32
 80051e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ea:	2330      	movs	r3, #48	; 0x30
 80051ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053b0 <_vfiprintf_r+0x24c>
 80051f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f4:	f04f 0901 	mov.w	r9, #1
 80051f8:	4623      	mov	r3, r4
 80051fa:	469a      	mov	sl, r3
 80051fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005200:	b10a      	cbz	r2, 8005206 <_vfiprintf_r+0xa2>
 8005202:	2a25      	cmp	r2, #37	; 0x25
 8005204:	d1f9      	bne.n	80051fa <_vfiprintf_r+0x96>
 8005206:	ebba 0b04 	subs.w	fp, sl, r4
 800520a:	d00b      	beq.n	8005224 <_vfiprintf_r+0xc0>
 800520c:	465b      	mov	r3, fp
 800520e:	4622      	mov	r2, r4
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ff93 	bl	800513e <__sfputs_r>
 8005218:	3001      	adds	r0, #1
 800521a:	f000 80aa 	beq.w	8005372 <_vfiprintf_r+0x20e>
 800521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005220:	445a      	add	r2, fp
 8005222:	9209      	str	r2, [sp, #36]	; 0x24
 8005224:	f89a 3000 	ldrb.w	r3, [sl]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a2 	beq.w	8005372 <_vfiprintf_r+0x20e>
 800522e:	2300      	movs	r3, #0
 8005230:	f04f 32ff 	mov.w	r2, #4294967295
 8005234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005238:	f10a 0a01 	add.w	sl, sl, #1
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005244:	931a      	str	r3, [sp, #104]	; 0x68
 8005246:	4654      	mov	r4, sl
 8005248:	2205      	movs	r2, #5
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	4858      	ldr	r0, [pc, #352]	; (80053b0 <_vfiprintf_r+0x24c>)
 8005250:	f7fa ffc6 	bl	80001e0 <memchr>
 8005254:	9a04      	ldr	r2, [sp, #16]
 8005256:	b9d8      	cbnz	r0, 8005290 <_vfiprintf_r+0x12c>
 8005258:	06d1      	lsls	r1, r2, #27
 800525a:	bf44      	itt	mi
 800525c:	2320      	movmi	r3, #32
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	0713      	lsls	r3, r2, #28
 8005264:	bf44      	itt	mi
 8005266:	232b      	movmi	r3, #43	; 0x2b
 8005268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526c:	f89a 3000 	ldrb.w	r3, [sl]
 8005270:	2b2a      	cmp	r3, #42	; 0x2a
 8005272:	d015      	beq.n	80052a0 <_vfiprintf_r+0x13c>
 8005274:	9a07      	ldr	r2, [sp, #28]
 8005276:	4654      	mov	r4, sl
 8005278:	2000      	movs	r0, #0
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4621      	mov	r1, r4
 8005280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005284:	3b30      	subs	r3, #48	; 0x30
 8005286:	2b09      	cmp	r3, #9
 8005288:	d94e      	bls.n	8005328 <_vfiprintf_r+0x1c4>
 800528a:	b1b0      	cbz	r0, 80052ba <_vfiprintf_r+0x156>
 800528c:	9207      	str	r2, [sp, #28]
 800528e:	e014      	b.n	80052ba <_vfiprintf_r+0x156>
 8005290:	eba0 0308 	sub.w	r3, r0, r8
 8005294:	fa09 f303 	lsl.w	r3, r9, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	46a2      	mov	sl, r4
 800529e:	e7d2      	b.n	8005246 <_vfiprintf_r+0xe2>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d19      	adds	r1, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9103      	str	r1, [sp, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfbb      	ittet	lt
 80052ac:	425b      	neglt	r3, r3
 80052ae:	f042 0202 	orrlt.w	r2, r2, #2
 80052b2:	9307      	strge	r3, [sp, #28]
 80052b4:	9307      	strlt	r3, [sp, #28]
 80052b6:	bfb8      	it	lt
 80052b8:	9204      	strlt	r2, [sp, #16]
 80052ba:	7823      	ldrb	r3, [r4, #0]
 80052bc:	2b2e      	cmp	r3, #46	; 0x2e
 80052be:	d10c      	bne.n	80052da <_vfiprintf_r+0x176>
 80052c0:	7863      	ldrb	r3, [r4, #1]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d135      	bne.n	8005332 <_vfiprintf_r+0x1ce>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	9203      	str	r2, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfb8      	it	lt
 80052d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052d6:	3402      	adds	r4, #2
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053c0 <_vfiprintf_r+0x25c>
 80052de:	7821      	ldrb	r1, [r4, #0]
 80052e0:	2203      	movs	r2, #3
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7fa ff7c 	bl	80001e0 <memchr>
 80052e8:	b140      	cbz	r0, 80052fc <_vfiprintf_r+0x198>
 80052ea:	2340      	movs	r3, #64	; 0x40
 80052ec:	eba0 000a 	sub.w	r0, r0, sl
 80052f0:	fa03 f000 	lsl.w	r0, r3, r0
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	4303      	orrs	r3, r0
 80052f8:	3401      	adds	r4, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005300:	482c      	ldr	r0, [pc, #176]	; (80053b4 <_vfiprintf_r+0x250>)
 8005302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005306:	2206      	movs	r2, #6
 8005308:	f7fa ff6a 	bl	80001e0 <memchr>
 800530c:	2800      	cmp	r0, #0
 800530e:	d03f      	beq.n	8005390 <_vfiprintf_r+0x22c>
 8005310:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <_vfiprintf_r+0x254>)
 8005312:	bb1b      	cbnz	r3, 800535c <_vfiprintf_r+0x1f8>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	3307      	adds	r3, #7
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	3308      	adds	r3, #8
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005322:	443b      	add	r3, r7
 8005324:	9309      	str	r3, [sp, #36]	; 0x24
 8005326:	e767      	b.n	80051f8 <_vfiprintf_r+0x94>
 8005328:	fb0c 3202 	mla	r2, ip, r2, r3
 800532c:	460c      	mov	r4, r1
 800532e:	2001      	movs	r0, #1
 8005330:	e7a5      	b.n	800527e <_vfiprintf_r+0x11a>
 8005332:	2300      	movs	r3, #0
 8005334:	3401      	adds	r4, #1
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0c0a 	mov.w	ip, #10
 800533e:	4620      	mov	r0, r4
 8005340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005344:	3a30      	subs	r2, #48	; 0x30
 8005346:	2a09      	cmp	r2, #9
 8005348:	d903      	bls.n	8005352 <_vfiprintf_r+0x1ee>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0c5      	beq.n	80052da <_vfiprintf_r+0x176>
 800534e:	9105      	str	r1, [sp, #20]
 8005350:	e7c3      	b.n	80052da <_vfiprintf_r+0x176>
 8005352:	fb0c 2101 	mla	r1, ip, r1, r2
 8005356:	4604      	mov	r4, r0
 8005358:	2301      	movs	r3, #1
 800535a:	e7f0      	b.n	800533e <_vfiprintf_r+0x1da>
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <_vfiprintf_r+0x258>)
 8005364:	a904      	add	r1, sp, #16
 8005366:	4630      	mov	r0, r6
 8005368:	f3af 8000 	nop.w
 800536c:	4607      	mov	r7, r0
 800536e:	1c78      	adds	r0, r7, #1
 8005370:	d1d6      	bne.n	8005320 <_vfiprintf_r+0x1bc>
 8005372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005374:	07d9      	lsls	r1, r3, #31
 8005376:	d405      	bmi.n	8005384 <_vfiprintf_r+0x220>
 8005378:	89ab      	ldrh	r3, [r5, #12]
 800537a:	059a      	lsls	r2, r3, #22
 800537c:	d402      	bmi.n	8005384 <_vfiprintf_r+0x220>
 800537e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005380:	f7ff fe55 	bl	800502e <__retarget_lock_release_recursive>
 8005384:	89ab      	ldrh	r3, [r5, #12]
 8005386:	065b      	lsls	r3, r3, #25
 8005388:	f53f af12 	bmi.w	80051b0 <_vfiprintf_r+0x4c>
 800538c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800538e:	e711      	b.n	80051b4 <_vfiprintf_r+0x50>
 8005390:	ab03      	add	r3, sp, #12
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	462a      	mov	r2, r5
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <_vfiprintf_r+0x258>)
 8005398:	a904      	add	r1, sp, #16
 800539a:	4630      	mov	r0, r6
 800539c:	f000 f880 	bl	80054a0 <_printf_i>
 80053a0:	e7e4      	b.n	800536c <_vfiprintf_r+0x208>
 80053a2:	bf00      	nop
 80053a4:	08005998 	.word	0x08005998
 80053a8:	080059b8 	.word	0x080059b8
 80053ac:	08005978 	.word	0x08005978
 80053b0:	080059d8 	.word	0x080059d8
 80053b4:	080059e2 	.word	0x080059e2
 80053b8:	00000000 	.word	0x00000000
 80053bc:	0800513f 	.word	0x0800513f
 80053c0:	080059de 	.word	0x080059de

080053c4 <_printf_common>:
 80053c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c8:	4616      	mov	r6, r2
 80053ca:	4699      	mov	r9, r3
 80053cc:	688a      	ldr	r2, [r1, #8]
 80053ce:	690b      	ldr	r3, [r1, #16]
 80053d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bfb8      	it	lt
 80053d8:	4613      	movlt	r3, r2
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053e0:	4607      	mov	r7, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	b10a      	cbz	r2, 80053ea <_printf_common+0x26>
 80053e6:	3301      	adds	r3, #1
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0699      	lsls	r1, r3, #26
 80053ee:	bf42      	ittt	mi
 80053f0:	6833      	ldrmi	r3, [r6, #0]
 80053f2:	3302      	addmi	r3, #2
 80053f4:	6033      	strmi	r3, [r6, #0]
 80053f6:	6825      	ldr	r5, [r4, #0]
 80053f8:	f015 0506 	ands.w	r5, r5, #6
 80053fc:	d106      	bne.n	800540c <_printf_common+0x48>
 80053fe:	f104 0a19 	add.w	sl, r4, #25
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	6832      	ldr	r2, [r6, #0]
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	42ab      	cmp	r3, r5
 800540a:	dc26      	bgt.n	800545a <_printf_common+0x96>
 800540c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005410:	1e13      	subs	r3, r2, #0
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	bf18      	it	ne
 8005416:	2301      	movne	r3, #1
 8005418:	0692      	lsls	r2, r2, #26
 800541a:	d42b      	bmi.n	8005474 <_printf_common+0xb0>
 800541c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005420:	4649      	mov	r1, r9
 8005422:	4638      	mov	r0, r7
 8005424:	47c0      	blx	r8
 8005426:	3001      	adds	r0, #1
 8005428:	d01e      	beq.n	8005468 <_printf_common+0xa4>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	68e5      	ldr	r5, [r4, #12]
 800542e:	6832      	ldr	r2, [r6, #0]
 8005430:	f003 0306 	and.w	r3, r3, #6
 8005434:	2b04      	cmp	r3, #4
 8005436:	bf08      	it	eq
 8005438:	1aad      	subeq	r5, r5, r2
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	bf0c      	ite	eq
 8005440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005444:	2500      	movne	r5, #0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfc4      	itt	gt
 800544a:	1a9b      	subgt	r3, r3, r2
 800544c:	18ed      	addgt	r5, r5, r3
 800544e:	2600      	movs	r6, #0
 8005450:	341a      	adds	r4, #26
 8005452:	42b5      	cmp	r5, r6
 8005454:	d11a      	bne.n	800548c <_printf_common+0xc8>
 8005456:	2000      	movs	r0, #0
 8005458:	e008      	b.n	800546c <_printf_common+0xa8>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4649      	mov	r1, r9
 8005460:	4638      	mov	r0, r7
 8005462:	47c0      	blx	r8
 8005464:	3001      	adds	r0, #1
 8005466:	d103      	bne.n	8005470 <_printf_common+0xac>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	3501      	adds	r5, #1
 8005472:	e7c6      	b.n	8005402 <_printf_common+0x3e>
 8005474:	18e1      	adds	r1, r4, r3
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	2030      	movs	r0, #48	; 0x30
 800547a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547e:	4422      	add	r2, r4
 8005480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005488:	3302      	adds	r3, #2
 800548a:	e7c7      	b.n	800541c <_printf_common+0x58>
 800548c:	2301      	movs	r3, #1
 800548e:	4622      	mov	r2, r4
 8005490:	4649      	mov	r1, r9
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d0e6      	beq.n	8005468 <_printf_common+0xa4>
 800549a:	3601      	adds	r6, #1
 800549c:	e7d9      	b.n	8005452 <_printf_common+0x8e>
	...

080054a0 <_printf_i>:
 80054a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	4691      	mov	r9, r2
 80054a8:	7e27      	ldrb	r7, [r4, #24]
 80054aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054ac:	2f78      	cmp	r7, #120	; 0x78
 80054ae:	4680      	mov	r8, r0
 80054b0:	469a      	mov	sl, r3
 80054b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b6:	d807      	bhi.n	80054c8 <_printf_i+0x28>
 80054b8:	2f62      	cmp	r7, #98	; 0x62
 80054ba:	d80a      	bhi.n	80054d2 <_printf_i+0x32>
 80054bc:	2f00      	cmp	r7, #0
 80054be:	f000 80d8 	beq.w	8005672 <_printf_i+0x1d2>
 80054c2:	2f58      	cmp	r7, #88	; 0x58
 80054c4:	f000 80a3 	beq.w	800560e <_printf_i+0x16e>
 80054c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054d0:	e03a      	b.n	8005548 <_printf_i+0xa8>
 80054d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054d6:	2b15      	cmp	r3, #21
 80054d8:	d8f6      	bhi.n	80054c8 <_printf_i+0x28>
 80054da:	a001      	add	r0, pc, #4	; (adr r0, 80054e0 <_printf_i+0x40>)
 80054dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054e0:	08005539 	.word	0x08005539
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080054c9 	.word	0x080054c9
 80054ec:	080054c9 	.word	0x080054c9
 80054f0:	080054c9 	.word	0x080054c9
 80054f4:	080054c9 	.word	0x080054c9
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080054c9 	.word	0x080054c9
 8005500:	080054c9 	.word	0x080054c9
 8005504:	080054c9 	.word	0x080054c9
 8005508:	080054c9 	.word	0x080054c9
 800550c:	08005659 	.word	0x08005659
 8005510:	0800557d 	.word	0x0800557d
 8005514:	0800563b 	.word	0x0800563b
 8005518:	080054c9 	.word	0x080054c9
 800551c:	080054c9 	.word	0x080054c9
 8005520:	0800567b 	.word	0x0800567b
 8005524:	080054c9 	.word	0x080054c9
 8005528:	0800557d 	.word	0x0800557d
 800552c:	080054c9 	.word	0x080054c9
 8005530:	080054c9 	.word	0x080054c9
 8005534:	08005643 	.word	0x08005643
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	600a      	str	r2, [r1, #0]
 8005540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005548:	2301      	movs	r3, #1
 800554a:	e0a3      	b.n	8005694 <_printf_i+0x1f4>
 800554c:	6825      	ldr	r5, [r4, #0]
 800554e:	6808      	ldr	r0, [r1, #0]
 8005550:	062e      	lsls	r6, r5, #24
 8005552:	f100 0304 	add.w	r3, r0, #4
 8005556:	d50a      	bpl.n	800556e <_printf_i+0xce>
 8005558:	6805      	ldr	r5, [r0, #0]
 800555a:	600b      	str	r3, [r1, #0]
 800555c:	2d00      	cmp	r5, #0
 800555e:	da03      	bge.n	8005568 <_printf_i+0xc8>
 8005560:	232d      	movs	r3, #45	; 0x2d
 8005562:	426d      	negs	r5, r5
 8005564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005568:	485e      	ldr	r0, [pc, #376]	; (80056e4 <_printf_i+0x244>)
 800556a:	230a      	movs	r3, #10
 800556c:	e019      	b.n	80055a2 <_printf_i+0x102>
 800556e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005572:	6805      	ldr	r5, [r0, #0]
 8005574:	600b      	str	r3, [r1, #0]
 8005576:	bf18      	it	ne
 8005578:	b22d      	sxthne	r5, r5
 800557a:	e7ef      	b.n	800555c <_printf_i+0xbc>
 800557c:	680b      	ldr	r3, [r1, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	1d18      	adds	r0, r3, #4
 8005582:	6008      	str	r0, [r1, #0]
 8005584:	0628      	lsls	r0, r5, #24
 8005586:	d501      	bpl.n	800558c <_printf_i+0xec>
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0xf2>
 800558c:	0669      	lsls	r1, r5, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0xe8>
 8005590:	881d      	ldrh	r5, [r3, #0]
 8005592:	4854      	ldr	r0, [pc, #336]	; (80056e4 <_printf_i+0x244>)
 8005594:	2f6f      	cmp	r7, #111	; 0x6f
 8005596:	bf0c      	ite	eq
 8005598:	2308      	moveq	r3, #8
 800559a:	230a      	movne	r3, #10
 800559c:	2100      	movs	r1, #0
 800559e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055a2:	6866      	ldr	r6, [r4, #4]
 80055a4:	60a6      	str	r6, [r4, #8]
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	bfa2      	ittt	ge
 80055aa:	6821      	ldrge	r1, [r4, #0]
 80055ac:	f021 0104 	bicge.w	r1, r1, #4
 80055b0:	6021      	strge	r1, [r4, #0]
 80055b2:	b90d      	cbnz	r5, 80055b8 <_printf_i+0x118>
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d04d      	beq.n	8005654 <_printf_i+0x1b4>
 80055b8:	4616      	mov	r6, r2
 80055ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80055be:	fb03 5711 	mls	r7, r3, r1, r5
 80055c2:	5dc7      	ldrb	r7, [r0, r7]
 80055c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055c8:	462f      	mov	r7, r5
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	460d      	mov	r5, r1
 80055ce:	d9f4      	bls.n	80055ba <_printf_i+0x11a>
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10b      	bne.n	80055ec <_printf_i+0x14c>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07df      	lsls	r7, r3, #31
 80055d8:	d508      	bpl.n	80055ec <_printf_i+0x14c>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	bfde      	ittt	le
 80055e2:	2330      	movle	r3, #48	; 0x30
 80055e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ec:	1b92      	subs	r2, r2, r6
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	464b      	mov	r3, r9
 80055f6:	aa03      	add	r2, sp, #12
 80055f8:	4621      	mov	r1, r4
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fee2 	bl	80053c4 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	d14c      	bne.n	800569e <_printf_i+0x1fe>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b004      	add	sp, #16
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	4835      	ldr	r0, [pc, #212]	; (80056e4 <_printf_i+0x244>)
 8005610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	680e      	ldr	r6, [r1, #0]
 8005618:	061f      	lsls	r7, r3, #24
 800561a:	f856 5b04 	ldr.w	r5, [r6], #4
 800561e:	600e      	str	r6, [r1, #0]
 8005620:	d514      	bpl.n	800564c <_printf_i+0x1ac>
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	bf44      	itt	mi
 8005626:	f043 0320 	orrmi.w	r3, r3, #32
 800562a:	6023      	strmi	r3, [r4, #0]
 800562c:	b91d      	cbnz	r5, 8005636 <_printf_i+0x196>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f023 0320 	bic.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	2310      	movs	r3, #16
 8005638:	e7b0      	b.n	800559c <_printf_i+0xfc>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	2378      	movs	r3, #120	; 0x78
 8005644:	4828      	ldr	r0, [pc, #160]	; (80056e8 <_printf_i+0x248>)
 8005646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800564a:	e7e3      	b.n	8005614 <_printf_i+0x174>
 800564c:	065e      	lsls	r6, r3, #25
 800564e:	bf48      	it	mi
 8005650:	b2ad      	uxthmi	r5, r5
 8005652:	e7e6      	b.n	8005622 <_printf_i+0x182>
 8005654:	4616      	mov	r6, r2
 8005656:	e7bb      	b.n	80055d0 <_printf_i+0x130>
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	6826      	ldr	r6, [r4, #0]
 800565c:	6960      	ldr	r0, [r4, #20]
 800565e:	1d1d      	adds	r5, r3, #4
 8005660:	600d      	str	r5, [r1, #0]
 8005662:	0635      	lsls	r5, r6, #24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	d501      	bpl.n	800566c <_printf_i+0x1cc>
 8005668:	6018      	str	r0, [r3, #0]
 800566a:	e002      	b.n	8005672 <_printf_i+0x1d2>
 800566c:	0671      	lsls	r1, r6, #25
 800566e:	d5fb      	bpl.n	8005668 <_printf_i+0x1c8>
 8005670:	8018      	strh	r0, [r3, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	4616      	mov	r6, r2
 8005678:	e7ba      	b.n	80055f0 <_printf_i+0x150>
 800567a:	680b      	ldr	r3, [r1, #0]
 800567c:	1d1a      	adds	r2, r3, #4
 800567e:	600a      	str	r2, [r1, #0]
 8005680:	681e      	ldr	r6, [r3, #0]
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	2100      	movs	r1, #0
 8005686:	4630      	mov	r0, r6
 8005688:	f7fa fdaa 	bl	80001e0 <memchr>
 800568c:	b108      	cbz	r0, 8005692 <_printf_i+0x1f2>
 800568e:	1b80      	subs	r0, r0, r6
 8005690:	6060      	str	r0, [r4, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	2300      	movs	r3, #0
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	e7a8      	b.n	80055f0 <_printf_i+0x150>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	4632      	mov	r2, r6
 80056a2:	4649      	mov	r1, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	47d0      	blx	sl
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0ab      	beq.n	8005604 <_printf_i+0x164>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	079b      	lsls	r3, r3, #30
 80056b0:	d413      	bmi.n	80056da <_printf_i+0x23a>
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	4298      	cmp	r0, r3
 80056b8:	bfb8      	it	lt
 80056ba:	4618      	movlt	r0, r3
 80056bc:	e7a4      	b.n	8005608 <_printf_i+0x168>
 80056be:	2301      	movs	r3, #1
 80056c0:	4632      	mov	r2, r6
 80056c2:	4649      	mov	r1, r9
 80056c4:	4640      	mov	r0, r8
 80056c6:	47d0      	blx	sl
 80056c8:	3001      	adds	r0, #1
 80056ca:	d09b      	beq.n	8005604 <_printf_i+0x164>
 80056cc:	3501      	adds	r5, #1
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	9903      	ldr	r1, [sp, #12]
 80056d2:	1a5b      	subs	r3, r3, r1
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dcf2      	bgt.n	80056be <_printf_i+0x21e>
 80056d8:	e7eb      	b.n	80056b2 <_printf_i+0x212>
 80056da:	2500      	movs	r5, #0
 80056dc:	f104 0619 	add.w	r6, r4, #25
 80056e0:	e7f5      	b.n	80056ce <_printf_i+0x22e>
 80056e2:	bf00      	nop
 80056e4:	080059e9 	.word	0x080059e9
 80056e8:	080059fa 	.word	0x080059fa

080056ec <__sread>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	460c      	mov	r4, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	f000 f894 	bl	8005820 <_read_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	bfab      	itete	ge
 80056fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005700:	181b      	addge	r3, r3, r0
 8005702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005706:	bfac      	ite	ge
 8005708:	6563      	strge	r3, [r4, #84]	; 0x54
 800570a:	81a3      	strhlt	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__swrite>:
 800570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	461f      	mov	r7, r3
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	05db      	lsls	r3, r3, #23
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
 800571c:	4616      	mov	r6, r2
 800571e:	d505      	bpl.n	800572c <__swrite+0x1e>
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	2302      	movs	r3, #2
 8005726:	2200      	movs	r2, #0
 8005728:	f000 f868 	bl	80057fc <_lseek_r>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	4632      	mov	r2, r6
 800573a:	463b      	mov	r3, r7
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	f000 b817 	b.w	8005774 <_write_r>

08005746 <__sseek>:
 8005746:	b510      	push	{r4, lr}
 8005748:	460c      	mov	r4, r1
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 f855 	bl	80057fc <_lseek_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	bf15      	itete	ne
 8005758:	6560      	strne	r0, [r4, #84]	; 0x54
 800575a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800575e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strheq	r3, [r4, #12]
 8005764:	bf18      	it	ne
 8005766:	81a3      	strhne	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__sclose>:
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 b813 	b.w	8005798 <_close_r>
	...

08005774 <_write_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	; (8005794 <_write_r+0x20>)
 8005778:	4604      	mov	r4, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	2200      	movs	r2, #0
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fa ffca 	bl	800071c <_write>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_write_r+0x1e>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_write_r+0x1e>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	200003fc 	.word	0x200003fc

08005798 <_close_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_close_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fc f853 	bl	800184e <_close>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_close_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_close_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200003fc 	.word	0x200003fc

080057b8 <_fstat_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_fstat_r+0x20>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	f7fc f84e 	bl	8001866 <_fstat>
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	d102      	bne.n	80057d4 <_fstat_r+0x1c>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	b103      	cbz	r3, 80057d4 <_fstat_r+0x1c>
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	bd38      	pop	{r3, r4, r5, pc}
 80057d6:	bf00      	nop
 80057d8:	200003fc 	.word	0x200003fc

080057dc <_isatty_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d06      	ldr	r5, [pc, #24]	; (80057f8 <_isatty_r+0x1c>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fc f84d 	bl	8001886 <_isatty>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_isatty_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_isatty_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	200003fc 	.word	0x200003fc

080057fc <_lseek_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_lseek_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fc f846 	bl	800189c <_lseek>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_lseek_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_lseek_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	200003fc 	.word	0x200003fc

08005820 <_read_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_read_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fb fff0 	bl	8001814 <_read>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_read_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_read_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200003fc 	.word	0x200003fc

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
