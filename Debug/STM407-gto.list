
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009258  08009258  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009258  08009258  00019258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009260  08009260  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  200000a8  08009310  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08009310  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015192  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7c  00000000  00000000  0003526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00039500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b90  00000000  00000000  0003a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014125  00000000  00000000  0003f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7580  00000000  00000000  000533a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a20  00000000  00000000  0012a978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b84 	.word	0x08008b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008b84 	.word	0x08008b84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4798      	blx	r3
   WIZCHIP.CS._select();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0a12      	lsrs	r2, r2, #8
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4610      	mov	r0, r2
 80005ba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <WIZCHIP_READ+0x58>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <WIZCHIP_READ+0x58>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <WIZCHIP_READ+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	200f      	movs	r0, #15
 80005ee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <WIZCHIP_READ+0x58>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0a12      	lsrs	r2, r2, #8
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <WIZCHIP_READ+0x58>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4610      	mov	r0, r2
 8000608:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <WIZCHIP_READ+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <WIZCHIP_READ+0x58>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <WIZCHIP_READ+0x58>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4798      	blx	r3
   return ret;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	e02a      	b.n	80006aa <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	20f0      	movs	r0, #240	; 0xf0
 8000660:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b291      	uxth	r1, r2
 800066a:	8afa      	ldrh	r2, [r7, #22]
 800066c:	440a      	add	r2, r1
 800066e:	b292      	uxth	r2, r2
 8000670:	0a12      	lsrs	r2, r2, #8
 8000672:	b292      	uxth	r2, r2
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440a      	add	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	440a      	add	r2, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d0      	bcc.n	8000654 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5200 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]
 80006ee:	e02a      	b.n	8000746 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	200f      	movs	r0, #15
 80006fc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b291      	uxth	r1, r2
 8000706:	8afa      	ldrh	r2, [r7, #22]
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	0a12      	lsrs	r2, r2, #8
 800070e:	b292      	uxth	r2, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	8afa      	ldrh	r2, [r7, #22]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440a      	add	r2, r1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	8afa      	ldrh	r2, [r7, #22]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	188c      	adds	r4, r1, r2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
 8000746:	8afa      	ldrh	r2, [r7, #22]
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3d0      	bcc.n	80006f0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	2300      	movs	r3, #0
 8000778:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3304      	adds	r3, #4
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	3320      	adds	r3, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <WIZCHIP_READ>
 8000788:	4603      	mov	r3, r0
 800078a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b29c      	uxth	r4, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3304      	adds	r3, #4
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	3321      	adds	r3, #33	; 0x21
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff1a 	bl	80005d4 <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4423      	add	r3, r4
 80007a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3304      	adds	r3, #4
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	3320      	adds	r3, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0c 	bl	80005d4 <WIZCHIP_READ>
 80007bc:	4603      	mov	r3, r0
 80007be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3304      	adds	r3, #4
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	3321      	adds	r3, #33	; 0x21
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff00 	bl	80005d4 <WIZCHIP_READ>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4423      	add	r3, r4
 80007da:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d1ca      	bne.n	800077a <getSn_TX_FSR+0x12>
   return val;
 80007e4:	89fb      	ldrh	r3, [r7, #14]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80007ee:	b590      	push	{r4, r7, lr}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3304      	adds	r3, #4
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	3326      	adds	r3, #38	; 0x26
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <WIZCHIP_READ>
 800080e:	4603      	mov	r3, r0
 8000810:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b29c      	uxth	r4, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3304      	adds	r3, #4
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	3327      	adds	r3, #39	; 0x27
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <WIZCHIP_READ>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4423      	add	r3, r4
 800082c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d016      	beq.n	8000862 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3304      	adds	r3, #4
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	3326      	adds	r3, #38	; 0x26
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fec9 	bl	80005d4 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	3327      	adds	r3, #39	; 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff febd 	bl	80005d4 <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d1ca      	bne.n	8000800 <getSn_RX_RSR+0x12>
   return val;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800087e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000882:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e020      	b.n	80008cc <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 800088a:	201a      	movs	r0, #26
 800088c:	f7ff fea2 	bl	80005d4 <WIZCHIP_READ>
 8000890:	4603      	mov	r3, r0
 8000892:	4619      	mov	r1, r3
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	ea01 0203 	and.w	r2, r1, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd9      	blt.n	800088a <getSn_RxBASE+0x16>

   return rxbase;
 80008d6:	68bb      	ldr	r3, [r7, #8]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 80008ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ee:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e020      	b.n	8000938 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 80008f6:	201b      	movs	r0, #27
 80008f8:	f7ff fe6c 	bl	80005d4 <WIZCHIP_READ>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	ea01 0203 	and.w	r2, r1, r3
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	2201      	movs	r2, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	b29b      	uxth	r3, r3
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	461a      	mov	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	3301      	adds	r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbd9      	blt.n	80008f6 <getSn_TxBASE+0x16>
   return txbase;
 8000942:	68bb      	ldr	r3, [r7, #8]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3304      	adds	r3, #4
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	3324      	adds	r3, #36	; 0x24
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe35 	bl	80005d4 <WIZCHIP_READ>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29c      	uxth	r4, r3
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3304      	adds	r3, #4
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	3325      	adds	r3, #37	; 0x25
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe2a 	bl	80005d4 <WIZCHIP_READ>
 8000980:	4603      	mov	r3, r0
 8000982:	b29b      	uxth	r3, r3
 8000984:	4423      	add	r3, r4
 8000986:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8000988:	201b      	movs	r0, #27
 800098a:	f7ff fe23 	bl	80005d4 <WIZCHIP_READ>
 800098e:	4603      	mov	r3, r0
 8000990:	4619      	mov	r1, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	ea01 0203 	and.w	r2, r1, r3
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa42 f303 	asr.w	r3, r2, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	4013      	ands	r3, r2
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff8a 	bl	80008e0 <getSn_TxBASE>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	89bb      	ldrh	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80009d6:	89ba      	ldrh	r2, [r7, #12]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	18d4      	adds	r4, r2, r3
 80009dc:	201b      	movs	r0, #27
 80009de:	f7ff fdf9 	bl	80005d4 <WIZCHIP_READ>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4619      	mov	r1, r3
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	ea01 0203 	and.w	r2, r1, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa42 f303 	asr.w	r3, r2, r3
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dd33      	ble.n	8000a72 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8000a0a:	201b      	movs	r0, #27
 8000a0c:	f7ff fde2 	bl	80005d4 <WIZCHIP_READ>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4619      	mov	r1, r3
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	ea01 0203 	and.w	r2, r1, r3
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa42 f303 	asr.w	r3, r2, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a3c:	897b      	ldrh	r3, [r7, #10]
 8000a3e:	893a      	ldrh	r2, [r7, #8]
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdf4 	bl	8000630 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8000a48:	893b      	ldrh	r3, [r7, #8]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	893b      	ldrh	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff40 	bl	80008e0 <getSn_TxBASE>
 8000a60:	4603      	mov	r3, r0
 8000a62:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a64:	897b      	ldrh	r3, [r7, #10]
 8000a66:	893a      	ldrh	r2, [r7, #8]
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fde0 	bl	8000630 <WIZCHIP_WRITE_BUF>
 8000a70:	e005      	b.n	8000a7e <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8000a72:	897b      	ldrh	r3, [r7, #10]
 8000a74:	88ba      	ldrh	r2, [r7, #4]
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fdd9 	bl	8000630 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 8000a7e:	89fa      	ldrh	r2, [r7, #14]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	3324      	adds	r3, #36	; 0x24
 8000a8e:	461a      	mov	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	f7ff fd6c 	bl	8000578 <WIZCHIP_WRITE>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	3325      	adds	r3, #37	; 0x25
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f7ff fd61 	bl	8000578 <WIZCHIP_WRITE>
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000abe:	b590      	push	{r4, r7, lr}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	3328      	adds	r3, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd7c 	bl	80005d4 <WIZCHIP_READ>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29c      	uxth	r4, r3
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	3329      	adds	r3, #41	; 0x29
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd71 	bl	80005d4 <WIZCHIP_READ>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4423      	add	r3, r4
 8000af8:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8000afa:	201a      	movs	r0, #26
 8000afc:	f7ff fd6a 	bl	80005d4 <WIZCHIP_READ>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4619      	mov	r1, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	ea01 0203 	and.w	r2, r1, r3
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fe9e 	bl	8000874 <getSn_RxBASE>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8000b42:	89ba      	ldrh	r2, [r7, #12]
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	18d4      	adds	r4, r2, r3
 8000b48:	201a      	movs	r0, #26
 8000b4a:	f7ff fd43 	bl	80005d4 <WIZCHIP_READ>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	ea01 0203 	and.w	r2, r1, r3
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa42 f303 	asr.w	r3, r2, r3
 8000b68:	2201      	movs	r2, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	429c      	cmp	r4, r3
 8000b74:	dd33      	ble.n	8000bde <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8000b76:	201a      	movs	r0, #26
 8000b78:	f7ff fd2c 	bl	80005d4 <WIZCHIP_READ>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	ea01 0203 	and.w	r2, r1, r3
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	2201      	movs	r2, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8000ba8:	897b      	ldrh	r3, [r7, #10]
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd8c 	bl	80006cc <WIZCHIP_READ_BUF>
    wizdata += size;
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	893b      	ldrh	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe54 	bl	8000874 <getSn_RxBASE>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8000bd0:	897b      	ldrh	r3, [r7, #10]
 8000bd2:	893a      	ldrh	r2, [r7, #8]
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd78 	bl	80006cc <WIZCHIP_READ_BUF>
 8000bdc:	e005      	b.n	8000bea <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	88ba      	ldrh	r2, [r7, #4]
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd71 	bl	80006cc <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	3328      	adds	r3, #40	; 0x28
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4610      	mov	r0, r2
 8000c08:	f7ff fcb6 	bl	8000578 <WIZCHIP_WRITE>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	3329      	adds	r3, #41	; 0x29
 8000c14:	461a      	mov	r2, r3
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fcab 	bl	8000578 <WIZCHIP_WRITE>
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71bb      	strb	r3, [r7, #6]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d902      	bls.n	8000c56 <socket+0x2a>
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e0e2      	b.n	8000e1c <socket+0x1f0>
	switch(protocol)
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d819      	bhi.n	8000c92 <socket+0x66>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <socket+0x38>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c79 	.word	0x08000c79
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000c99 	.word	0x08000c99
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	08000c99 	.word	0x08000c99
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	200f      	movs	r0, #15
 8000c82:	f7ff fd23 	bl	80006cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <socket+0x6c>
 8000c8c:	f06f 0302 	mvn.w	r3, #2
 8000c90:	e0c4      	b.n	8000e1c <socket+0x1f0>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000c92:	f06f 0304 	mvn.w	r3, #4
 8000c96:	e0c1      	b.n	8000e1c <socket+0x1f0>
         break;
 8000c98:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <socket+0x7e>
 8000ca4:	f06f 0305 	mvn.w	r3, #5
 8000ca8:	e0b8      	b.n	8000e1c <socket+0x1f0>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d019      	beq.n	8000ce4 <socket+0xb8>
	{
   	switch(protocol)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d002      	beq.n	8000cbc <socket+0x90>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d008      	beq.n	8000ccc <socket+0xa0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000cba:	e018      	b.n	8000cee <socket+0xc2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d110      	bne.n	8000ce8 <socket+0xbc>
 8000cc6:	f06f 0305 	mvn.w	r3, #5
 8000cca:	e0a7      	b.n	8000e1c <socket+0x1f0>
   	      if(flag & SF_IGMP_VER2)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <socket+0xc0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db06      	blt.n	8000cec <socket+0xc0>
 8000cde:	f06f 0305 	mvn.w	r3, #5
 8000ce2:	e09b      	b.n	8000e1c <socket+0x1f0>
   	}
   }
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <socket+0xc2>
   	      break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <socket+0xc2>
   	      break;
 8000cec:	bf00      	nop
	close(sn);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f8a1 	bl	8000e38 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b25a      	sxtb	r2, r3
 8000d08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fc30 	bl	8000578 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d110      	bne.n	8000d40 <socket+0x114>
	{
	   port = sock_any_port++;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <socket+0x1f8>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <socket+0x1f8>)
 8000d28:	8011      	strh	r1, [r2, #0]
 8000d2a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <socket+0x1f8>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <socket+0x114>
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <socket+0x1f8>)
 8000d3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d3e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3304      	adds	r3, #4
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	3304      	adds	r3, #4
 8000d48:	461a      	mov	r2, r3
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff fc0f 	bl	8000578 <WIZCHIP_WRITE>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	3305      	adds	r3, #5
 8000d62:	461a      	mov	r2, r3
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f7ff fc04 	bl	8000578 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3304      	adds	r3, #4
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	3301      	adds	r3, #1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbfc 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d80:	bf00      	nop
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3304      	adds	r3, #4
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc22 	bl	80005d4 <WIZCHIP_READ>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f5      	bne.n	8000d82 <socket+0x156>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <socket+0x1fc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4013      	ands	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <socket+0x1fc>)
 8000db2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <socket+0x1fc>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <socket+0x1fc>)
 8000dd0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <socket+0x200>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <socket+0x200>)
 8000dee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <socket+0x204>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <socket+0x208>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e02:	bf00      	nop
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3304      	adds	r3, #4
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbe1 	bl	80005d4 <WIZCHIP_READ>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f5      	beq.n	8000e04 <socket+0x1d8>
   return (int8_t)sn;
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	200000c4 	.word	0x200000c4
 8000e2c:	200000c6 	.word	0x200000c6
 8000e30:	200000c8 	.word	0x200000c8
 8000e34:	200000d0 	.word	0x200000d0

08000e38 <close>:

int8_t close(uint8_t sn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d902      	bls.n	8000e4e <close+0x16>
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e04d      	b.n	8000eea <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3304      	adds	r3, #4
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	3301      	adds	r3, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb8d 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000e5e:	bf00      	nop
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3304      	adds	r3, #4
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	3301      	adds	r3, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fbb3 	bl	80005d4 <WIZCHIP_READ>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f5      	bne.n	8000e60 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	3304      	adds	r3, #4
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb7a 	bl	8000578 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2201      	movs	r2, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <close+0xbc>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <close+0xbc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <close+0xc0>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <close+0xc0>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <close+0xc4>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <close+0xc8>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000ed2:	bf00      	nop
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	3303      	adds	r3, #3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb79 	bl	80005d4 <WIZCHIP_READ>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f5      	bne.n	8000ed4 <close+0x9c>
	return SOCK_OK;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000c4 	.word	0x200000c4
 8000ef8:	200000c6 	.word	0x200000c6
 8000efc:	200000c8 	.word	0x200000c8
 8000f00:	200000d0 	.word	0x200000d0

08000f04 <listen>:

int8_t listen(uint8_t sn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d902      	bls.n	8000f1a <listen+0x16>
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	e040      	b.n	8000f9c <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb57 	bl	80005d4 <WIZCHIP_READ>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <listen+0x32>
 8000f30:	f06f 0304 	mvn.w	r3, #4
 8000f34:	e032      	b.n	8000f9c <listen+0x98>
	CHECK_SOCKINIT();
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb48 	bl	80005d4 <WIZCHIP_READ>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b13      	cmp	r3, #19
 8000f48:	d002      	beq.n	8000f50 <listen+0x4c>
 8000f4a:	f06f 0302 	mvn.w	r3, #2
 8000f4e:	e025      	b.n	8000f9c <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3304      	adds	r3, #4
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	3301      	adds	r3, #1
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb0c 	bl	8000578 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000f60:	bf00      	nop
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3304      	adds	r3, #4
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fb32 	bl	80005d4 <WIZCHIP_READ>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f5      	bne.n	8000f62 <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f76:	e006      	b.n	8000f86 <listen+0x82>
   {
         close(sn);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff5c 	bl	8000e38 <close>
         return SOCKERR_SOCKCLOSED;
 8000f80:	f06f 0303 	mvn.w	r3, #3
 8000f84:	e00a      	b.n	8000f9c <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb20 	bl	80005d4 <WIZCHIP_READ>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b14      	cmp	r3, #20
 8000f98:	d1ee      	bne.n	8000f78 <listen+0x74>
   }
   return SOCK_OK;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d902      	bls.n	8000fba <disconnect+0x16>
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	e059      	b.n	800106e <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb07 	bl	80005d4 <WIZCHIP_READ>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d002      	beq.n	8000fd6 <disconnect+0x32>
 8000fd0:	f06f 0304 	mvn.w	r3, #4
 8000fd4:	e04b      	b.n	800106e <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	3301      	adds	r3, #1
 8000fde:	2108      	movs	r1, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fac9 	bl	8000578 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000fe6:	bf00      	nop
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3304      	adds	r3, #4
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff faef 	bl	80005d4 <WIZCHIP_READ>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f5      	bne.n	8000fe8 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	b21b      	sxth	r3, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <disconnect+0xd4>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4013      	ands	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <disconnect+0xd4>)
 8001018:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <disconnect+0xd8>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	fa42 f303 	asr.w	r3, r2, r3
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d014      	beq.n	8001058 <disconnect+0xb4>
 800102e:	2300      	movs	r3, #0
 8001030:	e01d      	b.n	800106e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3304      	adds	r3, #4
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	3302      	adds	r3, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff faca 	bl	80005d4 <WIZCHIP_READ>
 8001040:	4603      	mov	r3, r0
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <disconnect+0xb4>
	   {
	      close(sn);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fef3 	bl	8000e38 <close>
	      return SOCKERR_TIMEOUT;
 8001052:	f06f 030c 	mvn.w	r3, #12
 8001056:	e00a      	b.n	800106e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3304      	adds	r3, #4
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	3303      	adds	r3, #3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fab7 	bl	80005d4 <WIZCHIP_READ>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e2      	bne.n	8001032 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c6 	.word	0x200000c6
 800107c:	200000c4 	.word	0x200000c4

08001080 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001094:	2300      	movs	r3, #0
 8001096:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d902      	bls.n	80010a4 <send+0x24>
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e0d8      	b.n	8001256 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3304      	adds	r3, #4
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa92 	bl	80005d4 <WIZCHIP_READ>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <send+0x40>
 80010ba:	f06f 0304 	mvn.w	r3, #4
 80010be:	e0ca      	b.n	8001256 <send+0x1d6>
   CHECK_SOCKDATA();
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <send+0x4c>
 80010c6:	f06f 030d 	mvn.w	r3, #13
 80010ca:	e0c4      	b.n	8001256 <send+0x1d6>
   tmp = getSn_SR(sn);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3304      	adds	r3, #4
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	3303      	adds	r3, #3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa7d 	bl	80005d4 <WIZCHIP_READ>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b17      	cmp	r3, #23
 80010e2:	d005      	beq.n	80010f0 <send+0x70>
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	d002      	beq.n	80010f0 <send+0x70>
 80010ea:	f06f 0306 	mvn.w	r3, #6
 80010ee:	e0b2      	b.n	8001256 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <send+0x1e0>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	fa42 f303 	asr.w	r3, r2, r3
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d033      	beq.n	800116c <send+0xec>
   {
      tmp = getSn_IR(sn);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	3304      	adds	r3, #4
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	3302      	adds	r3, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa61 	bl	80005d4 <WIZCHIP_READ>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d017      	beq.n	8001150 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3304      	adds	r3, #4
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	3302      	adds	r3, #2
 8001128:	2110      	movs	r1, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa24 	bl	8000578 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2201      	movs	r2, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	b21b      	sxth	r3, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <send+0x1e0>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4013      	ands	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <send+0x1e0>)
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e00d      	b.n	800116c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <send+0xe8>
      {
         close(sn);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe6b 	bl	8000e38 <close>
         return SOCKERR_TIMEOUT;
 8001162:	f06f 030c 	mvn.w	r3, #12
 8001166:	e076      	b.n	8001256 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001168:	2300      	movs	r3, #0
 800116a:	e074      	b.n	8001256 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 800116c:	201b      	movs	r0, #27
 800116e:	f7ff fa31 	bl	80005d4 <WIZCHIP_READ>
 8001172:	4603      	mov	r3, r0
 8001174:	4619      	mov	r1, r3
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ea01 0203 	and.w	r2, r1, r3
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa42 f303 	asr.w	r3, r2, r3
 800118c:	2201      	movs	r2, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	029b      	lsls	r3, r3, #10
 8001196:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d901      	bls.n	80011a4 <send+0x124>
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fade 	bl	8000768 <getSn_TX_FSR>
 80011ac:	4603      	mov	r3, r0
 80011ae:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	3304      	adds	r3, #4
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	3303      	adds	r3, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fa0b 	bl	80005d4 <WIZCHIP_READ>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b17      	cmp	r3, #23
 80011c6:	d009      	beq.n	80011dc <send+0x15c>
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b1c      	cmp	r3, #28
 80011cc:	d006      	beq.n	80011dc <send+0x15c>
      {
         close(sn);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe31 	bl	8000e38 <close>
         return SOCKERR_SOCKSTATUS;
 80011d6:	f06f 0306 	mvn.w	r3, #6
 80011da:	e03c      	b.n	8001256 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <send+0x1e4>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	fa42 f303 	asr.w	r3, r2, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <send+0x17c>
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d901      	bls.n	80011fc <send+0x17c>
 80011f8:	2300      	movs	r3, #0
 80011fa:	e02c      	b.n	8001256 <send+0x1d6>
      if(len <= freesize) break;
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	89bb      	ldrh	r3, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d900      	bls.n	8001206 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8001204:	e7ce      	b.n	80011a4 <send+0x124>
      if(len <= freesize) break;
 8001206:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001208:	88ba      	ldrh	r2, [r7, #4]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	6839      	ldr	r1, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fb9c 	bl	800094c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3304      	adds	r3, #4
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	3301      	adds	r3, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9aa 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001224:	bf00      	nop
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3304      	adds	r3, #4
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	3301      	adds	r3, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9d0 	bl	80005d4 <WIZCHIP_READ>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f5      	bne.n	8001226 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2201      	movs	r2, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <send+0x1e0>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <send+0x1e0>)
 8001252:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001254:	88bb      	ldrh	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000c6 	.word	0x200000c6
 8001264:	200000c4 	.word	0x200000c4

08001268 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d902      	bls.n	800128c <recv+0x24>
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e0a8      	b.n	80013de <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3304      	adds	r3, #4
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f99e 	bl	80005d4 <WIZCHIP_READ>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d002      	beq.n	80012a8 <recv+0x40>
 80012a2:	f06f 0304 	mvn.w	r3, #4
 80012a6:	e09a      	b.n	80013de <recv+0x176>
   CHECK_SOCKDATA();
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <recv+0x4c>
 80012ae:	f06f 030d 	mvn.w	r3, #13
 80012b2:	e094      	b.n	80013de <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 80012b4:	201a      	movs	r0, #26
 80012b6:	f7ff f98d 	bl	80005d4 <WIZCHIP_READ>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	ea01 0203 	and.w	r2, r1, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80012e0:	89ba      	ldrh	r2, [r7, #12]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d201      	bcs.n	80012ec <recv+0x84>
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fa7d 	bl	80007ee <getSn_RX_RSR>
 80012f4:	4603      	mov	r3, r0
 80012f6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3304      	adds	r3, #4
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	3303      	adds	r3, #3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f967 	bl	80005d4 <WIZCHIP_READ>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b17      	cmp	r3, #23
 800130e:	d030      	beq.n	8001372 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b1c      	cmp	r3, #28
 8001314:	d126      	bne.n	8001364 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13d      	bne.n	8001398 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa22 	bl	8000768 <getSn_TX_FSR>
 8001324:	4603      	mov	r3, r0
 8001326:	461c      	mov	r4, r3
 8001328:	201b      	movs	r0, #27
 800132a:	f7ff f953 	bl	80005d4 <WIZCHIP_READ>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	ea01 0203 	and.w	r2, r1, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa42 f303 	asr.w	r3, r2, r3
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	429c      	cmp	r4, r3
 8001354:	d10d      	bne.n	8001372 <recv+0x10a>
               {
                  close(sn);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd6d 	bl	8000e38 <close>
                  return SOCKERR_SOCKSTATUS;
 800135e:	f06f 0306 	mvn.w	r3, #6
 8001362:	e03c      	b.n	80013de <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd66 	bl	8000e38 <close>
               return SOCKERR_SOCKSTATUS;
 800136c:	f06f 0306 	mvn.w	r3, #6
 8001370:	e035      	b.n	80013de <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <recv+0x180>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <recv+0x128>
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <recv+0x128>
 800138c:	2300      	movs	r3, #0
 800138e:	e026      	b.n	80013de <recv+0x176>
         if(recvsize != 0) break;
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001396:	e7a9      	b.n	80012ec <recv+0x84>
               if(recvsize != 0) break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <recv+0x136>
         if(recvsize != 0) break;
 800139c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d201      	bcs.n	80013aa <recv+0x142>
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fb84 	bl	8000abe <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3304      	adds	r3, #4
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	3301      	adds	r3, #1
 80013be:	2140      	movs	r1, #64	; 0x40
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8d9 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80013c6:	bf00      	nop
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3304      	adds	r3, #4
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	3301      	adds	r3, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8ff 	bl	80005d4 <WIZCHIP_READ>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f5      	bne.n	80013c8 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80013dc:	88bb      	ldrh	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000c4 	.word	0x200000c4

080013ec <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
 8001460:	2300      	movs	r3, #0
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <reg_wizchip_cs_cbfunc+0x16>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <reg_wizchip_cs_cbfunc+0x44>)
 800149e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <reg_wizchip_cs_cbfunc+0x48>)
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	e006      	b.n	80014b6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6153      	str	r3, [r2, #20]
   }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000004 	.word	0x20000004
 80014c8:	08001409 	.word	0x08001409
 80014cc:	08001417 	.word	0x08001417

080014d0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80014da:	bf00      	nop
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f9      	beq.n	80014dc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <reg_wizchip_spi_cbfunc+0x24>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <reg_wizchip_spi_cbfunc+0x50>)
 80014f8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <reg_wizchip_spi_cbfunc+0x54>)
 80014fe:	61da      	str	r2, [r3, #28]
 8001500:	e006      	b.n	8001510 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	61d3      	str	r3, [r2, #28]
   }
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000004 	.word	0x20000004
 8001520:	0800145d 	.word	0x0800145d
 8001524:	0800146d 	.word	0x0800146d

08001528 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2206      	movs	r2, #6
 8001532:	4619      	mov	r1, r3
 8001534:	2009      	movs	r0, #9
 8001536:	f7ff f8c9 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2204      	movs	r2, #4
 8001540:	4619      	mov	r1, r3
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff f8c2 	bl	80006cc <WIZCHIP_READ_BUF>
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	2005      	movs	r0, #5
 8001552:	f7ff f8bb 	bl	80006cc <WIZCHIP_READ_BUF>
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2204      	movs	r2, #4
 800155c:	4619      	mov	r1, r3
 800155e:	200f      	movs	r0, #15
 8001560:	f7ff f8b4 	bl	80006cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff f806 	bl	8000578 <WIZCHIP_WRITE>
   getMR(); // for delay
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff f831 	bl	80005d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2206      	movs	r2, #6
 8001576:	4619      	mov	r1, r3
 8001578:	2009      	movs	r0, #9
 800157a:	f7ff f859 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2204      	movs	r2, #4
 8001584:	4619      	mov	r1, r3
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff f852 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	2005      	movs	r0, #5
 8001596:	f7ff f84b 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2204      	movs	r2, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	200f      	movs	r0, #15
 80015a4:	f7ff f844 	bl	8000630 <WIZCHIP_WRITE_BUF>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80015be:	f7ff ffb3 	bl	8001528 <wizchip_sw_reset>
   if(txsize)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d04e      	beq.n	8001666 <wizchip_init+0xb6>
   {
      tmp = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73bb      	strb	r3, [r7, #14]
         tmp += txsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else      
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e015      	b.n	80015fe <wizchip_init+0x4e>
      {
         tmp += txsize[i];
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	4413      	add	r3, r2
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 80015e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015e8:	2b10      	cmp	r3, #16
 80015ea:	dd02      	ble.n	80015f2 <wizchip_init+0x42>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	e08c      	b.n	800170c <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	2b03      	cmp	r3, #3
 8001604:	dde5      	ble.n	80015d2 <wizchip_init+0x22>
      }
   #endif
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e028      	b.n	800165e <wizchip_init+0xae>
         setSn_TXBUF_SIZE(i, txsize[i]);
 800160c:	201b      	movs	r0, #27
 800160e:	f7fe ffe1 	bl	80005d4 <WIZCHIP_READ>
 8001612:	4603      	mov	r3, r0
 8001614:	b25a      	sxtb	r2, r3
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	b25b      	sxtb	r3, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4013      	ands	r3, r2
 800162a:	b25a      	sxtb	r2, r3
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	b25b      	sxtb	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	201b      	movs	r0, #27
 800164e:	f7fe ff93 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	2b03      	cmp	r3, #3
 8001664:	ddd2      	ble.n	800160c <wizchip_init+0x5c>
   }
   if(rxsize)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04e      	beq.n	800170a <wizchip_init+0x15a>
   {
      tmp = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	73bb      	strb	r3, [r7, #14]
         tmp += rxsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else         
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e015      	b.n	80016a2 <wizchip_init+0xf2>
      {
         tmp += rxsize[i];
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 8001688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800168c:	2b10      	cmp	r3, #16
 800168e:	dd02      	ble.n	8001696 <wizchip_init+0xe6>
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	e03a      	b.n	800170c <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3301      	adds	r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	dde5      	ble.n	8001676 <wizchip_init+0xc6>
      }
   #endif

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e028      	b.n	8001702 <wizchip_init+0x152>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 80016b0:	201a      	movs	r0, #26
 80016b2:	f7fe ff8f 	bl	80005d4 <WIZCHIP_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2103      	movs	r1, #3
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	201a      	movs	r0, #26
 80016f2:	f7fe ff41 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b03      	cmp	r3, #3
 8001708:	ddd2      	ble.n	80016b0 <wizchip_init+0x100>
   }
   return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2206      	movs	r2, #6
 8001720:	4619      	mov	r1, r3
 8001722:	2009      	movs	r0, #9
 8001724:	f7fe ff84 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	330e      	adds	r3, #14
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	2001      	movs	r0, #1
 8001732:	f7fe ff7d 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	330a      	adds	r3, #10
 800173a:	2204      	movs	r2, #4
 800173c:	4619      	mov	r1, r3
 800173e:	2005      	movs	r0, #5
 8001740:	f7fe ff76 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3306      	adds	r3, #6
 8001748:	2204      	movs	r2, #4
 800174a:	4619      	mov	r1, r3
 800174c:	200f      	movs	r0, #15
 800174e:	f7fe ff6f 	bl	8000630 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c9a      	ldrb	r2, [r3, #18]
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001758:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7cda      	ldrb	r2, [r3, #19]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001760:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7d1a      	ldrb	r2, [r3, #20]
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001768:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7d5a      	ldrb	r2, [r3, #21]
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001770:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7d9a      	ldrb	r2, [r3, #22]
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <wizchip_setnetinfo+0x74>)
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000d4 	.word	0x200000d4
 8001788:	200000d8 	.word	0x200000d8

0800178c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2206      	movs	r2, #6
 8001798:	4619      	mov	r1, r3
 800179a:	2009      	movs	r0, #9
 800179c:	f7fe ff96 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	330e      	adds	r3, #14
 80017a4:	2204      	movs	r2, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7fe ff8f 	bl	80006cc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	330a      	adds	r3, #10
 80017b2:	2204      	movs	r2, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	2005      	movs	r0, #5
 80017b8:	f7fe ff88 	bl	80006cc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3306      	adds	r3, #6
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	200f      	movs	r0, #15
 80017c6:	f7fe ff81 	bl	80006cc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017d4:	785a      	ldrb	r2, [r3, #1]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017dc:	789a      	ldrb	r2, [r3, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017e4:	78da      	ldrb	r2, [r3, #3]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <wizchip_getnetinfo+0x74>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	759a      	strb	r2, [r3, #22]
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000d4 	.word	0x200000d4
 8001800:	200000d8 	.word	0x200000d8

08001804 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <DWT_Delay_us+0x40>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001812:	f003 f955 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8001816:	4603      	mov	r3, r0
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <DWT_Delay_us+0x44>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001828:	bf00      	nop
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <DWT_Delay_us+0x40>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3f8      	bcc.n	800182a <DWT_Delay_us+0x26>
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e0001000 	.word	0xe0001000
 8001848:	431bde83 	.word	0x431bde83

0800184c <cs_sel>:
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);															\
} while(0)

char msg[60];

void cs_sel() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001850:	2200      	movs	r2, #0
 8001852:	2110      	movs	r1, #16
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <cs_sel+0x14>)
 8001856:	f002 fced 	bl	8004234 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000

08001864 <cs_desel>:

void cs_desel() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <cs_desel+0x14>)
 800186e:	f002 fce1 	bl	8004234 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020000 	.word	0x40020000

0800187c <spi_rb>:

uint8_t spi_rb(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001882:	1df9      	adds	r1, r7, #7
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	2201      	movs	r2, #1
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <spi_rb+0x20>)
 800188c:	f003 fe8c 	bl	80055a8 <HAL_SPI_Receive>
	return rbuf;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000348 	.word	0x20000348

080018a0 <spi_wb>:

void spi_wb(uint8_t b) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80018aa:	1df9      	adds	r1, r7, #7
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	2201      	movs	r2, #1
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <spi_wb+0x20>)
 80018b4:	f003 fd3c 	bl	8005330 <HAL_SPI_Transmit>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000348 	.word	0x20000348

080018c4 <HAL_UART_RxCpltCallback>:
uint8_t c_buffer[8];		//client sends 8 bytes

/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_UART_RxCpltCallback+0x1d4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	4970      	ldr	r1, [pc, #448]	; (8001a9c <HAL_UART_RxCpltCallback+0x1d8>)
 80018da:	4871      	ldr	r0, [pc, #452]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1dc>)
 80018dc:	f005 f993 	bl	8006c06 <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80018e0:	230a      	movs	r3, #10
 80018e2:	2201      	movs	r2, #1
 80018e4:	496d      	ldr	r1, [pc, #436]	; (8001a9c <HAL_UART_RxCpltCallback+0x1d8>)
 80018e6:	486e      	ldr	r0, [pc, #440]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1dc>)
 80018e8:	f005 f8fb 	bl	8006ae2 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_UART_RxCpltCallback+0x1e0>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_UART_RxCpltCallback+0x1e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d15e      	bne.n	80019ba <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	496b      	ldr	r1, [pc, #428]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001900:	486b      	ldr	r0, [pc, #428]	; (8001ab0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001902:	f005 f980 	bl	8006c06 <HAL_UART_Receive_IT>

		switch(status){
 8001906:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d002      	beq.n	8001914 <HAL_UART_RxCpltCallback+0x50>
 800190e:	2b02      	cmp	r3, #2
 8001910:	d011      	beq.n	8001936 <HAL_UART_RxCpltCallback+0x72>
 8001912:	e055      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8001914:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b5b      	cmp	r3, #91	; 0x5b
 800191a:	d150      	bne.n	80019be <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 800191e:	225b      	movs	r2, #91	; 0x5b
 8001920:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8001934:	e043      	b.n	80019be <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b5b      	cmp	r3, #91	; 0x5b
 800193c:	d109      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001940:	225b      	movs	r2, #91	; 0x5b
 8001942:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8001950:	e036      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5d      	cmp	r3, #93	; 0x5d
 8001958:	d115      	bne.n	8001986 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b22      	cmp	r3, #34	; 0x22
 8001960:	d10d      	bne.n	800197e <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	b2d1      	uxtb	r1, r2
 800196a:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 800196c:	7011      	strb	r1, [r2, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001972:	7819      	ldrb	r1, [r3, #0]
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001976:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8001978:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
		            status = START ;
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		        break ;
 8001984:	e01c      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b24      	cmp	r3, #36	; 0x24
 800198c:	d80b      	bhi.n	80019a6 <HAL_UART_RxCpltCallback+0xe2>
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	b2d1      	uxtb	r1, r2
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001998:	7011      	strb	r1, [r2, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 800199e:	7819      	ldrb	r1, [r3, #0]
 80019a0:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 80019a2:	5499      	strb	r1, [r3, r2]
		        break ;
 80019a4:	e00c      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
		        break ;
 80019b8:	e002      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80019be:	bf00      	nop

	if (huart->Instance == USART6) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <HAL_UART_RxCpltCallback+0x200>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d15e      	bne.n	8001a88 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	493e      	ldr	r1, [pc, #248]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 80019ce:	483f      	ldr	r0, [pc, #252]	; (8001acc <HAL_UART_RxCpltCallback+0x208>)
 80019d0:	f005 f919 	bl	8006c06 <HAL_UART_Receive_IT>

		switch(GTO_status){
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d002      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x11e>
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d011      	beq.n	8001a04 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 80019e0:	e055      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b28      	cmp	r3, #40	; 0x28
 80019e8:	d150      	bne.n	8001a8c <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 80019ec:	2228      	movs	r2, #40	; 0x28
 80019ee:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
					break ;
 8001a02:	e043      	b.n	8001a8c <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b28      	cmp	r3, #40	; 0x28
 8001a0a:	d109      	bne.n	8001a20 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a0e:	2228      	movs	r2, #40	; 0x28
 8001a10:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
					break ;
 8001a1e:	e036      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b29      	cmp	r3, #41	; 0x29
 8001a26:	d115      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d10d      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	b2d1      	uxtb	r1, r2
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a3a:	7011      	strb	r1, [r2, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a44:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
					break ;
 8001a52:	e01c      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d80b      	bhi.n	8001a74 <HAL_UART_RxCpltCallback+0x1b0>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	b2d1      	uxtb	r1, r2
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a66:	7011      	strb	r1, [r2, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a6c:	7819      	ldrb	r1, [r3, #0]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a70:	5499      	strb	r1, [r3, r2]
					break ;
 8001a72:	e00c      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
					break ;
 8001a86:	e002      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
	}
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 8001a8c:	bf00      	nop
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	20000291 	.word	0x20000291
 8001aa0:	200001cc 	.word	0x200001cc
 8001aa4:	200000d9 	.word	0x200000d9
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	200001c8 	.word	0x200001c8
 8001ab0:	200003a4 	.word	0x200003a4
 8001ab4:	2000002f 	.word	0x2000002f
 8001ab8:	2000054c 	.word	0x2000054c
 8001abc:	200000ed 	.word	0x200000ed
 8001ac0:	200000da 	.word	0x200000da
 8001ac4:	40011400 	.word	0x40011400
 8001ac8:	20000344 	.word	0x20000344
 8001acc:	20000294 	.word	0x20000294
 8001ad0:	20000030 	.word	0x20000030
 8001ad4:	200002d8 	.word	0x200002d8
 8001ad8:	20000578 	.word	0x20000578
 8001adc:	200000dc 	.word	0x200000dc

08001ae0 <HAL_GPIO_EXTI_Callback>:
/*##########################################################################################################*/

/*##########################################################################################################*/
//External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
	printf("EXTERNAL INTERRUPT CALLBACK EVENT !! \r\n");
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x28>)
 8001aec:	f005 ffa2 	bl	8007a34 <puts>
	etherNet_Flag = 1;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
	setSn_IR(0, 0xff);
 8001af6:	21ff      	movs	r1, #255	; 0xff
 8001af8:	f240 4002 	movw	r0, #1026	; 0x402
 8001afc:	f7fe fd3c 	bl	8000578 <WIZCHIP_WRITE>
	//TCP_Ethernet_Server();
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08008b9c 	.word	0x08008b9c
 8001b0c:	200000db 	.word	0x200000db

08001b10 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <_write+0x28>)
 8001b28:	f004 ffdb 	bl	8006ae2 <HAL_UART_Transmit>
	return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200001cc 	.word	0x200001cc

08001b3c <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7fe fb42 	bl	80001d0 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	230a      	movs	r3, #10
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f004 ffc4 	bl	8006ae2 <HAL_UART_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	f7fe fb2f 	bl	80001d0 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	230a      	movs	r3, #10
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f004 ffb1 	bl	8006ae2 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8001b80:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001b84:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001b86:	f107 010c 	add.w	r1, r7, #12
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f004 ffa7 	bl	8006ae2 <HAL_UART_Transmit>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba2:	f001 fcf3 	bl	800358c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 fae7 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001baa:	f000 fdf5 	bl	8002798 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bae:	f000 fdcb 	bl	8002748 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bb2:	f000 fd49 	bl	8002648 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001bb6:	f000 fd1d 	bl	80025f4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001bba:	f000 fcc7 	bl	800254c <MX_UART4_Init>
  MX_UART5_Init();
 8001bbe:	f000 fcef 	bl	80025a0 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8001bc2:	f000 fd95 	bl	80026f0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001bc6:	f000 fbc5 	bl	8002354 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bca:	f000 fc21 	bl	8002410 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001bce:	f000 fc87 	bl	80024e0 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001bd2:	f000 fd63 	bl	800269c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001bd6:	f000 fb63 	bl	80022a0 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001bda:	f000 fb4d 	bl	8002278 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*##########################################################################################################*/
  /*START DEBUGGING MESSAGE*/

  printf("\r\n * Start STM32F407 for Master Anchor - 20210818 GTO * \r\n\n");
 8001bde:	48c8      	ldr	r0, [pc, #800]	; (8001f00 <main+0x364>)
 8001be0:	f005 ff28 	bl	8007a34 <puts>
  printf(" =============== 1. UART and 4Mbps test Okay (USART 1, 2, 3, 4, 5, 6) \r\n");
 8001be4:	48c7      	ldr	r0, [pc, #796]	; (8001f04 <main+0x368>)
 8001be6:	f005 ff25 	bl	8007a34 <puts>
  printf(" =============== 2. GPIO test Okay \r\n");
 8001bea:	48c7      	ldr	r0, [pc, #796]	; (8001f08 <main+0x36c>)
 8001bec:	f005 ff22 	bl	8007a34 <puts>
  printf(" =============== 3. SPI and EXTI test Okay (for Ethernet) \r\n");
 8001bf0:	48c6      	ldr	r0, [pc, #792]	; (8001f0c <main+0x370>)
 8001bf2:	f005 ff1f 	bl	8007a34 <puts>
  printf(" =============== 4. ETHERNET test Okay (Handler Callback) \r\n");
 8001bf6:	48c6      	ldr	r0, [pc, #792]	; (8001f10 <main+0x374>)
 8001bf8:	f005 ff1c 	bl	8007a34 <puts>
  printf("\n");
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f005 fe95 	bl	800792c <putchar>
  /*##########################################################################################################*/

  /*##########################################################################################################*/
  /*INTERRUPT SET*/
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	49c3      	ldr	r1, [pc, #780]	; (8001f14 <main+0x378>)
 8001c06:	48c4      	ldr	r0, [pc, #784]	; (8001f18 <main+0x37c>)
 8001c08:	f004 fffd 	bl	8006c06 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	49c3      	ldr	r1, [pc, #780]	; (8001f1c <main+0x380>)
 8001c10:	48c3      	ldr	r0, [pc, #780]	; (8001f20 <main+0x384>)
 8001c12:	f004 fff8 	bl	8006c06 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 8001c16:	2201      	movs	r2, #1
 8001c18:	49c2      	ldr	r1, [pc, #776]	; (8001f24 <main+0x388>)
 8001c1a:	48c3      	ldr	r0, [pc, #780]	; (8001f28 <main+0x38c>)
 8001c1c:	f004 fff3 	bl	8006c06 <HAL_UART_Receive_IT>

  /*PIN SET*/
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c26:	48c1      	ldr	r0, [pc, #772]	; (8001f2c <main+0x390>)
 8001c28:	f002 fb04 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	48bf      	ldr	r0, [pc, #764]	; (8001f30 <main+0x394>)
 8001c32:	f002 faff 	bl	8004234 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 8001c36:	2201      	movs	r2, #1
 8001c38:	2102      	movs	r1, #2
 8001c3a:	48be      	ldr	r0, [pc, #760]	; (8001f34 <main+0x398>)
 8001c3c:	f002 fafa 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 8001c40:	2200      	movs	r2, #0
 8001c42:	2108      	movs	r1, #8
 8001c44:	48bb      	ldr	r0, [pc, #748]	; (8001f34 <main+0x398>)
 8001c46:	f002 faf5 	bl	8004234 <HAL_GPIO_WritePin>

  /*##########################################################################################################*/
  /*ETHERNET SET*/
  //gto
  //printf("\r\n EHTERNET RUNNING .... 20210813 \r\n");
  E_RST_HIGH();								// Ethernet Enable
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2110      	movs	r1, #16
 8001c4e:	48b9      	ldr	r0, [pc, #740]	; (8001f34 <main+0x398>)
 8001c50:	f002 faf0 	bl	8004234 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, E_RST, 1);		// Ethernet Enable

  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);	// Ethernet Extra Interrupt Enable

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001c54:	49b8      	ldr	r1, [pc, #736]	; (8001f38 <main+0x39c>)
 8001c56:	48b9      	ldr	r0, [pc, #740]	; (8001f3c <main+0x3a0>)
 8001c58:	f7ff fc14 	bl	8001484 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8001c5c:	49b8      	ldr	r1, [pc, #736]	; (8001f40 <main+0x3a4>)
 8001c5e:	48b9      	ldr	r0, [pc, #740]	; (8001f44 <main+0x3a8>)
 8001c60:	f7ff fc36 	bl	80014d0 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8001c64:	49b8      	ldr	r1, [pc, #736]	; (8001f48 <main+0x3ac>)
 8001c66:	48b8      	ldr	r0, [pc, #736]	; (8001f48 <main+0x3ac>)
 8001c68:	f7ff fca2 	bl	80015b0 <wizchip_init>
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
		  	  	  	  	  .ip 	= {192, 168, 2, 192},					// IP address
						  .sn 	= {255, 255, 255, 0},					// Subnet mask
						  .gw 	= {192, 168, 2, 1}};					// Gateway address
  */
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	f8c3 2013 	str.w	r2, [r3, #19]
 8001c7e:	4ab3      	ldr	r2, [pc, #716]	; (8001f4c <main+0x3b0>)
 8001c80:	463b      	mov	r3, r7
 8001c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c86:	6018      	str	r0, [r3, #0]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	8019      	strh	r1, [r3, #0]
 8001c8c:	4ab0      	ldr	r2, [pc, #704]	; (8001f50 <main+0x3b4>)
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	6810      	ldr	r0, [r2, #0]
 8001c92:	6018      	str	r0, [r3, #0]
 8001c94:	4aaf      	ldr	r2, [pc, #700]	; (8001f54 <main+0x3b8>)
 8001c96:	f107 030a 	add.w	r3, r7, #10
 8001c9a:	6810      	ldr	r0, [r2, #0]
 8001c9c:	6018      	str	r0, [r3, #0]
 8001c9e:	4aae      	ldr	r2, [pc, #696]	; (8001f58 <main+0x3bc>)
 8001ca0:	f107 030e 	add.w	r3, r7, #14
 8001ca4:	6810      	ldr	r0, [r2, #0]
 8001ca6:	6018      	str	r0, [r3, #0]
 		  	  	  	  	  .ip 	= {10, 0, 7, 211},						// IP address
 						  .sn 	= {255, 255, 248, 0},					// Subnet mask
 						  .gw 	= {10, 0, 0, 1}};						// Gateway address

  wizchip_setnetinfo(&netInfo);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd32 	bl	8001714 <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fd6a 	bl	800178c <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	2218      	movs	r2, #24
 8001cbc:	49a7      	ldr	r1, [pc, #668]	; (8001f5c <main+0x3c0>)
 8001cbe:	4898      	ldr	r0, [pc, #608]	; (8001f20 <main+0x384>)
 8001cc0:	f004 ff0f 	bl	8006ae2 <HAL_UART_Transmit>
 8001cc4:	783b      	ldrb	r3, [r7, #0]
 8001cc6:	461c      	mov	r4, r3
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	461d      	mov	r5, r3
 8001ccc:	78bb      	ldrb	r3, [r7, #2]
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	7939      	ldrb	r1, [r7, #4]
 8001cd2:	7978      	ldrb	r0, [r7, #5]
 8001cd4:	9003      	str	r0, [sp, #12]
 8001cd6:	9102      	str	r1, [sp, #8]
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	462b      	mov	r3, r5
 8001cde:	4622      	mov	r2, r4
 8001ce0:	499f      	ldr	r1, [pc, #636]	; (8001f60 <main+0x3c4>)
 8001ce2:	48a0      	ldr	r0, [pc, #640]	; (8001f64 <main+0x3c8>)
 8001ce4:	f005 febe 	bl	8007a64 <siprintf>
 8001ce8:	489e      	ldr	r0, [pc, #632]	; (8001f64 <main+0x3c8>)
 8001cea:	f7fe fa71 	bl	80001d0 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	499b      	ldr	r1, [pc, #620]	; (8001f64 <main+0x3c8>)
 8001cf6:	488a      	ldr	r0, [pc, #552]	; (8001f20 <main+0x384>)
 8001cf8:	f004 fef3 	bl	8006ae2 <HAL_UART_Transmit>
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4618      	mov	r0, r3
 8001d04:	7a3b      	ldrb	r3, [r7, #8]
 8001d06:	7a7a      	ldrb	r2, [r7, #9]
 8001d08:	9201      	str	r2, [sp, #4]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460a      	mov	r2, r1
 8001d10:	4995      	ldr	r1, [pc, #596]	; (8001f68 <main+0x3cc>)
 8001d12:	4894      	ldr	r0, [pc, #592]	; (8001f64 <main+0x3c8>)
 8001d14:	f005 fea6 	bl	8007a64 <siprintf>
 8001d18:	4892      	ldr	r0, [pc, #584]	; (8001f64 <main+0x3c8>)
 8001d1a:	f7fe fa59 	bl	80001d0 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	2364      	movs	r3, #100	; 0x64
 8001d24:	498f      	ldr	r1, [pc, #572]	; (8001f64 <main+0x3c8>)
 8001d26:	487e      	ldr	r0, [pc, #504]	; (8001f20 <main+0x384>)
 8001d28:	f004 fedb 	bl	8006ae2 <HAL_UART_Transmit>
 8001d2c:	7abb      	ldrb	r3, [r7, #10]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	4618      	mov	r0, r3
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	7b7a      	ldrb	r2, [r7, #13]
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460a      	mov	r2, r1
 8001d40:	498a      	ldr	r1, [pc, #552]	; (8001f6c <main+0x3d0>)
 8001d42:	4888      	ldr	r0, [pc, #544]	; (8001f64 <main+0x3c8>)
 8001d44:	f005 fe8e 	bl	8007a64 <siprintf>
 8001d48:	4886      	ldr	r0, [pc, #536]	; (8001f64 <main+0x3c8>)
 8001d4a:	f7fe fa41 	bl	80001d0 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	4983      	ldr	r1, [pc, #524]	; (8001f64 <main+0x3c8>)
 8001d56:	4872      	ldr	r0, [pc, #456]	; (8001f20 <main+0x384>)
 8001d58:	f004 fec3 	bl	8006ae2 <HAL_UART_Transmit>
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	4618      	mov	r0, r3
 8001d64:	7c3b      	ldrb	r3, [r7, #16]
 8001d66:	7c7a      	ldrb	r2, [r7, #17]
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460a      	mov	r2, r1
 8001d70:	497f      	ldr	r1, [pc, #508]	; (8001f70 <main+0x3d4>)
 8001d72:	487c      	ldr	r0, [pc, #496]	; (8001f64 <main+0x3c8>)
 8001d74:	f005 fe76 	bl	8007a64 <siprintf>
 8001d78:	487a      	ldr	r0, [pc, #488]	; (8001f64 <main+0x3c8>)
 8001d7a:	f7fe fa29 	bl	80001d0 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	2364      	movs	r3, #100	; 0x64
 8001d84:	4977      	ldr	r1, [pc, #476]	; (8001f64 <main+0x3c8>)
 8001d86:	4866      	ldr	r0, [pc, #408]	; (8001f20 <main+0x384>)
 8001d88:	f004 feab 	bl	8006ae2 <HAL_UART_Transmit>
  while (1)
  {
	  //DWT_Delay_us(1000);											// 10 microsecond
	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  loopback_tcps(SOCK_TCPS, 20, 60500);
 8001d8c:	f64e 4254 	movw	r2, #60500	; 0xec54
 8001d90:	2114      	movs	r1, #20
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 fe54 	bl	8002a40 <loopback_tcps>
	  //setIMR(0x01);
	  //setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.

	  if (uart1_key_Flag){
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <main+0x3d8>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8148 	beq.w	8002032 <main+0x496>
		  uart1_key_Flag = 0;
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <main+0x3d8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 8001da8:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <main+0x378>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b32      	subs	r3, #50	; 0x32
 8001dae:	2b48      	cmp	r3, #72	; 0x48
 8001db0:	f200 8142 	bhi.w	8002038 <main+0x49c>
 8001db4:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <main+0x220>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001f85 	.word	0x08001f85
 8001dc0:	08002039 	.word	0x08002039
 8001dc4:	08002039 	.word	0x08002039
 8001dc8:	08002039 	.word	0x08002039
 8001dcc:	08001f9b 	.word	0x08001f9b
 8001dd0:	08002039 	.word	0x08002039
 8001dd4:	08002039 	.word	0x08002039
 8001dd8:	08002039 	.word	0x08002039
 8001ddc:	08002039 	.word	0x08002039
 8001de0:	08002039 	.word	0x08002039
 8001de4:	08002039 	.word	0x08002039
 8001de8:	08002039 	.word	0x08002039
 8001dec:	08002039 	.word	0x08002039
 8001df0:	08002039 	.word	0x08002039
 8001df4:	08002039 	.word	0x08002039
 8001df8:	08002039 	.word	0x08002039
 8001dfc:	08002039 	.word	0x08002039
 8001e00:	08002039 	.word	0x08002039
 8001e04:	08002039 	.word	0x08002039
 8001e08:	08002039 	.word	0x08002039
 8001e0c:	08002039 	.word	0x08002039
 8001e10:	08002039 	.word	0x08002039
 8001e14:	08002039 	.word	0x08002039
 8001e18:	08002039 	.word	0x08002039
 8001e1c:	08002039 	.word	0x08002039
 8001e20:	08002039 	.word	0x08002039
 8001e24:	08002039 	.word	0x08002039
 8001e28:	08002039 	.word	0x08002039
 8001e2c:	08002039 	.word	0x08002039
 8001e30:	08002039 	.word	0x08002039
 8001e34:	08002039 	.word	0x08002039
 8001e38:	08002039 	.word	0x08002039
 8001e3c:	08002039 	.word	0x08002039
 8001e40:	08002039 	.word	0x08002039
 8001e44:	08002039 	.word	0x08002039
 8001e48:	08002039 	.word	0x08002039
 8001e4c:	08002039 	.word	0x08002039
 8001e50:	08002039 	.word	0x08002039
 8001e54:	08002039 	.word	0x08002039
 8001e58:	08002039 	.word	0x08002039
 8001e5c:	08002039 	.word	0x08002039
 8001e60:	08002039 	.word	0x08002039
 8001e64:	08002039 	.word	0x08002039
 8001e68:	08002039 	.word	0x08002039
 8001e6c:	08002039 	.word	0x08002039
 8001e70:	08002039 	.word	0x08002039
 8001e74:	08002039 	.word	0x08002039
 8001e78:	08001ee1 	.word	0x08001ee1
 8001e7c:	08002039 	.word	0x08002039
 8001e80:	08001fe9 	.word	0x08001fe9
 8001e84:	08002039 	.word	0x08002039
 8001e88:	08001ff7 	.word	0x08001ff7
 8001e8c:	08002039 	.word	0x08002039
 8001e90:	08002039 	.word	0x08002039
 8001e94:	08002039 	.word	0x08002039
 8001e98:	08002039 	.word	0x08002039
 8001e9c:	08002039 	.word	0x08002039
 8001ea0:	08002039 	.word	0x08002039
 8001ea4:	08002039 	.word	0x08002039
 8001ea8:	08002039 	.word	0x08002039
 8001eac:	08002039 	.word	0x08002039
 8001eb0:	08002039 	.word	0x08002039
 8001eb4:	08002039 	.word	0x08002039
 8001eb8:	08002039 	.word	0x08002039
 8001ebc:	08001fb1 	.word	0x08001fb1
 8001ec0:	08001ef9 	.word	0x08001ef9
 8001ec4:	08001fbf 	.word	0x08001fbf
 8001ec8:	08002039 	.word	0x08002039
 8001ecc:	08002039 	.word	0x08002039
 8001ed0:	08002039 	.word	0x08002039
 8001ed4:	08001fdb 	.word	0x08001fdb
 8001ed8:	08002039 	.word	0x08002039
 8001edc:	08001fcd 	.word	0x08001fcd
			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 8001ee0:	4925      	ldr	r1, [pc, #148]	; (8001f78 <main+0x3dc>)
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <main+0x37c>)
 8001ee4:	f7ff fe2a 	bl	8001b3c <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 8001ee8:	4924      	ldr	r1, [pc, #144]	; (8001f7c <main+0x3e0>)
 8001eea:	480b      	ldr	r0, [pc, #44]	; (8001f18 <main+0x37c>)
 8001eec:	f7ff fe39 	bl	8001b62 <debugPrintln>
				  printf("printf test\r\n");
 8001ef0:	4823      	ldr	r0, [pc, #140]	; (8001f80 <main+0x3e4>)
 8001ef2:	f005 fd9f 	bl	8007a34 <puts>
				  break;
 8001ef6:	e09f      	b.n	8002038 <main+0x49c>

			  case 's':
				  Sync_out();
 8001ef8:	f000 fd2e 	bl	8002958 <Sync_out>
				  break;
 8001efc:	e09c      	b.n	8002038 <main+0x49c>
 8001efe:	bf00      	nop
 8001f00:	08008bc4 	.word	0x08008bc4
 8001f04:	08008c00 	.word	0x08008c00
 8001f08:	08008c48 	.word	0x08008c48
 8001f0c:	08008c70 	.word	0x08008c70
 8001f10:	08008cac 	.word	0x08008cac
 8001f14:	20000291 	.word	0x20000291
 8001f18:	200001cc 	.word	0x200001cc
 8001f1c:	2000002c 	.word	0x2000002c
 8001f20:	200003a4 	.word	0x200003a4
 8001f24:	20000344 	.word	0x20000344
 8001f28:	20000294 	.word	0x20000294
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40020800 	.word	0x40020800
 8001f38:	08001865 	.word	0x08001865
 8001f3c:	0800184d 	.word	0x0800184d
 8001f40:	080018a1 	.word	0x080018a1
 8001f44:	0800187d 	.word	0x0800187d
 8001f48:	20000034 	.word	0x20000034
 8001f4c:	08008ef8 	.word	0x08008ef8
 8001f50:	08008f00 	.word	0x08008f00
 8001f54:	08008f04 	.word	0x08008f04
 8001f58:	08008f08 	.word	0x08008f08
 8001f5c:	08008ce8 	.word	0x08008ce8
 8001f60:	08008d04 	.word	0x08008d04
 8001f64:	20000144 	.word	0x20000144
 8001f68:	08008d28 	.word	0x08008d28
 8001f6c:	08008d48 	.word	0x08008d48
 8001f70:	08008d68 	.word	0x08008d68
 8001f74:	200000d9 	.word	0x200000d9
 8001f78:	08008d88 	.word	0x08008d88
 8001f7c:	08008d9c 	.word	0x08008d9c
 8001f80:	08008db0 	.word	0x08008db0

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2101      	movs	r1, #1
 8001f88:	4860      	ldr	r0, [pc, #384]	; (800210c <main+0x570>)
 8001f8a:	f002 f953 	bl	8004234 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2120      	movs	r1, #32
 8001f92:	485f      	ldr	r0, [pc, #380]	; (8002110 <main+0x574>)
 8001f94:	f002 f94e 	bl	8004234 <HAL_GPIO_WritePin>
				  break;
 8001f98:	e04e      	b.n	8002038 <main+0x49c>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	485b      	ldr	r0, [pc, #364]	; (800210c <main+0x570>)
 8001fa0:	f002 f948 	bl	8004234 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	4859      	ldr	r0, [pc, #356]	; (8002110 <main+0x574>)
 8001faa:	f002 f943 	bl	8004234 <HAL_GPIO_WritePin>
				  break;
 8001fae:	e043      	b.n	8002038 <main+0x49c>

			  case 'r':
				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 8001fb0:	230a      	movs	r3, #10
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4957      	ldr	r1, [pc, #348]	; (8002114 <main+0x578>)
 8001fb6:	4858      	ldr	r0, [pc, #352]	; (8002118 <main+0x57c>)
 8001fb8:	f004 fd93 	bl	8006ae2 <HAL_UART_Transmit>
				  break;
 8001fbc:	e03c      	b.n	8002038 <main+0x49c>

			  case 't':
				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4956      	ldr	r1, [pc, #344]	; (800211c <main+0x580>)
 8001fc4:	4856      	ldr	r0, [pc, #344]	; (8002120 <main+0x584>)
 8001fc6:	f004 fd8c 	bl	8006ae2 <HAL_UART_Transmit>
				  break;
 8001fca:	e035      	b.n	8002038 <main+0x49c>

			  case 'z':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001fcc:	2364      	movs	r3, #100	; 0x64
 8001fce:	2223      	movs	r2, #35	; 0x23
 8001fd0:	4954      	ldr	r1, [pc, #336]	; (8002124 <main+0x588>)
 8001fd2:	4851      	ldr	r0, [pc, #324]	; (8002118 <main+0x57c>)
 8001fd4:	f004 fd85 	bl	8006ae2 <HAL_UART_Transmit>
				  break;
 8001fd8:	e02e      	b.n	8002038 <main+0x49c>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	2223      	movs	r2, #35	; 0x23
 8001fde:	4952      	ldr	r1, [pc, #328]	; (8002128 <main+0x58c>)
 8001fe0:	484d      	ldr	r0, [pc, #308]	; (8002118 <main+0x57c>)
 8001fe2:	f004 fd7e 	bl	8006ae2 <HAL_UART_Transmit>
				  break;
 8001fe6:	e027      	b.n	8002038 <main+0x49c>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001fe8:	2364      	movs	r3, #100	; 0x64
 8001fea:	2223      	movs	r2, #35	; 0x23
 8001fec:	494f      	ldr	r1, [pc, #316]	; (800212c <main+0x590>)
 8001fee:	484a      	ldr	r0, [pc, #296]	; (8002118 <main+0x57c>)
 8001ff0:	f004 fd77 	bl	8006ae2 <HAL_UART_Transmit>
				  break;
 8001ff4:	e020      	b.n	8002038 <main+0x49c>

			  case 'e':
				  //etherNet_Flag = 1;
				  //setIMR(0x01);
				  //setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.
				  if (etherNet_Flag == 1){
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <main+0x594>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11b      	bne.n	8002036 <main+0x49a>
					  etherNet_Flag = 0;
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <main+0x594>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]

					  //setSn_IMR(0, 0xff);	//Interrupt occurs only in the recv interrupt of socket '0'.

					  if((retVal = send(SOCK_TCPS, GREETING_MSG, strlen(GREETING_MSG))) == (int16_t)strlen(GREETING_MSG)) {
 8002004:	2236      	movs	r2, #54	; 0x36
 8002006:	494b      	ldr	r1, [pc, #300]	; (8002134 <main+0x598>)
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff f839 	bl	8001080 <send>
 800200e:	4603      	mov	r3, r0
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <main+0x59c>)
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	4b48      	ldr	r3, [pc, #288]	; (8002138 <main+0x59c>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b36      	cmp	r3, #54	; 0x36
 800201c:	d10b      	bne.n	8002036 <main+0x49a>
						  printf("######### 407 board transmits data to server !! \r\n");
 800201e:	4847      	ldr	r0, [pc, #284]	; (800213c <main+0x5a0>)
 8002020:	f005 fd08 	bl	8007a34 <puts>
						  PRINT_STR(SENT_MESSAGE_MSG);
 8002024:	2364      	movs	r3, #100	; 0x64
 8002026:	2229      	movs	r2, #41	; 0x29
 8002028:	4945      	ldr	r1, [pc, #276]	; (8002140 <main+0x5a4>)
 800202a:	483b      	ldr	r0, [pc, #236]	; (8002118 <main+0x57c>)
 800202c:	f004 fd59 	bl	8006ae2 <HAL_UART_Transmit>
					  }
				  }

				  break;
 8002030:	e001      	b.n	8002036 <main+0x49a>
		  }
	  }
 8002032:	bf00      	nop
 8002034:	e000      	b.n	8002038 <main+0x49c>
				  break;
 8002036:	bf00      	nop

	  //setIMR(0x01);
	  //setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.


	  if(uart2_key_Flag) {
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <main+0x5a8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d024      	beq.n	800208a <main+0x4ee>
		  uart2_key_Flag = 0;
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <main+0x5a8>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8002046:	4840      	ldr	r0, [pc, #256]	; (8002148 <main+0x5ac>)
 8002048:	f005 fcf4 	bl	8007a34 <puts>
		  reset_CMD = SubStr(rxd, 0, 35);
 800204c:	2223      	movs	r2, #35	; 0x23
 800204e:	2100      	movs	r1, #0
 8002050:	483e      	ldr	r0, [pc, #248]	; (800214c <main+0x5b0>)
 8002052:	f000 fcb1 	bl	80029b8 <SubStr>
 8002056:	4603      	mov	r3, r0
 8002058:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <main+0x5b4>)
 800205a:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <main+0x5b4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	483c      	ldr	r0, [pc, #240]	; (8002154 <main+0x5b8>)
 8002064:	f005 fc4a 	bl	80078fc <iprintf>
		  //HAL_Delay(1);
		  for (int i = 0; i < LENGTH; i++) {
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	e00a      	b.n	8002084 <main+0x4e8>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <main+0x5b0>)
 8002072:	1899      	adds	r1, r3, r2
 8002074:	230a      	movs	r3, #10
 8002076:	2201      	movs	r2, #1
 8002078:	4837      	ldr	r0, [pc, #220]	; (8002158 <main+0x5bc>)
 800207a:	f004 fd32 	bl	8006ae2 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b22      	cmp	r3, #34	; 0x22
 8002088:	ddf1      	ble.n	800206e <main+0x4d2>
		  }
	  }

	  if(uart_6_flag) {
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <main+0x5c0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <main+0x524>
		  uart_6_flag = 0;
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <main+0x5c0>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 8002098:	4831      	ldr	r0, [pc, #196]	; (8002160 <main+0x5c4>)
 800209a:	f005 fccb 	bl	8007a34 <puts>

		  //HAL_Delay(1);

		  for (int i = 0; i < GTO_LENGTH; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e00a      	b.n	80020ba <main+0x51e>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <main+0x5c8>)
 80020a8:	1899      	adds	r1, r3, r2
 80020aa:	230a      	movs	r3, #10
 80020ac:	2201      	movs	r2, #1
 80020ae:	482a      	ldr	r0, [pc, #168]	; (8002158 <main+0x5bc>)
 80020b0:	f004 fd17 	bl	8006ae2 <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b0a      	cmp	r3, #10
 80020be:	ddf1      	ble.n	80020a4 <main+0x508>
		  }
		  //printf("\r\n\r\n");

	  }

	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 80020c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c4:	4812      	ldr	r0, [pc, #72]	; (8002110 <main+0x574>)
 80020c6:	f002 f89d 	bl	8004204 <HAL_GPIO_ReadPin>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <main+0x5cc>)
 80020d0:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 80020d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <main+0x574>)
 80020d8:	f002 f894 	bl	8004204 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <main+0x5d0>)
 80020e2:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 80020e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <main+0x574>)
 80020ea:	f002 f88b 	bl	8004204 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <main+0x5d4>)
 80020f4:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 80020f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <main+0x574>)
 80020fc:	f002 f882 	bl	8004204 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <main+0x5d8>)
 8002106:	701a      	strb	r2, [r3, #0]
	  loopback_tcps(SOCK_TCPS, 20, 60500);
 8002108:	e640      	b.n	8001d8c <main+0x1f0>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	40020400 	.word	0x40020400
 8002114:	2000002c 	.word	0x2000002c
 8002118:	200003a4 	.word	0x200003a4
 800211c:	2000002e 	.word	0x2000002e
 8002120:	20000294 	.word	0x20000294
 8002124:	08008dc0 	.word	0x08008dc0
 8002128:	08008de4 	.word	0x08008de4
 800212c:	08008e08 	.word	0x08008e08
 8002130:	200000db 	.word	0x200000db
 8002134:	08008e2c 	.word	0x08008e2c
 8002138:	2000013c 	.word	0x2000013c
 800213c:	08008e64 	.word	0x08008e64
 8002140:	08008e98 	.word	0x08008e98
 8002144:	200000da 	.word	0x200000da
 8002148:	08008ec4 	.word	0x08008ec4
 800214c:	2000054c 	.word	0x2000054c
 8002150:	20000138 	.word	0x20000138
 8002154:	08008ed4 	.word	0x08008ed4
 8002158:	200001cc 	.word	0x200001cc
 800215c:	200000dc 	.word	0x200000dc
 8002160:	08008ee4 	.word	0x08008ee4
 8002164:	200002d8 	.word	0x200002d8
 8002168:	20000180 	.word	0x20000180
 800216c:	200004e8 	.word	0x200004e8
 8002170:	20000210 	.word	0x20000210
 8002174:	200000ec 	.word	0x200000ec

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b098      	sub	sp, #96	; 0x60
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002182:	2230      	movs	r2, #48	; 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fb06 	bl	8007798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <SystemClock_Config+0xf8>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <SystemClock_Config+0xf8>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <SystemClock_Config+0xf8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <SystemClock_Config+0xfc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a29      	ldr	r2, [pc, #164]	; (8002274 <SystemClock_Config+0xfc>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <SystemClock_Config+0xfc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80021e2:	230a      	movs	r3, #10
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e6:	2301      	movs	r3, #1
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ea:	2310      	movs	r3, #16
 80021ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021ee:	2301      	movs	r3, #1
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2302      	movs	r3, #2
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f6:	2300      	movs	r3, #0
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021fa:	2308      	movs	r3, #8
 80021fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021fe:	23a8      	movs	r3, #168	; 0xa8
 8002200:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002202:	2302      	movs	r3, #2
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002206:	2304      	movs	r3, #4
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f842 	bl	8004298 <HAL_RCC_OscConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800221a:	f000 fd29 	bl	8002c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221e:	230f      	movs	r3, #15
 8002220:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002222:	2302      	movs	r3, #2
 8002224:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800222a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 faa4 	bl	8004788 <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002246:	f000 fd13 	bl	8002c70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800224a:	2302      	movs	r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800224e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002252:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fc97 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002264:	f000 fd04 	bl	8002c70 <Error_Handler>
  }
}
 8002268:	bf00      	nop
 800226a:	3760      	adds	r7, #96	; 0x60
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2025      	movs	r0, #37	; 0x25
 8002282:	f001 fa7d 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002286:	2025      	movs	r0, #37	; 0x25
 8002288:	f001 fa96 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2047      	movs	r0, #71	; 0x47
 8002292:	f001 fa75 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002296:	2047      	movs	r0, #71	; 0x47
 8002298:	f001 fa8e 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022b4:	2300      	movs	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <MX_RTC_Init+0xac>)
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <MX_RTC_Init+0xb0>)
 80022bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <MX_RTC_Init+0xac>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_RTC_Init+0xac>)
 80022c6:	227f      	movs	r2, #127	; 0x7f
 80022c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <MX_RTC_Init+0xac>)
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <MX_RTC_Init+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MX_RTC_Init+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <MX_RTC_Init+0xac>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022e2:	481a      	ldr	r0, [pc, #104]	; (800234c <MX_RTC_Init+0xac>)
 80022e4:	f002 fd34 	bl	8004d50 <HAL_RTC_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80022ee:	f000 fcbf 	bl	8002c70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2201      	movs	r2, #1
 800230a:	4619      	mov	r1, r3
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <MX_RTC_Init+0xac>)
 800230e:	f002 fdb0 	bl	8004e72 <HAL_RTC_SetTime>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002318:	f000 fcaa 	bl	8002c70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800231c:	2301      	movs	r3, #1
 800231e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002320:	2301      	movs	r3, #1
 8002322:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002324:	2301      	movs	r3, #1
 8002326:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002328:	2300      	movs	r3, #0
 800232a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	2201      	movs	r2, #1
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <MX_RTC_Init+0xac>)
 8002334:	f002 fe5a 	bl	8004fec <HAL_RTC_SetDate>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800233e:	f000 fc97 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000021c 	.word	0x2000021c
 8002350:	40002800 	.word	0x40002800

08002354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <MX_SPI1_Init+0xb0>)
 800235c:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <MX_SPI1_Init+0xb4>)
 800235e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002362:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002366:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <MX_SPI1_Init+0xb0>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_SPI1_Init+0xb0>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <MX_SPI1_Init+0xb0>)
 800238a:	2210      	movs	r2, #16
 800238c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_SPI1_Init+0xb0>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_SPI1_Init+0xb0>)
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_SPI1_Init+0xb0>)
 80023a2:	220a      	movs	r2, #10
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a6:	4817      	ldr	r0, [pc, #92]	; (8002404 <MX_SPI1_Init+0xb0>)
 80023a8:	f002 ff39 	bl	800521e <HAL_SPI_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80023b2:	f000 fc5d 	bl	8002c70 <Error_Handler>
  /**SPI2 GPIO Configuration
	PB4     ------> SPI1_SCK
	PB6     ------> SPI1_MISO
	PB7     ------> SPI1_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023c4:	23e0      	movs	r3, #224	; 0xe0
 80023c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023d4:	2305      	movs	r3, #5
 80023d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <MX_SPI1_Init+0xb8>)
 80023de:	f001 fd75 	bl	8003ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e2:	2310      	movs	r3, #16
 80023e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_SPI1_Init+0xb8>)
 80023f8:	f001 fd68 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE END SPI1_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000348 	.word	0x20000348
 8002408:	40013000 	.word	0x40013000
 800240c:	40020000 	.word	0x40020000

08002410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <MX_TIM1_Init+0xc8>)
 800243e:	4a27      	ldr	r2, [pc, #156]	; (80024dc <MX_TIM1_Init+0xcc>)
 8002440:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <MX_TIM1_Init+0xc8>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <MX_TIM1_Init+0xc8>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <MX_TIM1_Init+0xc8>)
 8002450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002454:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <MX_TIM1_Init+0xc8>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <MX_TIM1_Init+0xc8>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM1_Init+0xc8>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002468:	481b      	ldr	r0, [pc, #108]	; (80024d8 <MX_TIM1_Init+0xc8>)
 800246a:	f003 fd9f 	bl	8005fac <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002474:	f000 fbfc 	bl	8002c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800247e:	f107 0320 	add.w	r3, r7, #32
 8002482:	4619      	mov	r1, r3
 8002484:	4814      	ldr	r0, [pc, #80]	; (80024d8 <MX_TIM1_Init+0xc8>)
 8002486:	f003 ff59 	bl	800633c <HAL_TIM_ConfigClockSource>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002490:	f000 fbee 	bl	8002c70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002494:	2306      	movs	r3, #6
 8002496:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <MX_TIM1_Init+0xc8>)
 80024a4:	f004 f80e 	bl	80064c4 <HAL_TIM_SlaveConfigSynchro>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80024ae:	f000 fbdf 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <MX_TIM1_Init+0xc8>)
 80024c0:	f004 fa32 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80024ca:	f000 fbd1 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000244 	.word	0x20000244
 80024dc:	40010000 	.word	0x40010000

080024e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e6:	463b      	mov	r3, r7
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_TIM7_Init+0x64>)
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <MX_TIM7_Init+0x68>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_TIM7_Init+0x64>)
 80024f6:	2229      	movs	r2, #41	; 0x29
 80024f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_TIM7_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MX_TIM7_Init+0x64>)
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_TIM7_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_TIM7_Init+0x64>)
 8002510:	f003 fd4c 	bl	8005fac <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800251a:	f000 fba9 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002526:	463b      	mov	r3, r7
 8002528:	4619      	mov	r1, r3
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <MX_TIM7_Init+0x64>)
 800252c:	f004 f9fc 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002536:	f000 fb9b 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200004a0 	.word	0x200004a0
 8002548:	40001400 	.word	0x40001400

0800254c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_UART4_Init+0x4c>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <MX_UART4_Init+0x50>)
 8002554:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <MX_UART4_Init+0x4c>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_UART4_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_UART4_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <MX_UART4_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_UART4_Init+0x4c>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <MX_UART4_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_UART4_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_UART4_Init+0x4c>)
 8002584:	f004 fa60 	bl	8006a48 <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800258e:	f000 fb6f 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000300 	.word	0x20000300
 800259c:	40004c00 	.word	0x40004c00

080025a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_UART5_Init+0x4c>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <MX_UART5_Init+0x50>)
 80025a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <MX_UART5_Init+0x4c>)
 80025ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_UART5_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_UART5_Init+0x4c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <MX_UART5_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_UART5_Init+0x4c>)
 80025c6:	220c      	movs	r2, #12
 80025c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <MX_UART5_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_UART5_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80025d6:	4805      	ldr	r0, [pc, #20]	; (80025ec <MX_UART5_Init+0x4c>)
 80025d8:	f004 fa36 	bl	8006a48 <HAL_UART_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80025e2:	f000 fb45 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000184 	.word	0x20000184
 80025f0:	40005000 	.word	0x40005000

080025f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_USART1_UART_Init+0x50>)
 80025fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800261a:	220c      	movs	r2, #12
 800261c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800262c:	f004 fa0c 	bl	8006a48 <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002636:	f000 fb1b 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200001cc 	.word	0x200001cc
 8002644:	40011000 	.word	0x40011000

08002648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_USART2_UART_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002680:	f004 f9e2 	bl	8006a48 <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800268a:	f000 faf1 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200003a4 	.word	0x200003a4
 8002698:	40004400 	.word	0x40004400

0800269c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART3_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026d4:	f004 f9b8 	bl	8006a48 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f000 fac7 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200000f0 	.word	0x200000f0
 80026ec:	40004800 	.word	0x40004800

080026f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <MX_USART6_UART_Init+0x50>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <MX_USART6_UART_Init+0x54>)
 80026fe:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002714:	220c      	movs	r2, #12
 8002716:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002720:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002728:	f004 f98e 	bl	8006a48 <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002732:	f000 fa9d 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000294 	.word	0x20000294
 8002740:	40011400 	.word	0x40011400
 8002744:	003d0900 	.word	0x003d0900

08002748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_DMA_Init+0x4c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <MX_DMA_Init+0x4c>)
 8002758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <MX_DMA_Init+0x4c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2038      	movs	r0, #56	; 0x38
 8002770:	f001 f806 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002774:	2038      	movs	r0, #56	; 0x38
 8002776:	f001 f81f 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	203b      	movs	r0, #59	; 0x3b
 8002780:	f000 fffe 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002784:	203b      	movs	r0, #59	; 0x3b
 8002786:	f001 f817 	bl	80037b8 <HAL_NVIC_EnableIRQ>

}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a62      	ldr	r2, [pc, #392]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b60      	ldr	r3, [pc, #384]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b55      	ldr	r3, [pc, #340]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a54      	ldr	r2, [pc, #336]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b52      	ldr	r3, [pc, #328]	; (8002940 <MX_GPIO_Init+0x1a8>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a4d      	ldr	r2, [pc, #308]	; (8002940 <MX_GPIO_Init+0x1a8>)
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a46      	ldr	r2, [pc, #280]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4b40      	ldr	r3, [pc, #256]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a3f      	ldr	r2, [pc, #252]	; (8002940 <MX_GPIO_Init+0x1a8>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <MX_GPIO_Init+0x1a8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	211a      	movs	r1, #26
 800285a:	483a      	ldr	r0, [pc, #232]	; (8002944 <MX_GPIO_Init+0x1ac>)
 800285c:	f001 fcea 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002866:	4838      	ldr	r0, [pc, #224]	; (8002948 <MX_GPIO_Init+0x1b0>)
 8002868:	f001 fce4 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002872:	4836      	ldr	r0, [pc, #216]	; (800294c <MX_GPIO_Init+0x1b4>)
 8002874:	f001 fcde 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	2101      	movs	r1, #1
 800287c:	4834      	ldr	r0, [pc, #208]	; (8002950 <MX_GPIO_Init+0x1b8>)
 800287e:	f001 fcd9 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002882:	231a      	movs	r3, #26
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	482a      	ldr	r0, [pc, #168]	; (8002944 <MX_GPIO_Init+0x1ac>)
 800289a:	f001 fb17 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <MX_GPIO_Init+0x1bc>)
 80028a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4827      	ldr	r0, [pc, #156]	; (8002950 <MX_GPIO_Init+0x1b8>)
 80028b2:	f001 fb0b 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4820      	ldr	r0, [pc, #128]	; (800294c <MX_GPIO_Init+0x1b4>)
 80028cc:	f001 fafe 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	4619      	mov	r1, r3
 80028e8:	4817      	ldr	r0, [pc, #92]	; (8002948 <MX_GPIO_Init+0x1b0>)
 80028ea:	f001 faef 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 80028ee:	f44f 730c 	mov.w	r3, #560	; 0x230
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	4811      	ldr	r0, [pc, #68]	; (800294c <MX_GPIO_Init+0x1b4>)
 8002908:	f001 fae0 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800290c:	2301      	movs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	4619      	mov	r1, r3
 8002922:	480b      	ldr	r0, [pc, #44]	; (8002950 <MX_GPIO_Init+0x1b8>)
 8002924:	f001 fad2 	bl	8003ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2017      	movs	r0, #23
 800292e:	f000 ff27 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002932:	2017      	movs	r0, #23
 8002934:	f000 ff40 	bl	80037b8 <HAL_NVIC_EnableIRQ>

}
 8002938:	bf00      	nop
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	40020800 	.word	0x40020800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40021000 	.word	0x40021000
 8002954:	10110000 	.word	0x10110000

08002958 <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 800295c:	2201      	movs	r2, #1
 800295e:	2120      	movs	r1, #32
 8002960:	4810      	ldr	r0, [pc, #64]	; (80029a4 <Sync_out+0x4c>)
 8002962:	f001 fc67 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 8002966:	2201      	movs	r2, #1
 8002968:	2101      	movs	r1, #1
 800296a:	480f      	ldr	r0, [pc, #60]	; (80029a8 <Sync_out+0x50>)
 800296c:	f001 fc62 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 8002970:	2201      	movs	r2, #1
 8002972:	2102      	movs	r1, #2
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <Sync_out+0x54>)
 8002976:	f001 fc5d 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 800297a:	230a      	movs	r3, #10
 800297c:	2201      	movs	r2, #1
 800297e:	490c      	ldr	r1, [pc, #48]	; (80029b0 <Sync_out+0x58>)
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <Sync_out+0x5c>)
 8002982:	f004 f8ae 	bl	8006ae2 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 8002986:	2064      	movs	r0, #100	; 0x64
 8002988:	f7fe ff3c 	bl	8001804 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 800298c:	2200      	movs	r2, #0
 800298e:	2102      	movs	r1, #2
 8002990:	4806      	ldr	r0, [pc, #24]	; (80029ac <Sync_out+0x54>)
 8002992:	f001 fc4f 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 8002996:	2200      	movs	r2, #0
 8002998:	2101      	movs	r1, #1
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <Sync_out+0x50>)
 800299c:	f001 fc4a 	bl	8004234 <HAL_GPIO_WritePin>
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40020800 	.word	0x40020800
 80029b0:	2000002d 	.word	0x2000002d
 80029b4:	20000294 	.word	0x20000294

080029b8 <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <SubStr+0x16>
        return NULL ;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e033      	b.n	8002a36 <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3301      	adds	r3, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 feca 	bl	800776c <malloc>
 80029d8:	4603      	mov	r3, r0
 80029da:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7fd fbf7 	bl	80001d0 <strlen>
 80029e2:	4603      	mov	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dd03      	ble.n	80029fa <SubStr+0x42>
        nLength = nStart + nLen ;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e00d      	b.n	8002a1c <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	441a      	add	r2, r3
 8002a06:	69f9      	ldr	r1, [r7, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	440b      	add	r3, r1
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	dbed      	blt.n	8002a00 <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	4413      	add	r3, r2
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8002a34:	697b      	ldr	r3, [r7, #20]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <loopback_tcps>:
		printf("%c ", pRcvBuffer[i]);
	}
}

int32_t loopback_tcps(uint8_t sn, uint8_t * buf, uint16_t port)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80bb      	strh	r3, [r7, #4]
	//setIMR(0x01);
	//setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.

   switch(getSn_SR(sn))
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	3304      	adds	r3, #4
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	3303      	adds	r3, #3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fdbb 	bl	80005d4 <WIZCHIP_READ>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b1c      	cmp	r3, #28
 8002a62:	f200 80d5 	bhi.w	8002c10 <loopback_tcps+0x1d0>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <loopback_tcps+0x2c>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002bd7 	.word	0x08002bd7
 8002a70:	08002c11 	.word	0x08002c11
 8002a74:	08002c11 	.word	0x08002c11
 8002a78:	08002c11 	.word	0x08002c11
 8002a7c:	08002c11 	.word	0x08002c11
 8002a80:	08002c11 	.word	0x08002c11
 8002a84:	08002c11 	.word	0x08002c11
 8002a88:	08002c11 	.word	0x08002c11
 8002a8c:	08002c11 	.word	0x08002c11
 8002a90:	08002c11 	.word	0x08002c11
 8002a94:	08002c11 	.word	0x08002c11
 8002a98:	08002c11 	.word	0x08002c11
 8002a9c:	08002c11 	.word	0x08002c11
 8002aa0:	08002c11 	.word	0x08002c11
 8002aa4:	08002c11 	.word	0x08002c11
 8002aa8:	08002c11 	.word	0x08002c11
 8002aac:	08002c11 	.word	0x08002c11
 8002ab0:	08002c11 	.word	0x08002c11
 8002ab4:	08002c11 	.word	0x08002c11
 8002ab8:	08002bad 	.word	0x08002bad
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002c11 	.word	0x08002c11
 8002ac4:	08002c11 	.word	0x08002c11
 8002ac8:	08002ae5 	.word	0x08002ae5
 8002acc:	08002c11 	.word	0x08002c11
 8002ad0:	08002c11 	.word	0x08002c11
 8002ad4:	08002c11 	.word	0x08002c11
 8002ad8:	08002c11 	.word	0x08002c11
 8002adc:	08002b79 	.word	0x08002b79
   {
   	   case SOCK_LISTEN :
   		   asm("nop");
 8002ae0:	bf00      	nop
   		   break;
 8002ae2:	e09a      	b.n	8002c1a <loopback_tcps+0x1da>

   	   case SOCK_ESTABLISHED :
   		   setIMR(0x01);
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2016      	movs	r0, #22
 8002ae8:	f7fd fd46 	bl	8000578 <WIZCHIP_WRITE>
   		   setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.
 8002aec:	2104      	movs	r1, #4
 8002aee:	f240 4002 	movw	r0, #1026	; 0x402
 8002af2:	f7fd fd41 	bl	8000578 <WIZCHIP_WRITE>

   		   if(getSn_IR(sn) & Sn_IR_CON)
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	3304      	adds	r3, #4
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	3302      	adds	r3, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fd68 	bl	80005d4 <WIZCHIP_READ>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <loopback_tcps+0xe8>
   		   {
   			   printf(" >>>>>>>> Socket Num. %d : Connected \r\n\n", sn);
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4844      	ldr	r0, [pc, #272]	; (8002c24 <loopback_tcps+0x1e4>)
 8002b14:	f004 fef2 	bl	80078fc <iprintf>
   			   setSn_IR(sn, Sn_IR_CON);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	3302      	adds	r3, #2
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd28 	bl	8000578 <WIZCHIP_WRITE>
   		   }
   		   if((size = getSn_RX_RSR(sn)) > 0)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fe5f 	bl	80007ee <getSn_RX_RSR>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <loopback_tcps+0x1e8>)
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <loopback_tcps+0x1e8>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d069      	beq.n	8002c14 <loopback_tcps+0x1d4>
		   {
			   ret = recv(SOCK_TCPS, c_buffer, sizeof(c_buffer));
 8002b40:	2208      	movs	r2, #8
 8002b42:	493a      	ldr	r1, [pc, #232]	; (8002c2c <loopback_tcps+0x1ec>)
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fb8f 	bl	8001268 <recv>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <loopback_tcps+0x1f0>)
 8002b50:	601a      	str	r2, [r3, #0]
			   //USART1->DR = c_buffer[0] ;
			   printf(" ######### Data received from the server : %s \r\n", c_buffer);
 8002b52:	4936      	ldr	r1, [pc, #216]	; (8002c2c <loopback_tcps+0x1ec>)
 8002b54:	4837      	ldr	r0, [pc, #220]	; (8002c34 <loopback_tcps+0x1f4>)
 8002b56:	f004 fed1 	bl	80078fc <iprintf>
			   ret = send(SOCK_TCPS, c_buffer, strlen(c_buffer));
 8002b5a:	4834      	ldr	r0, [pc, #208]	; (8002c2c <loopback_tcps+0x1ec>)
 8002b5c:	f7fd fb38 	bl	80001d0 <strlen>
 8002b60:	4603      	mov	r3, r0
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4931      	ldr	r1, [pc, #196]	; (8002c2c <loopback_tcps+0x1ec>)
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe fa89 	bl	8001080 <send>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <loopback_tcps+0x1f0>)
 8002b74:	601a      	str	r2, [r3, #0]
   					   return ret;
   				   }
   				   sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
   			   }
   		   }*/
   		   break;
 8002b76:	e04d      	b.n	8002c14 <loopback_tcps+0x1d4>

   	   case SOCK_CLOSE_WAIT :
   		   printf(" ******** Socket Num. %d:CloseWait \r\n",sn);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	482e      	ldr	r0, [pc, #184]	; (8002c38 <loopback_tcps+0x1f8>)
 8002b7e:	f004 febd 	bl	80078fc <iprintf>
   		   if((ret=disconnect(sn)) != SOCK_OK) return ret;
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fa0d 	bl	8000fa4 <disconnect>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <loopback_tcps+0x1f0>)
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <loopback_tcps+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <loopback_tcps+0x160>
 8002b9a:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <loopback_tcps+0x1f0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e03d      	b.n	8002c1c <loopback_tcps+0x1dc>
   		   printf("%d:Closed \r\n", sn);
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4825      	ldr	r0, [pc, #148]	; (8002c3c <loopback_tcps+0x1fc>)
 8002ba6:	f004 fea9 	bl	80078fc <iprintf>
   		   break;
 8002baa:	e036      	b.n	8002c1a <loopback_tcps+0x1da>

   	   case SOCK_INIT :
   		   printf(" ******** Socket Num. %d : Listen, port [%d]\r\n",sn, port);
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	88ba      	ldrh	r2, [r7, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4823      	ldr	r0, [pc, #140]	; (8002c40 <loopback_tcps+0x200>)
 8002bb4:	f004 fea2 	bl	80078fc <iprintf>
   		   if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f9a2 	bl	8000f04 <listen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <loopback_tcps+0x1f0>)
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <loopback_tcps+0x1f0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d023      	beq.n	8002c18 <loopback_tcps+0x1d8>
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <loopback_tcps+0x1f0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e022      	b.n	8002c1c <loopback_tcps+0x1dc>
   		   break;

   	   case SOCK_CLOSED:
   		   printf(" ******** Socket Num. %d : LBTStart \r\n", sn);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	481a      	ldr	r0, [pc, #104]	; (8002c44 <loopback_tcps+0x204>)
 8002bdc:	f004 fe8e 	bl	80078fc <iprintf>
   		   if((ret=socket(sn, Sn_MR_TCP, port, 0x00)) != sn)
 8002be0:	88ba      	ldrh	r2, [r7, #4]
 8002be2:	79f8      	ldrb	r0, [r7, #7]
 8002be4:	2300      	movs	r3, #0
 8002be6:	2101      	movs	r1, #1
 8002be8:	f7fe f820 	bl	8000c2c <socket>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <loopback_tcps+0x1f0>)
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <loopback_tcps+0x1f0>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d002      	beq.n	8002c04 <loopback_tcps+0x1c4>
   			   return ret;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <loopback_tcps+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e00b      	b.n	8002c1c <loopback_tcps+0x1dc>
   		   printf(" ******** Socket Num. %d : Opened \r\n", sn);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4619      	mov	r1, r3
 8002c08:	480f      	ldr	r0, [pc, #60]	; (8002c48 <loopback_tcps+0x208>)
 8002c0a:	f004 fe77 	bl	80078fc <iprintf>
   		   break;
 8002c0e:	e004      	b.n	8002c1a <loopback_tcps+0x1da>

   	   default:
   		   break;
 8002c10:	bf00      	nop
 8002c12:	e002      	b.n	8002c1a <loopback_tcps+0x1da>
   		   break;
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <loopback_tcps+0x1da>
   		   break;
 8002c18:	bf00      	nop
   }
   return 1;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	08009088 	.word	0x08009088
 8002c28:	200000de 	.word	0x200000de
 8002c2c:	20000214 	.word	0x20000214
 8002c30:	2000049c 	.word	0x2000049c
 8002c34:	080090b4 	.word	0x080090b4
 8002c38:	080090e8 	.word	0x080090e8
 8002c3c:	08009110 	.word	0x08009110
 8002c40:	08009120 	.word	0x08009120
 8002c44:	08009150 	.word	0x08009150
 8002c48:	08009178 	.word	0x08009178

08002c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c5e:	f000 fcb7 	bl	80035d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40001000 	.word	0x40001000

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <Error_Handler+0x8>
	...

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <HAL_RTC_MspInit+0x24>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RTC_MspInit+0x28>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40002800 	.word	0x40002800
 8002cf4:	42470e3c 	.word	0x42470e3c

08002cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_SPI_MspInit+0x150>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 8091 	bne.w	8002e3e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	4a49      	ldr	r2, [pc, #292]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2c:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <HAL_SPI_MspInit+0x154>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d54:	23f0      	movs	r3, #240	; 0xf0
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d64:	2305      	movs	r3, #5
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4838      	ldr	r0, [pc, #224]	; (8002e50 <HAL_SPI_MspInit+0x158>)
 8002d70:	f001 f8ac 	bl	8003ecc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d76:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_SPI_MspInit+0x160>)
 8002d78:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d7c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d80:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002db4:	4827      	ldr	r0, [pc, #156]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002db6:	f000 fd0d 	bl	80037d4 <HAL_DMA_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002dc0:	f7ff ff56 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002dc8:	649a      	str	r2, [r3, #72]	; 0x48
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_SPI_MspInit+0x15c>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002dd2:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <HAL_SPI_MspInit+0x168>)
 8002dd4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002dd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ddc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e04:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002e12:	4812      	ldr	r0, [pc, #72]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e14:	f000 fcde 	bl	80037d4 <HAL_DMA_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002e1e:	f7ff ff27 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e26:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e28:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_SPI_MspInit+0x164>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2023      	movs	r0, #35	; 0x23
 8002e34:	f000 fca4 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e38:	2023      	movs	r0, #35	; 0x23
 8002e3a:	f000 fcbd 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40013000 	.word	0x40013000
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	200004ec 	.word	0x200004ec
 8002e58:	40026458 	.word	0x40026458
 8002e5c:	200003e8 	.word	0x200003e8
 8002e60:	40026410 	.word	0x40026410

08002e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_TIM_Base_MspInit+0x70>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e92:	e01a      	b.n	8002eca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_TIM_Base_MspInit+0x78>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_TIM_Base_MspInit+0x74>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2037      	movs	r0, #55	; 0x37
 8002ec0:	f000 fc5e 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ec4:	2037      	movs	r0, #55	; 0x37
 8002ec6:	f000 fc77 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40001400 	.word	0x40001400

08002ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b094      	sub	sp, #80	; 0x50
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9c      	ldr	r2, [pc, #624]	; (8003170 <HAL_UART_MspInit+0x290>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d135      	bne.n	8002f6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f06:	4b9b      	ldr	r3, [pc, #620]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a9a      	ldr	r2, [pc, #616]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	4b94      	ldr	r3, [pc, #592]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a93      	ldr	r2, [pc, #588]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b91      	ldr	r3, [pc, #580]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4888      	ldr	r0, [pc, #544]	; (8003178 <HAL_UART_MspInit+0x298>)
 8002f58:	f000 ffb8 	bl	8003ecc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2034      	movs	r0, #52	; 0x34
 8002f62:	f000 fc0d 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f66:	2034      	movs	r0, #52	; 0x34
 8002f68:	f000 fc26 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f6c:	e145      	b.n	80031fa <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a82      	ldr	r2, [pc, #520]	; (800317c <HAL_UART_MspInit+0x29c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d153      	bne.n	8003020 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7c:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f86:	6413      	str	r3, [r2, #64]	; 0x40
 8002f88:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f98:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa4:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_UART_MspInit+0x294>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002fde:	2308      	movs	r3, #8
 8002fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4863      	ldr	r0, [pc, #396]	; (8003178 <HAL_UART_MspInit+0x298>)
 8002fea:	f000 ff6f 	bl	8003ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ffe:	2308      	movs	r3, #8
 8003000:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003006:	4619      	mov	r1, r3
 8003008:	485d      	ldr	r0, [pc, #372]	; (8003180 <HAL_UART_MspInit+0x2a0>)
 800300a:	f000 ff5f 	bl	8003ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2035      	movs	r0, #53	; 0x35
 8003014:	f000 fbb4 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003018:	2035      	movs	r0, #53	; 0x35
 800301a:	f000 fbcd 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 800301e:	e0ec      	b.n	80031fa <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_UART_MspInit+0x2a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d12d      	bne.n	8003086 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003034:	f043 0310 	orr.w	r3, r3, #16
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <HAL_UART_MspInit+0x294>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_UART_MspInit+0x294>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a49      	ldr	r2, [pc, #292]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003062:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003068:	2302      	movs	r3, #2
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003070:	2303      	movs	r3, #3
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003074:	2307      	movs	r3, #7
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800307c:	4619      	mov	r1, r3
 800307e:	4842      	ldr	r0, [pc, #264]	; (8003188 <HAL_UART_MspInit+0x2a8>)
 8003080:	f000 ff24 	bl	8003ecc <HAL_GPIO_Init>
}
 8003084:	e0b9      	b.n	80031fa <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a40      	ldr	r2, [pc, #256]	; (800318c <HAL_UART_MspInit+0x2ac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d134      	bne.n	80030fa <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_UART_MspInit+0x294>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	6413      	str	r3, [r2, #64]	; 0x40
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_UART_MspInit+0x294>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_UART_MspInit+0x294>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <HAL_UART_MspInit+0x294>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6313      	str	r3, [r2, #48]	; 0x30
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_UART_MspInit+0x294>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030c8:	230c      	movs	r3, #12
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d8:	2307      	movs	r3, #7
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030e0:	4619      	mov	r1, r3
 80030e2:	4829      	ldr	r0, [pc, #164]	; (8003188 <HAL_UART_MspInit+0x2a8>)
 80030e4:	f000 fef2 	bl	8003ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	2026      	movs	r0, #38	; 0x26
 80030ee:	f000 fb47 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030f2:	2026      	movs	r0, #38	; 0x26
 80030f4:	f000 fb60 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 80030f8:	e07f      	b.n	80031fa <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_UART_MspInit+0x2b0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d149      	bne.n	8003198 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_UART_MspInit+0x294>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_UART_MspInit+0x294>)
 800310e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_UART_MspInit+0x294>)
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	6313      	str	r3, [r2, #48]	; 0x30
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_UART_MspInit+0x294>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800313c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314a:	2303      	movs	r3, #3
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800314e:	2307      	movs	r3, #7
 8003150:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003156:	4619      	mov	r1, r3
 8003158:	480e      	ldr	r0, [pc, #56]	; (8003194 <HAL_UART_MspInit+0x2b4>)
 800315a:	f000 feb7 	bl	8003ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2027      	movs	r0, #39	; 0x27
 8003164:	f000 fb0c 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003168:	2027      	movs	r0, #39	; 0x27
 800316a:	f000 fb25 	bl	80037b8 <HAL_NVIC_EnableIRQ>
}
 800316e:	e044      	b.n	80031fa <HAL_UART_MspInit+0x31a>
 8003170:	40004c00 	.word	0x40004c00
 8003174:	40023800 	.word	0x40023800
 8003178:	40020800 	.word	0x40020800
 800317c:	40005000 	.word	0x40005000
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40011000 	.word	0x40011000
 8003188:	40020000 	.word	0x40020000
 800318c:	40004400 	.word	0x40004400
 8003190:	40004800 	.word	0x40004800
 8003194:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_UART_MspInit+0x324>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12b      	bne.n	80031fa <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031ac:	f043 0320 	orr.w	r3, r3, #32
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a10      	ldr	r2, [pc, #64]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_UART_MspInit+0x328>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031da:	23c0      	movs	r3, #192	; 0xc0
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031ea:	2308      	movs	r3, #8
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <HAL_UART_MspInit+0x32c>)
 80031f6:	f000 fe69 	bl	8003ecc <HAL_GPIO_Init>
}
 80031fa:	bf00      	nop
 80031fc:	3750      	adds	r7, #80	; 0x50
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40011400 	.word	0x40011400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020800 	.word	0x40020800

08003210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	2036      	movs	r0, #54	; 0x36
 8003226:	f000 faab 	bl	8003780 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800322a:	2036      	movs	r0, #54	; 0x36
 800322c:	f000 fac4 	bl	80037b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <HAL_InitTick+0xa4>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_InitTick+0xa4>)
 800323a:	f043 0310 	orr.w	r3, r3, #16
 800323e:	6413      	str	r3, [r2, #64]	; 0x40
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <HAL_InitTick+0xa4>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fc66 	bl	8004b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800325c:	f001 fc3c 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8003260:	4603      	mov	r3, r0
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_InitTick+0xa8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3b01      	subs	r3, #1
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_InitTick+0xac>)
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_InitTick+0xb0>)
 8003278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_InitTick+0xac>)
 800327c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003280:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_InitTick+0xac>)
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_InitTick+0xac>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_InitTick+0xac>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003294:	4809      	ldr	r0, [pc, #36]	; (80032bc <HAL_InitTick+0xac>)
 8003296:	f002 fe89 	bl	8005fac <HAL_TIM_Base_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032a0:	4806      	ldr	r0, [pc, #24]	; (80032bc <HAL_InitTick+0xac>)
 80032a2:	f002 fed3 	bl	800604c <HAL_TIM_Base_Start_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	e000      	b.n	80032ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3730      	adds	r7, #48	; 0x30
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	431bde83 	.word	0x431bde83
 80032bc:	2000057c 	.word	0x2000057c
 80032c0:	40001000 	.word	0x40001000

080032c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <NMI_Handler+0x4>

080032ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler+0x4>

080032d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <MemManage_Handler+0x4>

080032d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <BusFault_Handler+0x4>

080032dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <UsageFault_Handler+0x4>

080032e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800331e:	2080      	movs	r0, #128	; 0x80
 8003320:	f000 ffa2 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}

08003328 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <SPI1_IRQHandler+0x10>)
 800332e:	f002 fbef 	bl	8005b10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000348 	.word	0x20000348

0800333c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <USART1_IRQHandler+0x10>)
 8003342:	f003 fc91 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200001cc 	.word	0x200001cc

08003350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <USART2_IRQHandler+0x10>)
 8003356:	f003 fc87 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200003a4 	.word	0x200003a4

08003364 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <USART3_IRQHandler+0x10>)
 800336a:	f003 fc7d 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200000f0 	.word	0x200000f0

08003378 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <UART4_IRQHandler+0x10>)
 800337e:	f003 fc73 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000300 	.word	0x20000300

0800338c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <UART5_IRQHandler+0x10>)
 8003392:	f003 fc69 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000184 	.word	0x20000184

080033a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <TIM6_DAC_IRQHandler+0x10>)
 80033a6:	f002 fec1 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000057c 	.word	0x2000057c

080033b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <TIM7_IRQHandler+0x10>)
 80033ba:	f002 feb7 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200004a0 	.word	0x200004a0

080033c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <DMA2_Stream0_IRQHandler+0x10>)
 80033ce:	f000 fb41 	bl	8003a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200003e8 	.word	0x200003e8

080033dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <DMA2_Stream3_IRQHandler+0x10>)
 80033e2:	f000 fb37 	bl	8003a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200004ec 	.word	0x200004ec

080033f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <USART6_IRQHandler+0x10>)
 80033f6:	f003 fc37 	bl	8006c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000294 	.word	0x20000294

08003404 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e00a      	b.n	800342c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003416:	f3af 8000 	nop.w
 800341a:	4601      	mov	r1, r0
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	60ba      	str	r2, [r7, #8]
 8003422:	b2ca      	uxtb	r2, r1
 8003424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3301      	adds	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	dbf0      	blt.n	8003416 <_read+0x12>
	}

return len;
 8003434:	687b      	ldr	r3, [r7, #4]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_close>:
	}
	return len;
}

int _close(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return -1;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003466:	605a      	str	r2, [r3, #4]
	return 0;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <_isatty>:

int _isatty(int file)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	return 1;
 800347e:	2301      	movs	r3, #1
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <_sbrk+0x5c>)
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <_sbrk+0x60>)
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <_sbrk+0x64>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <_sbrk+0x64>)
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <_sbrk+0x68>)
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <_sbrk+0x64>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d8:	f004 f91e 	bl	8007718 <__errno>
 80034dc:	4603      	mov	r3, r0
 80034de:	220c      	movs	r2, #12
 80034e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	e009      	b.n	80034fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <_sbrk+0x64>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <_sbrk+0x64>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	4a05      	ldr	r2, [pc, #20]	; (800350c <_sbrk+0x64>)
 80034f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20020000 	.word	0x20020000
 8003508:	00000400 	.word	0x00000400
 800350c:	200000e0 	.word	0x200000e0
 8003510:	200005d8 	.word	0x200005d8

08003514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <SystemInit+0x20>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <SystemInit+0x20>)
 8003520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800353c:	480d      	ldr	r0, [pc, #52]	; (8003574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800353e:	490e      	ldr	r1, [pc, #56]	; (8003578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003544:	e002      	b.n	800354c <LoopCopyDataInit>

08003546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354a:	3304      	adds	r3, #4

0800354c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800354c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800354e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003550:	d3f9      	bcc.n	8003546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003552:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003554:	4c0b      	ldr	r4, [pc, #44]	; (8003584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003558:	e001      	b.n	800355e <LoopFillZerobss>

0800355a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800355c:	3204      	adds	r2, #4

0800355e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800355e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003560:	d3fb      	bcc.n	800355a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003562:	f7ff ffd7 	bl	8003514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003566:	f004 f8dd 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356a:	f7fe fb17 	bl	8001b9c <main>
  bx  lr    
 800356e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003578:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800357c:	08009268 	.word	0x08009268
  ldr r2, =_sbss
 8003580:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003584:	200005d8 	.word	0x200005d8

08003588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC_IRQHandler>
	...

0800358c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_Init+0x40>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <HAL_Init+0x40>)
 8003596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_Init+0x40>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_Init+0x40>)
 80035a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <HAL_Init+0x40>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b4:	2003      	movs	r0, #3
 80035b6:	f000 f8d8 	bl	800376a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ba:	2000      	movs	r0, #0
 80035bc:	f7ff fe28 	bl	8003210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c0:	f7ff fb5c 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000040 	.word	0x20000040
 80035f4:	200005c4 	.word	0x200005c4

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200005c4 	.word	0x200005c4

08003610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <__NVIC_SetPriorityGrouping+0x44>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800363c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003642:	4a04      	ldr	r2, [pc, #16]	; (8003654 <__NVIC_SetPriorityGrouping+0x44>)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	60d3      	str	r3, [r2, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <__NVIC_GetPriorityGrouping+0x18>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 0307 	and.w	r3, r3, #7
}
 8003666:	4618      	mov	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	2b00      	cmp	r3, #0
 8003684:	db0b      	blt.n	800369e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	4907      	ldr	r1, [pc, #28]	; (80036ac <__NVIC_EnableIRQ+0x38>)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2001      	movs	r0, #1
 8003696:	fa00 f202 	lsl.w	r2, r0, r2
 800369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000e100 	.word	0xe000e100

080036b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db0a      	blt.n	80036da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	490c      	ldr	r1, [pc, #48]	; (80036fc <__NVIC_SetPriority+0x4c>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	440b      	add	r3, r1
 80036d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d8:	e00a      	b.n	80036f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4908      	ldr	r1, [pc, #32]	; (8003700 <__NVIC_SetPriority+0x50>)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	3b04      	subs	r3, #4
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	440b      	add	r3, r1
 80036ee:	761a      	strb	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000e100 	.word	0xe000e100
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf28      	it	cs
 8003722:	2304      	movcs	r3, #4
 8003724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3304      	adds	r3, #4
 800372a:	2b06      	cmp	r3, #6
 800372c:	d902      	bls.n	8003734 <NVIC_EncodePriority+0x30>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3b03      	subs	r3, #3
 8003732:	e000      	b.n	8003736 <NVIC_EncodePriority+0x32>
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	f04f 32ff 	mov.w	r2, #4294967295
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	401a      	ands	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800374c:	f04f 31ff 	mov.w	r1, #4294967295
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	43d9      	mvns	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	4313      	orrs	r3, r2
         );
}
 800375e:	4618      	mov	r0, r3
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff4c 	bl	8003610 <__NVIC_SetPriorityGrouping>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003792:	f7ff ff61 	bl	8003658 <__NVIC_GetPriorityGrouping>
 8003796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	6978      	ldr	r0, [r7, #20]
 800379e:	f7ff ffb1 	bl	8003704 <NVIC_EncodePriority>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff80 	bl	80036b0 <__NVIC_SetPriority>
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ff54 	bl	8003674 <__NVIC_EnableIRQ>
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff ff0a 	bl	80035f8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e099      	b.n	8003924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003810:	e00f      	b.n	8003832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003812:	f7ff fef1 	bl	80035f8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b05      	cmp	r3, #5
 800381e:	d908      	bls.n	8003832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2203      	movs	r2, #3
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e078      	b.n	8003924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e8      	bne.n	8003812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_DMA_Init+0x158>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b04      	cmp	r3, #4
 800388a:	d107      	bne.n	800389c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	4313      	orrs	r3, r2
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0307 	bic.w	r3, r3, #7
 80038b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d117      	bne.n	80038f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa7b 	bl	8003dd4 <DMA_CheckFifoParam>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038f2:	2301      	movs	r3, #1
 80038f4:	e016      	b.n	8003924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa32 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8003904:	4603      	mov	r3, r0
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	223f      	movs	r2, #63	; 0x3f
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	f010803f 	.word	0xf010803f

08003930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800393e:	f7ff fe5b 	bl	80035f8 <HAL_GetTick>
 8003942:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d008      	beq.n	8003962 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e052      	b.n	8003a08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0216 	bic.w	r2, r2, #22
 8003970:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003980:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_DMA_Abort+0x62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0208 	bic.w	r2, r2, #8
 80039a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b2:	e013      	b.n	80039dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b4:	f7ff fe20 	bl	80035f8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d90c      	bls.n	80039dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2203      	movs	r2, #3
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e015      	b.n	8003a08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e4      	bne.n	80039b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	223f      	movs	r2, #63	; 0x3f
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00c      	b.n	8003a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2205      	movs	r2, #5
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a60:	4b92      	ldr	r3, [pc, #584]	; (8003cac <HAL_DMA_IRQHandler+0x258>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a92      	ldr	r2, [pc, #584]	; (8003cb0 <HAL_DMA_IRQHandler+0x25c>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0a9b      	lsrs	r3, r3, #10
 8003a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	2208      	movs	r2, #8
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01a      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d012      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	2204      	movs	r2, #4
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	2204      	movs	r2, #4
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	2210      	movs	r2, #16
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d043      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d03c      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2210      	movs	r2, #16
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d024      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
 8003b82:	e01f      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
 8003b94:	e016      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0208 	bic.w	r2, r2, #8
 8003bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2220      	movs	r2, #32
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 808e 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8086 	beq.w	8003cf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	2220      	movs	r2, #32
 8003bec:	409a      	lsls	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d136      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0216 	bic.w	r2, r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x1da>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0208 	bic.w	r2, r2, #8
 8003c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	223f      	movs	r2, #63	; 0x3f
 8003c44:	409a      	lsls	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d07d      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
        }
        return;
 8003c6a:	e078      	b.n	8003d5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01c      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d030      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e02b      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e022      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x29e>
 8003cac:	20000038 	.word	0x20000038
 8003cb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0210 	bic.w	r2, r2, #16
 8003cd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d032      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2205      	movs	r2, #5
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d307      	bcc.n	8003d3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f2      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x2ca>
 8003d38:	e000      	b.n	8003d3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d5e:	bf00      	nop
    }
  }
}
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop

08003d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3b10      	subs	r3, #16
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <DMA_CalcBaseAndBitshift+0x64>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d909      	bls.n	8003daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	; 0x58
 8003da8:	e007      	b.n	8003dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	aaaaaaab 	.word	0xaaaaaaab
 8003dd0:	080091b8 	.word	0x080091b8

08003dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0x5a>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d856      	bhi.n	8003ea2 <DMA_CheckFifoParam+0xce>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <DMA_CheckFifoParam+0x28>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e1f 	.word	0x08003e1f
 8003e04:	08003e0d 	.word	0x08003e0d
 8003e08:	08003ea3 	.word	0x08003ea3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d046      	beq.n	8003ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1c:	e043      	b.n	8003ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e26:	d140      	bne.n	8003eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e03d      	b.n	8003eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	d121      	bne.n	8003e7c <DMA_CheckFifoParam+0xa8>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d837      	bhi.n	8003eae <DMA_CheckFifoParam+0xda>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <DMA_CheckFifoParam+0x70>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e5b 	.word	0x08003e5b
 8003e4c:	08003e55 	.word	0x08003e55
 8003e50:	08003e6d 	.word	0x08003e6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e030      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d025      	beq.n	8003eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6a:	e022      	b.n	8003eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e74:	d11f      	bne.n	8003eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e7a:	e01c      	b.n	8003eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d903      	bls.n	8003e8a <DMA_CheckFifoParam+0xb6>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d003      	beq.n	8003e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e88:	e018      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8e:	e015      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e00b      	b.n	8003eba <DMA_CheckFifoParam+0xe6>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e00a      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e008      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e006      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eba:	bf00      	nop
    }
  } 
  
  return status; 
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e16b      	b.n	80041c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 815a 	bne.w	80041ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d005      	beq.n	8003f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d130      	bne.n	8003f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f54:	2201      	movs	r2, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 0201 	and.w	r2, r3, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d017      	beq.n	8003fbc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d123      	bne.n	8004010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0203 	and.w	r2, r3, #3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80b4 	beq.w	80041ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_GPIO_Init+0x30c>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4a5f      	ldr	r2, [pc, #380]	; (80041d8 <HAL_GPIO_Init+0x30c>)
 800405c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004060:	6453      	str	r3, [r2, #68]	; 0x44
 8004062:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <HAL_GPIO_Init+0x30c>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406e:	4a5b      	ldr	r2, [pc, #364]	; (80041dc <HAL_GPIO_Init+0x310>)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <HAL_GPIO_Init+0x314>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02b      	beq.n	80040f2 <HAL_GPIO_Init+0x226>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a51      	ldr	r2, [pc, #324]	; (80041e4 <HAL_GPIO_Init+0x318>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d025      	beq.n	80040ee <HAL_GPIO_Init+0x222>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a50      	ldr	r2, [pc, #320]	; (80041e8 <HAL_GPIO_Init+0x31c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01f      	beq.n	80040ea <HAL_GPIO_Init+0x21e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4f      	ldr	r2, [pc, #316]	; (80041ec <HAL_GPIO_Init+0x320>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d019      	beq.n	80040e6 <HAL_GPIO_Init+0x21a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4e      	ldr	r2, [pc, #312]	; (80041f0 <HAL_GPIO_Init+0x324>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_GPIO_Init+0x216>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4d      	ldr	r2, [pc, #308]	; (80041f4 <HAL_GPIO_Init+0x328>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00d      	beq.n	80040de <HAL_GPIO_Init+0x212>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4c      	ldr	r2, [pc, #304]	; (80041f8 <HAL_GPIO_Init+0x32c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <HAL_GPIO_Init+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4b      	ldr	r2, [pc, #300]	; (80041fc <HAL_GPIO_Init+0x330>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_GPIO_Init+0x20a>
 80040d2:	2307      	movs	r3, #7
 80040d4:	e00e      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040d6:	2308      	movs	r3, #8
 80040d8:	e00c      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040da:	2306      	movs	r3, #6
 80040dc:	e00a      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040de:	2305      	movs	r3, #5
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040e2:	2304      	movs	r3, #4
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x228>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	; (80041dc <HAL_GPIO_Init+0x310>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_GPIO_Init+0x334>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004136:	4a32      	ldr	r2, [pc, #200]	; (8004200 <HAL_GPIO_Init+0x334>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800413c:	4b30      	ldr	r3, [pc, #192]	; (8004200 <HAL_GPIO_Init+0x334>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004160:	4a27      	ldr	r2, [pc, #156]	; (8004200 <HAL_GPIO_Init+0x334>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_GPIO_Init+0x334>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <HAL_GPIO_Init+0x334>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004190:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_GPIO_Init+0x334>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_GPIO_Init+0x334>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f ae90 	bls.w	8003ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	; 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40021400 	.word	0x40021400
 80041f8:	40021800 	.word	0x40021800
 80041fc:	40021c00 	.word	0x40021c00
 8004200:	40013c00 	.word	0x40013c00

08004204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	887b      	ldrh	r3, [r7, #2]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e001      	b.n	8004226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
 8004240:	4613      	mov	r3, r2
 8004242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004250:	e003      	b.n	800425a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004252:	887b      	ldrh	r3, [r7, #2]
 8004254:	041a      	lsls	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	619a      	str	r2, [r3, #24]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d006      	beq.n	800428c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fc2a 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e264      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00c      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d112      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b9d      	ldr	r3, [pc, #628]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e23f      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a87      	ldr	r2, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a83      	ldr	r2, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7ff f952 	bl	80035f8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7ff f94e 	bl	80035f8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e204      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7ff f93e 	bl	80035f8 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7ff f93a 	bl	80035f8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1f0      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d11c      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1c4      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4952      	ldr	r1, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	e03a      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004408:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7ff f8f3 	bl	80035f8 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004416:	f7ff f8ef 	bl	80035f8 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1a5      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4940      	ldr	r1, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7ff f8d2 	bl	80035f8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004458:	f7ff f8ce 	bl	80035f8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e184      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d030      	beq.n	80044e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7ff f8b2 	bl	80035f8 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004498:	f7ff f8ae 	bl	80035f8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e164      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
 80044b6:	e015      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7ff f89b 	bl	80035f8 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7ff f897 	bl	80035f8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e14d      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a0 	beq.w	8004632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d121      	bne.n	8004572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7ff f85d 	bl	80035f8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e011      	b.n	8004566 <HAL_RCC_OscConfig+0x2ce>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
 800454c:	42470e80 	.word	0x42470e80
 8004550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7ff f850 	bl	80035f8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e106      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b85      	ldr	r3, [pc, #532]	; (800477c <HAL_RCC_OscConfig+0x4e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x2f0>
 800457a:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a80      	ldr	r2, [pc, #512]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e01c      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 8004590:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a7a      	ldr	r2, [pc, #488]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b78      	ldr	r3, [pc, #480]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a77      	ldr	r2, [pc, #476]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e00b      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 80045aa:	4b75      	ldr	r3, [pc, #468]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b72      	ldr	r3, [pc, #456]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a71      	ldr	r2, [pc, #452]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7ff f815 	bl	80035f8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7ff f811 	bl	80035f8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0c5      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x33a>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fe ffff 	bl	80035f8 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fe fffb 	bl	80035f8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0af      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a55      	ldr	r2, [pc, #340]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 809b 	beq.w	8004772 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d05c      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d141      	bne.n	80046d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe ffcf 	bl	80035f8 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fe ffcb 	bl	80035f8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e081      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	019b      	lsls	r3, r3, #6
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	4937      	ldr	r1, [pc, #220]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe ffa4 	bl	80035f8 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe ffa0 	bl	80035f8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e056      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x41c>
 80046d2:	e04e      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x4ec>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fe ff8d 	bl	80035f8 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fe ff89 	bl	80035f8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e03f      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x44a>
 8004700:	e037      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e032      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470e:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_RCC_OscConfig+0x4e8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d028      	beq.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d121      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d11a      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004744:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004746:	4293      	cmp	r3, r2
 8004748:	d111      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d107      	bne.n	800476e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40007000 	.word	0x40007000
 8004780:	40023800 	.word	0x40023800
 8004784:	42470060 	.word	0x42470060

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0cc      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90c      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b65      	ldr	r3, [pc, #404]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d044      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d119      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	2b03      	cmp	r3, #3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e067      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b37      	ldr	r3, [pc, #220]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4934      	ldr	r1, [pc, #208]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fe febe 	bl	80035f8 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fe feba 	bl	80035f8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e04f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20c      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fc6e 	bl	8003210 <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	080091a0 	.word	0x080091a0
 800494c:	20000038 	.word	0x20000038
 8004950:	2000003c 	.word	0x2000003c

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b5b0      	push	{r4, r5, r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800495a:	2100      	movs	r1, #0
 800495c:	6079      	str	r1, [r7, #4]
 800495e:	2100      	movs	r1, #0
 8004960:	60f9      	str	r1, [r7, #12]
 8004962:	2100      	movs	r1, #0
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004966:	2100      	movs	r1, #0
 8004968:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4952      	ldr	r1, [pc, #328]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800496c:	6889      	ldr	r1, [r1, #8]
 800496e:	f001 010c 	and.w	r1, r1, #12
 8004972:	2908      	cmp	r1, #8
 8004974:	d00d      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3e>
 8004976:	2908      	cmp	r1, #8
 8004978:	f200 8094 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
 800497c:	2900      	cmp	r1, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x32>
 8004980:	2904      	cmp	r1, #4
 8004982:	d003      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x38>
 8004984:	e08e      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004988:	60bb      	str	r3, [r7, #8]
       break;
 800498a:	e08e      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 800498e:	60bb      	str	r3, [r7, #8]
      break;
 8004990:	e08b      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004992:	4948      	ldr	r1, [pc, #288]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004994:	6849      	ldr	r1, [r1, #4]
 8004996:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800499a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499c:	4945      	ldr	r1, [pc, #276]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800499e:	6849      	ldr	r1, [r1, #4]
 80049a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049a4:	2900      	cmp	r1, #0
 80049a6:	d024      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a8:	4942      	ldr	r1, [pc, #264]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049aa:	6849      	ldr	r1, [r1, #4]
 80049ac:	0989      	lsrs	r1, r1, #6
 80049ae:	4608      	mov	r0, r1
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049b8:	f04f 0500 	mov.w	r5, #0
 80049bc:	ea00 0204 	and.w	r2, r0, r4
 80049c0:	ea01 0305 	and.w	r3, r1, r5
 80049c4:	493d      	ldr	r1, [pc, #244]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 80049c6:	fb01 f003 	mul.w	r0, r1, r3
 80049ca:	2100      	movs	r1, #0
 80049cc:	fb01 f102 	mul.w	r1, r1, r2
 80049d0:	1844      	adds	r4, r0, r1
 80049d2:	493a      	ldr	r1, [pc, #232]	; (8004abc <HAL_RCC_GetSysClockFreq+0x168>)
 80049d4:	fba2 0101 	umull	r0, r1, r2, r1
 80049d8:	1863      	adds	r3, r4, r1
 80049da:	4619      	mov	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f7fb fc4c 	bl	8000280 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e04a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	ea02 0400 	and.w	r4, r2, r0
 8004a0a:	ea03 0501 	and.w	r5, r3, r1
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	014b      	lsls	r3, r1, #5
 8004a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a20:	0142      	lsls	r2, r0, #5
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	1b00      	subs	r0, r0, r4
 8004a28:	eb61 0105 	sbc.w	r1, r1, r5
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3a:	0182      	lsls	r2, r0, #6
 8004a3c:	1a12      	subs	r2, r2, r0
 8004a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	00d9      	lsls	r1, r3, #3
 8004a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a50:	00d0      	lsls	r0, r2, #3
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	1912      	adds	r2, r2, r4
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0299      	lsls	r1, r3, #10
 8004a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6a:	0290      	lsls	r0, r2, #10
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	f7fb fc00 	bl	8000280 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	017d7840 	.word	0x017d7840

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000038 	.word	0x20000038

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	080091b0 	.word	0x080091b0

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b04:	f7ff ffdc 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	080091b0 	.word	0x080091b0

08004b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	220f      	movs	r2, #15
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0203 	and.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_RCC_GetClockConfig+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d035      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bb4:	4b62      	ldr	r3, [pc, #392]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fe fd1d 	bl	80035f8 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fe fd19 	bl	80035f8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e0b0      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd4:	4b5b      	ldr	r3, [pc, #364]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	019a      	lsls	r2, r3, #6
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	071b      	lsls	r3, r3, #28
 8004bec:	4955      	ldr	r1, [pc, #340]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bf4:	4b52      	ldr	r3, [pc, #328]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfa:	f7fe fcfd 	bl	80035f8 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c02:	f7fe fcf9 	bl	80035f8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e090      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c14:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8083 	beq.w	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a43      	ldr	r2, [pc, #268]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3e:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3e      	ldr	r2, [pc, #248]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c56:	f7fe fccf 	bl	80035f8 <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7fe fccb 	bl	80035f8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e062      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c7c:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02f      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d028      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004caa:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d114      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fe fc99 	bl	80035f8 <HAL_GetTick>
 8004cc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fe fc95 	bl	80035f8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e02a      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ee      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf8:	d10d      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	490d      	ldr	r1, [pc, #52]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	608b      	str	r3, [r1, #8]
 8004d14:	e005      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d20:	6093      	str	r3, [r2, #8]
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	4905      	ldr	r1, [pc, #20]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	42470068 	.word	0x42470068
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	42470e40 	.word	0x42470e40

08004d50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e083      	b.n	8004e6a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7f5b      	ldrb	r3, [r3, #29]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd ffaa 	bl	8002ccc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	22ca      	movs	r2, #202	; 0xca
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2253      	movs	r2, #83	; 0x53
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f9fb 	bl	800518a <RTC_EnterInitMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	22ff      	movs	r2, #255	; 0xff
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e05e      	b.n	8004e6a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dbe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6899      	ldr	r1, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68d2      	ldr	r2, [r2, #12]
 8004de6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	041a      	lsls	r2, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10e      	bne.n	8004e38 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f98d 	bl	800513a <HAL_RTC_WaitForSynchro>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e018      	b.n	8004e6a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22ff      	movs	r2, #255	; 0xff
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	7f1b      	ldrb	r3, [r3, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_RTC_SetTime+0x1c>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e0aa      	b.n	8004fe4 <HAL_RTC_SetTime+0x172>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2202      	movs	r2, #2
 8004e98:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d126      	bne.n	8004eee <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f992 	bl	80051e2 <RTC_ByteToBcd2>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f98b 	bl	80051e2 <RTC_ByteToBcd2>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ed0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	789b      	ldrb	r3, [r3, #2]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f983 	bl	80051e2 <RTC_ByteToBcd2>
 8004edc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ede:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	78db      	ldrb	r3, [r3, #3]
 8004ee6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e018      	b.n	8004f20 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2200      	movs	r2, #0
 8004f00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f0e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f14:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ca      	movs	r2, #202	; 0xca
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2253      	movs	r2, #83	; 0x53
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f92a 	bl	800518a <RTC_EnterInitMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2204      	movs	r2, #4
 8004f48:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e047      	b.n	8004fe4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f62:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f72:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d111      	bne.n	8004fce <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8c5 	bl	800513a <HAL_RTC_WaitForSynchro>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e00a      	b.n	8004fe4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	22ff      	movs	r2, #255	; 0xff
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}

08004fec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	7f1b      	ldrb	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_RTC_SetDate+0x1c>
 8005004:	2302      	movs	r3, #2
 8005006:	e094      	b.n	8005132 <HAL_RTC_SetDate+0x146>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2202      	movs	r2, #2
 8005012:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10e      	bne.n	8005038 <HAL_RTC_SetDate+0x4c>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	b2db      	uxtb	r3, r3
 8005030:	330a      	adds	r3, #10
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11c      	bne.n	8005078 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f8cd 	bl	80051e2 <RTC_ByteToBcd2>
 8005048:	4603      	mov	r3, r0
 800504a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f8c6 	bl	80051e2 <RTC_ByteToBcd2>
 8005056:	4603      	mov	r3, r0
 8005058:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800505a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	789b      	ldrb	r3, [r3, #2]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f8be 	bl	80051e2 <RTC_ByteToBcd2>
 8005066:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005068:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e00e      	b.n	8005096 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	78db      	ldrb	r3, [r3, #3]
 800507c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005084:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800508a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	22ca      	movs	r2, #202	; 0xca
 800509c:	625a      	str	r2, [r3, #36]	; 0x24
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2253      	movs	r2, #83	; 0x53
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f86f 	bl	800518a <RTC_EnterInitMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2204      	movs	r2, #4
 80050be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e033      	b.n	8005132 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f81e 	bl	800513a <HAL_RTC_WaitForSynchro>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2204      	movs	r2, #4
 8005110:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e00a      	b.n	8005132 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005130:	2300      	movs	r3, #0
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}

0800513a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005154:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005156:	f7fe fa4f 	bl	80035f8 <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800515c:	e009      	b.n	8005172 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800515e:	f7fe fa4b 	bl	80035f8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800516c:	d901      	bls.n	8005172 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e007      	b.n	8005182 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ee      	beq.n	800515e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d119      	bne.n	80051d8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051ae:	f7fe fa23 	bl	80035f8 <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051b4:	e009      	b.n	80051ca <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051b6:	f7fe fa1f 	bl	80035f8 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c4:	d901      	bls.n	80051ca <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e007      	b.n	80051da <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ee      	beq.n	80051b6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80051f0:	e005      	b.n	80051fe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	3b0a      	subs	r3, #10
 80051fc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b09      	cmp	r3, #9
 8005202:	d8f6      	bhi.n	80051f2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	b2da      	uxtb	r2, r3
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	4313      	orrs	r3, r2
 8005210:	b2db      	uxtb	r3, r3
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e07b      	b.n	8005328 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005240:	d009      	beq.n	8005256 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	61da      	str	r2, [r3, #28]
 8005248:	e005      	b.n	8005256 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fd fd41 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	ea42 0103 	orr.w	r1, r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	f003 0104 	and.w	r1, r3, #4
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	f003 0210 	and.w	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_SPI_Transmit+0x22>
 800534e:	2302      	movs	r3, #2
 8005350:	e126      	b.n	80055a0 <HAL_SPI_Transmit+0x270>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800535a:	f7fe f94d 	bl	80035f8 <HAL_GetTick>
 800535e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d002      	beq.n	8005376 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005370:	2302      	movs	r3, #2
 8005372:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005374:	e10b      	b.n	800558e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Transmit+0x52>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005386:	e102      	b.n	800558e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2203      	movs	r2, #3
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ce:	d10f      	bne.n	80053f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d007      	beq.n	800540e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d14b      	bne.n	80054b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Transmit+0xf6>
 8005420:	8afb      	ldrh	r3, [r7, #22]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d13e      	bne.n	80054a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800544a:	e02b      	b.n	80054a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d112      	bne.n	8005480 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	; 0x36
 800547e:	e011      	b.n	80054a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005480:	f7fe f8ba 	bl	80035f8 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d803      	bhi.n	8005498 <HAL_SPI_Transmit+0x168>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d102      	bne.n	800549e <HAL_SPI_Transmit+0x16e>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054a2:	e074      	b.n	800558e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ce      	bne.n	800544c <HAL_SPI_Transmit+0x11c>
 80054ae:	e04c      	b.n	800554a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Transmit+0x18e>
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d140      	bne.n	8005540 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054e4:	e02c      	b.n	8005540 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d113      	bne.n	800551c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	86da      	strh	r2, [r3, #54]	; 0x36
 800551a:	e011      	b.n	8005540 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551c:	f7fe f86c 	bl	80035f8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d803      	bhi.n	8005534 <HAL_SPI_Transmit+0x204>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d102      	bne.n	800553a <HAL_SPI_Transmit+0x20a>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800553e:	e026      	b.n	800558e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1cd      	bne.n	80054e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fcea 	bl	8005f28 <SPI_EndRxTxTransaction>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e000      	b.n	800558e <HAL_SPI_Transmit+0x25e>
  }

error:
 800558c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800559e:	7ffb      	ldrb	r3, [r7, #31]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c4:	d112      	bne.n	80055ec <HAL_SPI_Receive+0x44>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10e      	bne.n	80055ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2204      	movs	r2, #4
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055d6:	88fa      	ldrh	r2, [r7, #6]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f8f1 	bl	80057ca <HAL_SPI_TransmitReceive>
 80055e8:	4603      	mov	r3, r0
 80055ea:	e0ea      	b.n	80057c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_Receive+0x52>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0e3      	b.n	80057c2 <HAL_SPI_Receive+0x21a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005602:	f7fd fff9 	bl	80035f8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005614:	2302      	movs	r3, #2
 8005616:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005618:	e0ca      	b.n	80057b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_Receive+0x7e>
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800562a:	e0c1      	b.n	80057b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2204      	movs	r2, #4
 8005630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005672:	d10f      	bne.n	8005694 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d007      	beq.n	80056b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d162      	bne.n	8005780 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ba:	e02e      	b.n	800571a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d115      	bne.n	80056f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f103 020c 	add.w	r2, r3, #12
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f4:	e011      	b.n	800571a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f6:	f7fd ff7f 	bl	80035f8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d803      	bhi.n	800570e <HAL_SPI_Receive+0x166>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Receive+0x16c>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005718:	e04a      	b.n	80057b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1cb      	bne.n	80056bc <HAL_SPI_Receive+0x114>
 8005724:	e031      	b.n	800578a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d113      	bne.n	800575c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	b292      	uxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800575a:	e011      	b.n	8005780 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575c:	f7fd ff4c 	bl	80035f8 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d803      	bhi.n	8005774 <HAL_SPI_Receive+0x1cc>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d102      	bne.n	800577a <HAL_SPI_Receive+0x1d2>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800577e:	e017      	b.n	80057b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1cd      	bne.n	8005726 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fb64 	bl	8005e5c <SPI_EndRxTransaction>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
 80057ac:	e000      	b.n	80057b0 <HAL_SPI_Receive+0x208>
  }

error :
 80057ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08c      	sub	sp, #48	; 0x30
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057d8:	2301      	movs	r3, #1
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x26>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e18a      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x33c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f8:	f7fd fefe 	bl	80035f8 <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800580e:	887b      	ldrh	r3, [r7, #2]
 8005810:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005816:	2b01      	cmp	r3, #1
 8005818:	d00f      	beq.n	800583a <HAL_SPI_TransmitReceive+0x70>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005820:	d107      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x68>
 800582a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800582e:	2b04      	cmp	r3, #4
 8005830:	d003      	beq.n	800583a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005838:	e15b      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_SPI_TransmitReceive+0x82>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_SPI_TransmitReceive+0x82>
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005852:	e14e      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b04      	cmp	r3, #4
 800585e:	d003      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2205      	movs	r2, #5
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	887a      	ldrh	r2, [r7, #2]
 800587e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	887a      	ldrh	r2, [r7, #2]
 800588a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d007      	beq.n	80058bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c4:	d178      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x10a>
 80058ce:	8b7b      	ldrh	r3, [r7, #26]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d166      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	881a      	ldrh	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	1c9a      	adds	r2, r3, #2
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f8:	e053      	b.n	80059a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d11b      	bne.n	8005940 <HAL_SPI_TransmitReceive+0x176>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x176>
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d113      	bne.n	8005940 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	881a      	ldrh	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	1c9a      	adds	r2, r3, #2
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d119      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x1b8>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d014      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	b292      	uxth	r2, r2
 8005964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800597e:	2301      	movs	r3, #1
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005982:	f7fd fe39 	bl	80035f8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800598e:	429a      	cmp	r2, r3
 8005990:	d807      	bhi.n	80059a2 <HAL_SPI_TransmitReceive+0x1d8>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d003      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059a0:	e0a7      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1a6      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x130>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1a1      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x130>
 80059b6:	e07c      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x1fc>
 80059c0:	8b7b      	ldrh	r3, [r7, #26]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d16b      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ec:	e057      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11c      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x26c>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d017      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x26c>
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d114      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d119      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x2ae>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d014      	beq.n	8005a78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a78:	f7fd fdbe 	bl	80035f8 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d803      	bhi.n	8005a90 <HAL_SPI_TransmitReceive+0x2c6>
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x2cc>
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a9c:	e029      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1a2      	bne.n	80059ee <HAL_SPI_TransmitReceive+0x224>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d19d      	bne.n	80059ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa36 	bl	8005f28 <SPI_EndRxTxTransaction>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ace:	e010      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	e000      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3730      	adds	r7, #48	; 0x30
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10f      	bne.n	8005b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
    return;
 8005b52:	e0d7      	b.n	8005d04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_SPI_IRQHandler+0x66>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	09db      	lsrs	r3, r3, #7
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
    return;
 8005b74:	e0c6      	b.n	8005d04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10c      	bne.n	8005b9c <HAL_SPI_IRQHandler+0x8c>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80b4 	beq.w	8005d04 <HAL_SPI_IRQHandler+0x1f4>
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80ad 	beq.w	8005d04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	099b      	lsrs	r3, r3, #6
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d023      	beq.n	8005bfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d011      	beq.n	8005be6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f043 0204 	orr.w	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	e00b      	b.n	8005bfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
        return;
 8005bfc:	e082      	b.n	8005d04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d014      	beq.n	8005c34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f043 0201 	orr.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00c      	beq.n	8005c5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f043 0208 	orr.w	r2, r3, #8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d04f      	beq.n	8005d02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_SPI_IRQHandler+0x17e>
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d034      	beq.n	8005cf8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0203 	bic.w	r2, r2, #3
 8005c9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_SPI_IRQHandler+0x1fc>)
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fd feac 	bl	8003a10 <HAL_DMA_Abort_IT>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <HAL_SPI_IRQHandler+0x1fc>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd fe96 	bl	8003a10 <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005cf6:	e003      	b.n	8005d00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f809 	bl	8005d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005cfe:	e000      	b.n	8005d02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d00:	bf00      	nop
    return;
 8005d02:	bf00      	nop
  }
}
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08005d25 	.word	0x08005d25

08005d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff ffe6 	bl	8005d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d5c:	f7fd fc4c 	bl	80035f8 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d6c:	f7fd fc44 	bl	80035f8 <HAL_GetTick>
 8005d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d72:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	015b      	lsls	r3, r3, #5
 8005d78:	0d1b      	lsrs	r3, r3, #20
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d82:	e054      	b.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d050      	beq.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d8c:	f7fd fc34 	bl	80035f8 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d902      	bls.n	8005da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d13d      	bne.n	8005e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d111      	bne.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	d004      	beq.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d107      	bne.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de8:	d10f      	bne.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e017      	b.n	8005e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	bf0c      	ite	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	2300      	movne	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d19b      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000038 	.word	0x20000038

08005e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e70:	d111      	bne.n	8005e96 <SPI_EndRxTransaction+0x3a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7a:	d004      	beq.n	8005e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	d107      	bne.n	8005e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9e:	d12a      	bne.n	8005ef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d012      	beq.n	8005ed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ff49 	bl	8005d4c <SPI_WaitFlagStateUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02d      	beq.n	8005f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e026      	b.n	8005f1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2101      	movs	r1, #1
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff ff36 	bl	8005d4c <SPI_WaitFlagStateUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01a      	beq.n	8005f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e013      	b.n	8005f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2101      	movs	r1, #1
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ff23 	bl	8005d4c <SPI_WaitFlagStateUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e000      	b.n	8005f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <SPI_EndRxTxTransaction+0x7c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <SPI_EndRxTxTransaction+0x80>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0d5b      	lsrs	r3, r3, #21
 8005f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f44:	fb02 f303 	mul.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d112      	bne.n	8005f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff fef4 	bl	8005d4c <SPI_WaitFlagStateUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d016      	beq.n	8005f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e00f      	b.n	8005f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d0f2      	beq.n	8005f7a <SPI_EndRxTxTransaction+0x52>
 8005f94:	e000      	b.n	8005f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f96:	bf00      	nop
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000038 	.word	0x20000038
 8005fa8:	165e9f81 	.word	0x165e9f81

08005fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e041      	b.n	8006042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc ff46 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f000 fad4 	bl	8006598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d001      	beq.n	8006064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e04e      	b.n	8006102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <HAL_TIM_Base_Start_IT+0xc4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608e:	d01d      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_TIM_Base_Start_IT+0xc8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_TIM_Base_Start_IT+0xcc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <HAL_TIM_Base_Start_IT+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_TIM_Base_Start_IT+0xd4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_TIM_Base_Start_IT+0xd8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x80>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d111      	bne.n	80060f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b06      	cmp	r3, #6
 80060dc:	d010      	beq.n	8006100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	e007      	b.n	8006100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40001800 	.word	0x40001800

0800612c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d122      	bne.n	8006188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11b      	bne.n	8006188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0202 	mvn.w	r2, #2
 8006158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9f4 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9e6 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f9f7 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d122      	bne.n	80061dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d11b      	bne.n	80061dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0204 	mvn.w	r2, #4
 80061ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9ca 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9bc 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9cd 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d122      	bne.n	8006230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d11b      	bne.n	8006230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0208 	mvn.w	r2, #8
 8006200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2204      	movs	r2, #4
 8006206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9a0 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f992 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f9a3 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b10      	cmp	r3, #16
 800623c:	d122      	bne.n	8006284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b10      	cmp	r3, #16
 800624a:	d11b      	bne.n	8006284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0210 	mvn.w	r2, #16
 8006254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2208      	movs	r2, #8
 800625a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f976 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006270:	e005      	b.n	800627e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f968 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f979 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0201 	mvn.w	r2, #1
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc fcce 	bl	8002c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d10e      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d107      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fbac 	bl	8006a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f93e 	bl	8006584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b20      	cmp	r3, #32
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b20      	cmp	r3, #32
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0220 	mvn.w	r2, #32
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb76 	bl	8006a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIM_ConfigClockSource+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e0b3      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x180>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638c:	d03e      	beq.n	800640c <HAL_TIM_ConfigClockSource+0xd0>
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	f200 8087 	bhi.w	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639a:	f000 8085 	beq.w	80064a8 <HAL_TIM_ConfigClockSource+0x16c>
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	d87f      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d01a      	beq.n	80063de <HAL_TIM_ConfigClockSource+0xa2>
 80063a8:	2b70      	cmp	r3, #112	; 0x70
 80063aa:	d87b      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d050      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x116>
 80063b0:	2b60      	cmp	r3, #96	; 0x60
 80063b2:	d877      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d03c      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0xf6>
 80063b8:	2b50      	cmp	r3, #80	; 0x50
 80063ba:	d873      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d058      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x136>
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	d86f      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d064      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x156>
 80063c8:	2b30      	cmp	r3, #48	; 0x30
 80063ca:	d86b      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d060      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x156>
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d867      	bhi.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05c      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x156>
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d05a      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063dc:	e062      	b.n	80064a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6899      	ldr	r1, [r3, #8]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f000 fa7b 	bl	80068e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006400:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
      break;
 800640a:	e04e      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6899      	ldr	r1, [r3, #8]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f000 fa64 	bl	80068e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642e:	609a      	str	r2, [r3, #8]
      break;
 8006430:	e03b      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f000 f9d8 	bl	80067f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2150      	movs	r1, #80	; 0x50
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fa31 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8006450:	e02b      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6859      	ldr	r1, [r3, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	461a      	mov	r2, r3
 8006460:	f000 f9f7 	bl	8006852 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2160      	movs	r1, #96	; 0x60
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa21 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8006470:	e01b      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	461a      	mov	r2, r3
 8006480:	f000 f9b8 	bl	80067f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2140      	movs	r1, #64	; 0x40
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa11 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8006490:	e00b      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f000 fa08 	bl	80068b2 <TIM_ITRx_SetConfig>
        break;
 80064a2:	e002      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e031      	b.n	8006540 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8f2 	bl	80066d8 <TIM_SlaveTimer_SetConfig>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e018      	b.n	8006540 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800652c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a40      	ldr	r2, [pc, #256]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d00f      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3c      	ldr	r2, [pc, #240]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3b      	ldr	r2, [pc, #236]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <TIM_Base_SetConfig+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d108      	bne.n	80065ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d027      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d023      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a29      	ldr	r2, [pc, #164]	; (80066bc <TIM_Base_SetConfig+0x124>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d017      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a28      	ldr	r2, [pc, #160]	; (80066c0 <TIM_Base_SetConfig+0x128>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <TIM_Base_SetConfig+0x12c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a26      	ldr	r2, [pc, #152]	; (80066c8 <TIM_Base_SetConfig+0x130>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a25      	ldr	r2, [pc, #148]	; (80066cc <TIM_Base_SetConfig+0x134>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <TIM_Base_SetConfig+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <TIM_Base_SetConfig+0x13c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <TIM_Base_SetConfig+0x114>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <TIM_Base_SetConfig+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d103      	bne.n	8006698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	615a      	str	r2, [r3, #20]
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40000c00 	.word	0x40000c00
 80066bc:	40010400 	.word	0x40010400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40001800 	.word	0x40001800
 80066d0:	40001c00 	.word	0x40001c00
 80066d4:	40002000 	.word	0x40002000

080066d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0307 	bic.w	r3, r3, #7
 8006702:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b70      	cmp	r3, #112	; 0x70
 800671c:	d01a      	beq.n	8006754 <TIM_SlaveTimer_SetConfig+0x7c>
 800671e:	2b70      	cmp	r3, #112	; 0x70
 8006720:	d860      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8006722:	2b60      	cmp	r3, #96	; 0x60
 8006724:	d054      	beq.n	80067d0 <TIM_SlaveTimer_SetConfig+0xf8>
 8006726:	2b60      	cmp	r3, #96	; 0x60
 8006728:	d85c      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800672a:	2b50      	cmp	r3, #80	; 0x50
 800672c:	d046      	beq.n	80067bc <TIM_SlaveTimer_SetConfig+0xe4>
 800672e:	2b50      	cmp	r3, #80	; 0x50
 8006730:	d858      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d019      	beq.n	800676a <TIM_SlaveTimer_SetConfig+0x92>
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d854      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800673a:	2b30      	cmp	r3, #48	; 0x30
 800673c:	d054      	beq.n	80067e8 <TIM_SlaveTimer_SetConfig+0x110>
 800673e:	2b30      	cmp	r3, #48	; 0x30
 8006740:	d850      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8006742:	2b20      	cmp	r3, #32
 8006744:	d050      	beq.n	80067e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006746:	2b20      	cmp	r3, #32
 8006748:	d84c      	bhi.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d04c      	beq.n	80067e8 <TIM_SlaveTimer_SetConfig+0x110>
 800674e:	2b10      	cmp	r3, #16
 8006750:	d04a      	beq.n	80067e8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006752:	e047      	b.n	80067e4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68d9      	ldr	r1, [r3, #12]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f000 f8c0 	bl	80068e8 <TIM_ETR_SetConfig>
      break;
 8006768:	e03f      	b.n	80067ea <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b05      	cmp	r3, #5
 8006770:	d101      	bne.n	8006776 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e03a      	b.n	80067ec <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800679c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
      break;
 80067ba:	e016      	b.n	80067ea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	461a      	mov	r2, r3
 80067ca:	f000 f813 	bl	80067f4 <TIM_TI1_ConfigInputStage>
      break;
 80067ce:	e00c      	b.n	80067ea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6899      	ldr	r1, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	461a      	mov	r2, r3
 80067de:	f000 f838 	bl	8006852 <TIM_TI2_ConfigInputStage>
      break;
 80067e2:	e002      	b.n	80067ea <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80067e8:	bf00      	nop
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800681e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f023 030a 	bic.w	r3, r3, #10
 8006830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006852:	b480      	push	{r7}
 8006854:	b087      	sub	sp, #28
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f023 0210 	bic.w	r2, r3, #16
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800687c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800688e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f043 0307 	orr.w	r3, r3, #7
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	431a      	orrs	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	609a      	str	r2, [r3, #8]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800693c:	2302      	movs	r3, #2
 800693e:	e05a      	b.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d022      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698c:	d01d      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d10c      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40010400 	.word	0x40010400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40001800 	.word	0x40001800

08006a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e03f      	b.n	8006ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fc fa36 	bl	8002ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	; 0x24
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc7b 	bl	8007388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b08a      	sub	sp, #40	; 0x28
 8006ae6:	af02      	add	r7, sp, #8
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4613      	mov	r3, r2
 8006af0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d17c      	bne.n	8006bfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_Transmit+0x2c>
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e075      	b.n	8006bfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Transmit+0x3e>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e06e      	b.n	8006bfe <HAL_UART_Transmit+0x11c>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2221      	movs	r2, #33	; 0x21
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b36:	f7fc fd5f 	bl	80035f8 <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	88fa      	ldrh	r2, [r7, #6]
 8006b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b50:	d108      	bne.n	8006b64 <HAL_UART_Transmit+0x82>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	e003      	b.n	8006b6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b74:	e02a      	b.n	8006bcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fa3d 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e036      	b.n	8006bfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	e007      	b.n	8006bbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1cf      	bne.n	8006b76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2140      	movs	r1, #64	; 0x40
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fa0d 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e006      	b.n	8006bfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e000      	b.n	8006bfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bfc:	2302      	movs	r3, #2
  }
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	4613      	mov	r3, r2
 8006c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d11d      	bne.n	8006c5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_UART_Receive_IT+0x26>
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e016      	b.n	8006c5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Receive_IT+0x38>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e00f      	b.n	8006c5e <HAL_UART_Receive_IT+0x58>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fa1e 	bl	8007094 <UART_Start_Receive_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	e000      	b.n	8006c5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_UART_IRQHandler+0x52>
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fad1 	bl	800725a <UART_Receive_IT>
      return;
 8006cb8:	e17c      	b.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80b1 	beq.w	8006e24 <HAL_UART_IRQHandler+0x1bc>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x70>
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80a6 	beq.w	8006e24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x90>
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_UART_IRQHandler+0xb0>
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f043 0202 	orr.w	r2, r3, #2
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_UART_IRQHandler+0xd0>
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f043 0204 	orr.w	r2, r3, #4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <HAL_UART_IRQHandler+0xfa>
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_UART_IRQHandler+0xee>
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f043 0208 	orr.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 811f 	beq.w	8006faa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <HAL_UART_IRQHandler+0x11e>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa6a 	bl	800725a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	bf0c      	ite	eq
 8006d94:	2301      	moveq	r3, #1
 8006d96:	2300      	movne	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <HAL_UART_IRQHandler+0x146>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d031      	beq.n	8006e12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9aa 	bl	8007108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d123      	bne.n	8006e0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695a      	ldr	r2, [r3, #20]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d013      	beq.n	8006e02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	4a77      	ldr	r2, [pc, #476]	; (8006fbc <HAL_UART_IRQHandler+0x354>)
 8006de0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fc fe12 	bl	8003a10 <HAL_DMA_Abort_IT>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d016      	beq.n	8006e20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e00:	e00e      	b.n	8006e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f8e6 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	e00a      	b.n	8006e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8e2 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e006      	b.n	8006e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8de 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e1e:	e0c4      	b.n	8006faa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	bf00      	nop
    return;
 8006e22:	e0c2      	b.n	8006faa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	f040 80a2 	bne.w	8006f72 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 809c 	beq.w	8006f72 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8096 	beq.w	8006f72 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d14f      	bne.n	8006f0a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006e74:	8a3b      	ldrh	r3, [r7, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8099 	beq.w	8006fae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e80:	8a3a      	ldrh	r2, [r7, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	f080 8093 	bcs.w	8006fae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8a3a      	ldrh	r2, [r7, #16]
 8006e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e98:	d02b      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0210 	bic.w	r2, r2, #16
 8006ee6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fc fd1f 	bl	8003930 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f870 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f08:	e051      	b.n	8006fae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d047      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006f22:	8a7b      	ldrh	r3, [r7, #18]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d044      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f36:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0210 	bic.w	r2, r2, #16
 8006f64:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f66:	8a7b      	ldrh	r3, [r7, #18]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f83c 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f70:	e01f      	b.n	8006fb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_UART_IRQHandler+0x326>
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8ff 	bl	800718a <UART_Transmit_IT>
    return;
 8006f8c:	e012      	b.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f941 	bl	800722a <UART_EndTransmit_IT>
    return;
 8006fa8:	e004      	b.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
    return;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006fb2:	bf00      	nop
  }
}
 8006fb4:	3728      	adds	r7, #40	; 0x28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	08007163 	.word	0x08007163

08006fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e02c      	b.n	800706c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d028      	beq.n	800706c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 8007020:	f7fc faea 	bl	80035f8 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	429a      	cmp	r2, r3
 800702e:	d21d      	bcs.n	800706c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800703e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e00f      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	429a      	cmp	r2, r3
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	429a      	cmp	r2, r3
 8007088:	d0c3      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2222      	movs	r2, #34	; 0x22
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695a      	ldr	r2, [r3, #20]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0220 	orr.w	r2, r2, #32
 80070f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800711e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	2b01      	cmp	r3, #1
 8007136:	d107      	bne.n	8007148 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0210 	bic.w	r2, r2, #16
 8007146:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff ff29 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b21      	cmp	r3, #33	; 0x21
 800719c:	d13e      	bne.n	800721c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d114      	bne.n	80071d2 <UART_Transmit_IT+0x48>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d110      	bne.n	80071d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	1c9a      	adds	r2, r3, #2
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	621a      	str	r2, [r3, #32]
 80071d0:	e008      	b.n	80071e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6211      	str	r1, [r2, #32]
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4619      	mov	r1, r3
 80071f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10f      	bne.n	8007218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff feb8 	bl	8006fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b22      	cmp	r3, #34	; 0x22
 800726c:	f040 8087 	bne.w	800737e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d117      	bne.n	80072aa <UART_Receive_IT+0x50>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d113      	bne.n	80072aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007298:	b29a      	uxth	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	1c9a      	adds	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
 80072a8:	e026      	b.n	80072f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072bc:	d007      	beq.n	80072ce <UART_Receive_IT+0x74>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <UART_Receive_IT+0x82>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	e008      	b.n	80072ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4619      	mov	r1, r3
 8007306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007308:	2b00      	cmp	r3, #0
 800730a:	d136      	bne.n	800737a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0220 	bic.w	r2, r2, #32
 800731a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800732a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695a      	ldr	r2, [r3, #20]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10e      	bne.n	800736a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0210 	bic.w	r2, r2, #16
 800735a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff fe40 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
 8007368:	e002      	b.n	8007370 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fa faaa 	bl	80018c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	e002      	b.n	8007380 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800737e:	2302      	movs	r3, #2
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	b09f      	sub	sp, #124	; 0x7c
 800738e:	af00      	add	r7, sp, #0
 8007390:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	68d9      	ldr	r1, [r3, #12]
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	ea40 0301 	orr.w	r3, r0, r1
 80073a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	4313      	orrs	r3, r2
 80073c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80073c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073cc:	f021 010c 	bic.w	r1, r1, #12
 80073d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d6:	430b      	orrs	r3, r1
 80073d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	6999      	ldr	r1, [r3, #24]
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	ea40 0301 	orr.w	r3, r0, r1
 80073f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4bc5      	ldr	r3, [pc, #788]	; (800770c <UART_SetConfig+0x384>)
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d004      	beq.n	8007406 <UART_SetConfig+0x7e>
 80073fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	4bc3      	ldr	r3, [pc, #780]	; (8007710 <UART_SetConfig+0x388>)
 8007402:	429a      	cmp	r2, r3
 8007404:	d103      	bne.n	800740e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007406:	f7fd fb7b 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 800740a:	6778      	str	r0, [r7, #116]	; 0x74
 800740c:	e002      	b.n	8007414 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800740e:	f7fd fb63 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8007412:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741c:	f040 80b6 	bne.w	800758c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007422:	461c      	mov	r4, r3
 8007424:	f04f 0500 	mov.w	r5, #0
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	1891      	adds	r1, r2, r2
 800742e:	6439      	str	r1, [r7, #64]	; 0x40
 8007430:	415b      	adcs	r3, r3
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007438:	1912      	adds	r2, r2, r4
 800743a:	eb45 0303 	adc.w	r3, r5, r3
 800743e:	f04f 0000 	mov.w	r0, #0
 8007442:	f04f 0100 	mov.w	r1, #0
 8007446:	00d9      	lsls	r1, r3, #3
 8007448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800744c:	00d0      	lsls	r0, r2, #3
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	1911      	adds	r1, r2, r4
 8007454:	6639      	str	r1, [r7, #96]	; 0x60
 8007456:	416b      	adcs	r3, r5
 8007458:	667b      	str	r3, [r7, #100]	; 0x64
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	461a      	mov	r2, r3
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	1891      	adds	r1, r2, r2
 8007466:	63b9      	str	r1, [r7, #56]	; 0x38
 8007468:	415b      	adcs	r3, r3
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800746c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007470:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007474:	f7f8 ff04 	bl	8000280 <__aeabi_uldivmod>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4ba5      	ldr	r3, [pc, #660]	; (8007714 <UART_SetConfig+0x38c>)
 800747e:	fba3 2302 	umull	r2, r3, r3, r2
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	011e      	lsls	r6, r3, #4
 8007486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007488:	461c      	mov	r4, r3
 800748a:	f04f 0500 	mov.w	r5, #0
 800748e:	4622      	mov	r2, r4
 8007490:	462b      	mov	r3, r5
 8007492:	1891      	adds	r1, r2, r2
 8007494:	6339      	str	r1, [r7, #48]	; 0x30
 8007496:	415b      	adcs	r3, r3
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
 800749a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800749e:	1912      	adds	r2, r2, r4
 80074a0:	eb45 0303 	adc.w	r3, r5, r3
 80074a4:	f04f 0000 	mov.w	r0, #0
 80074a8:	f04f 0100 	mov.w	r1, #0
 80074ac:	00d9      	lsls	r1, r3, #3
 80074ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074b2:	00d0      	lsls	r0, r2, #3
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	1911      	adds	r1, r2, r4
 80074ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80074bc:	416b      	adcs	r3, r5
 80074be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	461a      	mov	r2, r3
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	1891      	adds	r1, r2, r2
 80074cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80074ce:	415b      	adcs	r3, r3
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80074da:	f7f8 fed1 	bl	8000280 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4b8c      	ldr	r3, [pc, #560]	; (8007714 <UART_SetConfig+0x38c>)
 80074e4:	fba3 1302 	umull	r1, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2164      	movs	r1, #100	; 0x64
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3332      	adds	r3, #50	; 0x32
 80074f6:	4a87      	ldr	r2, [pc, #540]	; (8007714 <UART_SetConfig+0x38c>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007504:	441e      	add	r6, r3
 8007506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007508:	4618      	mov	r0, r3
 800750a:	f04f 0100 	mov.w	r1, #0
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	1894      	adds	r4, r2, r2
 8007514:	623c      	str	r4, [r7, #32]
 8007516:	415b      	adcs	r3, r3
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
 800751a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800751e:	1812      	adds	r2, r2, r0
 8007520:	eb41 0303 	adc.w	r3, r1, r3
 8007524:	f04f 0400 	mov.w	r4, #0
 8007528:	f04f 0500 	mov.w	r5, #0
 800752c:	00dd      	lsls	r5, r3, #3
 800752e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007532:	00d4      	lsls	r4, r2, #3
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	1814      	adds	r4, r2, r0
 800753a:	653c      	str	r4, [r7, #80]	; 0x50
 800753c:	414b      	adcs	r3, r1
 800753e:	657b      	str	r3, [r7, #84]	; 0x54
 8007540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	1891      	adds	r1, r2, r2
 800754c:	61b9      	str	r1, [r7, #24]
 800754e:	415b      	adcs	r3, r3
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007556:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800755a:	f7f8 fe91 	bl	8000280 <__aeabi_uldivmod>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <UART_SetConfig+0x38c>)
 8007564:	fba3 1302 	umull	r1, r3, r3, r2
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	2164      	movs	r1, #100	; 0x64
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	3332      	adds	r3, #50	; 0x32
 8007576:	4a67      	ldr	r2, [pc, #412]	; (8007714 <UART_SetConfig+0x38c>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	f003 0207 	and.w	r2, r3, #7
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4432      	add	r2, r6
 8007588:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800758a:	e0b9      	b.n	8007700 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800758c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800758e:	461c      	mov	r4, r3
 8007590:	f04f 0500 	mov.w	r5, #0
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	1891      	adds	r1, r2, r2
 800759a:	6139      	str	r1, [r7, #16]
 800759c:	415b      	adcs	r3, r3
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075a4:	1912      	adds	r2, r2, r4
 80075a6:	eb45 0303 	adc.w	r3, r5, r3
 80075aa:	f04f 0000 	mov.w	r0, #0
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	00d9      	lsls	r1, r3, #3
 80075b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075b8:	00d0      	lsls	r0, r2, #3
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	eb12 0804 	adds.w	r8, r2, r4
 80075c2:	eb43 0905 	adc.w	r9, r3, r5
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f04f 0100 	mov.w	r1, #0
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	008b      	lsls	r3, r1, #2
 80075da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075de:	0082      	lsls	r2, r0, #2
 80075e0:	4640      	mov	r0, r8
 80075e2:	4649      	mov	r1, r9
 80075e4:	f7f8 fe4c 	bl	8000280 <__aeabi_uldivmod>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4b49      	ldr	r3, [pc, #292]	; (8007714 <UART_SetConfig+0x38c>)
 80075ee:	fba3 2302 	umull	r2, r3, r3, r2
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	011e      	lsls	r6, r3, #4
 80075f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f8:	4618      	mov	r0, r3
 80075fa:	f04f 0100 	mov.w	r1, #0
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	1894      	adds	r4, r2, r2
 8007604:	60bc      	str	r4, [r7, #8]
 8007606:	415b      	adcs	r3, r3
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800760e:	1812      	adds	r2, r2, r0
 8007610:	eb41 0303 	adc.w	r3, r1, r3
 8007614:	f04f 0400 	mov.w	r4, #0
 8007618:	f04f 0500 	mov.w	r5, #0
 800761c:	00dd      	lsls	r5, r3, #3
 800761e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007622:	00d4      	lsls	r4, r2, #3
 8007624:	4622      	mov	r2, r4
 8007626:	462b      	mov	r3, r5
 8007628:	1814      	adds	r4, r2, r0
 800762a:	64bc      	str	r4, [r7, #72]	; 0x48
 800762c:	414b      	adcs	r3, r1
 800762e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	008b      	lsls	r3, r1, #2
 8007644:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007648:	0082      	lsls	r2, r0, #2
 800764a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800764e:	f7f8 fe17 	bl	8000280 <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <UART_SetConfig+0x38c>)
 8007658:	fba3 1302 	umull	r1, r3, r3, r2
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	2164      	movs	r1, #100	; 0x64
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	3332      	adds	r3, #50	; 0x32
 800766a:	4a2a      	ldr	r2, [pc, #168]	; (8007714 <UART_SetConfig+0x38c>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007676:	441e      	add	r6, r3
 8007678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767a:	4618      	mov	r0, r3
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	1894      	adds	r4, r2, r2
 8007686:	603c      	str	r4, [r7, #0]
 8007688:	415b      	adcs	r3, r3
 800768a:	607b      	str	r3, [r7, #4]
 800768c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007690:	1812      	adds	r2, r2, r0
 8007692:	eb41 0303 	adc.w	r3, r1, r3
 8007696:	f04f 0400 	mov.w	r4, #0
 800769a:	f04f 0500 	mov.w	r5, #0
 800769e:	00dd      	lsls	r5, r3, #3
 80076a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076a4:	00d4      	lsls	r4, r2, #3
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	eb12 0a00 	adds.w	sl, r2, r0
 80076ae:	eb43 0b01 	adc.w	fp, r3, r1
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f04f 0100 	mov.w	r1, #0
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076ca:	0082      	lsls	r2, r0, #2
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	f7f8 fdd6 	bl	8000280 <__aeabi_uldivmod>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <UART_SetConfig+0x38c>)
 80076da:	fba3 1302 	umull	r1, r3, r3, r2
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	2164      	movs	r1, #100	; 0x64
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	3332      	adds	r3, #50	; 0x32
 80076ec:	4a09      	ldr	r2, [pc, #36]	; (8007714 <UART_SetConfig+0x38c>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	f003 020f 	and.w	r2, r3, #15
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4432      	add	r2, r6
 80076fe:	609a      	str	r2, [r3, #8]
}
 8007700:	bf00      	nop
 8007702:	377c      	adds	r7, #124	; 0x7c
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	bf00      	nop
 800770c:	40011000 	.word	0x40011000
 8007710:	40011400 	.word	0x40011400
 8007714:	51eb851f 	.word	0x51eb851f

08007718 <__errno>:
 8007718:	4b01      	ldr	r3, [pc, #4]	; (8007720 <__errno+0x8>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000044 	.word	0x20000044

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	4d0d      	ldr	r5, [pc, #52]	; (800775c <__libc_init_array+0x38>)
 8007728:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772a:	1b64      	subs	r4, r4, r5
 800772c:	10a4      	asrs	r4, r4, #2
 800772e:	2600      	movs	r6, #0
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	4d0b      	ldr	r5, [pc, #44]	; (8007764 <__libc_init_array+0x40>)
 8007736:	4c0c      	ldr	r4, [pc, #48]	; (8007768 <__libc_init_array+0x44>)
 8007738:	f001 fa24 	bl	8008b84 <_init>
 800773c:	1b64      	subs	r4, r4, r5
 800773e:	10a4      	asrs	r4, r4, #2
 8007740:	2600      	movs	r6, #0
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08009260 	.word	0x08009260
 8007760:	08009260 	.word	0x08009260
 8007764:	08009260 	.word	0x08009260
 8007768:	08009264 	.word	0x08009264

0800776c <malloc>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <malloc+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f000 b869 	b.w	8007848 <_malloc_r>
 8007776:	bf00      	nop
 8007778:	20000044 	.word	0x20000044

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <memset>:
 8007798:	4402      	add	r2, r0
 800779a:	4603      	mov	r3, r0
 800779c:	4293      	cmp	r3, r2
 800779e:	d100      	bne.n	80077a2 <memset+0xa>
 80077a0:	4770      	bx	lr
 80077a2:	f803 1b01 	strb.w	r1, [r3], #1
 80077a6:	e7f9      	b.n	800779c <memset+0x4>

080077a8 <_free_r>:
 80077a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077aa:	2900      	cmp	r1, #0
 80077ac:	d048      	beq.n	8007840 <_free_r+0x98>
 80077ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b2:	9001      	str	r0, [sp, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f1a1 0404 	sub.w	r4, r1, #4
 80077ba:	bfb8      	it	lt
 80077bc:	18e4      	addlt	r4, r4, r3
 80077be:	f000 fcc7 	bl	8008150 <__malloc_lock>
 80077c2:	4a20      	ldr	r2, [pc, #128]	; (8007844 <_free_r+0x9c>)
 80077c4:	9801      	ldr	r0, [sp, #4]
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	4615      	mov	r5, r2
 80077ca:	b933      	cbnz	r3, 80077da <_free_r+0x32>
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	6014      	str	r4, [r2, #0]
 80077d0:	b003      	add	sp, #12
 80077d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d6:	f000 bcc1 	b.w	800815c <__malloc_unlock>
 80077da:	42a3      	cmp	r3, r4
 80077dc:	d90b      	bls.n	80077f6 <_free_r+0x4e>
 80077de:	6821      	ldr	r1, [r4, #0]
 80077e0:	1862      	adds	r2, r4, r1
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bf04      	itt	eq
 80077e6:	681a      	ldreq	r2, [r3, #0]
 80077e8:	685b      	ldreq	r3, [r3, #4]
 80077ea:	6063      	str	r3, [r4, #4]
 80077ec:	bf04      	itt	eq
 80077ee:	1852      	addeq	r2, r2, r1
 80077f0:	6022      	streq	r2, [r4, #0]
 80077f2:	602c      	str	r4, [r5, #0]
 80077f4:	e7ec      	b.n	80077d0 <_free_r+0x28>
 80077f6:	461a      	mov	r2, r3
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	b10b      	cbz	r3, 8007800 <_free_r+0x58>
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	d9fa      	bls.n	80077f6 <_free_r+0x4e>
 8007800:	6811      	ldr	r1, [r2, #0]
 8007802:	1855      	adds	r5, r2, r1
 8007804:	42a5      	cmp	r5, r4
 8007806:	d10b      	bne.n	8007820 <_free_r+0x78>
 8007808:	6824      	ldr	r4, [r4, #0]
 800780a:	4421      	add	r1, r4
 800780c:	1854      	adds	r4, r2, r1
 800780e:	42a3      	cmp	r3, r4
 8007810:	6011      	str	r1, [r2, #0]
 8007812:	d1dd      	bne.n	80077d0 <_free_r+0x28>
 8007814:	681c      	ldr	r4, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	6053      	str	r3, [r2, #4]
 800781a:	4421      	add	r1, r4
 800781c:	6011      	str	r1, [r2, #0]
 800781e:	e7d7      	b.n	80077d0 <_free_r+0x28>
 8007820:	d902      	bls.n	8007828 <_free_r+0x80>
 8007822:	230c      	movs	r3, #12
 8007824:	6003      	str	r3, [r0, #0]
 8007826:	e7d3      	b.n	80077d0 <_free_r+0x28>
 8007828:	6825      	ldr	r5, [r4, #0]
 800782a:	1961      	adds	r1, r4, r5
 800782c:	428b      	cmp	r3, r1
 800782e:	bf04      	itt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	bf04      	itt	eq
 8007838:	1949      	addeq	r1, r1, r5
 800783a:	6021      	streq	r1, [r4, #0]
 800783c:	6054      	str	r4, [r2, #4]
 800783e:	e7c7      	b.n	80077d0 <_free_r+0x28>
 8007840:	b003      	add	sp, #12
 8007842:	bd30      	pop	{r4, r5, pc}
 8007844:	200000e4 	.word	0x200000e4

08007848 <_malloc_r>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	1ccd      	adds	r5, r1, #3
 800784c:	f025 0503 	bic.w	r5, r5, #3
 8007850:	3508      	adds	r5, #8
 8007852:	2d0c      	cmp	r5, #12
 8007854:	bf38      	it	cc
 8007856:	250c      	movcc	r5, #12
 8007858:	2d00      	cmp	r5, #0
 800785a:	4606      	mov	r6, r0
 800785c:	db01      	blt.n	8007862 <_malloc_r+0x1a>
 800785e:	42a9      	cmp	r1, r5
 8007860:	d903      	bls.n	800786a <_malloc_r+0x22>
 8007862:	230c      	movs	r3, #12
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	2000      	movs	r0, #0
 8007868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786a:	f000 fc71 	bl	8008150 <__malloc_lock>
 800786e:	4921      	ldr	r1, [pc, #132]	; (80078f4 <_malloc_r+0xac>)
 8007870:	680a      	ldr	r2, [r1, #0]
 8007872:	4614      	mov	r4, r2
 8007874:	b99c      	cbnz	r4, 800789e <_malloc_r+0x56>
 8007876:	4f20      	ldr	r7, [pc, #128]	; (80078f8 <_malloc_r+0xb0>)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	b923      	cbnz	r3, 8007886 <_malloc_r+0x3e>
 800787c:	4621      	mov	r1, r4
 800787e:	4630      	mov	r0, r6
 8007880:	f000 f8e0 	bl	8007a44 <_sbrk_r>
 8007884:	6038      	str	r0, [r7, #0]
 8007886:	4629      	mov	r1, r5
 8007888:	4630      	mov	r0, r6
 800788a:	f000 f8db 	bl	8007a44 <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d123      	bne.n	80078da <_malloc_r+0x92>
 8007892:	230c      	movs	r3, #12
 8007894:	6033      	str	r3, [r6, #0]
 8007896:	4630      	mov	r0, r6
 8007898:	f000 fc60 	bl	800815c <__malloc_unlock>
 800789c:	e7e3      	b.n	8007866 <_malloc_r+0x1e>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	1b5b      	subs	r3, r3, r5
 80078a2:	d417      	bmi.n	80078d4 <_malloc_r+0x8c>
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	d903      	bls.n	80078b0 <_malloc_r+0x68>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	441c      	add	r4, r3
 80078ac:	6025      	str	r5, [r4, #0]
 80078ae:	e004      	b.n	80078ba <_malloc_r+0x72>
 80078b0:	6863      	ldr	r3, [r4, #4]
 80078b2:	42a2      	cmp	r2, r4
 80078b4:	bf0c      	ite	eq
 80078b6:	600b      	streq	r3, [r1, #0]
 80078b8:	6053      	strne	r3, [r2, #4]
 80078ba:	4630      	mov	r0, r6
 80078bc:	f000 fc4e 	bl	800815c <__malloc_unlock>
 80078c0:	f104 000b 	add.w	r0, r4, #11
 80078c4:	1d23      	adds	r3, r4, #4
 80078c6:	f020 0007 	bic.w	r0, r0, #7
 80078ca:	1ac2      	subs	r2, r0, r3
 80078cc:	d0cc      	beq.n	8007868 <_malloc_r+0x20>
 80078ce:	1a1b      	subs	r3, r3, r0
 80078d0:	50a3      	str	r3, [r4, r2]
 80078d2:	e7c9      	b.n	8007868 <_malloc_r+0x20>
 80078d4:	4622      	mov	r2, r4
 80078d6:	6864      	ldr	r4, [r4, #4]
 80078d8:	e7cc      	b.n	8007874 <_malloc_r+0x2c>
 80078da:	1cc4      	adds	r4, r0, #3
 80078dc:	f024 0403 	bic.w	r4, r4, #3
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d0e3      	beq.n	80078ac <_malloc_r+0x64>
 80078e4:	1a21      	subs	r1, r4, r0
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f8ac 	bl	8007a44 <_sbrk_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d1dd      	bne.n	80078ac <_malloc_r+0x64>
 80078f0:	e7cf      	b.n	8007892 <_malloc_r+0x4a>
 80078f2:	bf00      	nop
 80078f4:	200000e4 	.word	0x200000e4
 80078f8:	200000e8 	.word	0x200000e8

080078fc <iprintf>:
 80078fc:	b40f      	push	{r0, r1, r2, r3}
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <iprintf+0x2c>)
 8007900:	b513      	push	{r0, r1, r4, lr}
 8007902:	681c      	ldr	r4, [r3, #0]
 8007904:	b124      	cbz	r4, 8007910 <iprintf+0x14>
 8007906:	69a3      	ldr	r3, [r4, #24]
 8007908:	b913      	cbnz	r3, 8007910 <iprintf+0x14>
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fb0a 	bl	8007f24 <__sinit>
 8007910:	ab05      	add	r3, sp, #20
 8007912:	9a04      	ldr	r2, [sp, #16]
 8007914:	68a1      	ldr	r1, [r4, #8]
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fdab 	bl	8008474 <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007924:	b004      	add	sp, #16
 8007926:	4770      	bx	lr
 8007928:	20000044 	.word	0x20000044

0800792c <putchar>:
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <putchar+0x28>)
 800792e:	b513      	push	{r0, r1, r4, lr}
 8007930:	681c      	ldr	r4, [r3, #0]
 8007932:	4601      	mov	r1, r0
 8007934:	b134      	cbz	r4, 8007944 <putchar+0x18>
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	b923      	cbnz	r3, 8007944 <putchar+0x18>
 800793a:	9001      	str	r0, [sp, #4]
 800793c:	4620      	mov	r0, r4
 800793e:	f000 faf1 	bl	8007f24 <__sinit>
 8007942:	9901      	ldr	r1, [sp, #4]
 8007944:	68a2      	ldr	r2, [r4, #8]
 8007946:	4620      	mov	r0, r4
 8007948:	b002      	add	sp, #8
 800794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794e:	f001 b855 	b.w	80089fc <_putc_r>
 8007952:	bf00      	nop
 8007954:	20000044 	.word	0x20000044

08007958 <_puts_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	460e      	mov	r6, r1
 800795c:	4605      	mov	r5, r0
 800795e:	b118      	cbz	r0, 8007968 <_puts_r+0x10>
 8007960:	6983      	ldr	r3, [r0, #24]
 8007962:	b90b      	cbnz	r3, 8007968 <_puts_r+0x10>
 8007964:	f000 fade 	bl	8007f24 <__sinit>
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	68ac      	ldr	r4, [r5, #8]
 800796c:	b913      	cbnz	r3, 8007974 <_puts_r+0x1c>
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fad8 	bl	8007f24 <__sinit>
 8007974:	4b2c      	ldr	r3, [pc, #176]	; (8007a28 <_puts_r+0xd0>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d120      	bne.n	80079bc <_puts_r+0x64>
 800797a:	686c      	ldr	r4, [r5, #4]
 800797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797e:	07db      	lsls	r3, r3, #31
 8007980:	d405      	bmi.n	800798e <_puts_r+0x36>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	0598      	lsls	r0, r3, #22
 8007986:	d402      	bmi.n	800798e <_puts_r+0x36>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 fb69 	bl	8008060 <__retarget_lock_acquire_recursive>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	0719      	lsls	r1, r3, #28
 8007992:	d51d      	bpl.n	80079d0 <_puts_r+0x78>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b1db      	cbz	r3, 80079d0 <_puts_r+0x78>
 8007998:	3e01      	subs	r6, #1
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079a0:	3b01      	subs	r3, #1
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	bb39      	cbnz	r1, 80079f6 <_puts_r+0x9e>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da38      	bge.n	8007a1c <_puts_r+0xc4>
 80079aa:	4622      	mov	r2, r4
 80079ac:	210a      	movs	r1, #10
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f8bc 	bl	8007b2c <__swbuf_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d011      	beq.n	80079dc <_puts_r+0x84>
 80079b8:	250a      	movs	r5, #10
 80079ba:	e011      	b.n	80079e0 <_puts_r+0x88>
 80079bc:	4b1b      	ldr	r3, [pc, #108]	; (8007a2c <_puts_r+0xd4>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	d101      	bne.n	80079c6 <_puts_r+0x6e>
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	e7da      	b.n	800797c <_puts_r+0x24>
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <_puts_r+0xd8>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	bf08      	it	eq
 80079cc:	68ec      	ldreq	r4, [r5, #12]
 80079ce:	e7d5      	b.n	800797c <_puts_r+0x24>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f90e 	bl	8007bf4 <__swsetup_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d0dd      	beq.n	8007998 <_puts_r+0x40>
 80079dc:	f04f 35ff 	mov.w	r5, #4294967295
 80079e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079e2:	07da      	lsls	r2, r3, #31
 80079e4:	d405      	bmi.n	80079f2 <_puts_r+0x9a>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	059b      	lsls	r3, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_puts_r+0x9a>
 80079ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ee:	f000 fb38 	bl	8008062 <__retarget_lock_release_recursive>
 80079f2:	4628      	mov	r0, r5
 80079f4:	bd70      	pop	{r4, r5, r6, pc}
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da04      	bge.n	8007a04 <_puts_r+0xac>
 80079fa:	69a2      	ldr	r2, [r4, #24]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	dc06      	bgt.n	8007a0e <_puts_r+0xb6>
 8007a00:	290a      	cmp	r1, #10
 8007a02:	d004      	beq.n	8007a0e <_puts_r+0xb6>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	6022      	str	r2, [r4, #0]
 8007a0a:	7019      	strb	r1, [r3, #0]
 8007a0c:	e7c5      	b.n	800799a <_puts_r+0x42>
 8007a0e:	4622      	mov	r2, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f88b 	bl	8007b2c <__swbuf_r>
 8007a16:	3001      	adds	r0, #1
 8007a18:	d1bf      	bne.n	800799a <_puts_r+0x42>
 8007a1a:	e7df      	b.n	80079dc <_puts_r+0x84>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	250a      	movs	r5, #10
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	701d      	strb	r5, [r3, #0]
 8007a26:	e7db      	b.n	80079e0 <_puts_r+0x88>
 8007a28:	080091e4 	.word	0x080091e4
 8007a2c:	08009204 	.word	0x08009204
 8007a30:	080091c4 	.word	0x080091c4

08007a34 <puts>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <puts+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f7ff bf8d 	b.w	8007958 <_puts_r>
 8007a3e:	bf00      	nop
 8007a40:	20000044 	.word	0x20000044

08007a44 <_sbrk_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d06      	ldr	r5, [pc, #24]	; (8007a60 <_sbrk_r+0x1c>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7fb fd2a 	bl	80034a8 <_sbrk>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_sbrk_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_sbrk_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	200005d4 	.word	0x200005d4

08007a64 <siprintf>:
 8007a64:	b40e      	push	{r1, r2, r3}
 8007a66:	b500      	push	{lr}
 8007a68:	b09c      	sub	sp, #112	; 0x70
 8007a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	9006      	str	r0, [sp, #24]
 8007a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a74:	4809      	ldr	r0, [pc, #36]	; (8007a9c <siprintf+0x38>)
 8007a76:	9107      	str	r1, [sp, #28]
 8007a78:	9104      	str	r1, [sp, #16]
 8007a7a:	4909      	ldr	r1, [pc, #36]	; (8007aa0 <siprintf+0x3c>)
 8007a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a80:	9105      	str	r1, [sp, #20]
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	a902      	add	r1, sp, #8
 8007a88:	f000 fbca 	bl	8008220 <_svfiprintf_r>
 8007a8c:	9b02      	ldr	r3, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	b01c      	add	sp, #112	; 0x70
 8007a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a98:	b003      	add	sp, #12
 8007a9a:	4770      	bx	lr
 8007a9c:	20000044 	.word	0x20000044
 8007aa0:	ffff0208 	.word	0xffff0208

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 ffee 	bl	8008a8c <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 fac0 	bl	8008064 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b869 	b.w	8007bd0 <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 faad 	bl	8008064 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b8d3 	b.w	8007cd0 <_close_r>
	...

08007b2c <__swbuf_r>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	460e      	mov	r6, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	4605      	mov	r5, r0
 8007b34:	b118      	cbz	r0, 8007b3e <__swbuf_r+0x12>
 8007b36:	6983      	ldr	r3, [r0, #24]
 8007b38:	b90b      	cbnz	r3, 8007b3e <__swbuf_r+0x12>
 8007b3a:	f000 f9f3 	bl	8007f24 <__sinit>
 8007b3e:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <__swbuf_r+0x98>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d12b      	bne.n	8007b9c <__swbuf_r+0x70>
 8007b44:	686c      	ldr	r4, [r5, #4]
 8007b46:	69a3      	ldr	r3, [r4, #24]
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	071a      	lsls	r2, r3, #28
 8007b4e:	d52f      	bpl.n	8007bb0 <__swbuf_r+0x84>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	b36b      	cbz	r3, 8007bb0 <__swbuf_r+0x84>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	1ac0      	subs	r0, r0, r3
 8007b5a:	6963      	ldr	r3, [r4, #20]
 8007b5c:	b2f6      	uxtb	r6, r6
 8007b5e:	4283      	cmp	r3, r0
 8007b60:	4637      	mov	r7, r6
 8007b62:	dc04      	bgt.n	8007b6e <__swbuf_r+0x42>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 f948 	bl	8007dfc <_fflush_r>
 8007b6c:	bb30      	cbnz	r0, 8007bbc <__swbuf_r+0x90>
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	701e      	strb	r6, [r3, #0]
 8007b7c:	6963      	ldr	r3, [r4, #20]
 8007b7e:	3001      	adds	r0, #1
 8007b80:	4283      	cmp	r3, r0
 8007b82:	d004      	beq.n	8007b8e <__swbuf_r+0x62>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	07db      	lsls	r3, r3, #31
 8007b88:	d506      	bpl.n	8007b98 <__swbuf_r+0x6c>
 8007b8a:	2e0a      	cmp	r6, #10
 8007b8c:	d104      	bne.n	8007b98 <__swbuf_r+0x6c>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f933 	bl	8007dfc <_fflush_r>
 8007b96:	b988      	cbnz	r0, 8007bbc <__swbuf_r+0x90>
 8007b98:	4638      	mov	r0, r7
 8007b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <__swbuf_r+0x9c>)
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d101      	bne.n	8007ba6 <__swbuf_r+0x7a>
 8007ba2:	68ac      	ldr	r4, [r5, #8]
 8007ba4:	e7cf      	b.n	8007b46 <__swbuf_r+0x1a>
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <__swbuf_r+0xa0>)
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	bf08      	it	eq
 8007bac:	68ec      	ldreq	r4, [r5, #12]
 8007bae:	e7ca      	b.n	8007b46 <__swbuf_r+0x1a>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 f81e 	bl	8007bf4 <__swsetup_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0cb      	beq.n	8007b54 <__swbuf_r+0x28>
 8007bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc0:	e7ea      	b.n	8007b98 <__swbuf_r+0x6c>
 8007bc2:	bf00      	nop
 8007bc4:	080091e4 	.word	0x080091e4
 8007bc8:	08009204 	.word	0x08009204
 8007bcc:	080091c4 	.word	0x080091c4

08007bd0 <_write_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_write_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 ff96 	bl	8001b10 <_write>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_write_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_write_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200005d4 	.word	0x200005d4

08007bf4 <__swsetup_r>:
 8007bf4:	4b32      	ldr	r3, [pc, #200]	; (8007cc0 <__swsetup_r+0xcc>)
 8007bf6:	b570      	push	{r4, r5, r6, lr}
 8007bf8:	681d      	ldr	r5, [r3, #0]
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b125      	cbz	r5, 8007c0a <__swsetup_r+0x16>
 8007c00:	69ab      	ldr	r3, [r5, #24]
 8007c02:	b913      	cbnz	r3, 8007c0a <__swsetup_r+0x16>
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 f98d 	bl	8007f24 <__sinit>
 8007c0a:	4b2e      	ldr	r3, [pc, #184]	; (8007cc4 <__swsetup_r+0xd0>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	d10f      	bne.n	8007c30 <__swsetup_r+0x3c>
 8007c10:	686c      	ldr	r4, [r5, #4]
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c18:	0719      	lsls	r1, r3, #28
 8007c1a:	d42c      	bmi.n	8007c76 <__swsetup_r+0x82>
 8007c1c:	06dd      	lsls	r5, r3, #27
 8007c1e:	d411      	bmi.n	8007c44 <__swsetup_r+0x50>
 8007c20:	2309      	movs	r3, #9
 8007c22:	6033      	str	r3, [r6, #0]
 8007c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2e:	e03e      	b.n	8007cae <__swsetup_r+0xba>
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <__swsetup_r+0xd4>)
 8007c32:	429c      	cmp	r4, r3
 8007c34:	d101      	bne.n	8007c3a <__swsetup_r+0x46>
 8007c36:	68ac      	ldr	r4, [r5, #8]
 8007c38:	e7eb      	b.n	8007c12 <__swsetup_r+0x1e>
 8007c3a:	4b24      	ldr	r3, [pc, #144]	; (8007ccc <__swsetup_r+0xd8>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	bf08      	it	eq
 8007c40:	68ec      	ldreq	r4, [r5, #12]
 8007c42:	e7e6      	b.n	8007c12 <__swsetup_r+0x1e>
 8007c44:	0758      	lsls	r0, r3, #29
 8007c46:	d512      	bpl.n	8007c6e <__swsetup_r+0x7a>
 8007c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4a:	b141      	cbz	r1, 8007c5e <__swsetup_r+0x6a>
 8007c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c50:	4299      	cmp	r1, r3
 8007c52:	d002      	beq.n	8007c5a <__swsetup_r+0x66>
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff fda7 	bl	80077a8 <_free_r>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	2300      	movs	r3, #0
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	f043 0308 	orr.w	r3, r3, #8
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	b94b      	cbnz	r3, 8007c8e <__swsetup_r+0x9a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d003      	beq.n	8007c8e <__swsetup_r+0x9a>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 fa21 	bl	80080d0 <__smakebuf_r>
 8007c8e:	89a0      	ldrh	r0, [r4, #12]
 8007c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c94:	f010 0301 	ands.w	r3, r0, #1
 8007c98:	d00a      	beq.n	8007cb0 <__swsetup_r+0xbc>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60a3      	str	r3, [r4, #8]
 8007c9e:	6963      	ldr	r3, [r4, #20]
 8007ca0:	425b      	negs	r3, r3
 8007ca2:	61a3      	str	r3, [r4, #24]
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	b943      	cbnz	r3, 8007cba <__swsetup_r+0xc6>
 8007ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cac:	d1ba      	bne.n	8007c24 <__swsetup_r+0x30>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	0781      	lsls	r1, r0, #30
 8007cb2:	bf58      	it	pl
 8007cb4:	6963      	ldrpl	r3, [r4, #20]
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	e7f4      	b.n	8007ca4 <__swsetup_r+0xb0>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e7f7      	b.n	8007cae <__swsetup_r+0xba>
 8007cbe:	bf00      	nop
 8007cc0:	20000044 	.word	0x20000044
 8007cc4:	080091e4 	.word	0x080091e4
 8007cc8:	08009204 	.word	0x08009204
 8007ccc:	080091c4 	.word	0x080091c4

08007cd0 <_close_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d06      	ldr	r5, [pc, #24]	; (8007cec <_close_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7fb fbaf 	bl	800343e <_close>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_close_r+0x1a>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_close_r+0x1a>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	200005d4 	.word	0x200005d4

08007cf0 <__sflush_r>:
 8007cf0:	898a      	ldrh	r2, [r1, #12]
 8007cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	0710      	lsls	r0, r2, #28
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	d458      	bmi.n	8007db0 <__sflush_r+0xc0>
 8007cfe:	684b      	ldr	r3, [r1, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc05      	bgt.n	8007d10 <__sflush_r+0x20>
 8007d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dc02      	bgt.n	8007d10 <__sflush_r+0x20>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	d0f9      	beq.n	8007d0a <__sflush_r+0x1a>
 8007d16:	2300      	movs	r3, #0
 8007d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d1c:	682f      	ldr	r7, [r5, #0]
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	d032      	beq.n	8007d88 <__sflush_r+0x98>
 8007d22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	075a      	lsls	r2, r3, #29
 8007d28:	d505      	bpl.n	8007d36 <__sflush_r+0x46>
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	1ac0      	subs	r0, r0, r3
 8007d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d30:	b10b      	cbz	r3, 8007d36 <__sflush_r+0x46>
 8007d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d34:	1ac0      	subs	r0, r0, r3
 8007d36:	2300      	movs	r3, #0
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3c:	6a21      	ldr	r1, [r4, #32]
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b0      	blx	r6
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	d106      	bne.n	8007d56 <__sflush_r+0x66>
 8007d48:	6829      	ldr	r1, [r5, #0]
 8007d4a:	291d      	cmp	r1, #29
 8007d4c:	d82c      	bhi.n	8007da8 <__sflush_r+0xb8>
 8007d4e:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <__sflush_r+0x108>)
 8007d50:	40ca      	lsrs	r2, r1
 8007d52:	07d6      	lsls	r6, r2, #31
 8007d54:	d528      	bpl.n	8007da8 <__sflush_r+0xb8>
 8007d56:	2200      	movs	r2, #0
 8007d58:	6062      	str	r2, [r4, #4]
 8007d5a:	04d9      	lsls	r1, r3, #19
 8007d5c:	6922      	ldr	r2, [r4, #16]
 8007d5e:	6022      	str	r2, [r4, #0]
 8007d60:	d504      	bpl.n	8007d6c <__sflush_r+0x7c>
 8007d62:	1c42      	adds	r2, r0, #1
 8007d64:	d101      	bne.n	8007d6a <__sflush_r+0x7a>
 8007d66:	682b      	ldr	r3, [r5, #0]
 8007d68:	b903      	cbnz	r3, 8007d6c <__sflush_r+0x7c>
 8007d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d6e:	602f      	str	r7, [r5, #0]
 8007d70:	2900      	cmp	r1, #0
 8007d72:	d0ca      	beq.n	8007d0a <__sflush_r+0x1a>
 8007d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d002      	beq.n	8007d82 <__sflush_r+0x92>
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f7ff fd13 	bl	80077a8 <_free_r>
 8007d82:	2000      	movs	r0, #0
 8007d84:	6360      	str	r0, [r4, #52]	; 0x34
 8007d86:	e7c1      	b.n	8007d0c <__sflush_r+0x1c>
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b0      	blx	r6
 8007d90:	1c41      	adds	r1, r0, #1
 8007d92:	d1c7      	bne.n	8007d24 <__sflush_r+0x34>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0c4      	beq.n	8007d24 <__sflush_r+0x34>
 8007d9a:	2b1d      	cmp	r3, #29
 8007d9c:	d001      	beq.n	8007da2 <__sflush_r+0xb2>
 8007d9e:	2b16      	cmp	r3, #22
 8007da0:	d101      	bne.n	8007da6 <__sflush_r+0xb6>
 8007da2:	602f      	str	r7, [r5, #0]
 8007da4:	e7b1      	b.n	8007d0a <__sflush_r+0x1a>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e7ad      	b.n	8007d0c <__sflush_r+0x1c>
 8007db0:	690f      	ldr	r7, [r1, #16]
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	d0a9      	beq.n	8007d0a <__sflush_r+0x1a>
 8007db6:	0793      	lsls	r3, r2, #30
 8007db8:	680e      	ldr	r6, [r1, #0]
 8007dba:	bf08      	it	eq
 8007dbc:	694b      	ldreq	r3, [r1, #20]
 8007dbe:	600f      	str	r7, [r1, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	eba6 0807 	sub.w	r8, r6, r7
 8007dc8:	608b      	str	r3, [r1, #8]
 8007dca:	f1b8 0f00 	cmp.w	r8, #0
 8007dce:	dd9c      	ble.n	8007d0a <__sflush_r+0x1a>
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd4:	4643      	mov	r3, r8
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b0      	blx	r6
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	dc06      	bgt.n	8007dee <__sflush_r+0xfe>
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dec:	e78e      	b.n	8007d0c <__sflush_r+0x1c>
 8007dee:	4407      	add	r7, r0
 8007df0:	eba8 0800 	sub.w	r8, r8, r0
 8007df4:	e7e9      	b.n	8007dca <__sflush_r+0xda>
 8007df6:	bf00      	nop
 8007df8:	20400001 	.word	0x20400001

08007dfc <_fflush_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	4605      	mov	r5, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	b913      	cbnz	r3, 8007e0c <_fflush_r+0x10>
 8007e06:	2500      	movs	r5, #0
 8007e08:	4628      	mov	r0, r5
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	b118      	cbz	r0, 8007e16 <_fflush_r+0x1a>
 8007e0e:	6983      	ldr	r3, [r0, #24]
 8007e10:	b90b      	cbnz	r3, 8007e16 <_fflush_r+0x1a>
 8007e12:	f000 f887 	bl	8007f24 <__sinit>
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <_fflush_r+0x6c>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d11b      	bne.n	8007e54 <_fflush_r+0x58>
 8007e1c:	686c      	ldr	r4, [r5, #4]
 8007e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0ef      	beq.n	8007e06 <_fflush_r+0xa>
 8007e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e28:	07d0      	lsls	r0, r2, #31
 8007e2a:	d404      	bmi.n	8007e36 <_fflush_r+0x3a>
 8007e2c:	0599      	lsls	r1, r3, #22
 8007e2e:	d402      	bmi.n	8007e36 <_fflush_r+0x3a>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f000 f915 	bl	8008060 <__retarget_lock_acquire_recursive>
 8007e36:	4628      	mov	r0, r5
 8007e38:	4621      	mov	r1, r4
 8007e3a:	f7ff ff59 	bl	8007cf0 <__sflush_r>
 8007e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e40:	07da      	lsls	r2, r3, #31
 8007e42:	4605      	mov	r5, r0
 8007e44:	d4e0      	bmi.n	8007e08 <_fflush_r+0xc>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	059b      	lsls	r3, r3, #22
 8007e4a:	d4dd      	bmi.n	8007e08 <_fflush_r+0xc>
 8007e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e4e:	f000 f908 	bl	8008062 <__retarget_lock_release_recursive>
 8007e52:	e7d9      	b.n	8007e08 <_fflush_r+0xc>
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <_fflush_r+0x70>)
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d101      	bne.n	8007e5e <_fflush_r+0x62>
 8007e5a:	68ac      	ldr	r4, [r5, #8]
 8007e5c:	e7df      	b.n	8007e1e <_fflush_r+0x22>
 8007e5e:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <_fflush_r+0x74>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	bf08      	it	eq
 8007e64:	68ec      	ldreq	r4, [r5, #12]
 8007e66:	e7da      	b.n	8007e1e <_fflush_r+0x22>
 8007e68:	080091e4 	.word	0x080091e4
 8007e6c:	08009204 	.word	0x08009204
 8007e70:	080091c4 	.word	0x080091c4

08007e74 <std>:
 8007e74:	2300      	movs	r3, #0
 8007e76:	b510      	push	{r4, lr}
 8007e78:	4604      	mov	r4, r0
 8007e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e82:	6083      	str	r3, [r0, #8]
 8007e84:	8181      	strh	r1, [r0, #12]
 8007e86:	6643      	str	r3, [r0, #100]	; 0x64
 8007e88:	81c2      	strh	r2, [r0, #14]
 8007e8a:	6183      	str	r3, [r0, #24]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	2208      	movs	r2, #8
 8007e90:	305c      	adds	r0, #92	; 0x5c
 8007e92:	f7ff fc81 	bl	8007798 <memset>
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x38>)
 8007e98:	6263      	str	r3, [r4, #36]	; 0x24
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x3c>)
 8007e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <std+0x40>)
 8007ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <std+0x44>)
 8007ea4:	6224      	str	r4, [r4, #32]
 8007ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ea8:	bd10      	pop	{r4, pc}
 8007eaa:	bf00      	nop
 8007eac:	08007aa5 	.word	0x08007aa5
 8007eb0:	08007ac7 	.word	0x08007ac7
 8007eb4:	08007aff 	.word	0x08007aff
 8007eb8:	08007b23 	.word	0x08007b23

08007ebc <_cleanup_r>:
 8007ebc:	4901      	ldr	r1, [pc, #4]	; (8007ec4 <_cleanup_r+0x8>)
 8007ebe:	f000 b8af 	b.w	8008020 <_fwalk_reent>
 8007ec2:	bf00      	nop
 8007ec4:	08007dfd 	.word	0x08007dfd

08007ec8 <__sfmoreglue>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	1e4a      	subs	r2, r1, #1
 8007ecc:	2568      	movs	r5, #104	; 0x68
 8007ece:	4355      	muls	r5, r2
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ed6:	f7ff fcb7 	bl	8007848 <_malloc_r>
 8007eda:	4604      	mov	r4, r0
 8007edc:	b140      	cbz	r0, 8007ef0 <__sfmoreglue+0x28>
 8007ede:	2100      	movs	r1, #0
 8007ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ee4:	300c      	adds	r0, #12
 8007ee6:	60a0      	str	r0, [r4, #8]
 8007ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007eec:	f7ff fc54 	bl	8007798 <memset>
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}

08007ef4 <__sfp_lock_acquire>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sfp_lock_acquire+0x8>)
 8007ef6:	f000 b8b3 	b.w	8008060 <__retarget_lock_acquire_recursive>
 8007efa:	bf00      	nop
 8007efc:	200005d0 	.word	0x200005d0

08007f00 <__sfp_lock_release>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__sfp_lock_release+0x8>)
 8007f02:	f000 b8ae 	b.w	8008062 <__retarget_lock_release_recursive>
 8007f06:	bf00      	nop
 8007f08:	200005d0 	.word	0x200005d0

08007f0c <__sinit_lock_acquire>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sinit_lock_acquire+0x8>)
 8007f0e:	f000 b8a7 	b.w	8008060 <__retarget_lock_acquire_recursive>
 8007f12:	bf00      	nop
 8007f14:	200005cb 	.word	0x200005cb

08007f18 <__sinit_lock_release>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__sinit_lock_release+0x8>)
 8007f1a:	f000 b8a2 	b.w	8008062 <__retarget_lock_release_recursive>
 8007f1e:	bf00      	nop
 8007f20:	200005cb 	.word	0x200005cb

08007f24 <__sinit>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	f7ff fff0 	bl	8007f0c <__sinit_lock_acquire>
 8007f2c:	69a3      	ldr	r3, [r4, #24]
 8007f2e:	b11b      	cbz	r3, 8007f38 <__sinit+0x14>
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	f7ff bff0 	b.w	8007f18 <__sinit_lock_release>
 8007f38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f3c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <__sinit+0x68>)
 8007f40:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <__sinit+0x6c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f46:	42a3      	cmp	r3, r4
 8007f48:	bf04      	itt	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	61a3      	streq	r3, [r4, #24]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 f820 	bl	8007f94 <__sfp>
 8007f54:	6060      	str	r0, [r4, #4]
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 f81c 	bl	8007f94 <__sfp>
 8007f5c:	60a0      	str	r0, [r4, #8]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 f818 	bl	8007f94 <__sfp>
 8007f64:	2200      	movs	r2, #0
 8007f66:	60e0      	str	r0, [r4, #12]
 8007f68:	2104      	movs	r1, #4
 8007f6a:	6860      	ldr	r0, [r4, #4]
 8007f6c:	f7ff ff82 	bl	8007e74 <std>
 8007f70:	68a0      	ldr	r0, [r4, #8]
 8007f72:	2201      	movs	r2, #1
 8007f74:	2109      	movs	r1, #9
 8007f76:	f7ff ff7d 	bl	8007e74 <std>
 8007f7a:	68e0      	ldr	r0, [r4, #12]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	2112      	movs	r1, #18
 8007f80:	f7ff ff78 	bl	8007e74 <std>
 8007f84:	2301      	movs	r3, #1
 8007f86:	61a3      	str	r3, [r4, #24]
 8007f88:	e7d2      	b.n	8007f30 <__sinit+0xc>
 8007f8a:	bf00      	nop
 8007f8c:	080091c0 	.word	0x080091c0
 8007f90:	08007ebd 	.word	0x08007ebd

08007f94 <__sfp>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	4607      	mov	r7, r0
 8007f98:	f7ff ffac 	bl	8007ef4 <__sfp_lock_acquire>
 8007f9c:	4b1e      	ldr	r3, [pc, #120]	; (8008018 <__sfp+0x84>)
 8007f9e:	681e      	ldr	r6, [r3, #0]
 8007fa0:	69b3      	ldr	r3, [r6, #24]
 8007fa2:	b913      	cbnz	r3, 8007faa <__sfp+0x16>
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f7ff ffbd 	bl	8007f24 <__sinit>
 8007faa:	3648      	adds	r6, #72	; 0x48
 8007fac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	d503      	bpl.n	8007fbc <__sfp+0x28>
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	b30b      	cbz	r3, 8007ffc <__sfp+0x68>
 8007fb8:	6836      	ldr	r6, [r6, #0]
 8007fba:	e7f7      	b.n	8007fac <__sfp+0x18>
 8007fbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fc0:	b9d5      	cbnz	r5, 8007ff8 <__sfp+0x64>
 8007fc2:	4b16      	ldr	r3, [pc, #88]	; (800801c <__sfp+0x88>)
 8007fc4:	60e3      	str	r3, [r4, #12]
 8007fc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fca:	6665      	str	r5, [r4, #100]	; 0x64
 8007fcc:	f000 f847 	bl	800805e <__retarget_lock_init_recursive>
 8007fd0:	f7ff ff96 	bl	8007f00 <__sfp_lock_release>
 8007fd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fdc:	6025      	str	r5, [r4, #0]
 8007fde:	61a5      	str	r5, [r4, #24]
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fe8:	f7ff fbd6 	bl	8007798 <memset>
 8007fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff8:	3468      	adds	r4, #104	; 0x68
 8007ffa:	e7d9      	b.n	8007fb0 <__sfp+0x1c>
 8007ffc:	2104      	movs	r1, #4
 8007ffe:	4638      	mov	r0, r7
 8008000:	f7ff ff62 	bl	8007ec8 <__sfmoreglue>
 8008004:	4604      	mov	r4, r0
 8008006:	6030      	str	r0, [r6, #0]
 8008008:	2800      	cmp	r0, #0
 800800a:	d1d5      	bne.n	8007fb8 <__sfp+0x24>
 800800c:	f7ff ff78 	bl	8007f00 <__sfp_lock_release>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	e7ee      	b.n	8007ff4 <__sfp+0x60>
 8008016:	bf00      	nop
 8008018:	080091c0 	.word	0x080091c0
 800801c:	ffff0001 	.word	0xffff0001

08008020 <_fwalk_reent>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	4606      	mov	r6, r0
 8008026:	4688      	mov	r8, r1
 8008028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800802c:	2700      	movs	r7, #0
 800802e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008032:	f1b9 0901 	subs.w	r9, r9, #1
 8008036:	d505      	bpl.n	8008044 <_fwalk_reent+0x24>
 8008038:	6824      	ldr	r4, [r4, #0]
 800803a:	2c00      	cmp	r4, #0
 800803c:	d1f7      	bne.n	800802e <_fwalk_reent+0xe>
 800803e:	4638      	mov	r0, r7
 8008040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d907      	bls.n	800805a <_fwalk_reent+0x3a>
 800804a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800804e:	3301      	adds	r3, #1
 8008050:	d003      	beq.n	800805a <_fwalk_reent+0x3a>
 8008052:	4629      	mov	r1, r5
 8008054:	4630      	mov	r0, r6
 8008056:	47c0      	blx	r8
 8008058:	4307      	orrs	r7, r0
 800805a:	3568      	adds	r5, #104	; 0x68
 800805c:	e7e9      	b.n	8008032 <_fwalk_reent+0x12>

0800805e <__retarget_lock_init_recursive>:
 800805e:	4770      	bx	lr

08008060 <__retarget_lock_acquire_recursive>:
 8008060:	4770      	bx	lr

08008062 <__retarget_lock_release_recursive>:
 8008062:	4770      	bx	lr

08008064 <_lseek_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_lseek_r+0x20>)
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	2200      	movs	r2, #0
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7fb fa0a 	bl	800348c <_lseek>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_lseek_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_lseek_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	200005d4 	.word	0x200005d4

08008088 <__swhatbuf_r>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008090:	2900      	cmp	r1, #0
 8008092:	b096      	sub	sp, #88	; 0x58
 8008094:	4614      	mov	r4, r2
 8008096:	461d      	mov	r5, r3
 8008098:	da07      	bge.n	80080aa <__swhatbuf_r+0x22>
 800809a:	2300      	movs	r3, #0
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	89b3      	ldrh	r3, [r6, #12]
 80080a0:	061a      	lsls	r2, r3, #24
 80080a2:	d410      	bmi.n	80080c6 <__swhatbuf_r+0x3e>
 80080a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a8:	e00e      	b.n	80080c8 <__swhatbuf_r+0x40>
 80080aa:	466a      	mov	r2, sp
 80080ac:	f000 fd00 	bl	8008ab0 <_fstat_r>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dbf2      	blt.n	800809a <__swhatbuf_r+0x12>
 80080b4:	9a01      	ldr	r2, [sp, #4]
 80080b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080be:	425a      	negs	r2, r3
 80080c0:	415a      	adcs	r2, r3
 80080c2:	602a      	str	r2, [r5, #0]
 80080c4:	e7ee      	b.n	80080a4 <__swhatbuf_r+0x1c>
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	2000      	movs	r0, #0
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	b016      	add	sp, #88	; 0x58
 80080ce:	bd70      	pop	{r4, r5, r6, pc}

080080d0 <__smakebuf_r>:
 80080d0:	898b      	ldrh	r3, [r1, #12]
 80080d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080d4:	079d      	lsls	r5, r3, #30
 80080d6:	4606      	mov	r6, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	d507      	bpl.n	80080ec <__smakebuf_r+0x1c>
 80080dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	2301      	movs	r3, #1
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	b002      	add	sp, #8
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	ab01      	add	r3, sp, #4
 80080ee:	466a      	mov	r2, sp
 80080f0:	f7ff ffca 	bl	8008088 <__swhatbuf_r>
 80080f4:	9900      	ldr	r1, [sp, #0]
 80080f6:	4605      	mov	r5, r0
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fba5 	bl	8007848 <_malloc_r>
 80080fe:	b948      	cbnz	r0, 8008114 <__smakebuf_r+0x44>
 8008100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008104:	059a      	lsls	r2, r3, #22
 8008106:	d4ef      	bmi.n	80080e8 <__smakebuf_r+0x18>
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	e7e3      	b.n	80080dc <__smakebuf_r+0xc>
 8008114:	4b0d      	ldr	r3, [pc, #52]	; (800814c <__smakebuf_r+0x7c>)
 8008116:	62b3      	str	r3, [r6, #40]	; 0x28
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	6020      	str	r0, [r4, #0]
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	6163      	str	r3, [r4, #20]
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	6120      	str	r0, [r4, #16]
 800812a:	b15b      	cbz	r3, 8008144 <__smakebuf_r+0x74>
 800812c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008130:	4630      	mov	r0, r6
 8008132:	f000 fccf 	bl	8008ad4 <_isatty_r>
 8008136:	b128      	cbz	r0, 8008144 <__smakebuf_r+0x74>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	89a0      	ldrh	r0, [r4, #12]
 8008146:	4305      	orrs	r5, r0
 8008148:	81a5      	strh	r5, [r4, #12]
 800814a:	e7cd      	b.n	80080e8 <__smakebuf_r+0x18>
 800814c:	08007ebd 	.word	0x08007ebd

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bf85 	b.w	8008060 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	200005cc 	.word	0x200005cc

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff bf80 	b.w	8008062 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	200005cc 	.word	0x200005cc

08008168 <__ssputs_r>:
 8008168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	688e      	ldr	r6, [r1, #8]
 800816e:	429e      	cmp	r6, r3
 8008170:	4682      	mov	sl, r0
 8008172:	460c      	mov	r4, r1
 8008174:	4690      	mov	r8, r2
 8008176:	461f      	mov	r7, r3
 8008178:	d838      	bhi.n	80081ec <__ssputs_r+0x84>
 800817a:	898a      	ldrh	r2, [r1, #12]
 800817c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008180:	d032      	beq.n	80081e8 <__ssputs_r+0x80>
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	6909      	ldr	r1, [r1, #16]
 8008186:	eba5 0901 	sub.w	r9, r5, r1
 800818a:	6965      	ldr	r5, [r4, #20]
 800818c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008194:	3301      	adds	r3, #1
 8008196:	444b      	add	r3, r9
 8008198:	106d      	asrs	r5, r5, #1
 800819a:	429d      	cmp	r5, r3
 800819c:	bf38      	it	cc
 800819e:	461d      	movcc	r5, r3
 80081a0:	0553      	lsls	r3, r2, #21
 80081a2:	d531      	bpl.n	8008208 <__ssputs_r+0xa0>
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7ff fb4f 	bl	8007848 <_malloc_r>
 80081aa:	4606      	mov	r6, r0
 80081ac:	b950      	cbnz	r0, 80081c4 <__ssputs_r+0x5c>
 80081ae:	230c      	movs	r3, #12
 80081b0:	f8ca 3000 	str.w	r3, [sl]
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c4:	6921      	ldr	r1, [r4, #16]
 80081c6:	464a      	mov	r2, r9
 80081c8:	f7ff fad8 	bl	800777c <memcpy>
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	6126      	str	r6, [r4, #16]
 80081da:	6165      	str	r5, [r4, #20]
 80081dc:	444e      	add	r6, r9
 80081de:	eba5 0509 	sub.w	r5, r5, r9
 80081e2:	6026      	str	r6, [r4, #0]
 80081e4:	60a5      	str	r5, [r4, #8]
 80081e6:	463e      	mov	r6, r7
 80081e8:	42be      	cmp	r6, r7
 80081ea:	d900      	bls.n	80081ee <__ssputs_r+0x86>
 80081ec:	463e      	mov	r6, r7
 80081ee:	4632      	mov	r2, r6
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	4641      	mov	r1, r8
 80081f4:	f000 fc7e 	bl	8008af4 <memmove>
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	1b9b      	subs	r3, r3, r6
 80081fe:	4432      	add	r2, r6
 8008200:	60a3      	str	r3, [r4, #8]
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	2000      	movs	r0, #0
 8008206:	e7db      	b.n	80081c0 <__ssputs_r+0x58>
 8008208:	462a      	mov	r2, r5
 800820a:	f000 fc8d 	bl	8008b28 <_realloc_r>
 800820e:	4606      	mov	r6, r0
 8008210:	2800      	cmp	r0, #0
 8008212:	d1e1      	bne.n	80081d8 <__ssputs_r+0x70>
 8008214:	6921      	ldr	r1, [r4, #16]
 8008216:	4650      	mov	r0, sl
 8008218:	f7ff fac6 	bl	80077a8 <_free_r>
 800821c:	e7c7      	b.n	80081ae <__ssputs_r+0x46>
	...

08008220 <_svfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	4698      	mov	r8, r3
 8008226:	898b      	ldrh	r3, [r1, #12]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	b09d      	sub	sp, #116	; 0x74
 800822c:	4607      	mov	r7, r0
 800822e:	460d      	mov	r5, r1
 8008230:	4614      	mov	r4, r2
 8008232:	d50e      	bpl.n	8008252 <_svfiprintf_r+0x32>
 8008234:	690b      	ldr	r3, [r1, #16]
 8008236:	b963      	cbnz	r3, 8008252 <_svfiprintf_r+0x32>
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	f7ff fb05 	bl	8007848 <_malloc_r>
 800823e:	6028      	str	r0, [r5, #0]
 8008240:	6128      	str	r0, [r5, #16]
 8008242:	b920      	cbnz	r0, 800824e <_svfiprintf_r+0x2e>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e0d1      	b.n	80083f2 <_svfiprintf_r+0x1d2>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	616b      	str	r3, [r5, #20]
 8008252:	2300      	movs	r3, #0
 8008254:	9309      	str	r3, [sp, #36]	; 0x24
 8008256:	2320      	movs	r3, #32
 8008258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800825c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008260:	2330      	movs	r3, #48	; 0x30
 8008262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800840c <_svfiprintf_r+0x1ec>
 8008266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826a:	f04f 0901 	mov.w	r9, #1
 800826e:	4623      	mov	r3, r4
 8008270:	469a      	mov	sl, r3
 8008272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008276:	b10a      	cbz	r2, 800827c <_svfiprintf_r+0x5c>
 8008278:	2a25      	cmp	r2, #37	; 0x25
 800827a:	d1f9      	bne.n	8008270 <_svfiprintf_r+0x50>
 800827c:	ebba 0b04 	subs.w	fp, sl, r4
 8008280:	d00b      	beq.n	800829a <_svfiprintf_r+0x7a>
 8008282:	465b      	mov	r3, fp
 8008284:	4622      	mov	r2, r4
 8008286:	4629      	mov	r1, r5
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ff6d 	bl	8008168 <__ssputs_r>
 800828e:	3001      	adds	r0, #1
 8008290:	f000 80aa 	beq.w	80083e8 <_svfiprintf_r+0x1c8>
 8008294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008296:	445a      	add	r2, fp
 8008298:	9209      	str	r2, [sp, #36]	; 0x24
 800829a:	f89a 3000 	ldrb.w	r3, [sl]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80a2 	beq.w	80083e8 <_svfiprintf_r+0x1c8>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ae:	f10a 0a01 	add.w	sl, sl, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ba:	931a      	str	r3, [sp, #104]	; 0x68
 80082bc:	4654      	mov	r4, sl
 80082be:	2205      	movs	r2, #5
 80082c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c4:	4851      	ldr	r0, [pc, #324]	; (800840c <_svfiprintf_r+0x1ec>)
 80082c6:	f7f7 ff8b 	bl	80001e0 <memchr>
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	b9d8      	cbnz	r0, 8008306 <_svfiprintf_r+0xe6>
 80082ce:	06d0      	lsls	r0, r2, #27
 80082d0:	bf44      	itt	mi
 80082d2:	2320      	movmi	r3, #32
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d8:	0711      	lsls	r1, r2, #28
 80082da:	bf44      	itt	mi
 80082dc:	232b      	movmi	r3, #43	; 0x2b
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	f89a 3000 	ldrb.w	r3, [sl]
 80082e6:	2b2a      	cmp	r3, #42	; 0x2a
 80082e8:	d015      	beq.n	8008316 <_svfiprintf_r+0xf6>
 80082ea:	9a07      	ldr	r2, [sp, #28]
 80082ec:	4654      	mov	r4, sl
 80082ee:	2000      	movs	r0, #0
 80082f0:	f04f 0c0a 	mov.w	ip, #10
 80082f4:	4621      	mov	r1, r4
 80082f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fa:	3b30      	subs	r3, #48	; 0x30
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d94e      	bls.n	800839e <_svfiprintf_r+0x17e>
 8008300:	b1b0      	cbz	r0, 8008330 <_svfiprintf_r+0x110>
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	e014      	b.n	8008330 <_svfiprintf_r+0x110>
 8008306:	eba0 0308 	sub.w	r3, r0, r8
 800830a:	fa09 f303 	lsl.w	r3, r9, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	46a2      	mov	sl, r4
 8008314:	e7d2      	b.n	80082bc <_svfiprintf_r+0x9c>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	1d19      	adds	r1, r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	9103      	str	r1, [sp, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfbb      	ittet	lt
 8008322:	425b      	neglt	r3, r3
 8008324:	f042 0202 	orrlt.w	r2, r2, #2
 8008328:	9307      	strge	r3, [sp, #28]
 800832a:	9307      	strlt	r3, [sp, #28]
 800832c:	bfb8      	it	lt
 800832e:	9204      	strlt	r2, [sp, #16]
 8008330:	7823      	ldrb	r3, [r4, #0]
 8008332:	2b2e      	cmp	r3, #46	; 0x2e
 8008334:	d10c      	bne.n	8008350 <_svfiprintf_r+0x130>
 8008336:	7863      	ldrb	r3, [r4, #1]
 8008338:	2b2a      	cmp	r3, #42	; 0x2a
 800833a:	d135      	bne.n	80083a8 <_svfiprintf_r+0x188>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9203      	str	r2, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb8      	it	lt
 8008348:	f04f 33ff 	movlt.w	r3, #4294967295
 800834c:	3402      	adds	r4, #2
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800841c <_svfiprintf_r+0x1fc>
 8008354:	7821      	ldrb	r1, [r4, #0]
 8008356:	2203      	movs	r2, #3
 8008358:	4650      	mov	r0, sl
 800835a:	f7f7 ff41 	bl	80001e0 <memchr>
 800835e:	b140      	cbz	r0, 8008372 <_svfiprintf_r+0x152>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	eba0 000a 	sub.w	r0, r0, sl
 8008366:	fa03 f000 	lsl.w	r0, r3, r0
 800836a:	9b04      	ldr	r3, [sp, #16]
 800836c:	4303      	orrs	r3, r0
 800836e:	3401      	adds	r4, #1
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008376:	4826      	ldr	r0, [pc, #152]	; (8008410 <_svfiprintf_r+0x1f0>)
 8008378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837c:	2206      	movs	r2, #6
 800837e:	f7f7 ff2f 	bl	80001e0 <memchr>
 8008382:	2800      	cmp	r0, #0
 8008384:	d038      	beq.n	80083f8 <_svfiprintf_r+0x1d8>
 8008386:	4b23      	ldr	r3, [pc, #140]	; (8008414 <_svfiprintf_r+0x1f4>)
 8008388:	bb1b      	cbnz	r3, 80083d2 <_svfiprintf_r+0x1b2>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	3307      	adds	r3, #7
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	3308      	adds	r3, #8
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	4433      	add	r3, r6
 800839a:	9309      	str	r3, [sp, #36]	; 0x24
 800839c:	e767      	b.n	800826e <_svfiprintf_r+0x4e>
 800839e:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a2:	460c      	mov	r4, r1
 80083a4:	2001      	movs	r0, #1
 80083a6:	e7a5      	b.n	80082f4 <_svfiprintf_r+0xd4>
 80083a8:	2300      	movs	r3, #0
 80083aa:	3401      	adds	r4, #1
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	4619      	mov	r1, r3
 80083b0:	f04f 0c0a 	mov.w	ip, #10
 80083b4:	4620      	mov	r0, r4
 80083b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ba:	3a30      	subs	r2, #48	; 0x30
 80083bc:	2a09      	cmp	r2, #9
 80083be:	d903      	bls.n	80083c8 <_svfiprintf_r+0x1a8>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0c5      	beq.n	8008350 <_svfiprintf_r+0x130>
 80083c4:	9105      	str	r1, [sp, #20]
 80083c6:	e7c3      	b.n	8008350 <_svfiprintf_r+0x130>
 80083c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083cc:	4604      	mov	r4, r0
 80083ce:	2301      	movs	r3, #1
 80083d0:	e7f0      	b.n	80083b4 <_svfiprintf_r+0x194>
 80083d2:	ab03      	add	r3, sp, #12
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	462a      	mov	r2, r5
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <_svfiprintf_r+0x1f8>)
 80083da:	a904      	add	r1, sp, #16
 80083dc:	4638      	mov	r0, r7
 80083de:	f3af 8000 	nop.w
 80083e2:	1c42      	adds	r2, r0, #1
 80083e4:	4606      	mov	r6, r0
 80083e6:	d1d6      	bne.n	8008396 <_svfiprintf_r+0x176>
 80083e8:	89ab      	ldrh	r3, [r5, #12]
 80083ea:	065b      	lsls	r3, r3, #25
 80083ec:	f53f af2c 	bmi.w	8008248 <_svfiprintf_r+0x28>
 80083f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f2:	b01d      	add	sp, #116	; 0x74
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	ab03      	add	r3, sp, #12
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	462a      	mov	r2, r5
 80083fe:	4b06      	ldr	r3, [pc, #24]	; (8008418 <_svfiprintf_r+0x1f8>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	4638      	mov	r0, r7
 8008404:	f000 f9d4 	bl	80087b0 <_printf_i>
 8008408:	e7eb      	b.n	80083e2 <_svfiprintf_r+0x1c2>
 800840a:	bf00      	nop
 800840c:	08009224 	.word	0x08009224
 8008410:	0800922e 	.word	0x0800922e
 8008414:	00000000 	.word	0x00000000
 8008418:	08008169 	.word	0x08008169
 800841c:	0800922a 	.word	0x0800922a

08008420 <__sfputc_r>:
 8008420:	6893      	ldr	r3, [r2, #8]
 8008422:	3b01      	subs	r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	b410      	push	{r4}
 8008428:	6093      	str	r3, [r2, #8]
 800842a:	da08      	bge.n	800843e <__sfputc_r+0x1e>
 800842c:	6994      	ldr	r4, [r2, #24]
 800842e:	42a3      	cmp	r3, r4
 8008430:	db01      	blt.n	8008436 <__sfputc_r+0x16>
 8008432:	290a      	cmp	r1, #10
 8008434:	d103      	bne.n	800843e <__sfputc_r+0x1e>
 8008436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800843a:	f7ff bb77 	b.w	8007b2c <__swbuf_r>
 800843e:	6813      	ldr	r3, [r2, #0]
 8008440:	1c58      	adds	r0, r3, #1
 8008442:	6010      	str	r0, [r2, #0]
 8008444:	7019      	strb	r1, [r3, #0]
 8008446:	4608      	mov	r0, r1
 8008448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800844c:	4770      	bx	lr

0800844e <__sfputs_r>:
 800844e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008450:	4606      	mov	r6, r0
 8008452:	460f      	mov	r7, r1
 8008454:	4614      	mov	r4, r2
 8008456:	18d5      	adds	r5, r2, r3
 8008458:	42ac      	cmp	r4, r5
 800845a:	d101      	bne.n	8008460 <__sfputs_r+0x12>
 800845c:	2000      	movs	r0, #0
 800845e:	e007      	b.n	8008470 <__sfputs_r+0x22>
 8008460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008464:	463a      	mov	r2, r7
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ffda 	bl	8008420 <__sfputc_r>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d1f3      	bne.n	8008458 <__sfputs_r+0xa>
 8008470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008474 <_vfiprintf_r>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	460d      	mov	r5, r1
 800847a:	b09d      	sub	sp, #116	; 0x74
 800847c:	4614      	mov	r4, r2
 800847e:	4698      	mov	r8, r3
 8008480:	4606      	mov	r6, r0
 8008482:	b118      	cbz	r0, 800848c <_vfiprintf_r+0x18>
 8008484:	6983      	ldr	r3, [r0, #24]
 8008486:	b90b      	cbnz	r3, 800848c <_vfiprintf_r+0x18>
 8008488:	f7ff fd4c 	bl	8007f24 <__sinit>
 800848c:	4b89      	ldr	r3, [pc, #548]	; (80086b4 <_vfiprintf_r+0x240>)
 800848e:	429d      	cmp	r5, r3
 8008490:	d11b      	bne.n	80084ca <_vfiprintf_r+0x56>
 8008492:	6875      	ldr	r5, [r6, #4]
 8008494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	d405      	bmi.n	80084a6 <_vfiprintf_r+0x32>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	059a      	lsls	r2, r3, #22
 800849e:	d402      	bmi.n	80084a6 <_vfiprintf_r+0x32>
 80084a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a2:	f7ff fddd 	bl	8008060 <__retarget_lock_acquire_recursive>
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	071b      	lsls	r3, r3, #28
 80084aa:	d501      	bpl.n	80084b0 <_vfiprintf_r+0x3c>
 80084ac:	692b      	ldr	r3, [r5, #16]
 80084ae:	b9eb      	cbnz	r3, 80084ec <_vfiprintf_r+0x78>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff fb9e 	bl	8007bf4 <__swsetup_r>
 80084b8:	b1c0      	cbz	r0, 80084ec <_vfiprintf_r+0x78>
 80084ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084bc:	07dc      	lsls	r4, r3, #31
 80084be:	d50e      	bpl.n	80084de <_vfiprintf_r+0x6a>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	b01d      	add	sp, #116	; 0x74
 80084c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ca:	4b7b      	ldr	r3, [pc, #492]	; (80086b8 <_vfiprintf_r+0x244>)
 80084cc:	429d      	cmp	r5, r3
 80084ce:	d101      	bne.n	80084d4 <_vfiprintf_r+0x60>
 80084d0:	68b5      	ldr	r5, [r6, #8]
 80084d2:	e7df      	b.n	8008494 <_vfiprintf_r+0x20>
 80084d4:	4b79      	ldr	r3, [pc, #484]	; (80086bc <_vfiprintf_r+0x248>)
 80084d6:	429d      	cmp	r5, r3
 80084d8:	bf08      	it	eq
 80084da:	68f5      	ldreq	r5, [r6, #12]
 80084dc:	e7da      	b.n	8008494 <_vfiprintf_r+0x20>
 80084de:	89ab      	ldrh	r3, [r5, #12]
 80084e0:	0598      	lsls	r0, r3, #22
 80084e2:	d4ed      	bmi.n	80084c0 <_vfiprintf_r+0x4c>
 80084e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e6:	f7ff fdbc 	bl	8008062 <__retarget_lock_release_recursive>
 80084ea:	e7e9      	b.n	80084c0 <_vfiprintf_r+0x4c>
 80084ec:	2300      	movs	r3, #0
 80084ee:	9309      	str	r3, [sp, #36]	; 0x24
 80084f0:	2320      	movs	r3, #32
 80084f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084fa:	2330      	movs	r3, #48	; 0x30
 80084fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086c0 <_vfiprintf_r+0x24c>
 8008500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008504:	f04f 0901 	mov.w	r9, #1
 8008508:	4623      	mov	r3, r4
 800850a:	469a      	mov	sl, r3
 800850c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008510:	b10a      	cbz	r2, 8008516 <_vfiprintf_r+0xa2>
 8008512:	2a25      	cmp	r2, #37	; 0x25
 8008514:	d1f9      	bne.n	800850a <_vfiprintf_r+0x96>
 8008516:	ebba 0b04 	subs.w	fp, sl, r4
 800851a:	d00b      	beq.n	8008534 <_vfiprintf_r+0xc0>
 800851c:	465b      	mov	r3, fp
 800851e:	4622      	mov	r2, r4
 8008520:	4629      	mov	r1, r5
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ff93 	bl	800844e <__sfputs_r>
 8008528:	3001      	adds	r0, #1
 800852a:	f000 80aa 	beq.w	8008682 <_vfiprintf_r+0x20e>
 800852e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008530:	445a      	add	r2, fp
 8008532:	9209      	str	r2, [sp, #36]	; 0x24
 8008534:	f89a 3000 	ldrb.w	r3, [sl]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 80a2 	beq.w	8008682 <_vfiprintf_r+0x20e>
 800853e:	2300      	movs	r3, #0
 8008540:	f04f 32ff 	mov.w	r2, #4294967295
 8008544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008548:	f10a 0a01 	add.w	sl, sl, #1
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008554:	931a      	str	r3, [sp, #104]	; 0x68
 8008556:	4654      	mov	r4, sl
 8008558:	2205      	movs	r2, #5
 800855a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855e:	4858      	ldr	r0, [pc, #352]	; (80086c0 <_vfiprintf_r+0x24c>)
 8008560:	f7f7 fe3e 	bl	80001e0 <memchr>
 8008564:	9a04      	ldr	r2, [sp, #16]
 8008566:	b9d8      	cbnz	r0, 80085a0 <_vfiprintf_r+0x12c>
 8008568:	06d1      	lsls	r1, r2, #27
 800856a:	bf44      	itt	mi
 800856c:	2320      	movmi	r3, #32
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008572:	0713      	lsls	r3, r2, #28
 8008574:	bf44      	itt	mi
 8008576:	232b      	movmi	r3, #43	; 0x2b
 8008578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800857c:	f89a 3000 	ldrb.w	r3, [sl]
 8008580:	2b2a      	cmp	r3, #42	; 0x2a
 8008582:	d015      	beq.n	80085b0 <_vfiprintf_r+0x13c>
 8008584:	9a07      	ldr	r2, [sp, #28]
 8008586:	4654      	mov	r4, sl
 8008588:	2000      	movs	r0, #0
 800858a:	f04f 0c0a 	mov.w	ip, #10
 800858e:	4621      	mov	r1, r4
 8008590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008594:	3b30      	subs	r3, #48	; 0x30
 8008596:	2b09      	cmp	r3, #9
 8008598:	d94e      	bls.n	8008638 <_vfiprintf_r+0x1c4>
 800859a:	b1b0      	cbz	r0, 80085ca <_vfiprintf_r+0x156>
 800859c:	9207      	str	r2, [sp, #28]
 800859e:	e014      	b.n	80085ca <_vfiprintf_r+0x156>
 80085a0:	eba0 0308 	sub.w	r3, r0, r8
 80085a4:	fa09 f303 	lsl.w	r3, r9, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	46a2      	mov	sl, r4
 80085ae:	e7d2      	b.n	8008556 <_vfiprintf_r+0xe2>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	1d19      	adds	r1, r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	9103      	str	r1, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bfbb      	ittet	lt
 80085bc:	425b      	neglt	r3, r3
 80085be:	f042 0202 	orrlt.w	r2, r2, #2
 80085c2:	9307      	strge	r3, [sp, #28]
 80085c4:	9307      	strlt	r3, [sp, #28]
 80085c6:	bfb8      	it	lt
 80085c8:	9204      	strlt	r2, [sp, #16]
 80085ca:	7823      	ldrb	r3, [r4, #0]
 80085cc:	2b2e      	cmp	r3, #46	; 0x2e
 80085ce:	d10c      	bne.n	80085ea <_vfiprintf_r+0x176>
 80085d0:	7863      	ldrb	r3, [r4, #1]
 80085d2:	2b2a      	cmp	r3, #42	; 0x2a
 80085d4:	d135      	bne.n	8008642 <_vfiprintf_r+0x1ce>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d1a      	adds	r2, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9203      	str	r2, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfb8      	it	lt
 80085e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e6:	3402      	adds	r4, #2
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086d0 <_vfiprintf_r+0x25c>
 80085ee:	7821      	ldrb	r1, [r4, #0]
 80085f0:	2203      	movs	r2, #3
 80085f2:	4650      	mov	r0, sl
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b140      	cbz	r0, 800860c <_vfiprintf_r+0x198>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	eba0 000a 	sub.w	r0, r0, sl
 8008600:	fa03 f000 	lsl.w	r0, r3, r0
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	4303      	orrs	r3, r0
 8008608:	3401      	adds	r4, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008610:	482c      	ldr	r0, [pc, #176]	; (80086c4 <_vfiprintf_r+0x250>)
 8008612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008616:	2206      	movs	r2, #6
 8008618:	f7f7 fde2 	bl	80001e0 <memchr>
 800861c:	2800      	cmp	r0, #0
 800861e:	d03f      	beq.n	80086a0 <_vfiprintf_r+0x22c>
 8008620:	4b29      	ldr	r3, [pc, #164]	; (80086c8 <_vfiprintf_r+0x254>)
 8008622:	bb1b      	cbnz	r3, 800866c <_vfiprintf_r+0x1f8>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	3307      	adds	r3, #7
 8008628:	f023 0307 	bic.w	r3, r3, #7
 800862c:	3308      	adds	r3, #8
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	443b      	add	r3, r7
 8008634:	9309      	str	r3, [sp, #36]	; 0x24
 8008636:	e767      	b.n	8008508 <_vfiprintf_r+0x94>
 8008638:	fb0c 3202 	mla	r2, ip, r2, r3
 800863c:	460c      	mov	r4, r1
 800863e:	2001      	movs	r0, #1
 8008640:	e7a5      	b.n	800858e <_vfiprintf_r+0x11a>
 8008642:	2300      	movs	r3, #0
 8008644:	3401      	adds	r4, #1
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	4619      	mov	r1, r3
 800864a:	f04f 0c0a 	mov.w	ip, #10
 800864e:	4620      	mov	r0, r4
 8008650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008654:	3a30      	subs	r2, #48	; 0x30
 8008656:	2a09      	cmp	r2, #9
 8008658:	d903      	bls.n	8008662 <_vfiprintf_r+0x1ee>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0c5      	beq.n	80085ea <_vfiprintf_r+0x176>
 800865e:	9105      	str	r1, [sp, #20]
 8008660:	e7c3      	b.n	80085ea <_vfiprintf_r+0x176>
 8008662:	fb0c 2101 	mla	r1, ip, r1, r2
 8008666:	4604      	mov	r4, r0
 8008668:	2301      	movs	r3, #1
 800866a:	e7f0      	b.n	800864e <_vfiprintf_r+0x1da>
 800866c:	ab03      	add	r3, sp, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	462a      	mov	r2, r5
 8008672:	4b16      	ldr	r3, [pc, #88]	; (80086cc <_vfiprintf_r+0x258>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	4630      	mov	r0, r6
 8008678:	f3af 8000 	nop.w
 800867c:	4607      	mov	r7, r0
 800867e:	1c78      	adds	r0, r7, #1
 8008680:	d1d6      	bne.n	8008630 <_vfiprintf_r+0x1bc>
 8008682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008684:	07d9      	lsls	r1, r3, #31
 8008686:	d405      	bmi.n	8008694 <_vfiprintf_r+0x220>
 8008688:	89ab      	ldrh	r3, [r5, #12]
 800868a:	059a      	lsls	r2, r3, #22
 800868c:	d402      	bmi.n	8008694 <_vfiprintf_r+0x220>
 800868e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008690:	f7ff fce7 	bl	8008062 <__retarget_lock_release_recursive>
 8008694:	89ab      	ldrh	r3, [r5, #12]
 8008696:	065b      	lsls	r3, r3, #25
 8008698:	f53f af12 	bmi.w	80084c0 <_vfiprintf_r+0x4c>
 800869c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800869e:	e711      	b.n	80084c4 <_vfiprintf_r+0x50>
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <_vfiprintf_r+0x258>)
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f880 	bl	80087b0 <_printf_i>
 80086b0:	e7e4      	b.n	800867c <_vfiprintf_r+0x208>
 80086b2:	bf00      	nop
 80086b4:	080091e4 	.word	0x080091e4
 80086b8:	08009204 	.word	0x08009204
 80086bc:	080091c4 	.word	0x080091c4
 80086c0:	08009224 	.word	0x08009224
 80086c4:	0800922e 	.word	0x0800922e
 80086c8:	00000000 	.word	0x00000000
 80086cc:	0800844f 	.word	0x0800844f
 80086d0:	0800922a 	.word	0x0800922a

080086d4 <_printf_common>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	4616      	mov	r6, r2
 80086da:	4699      	mov	r9, r3
 80086dc:	688a      	ldr	r2, [r1, #8]
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	bfb8      	it	lt
 80086e8:	4613      	movlt	r3, r2
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086f0:	4607      	mov	r7, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b10a      	cbz	r2, 80086fa <_printf_common+0x26>
 80086f6:	3301      	adds	r3, #1
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	0699      	lsls	r1, r3, #26
 80086fe:	bf42      	ittt	mi
 8008700:	6833      	ldrmi	r3, [r6, #0]
 8008702:	3302      	addmi	r3, #2
 8008704:	6033      	strmi	r3, [r6, #0]
 8008706:	6825      	ldr	r5, [r4, #0]
 8008708:	f015 0506 	ands.w	r5, r5, #6
 800870c:	d106      	bne.n	800871c <_printf_common+0x48>
 800870e:	f104 0a19 	add.w	sl, r4, #25
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	6832      	ldr	r2, [r6, #0]
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc26      	bgt.n	800876a <_printf_common+0x96>
 800871c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008720:	1e13      	subs	r3, r2, #0
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	bf18      	it	ne
 8008726:	2301      	movne	r3, #1
 8008728:	0692      	lsls	r2, r2, #26
 800872a:	d42b      	bmi.n	8008784 <_printf_common+0xb0>
 800872c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008730:	4649      	mov	r1, r9
 8008732:	4638      	mov	r0, r7
 8008734:	47c0      	blx	r8
 8008736:	3001      	adds	r0, #1
 8008738:	d01e      	beq.n	8008778 <_printf_common+0xa4>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	68e5      	ldr	r5, [r4, #12]
 800873e:	6832      	ldr	r2, [r6, #0]
 8008740:	f003 0306 	and.w	r3, r3, #6
 8008744:	2b04      	cmp	r3, #4
 8008746:	bf08      	it	eq
 8008748:	1aad      	subeq	r5, r5, r2
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	bf0c      	ite	eq
 8008750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008754:	2500      	movne	r5, #0
 8008756:	4293      	cmp	r3, r2
 8008758:	bfc4      	itt	gt
 800875a:	1a9b      	subgt	r3, r3, r2
 800875c:	18ed      	addgt	r5, r5, r3
 800875e:	2600      	movs	r6, #0
 8008760:	341a      	adds	r4, #26
 8008762:	42b5      	cmp	r5, r6
 8008764:	d11a      	bne.n	800879c <_printf_common+0xc8>
 8008766:	2000      	movs	r0, #0
 8008768:	e008      	b.n	800877c <_printf_common+0xa8>
 800876a:	2301      	movs	r3, #1
 800876c:	4652      	mov	r2, sl
 800876e:	4649      	mov	r1, r9
 8008770:	4638      	mov	r0, r7
 8008772:	47c0      	blx	r8
 8008774:	3001      	adds	r0, #1
 8008776:	d103      	bne.n	8008780 <_printf_common+0xac>
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008780:	3501      	adds	r5, #1
 8008782:	e7c6      	b.n	8008712 <_printf_common+0x3e>
 8008784:	18e1      	adds	r1, r4, r3
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	2030      	movs	r0, #48	; 0x30
 800878a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800878e:	4422      	add	r2, r4
 8008790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008798:	3302      	adds	r3, #2
 800879a:	e7c7      	b.n	800872c <_printf_common+0x58>
 800879c:	2301      	movs	r3, #1
 800879e:	4622      	mov	r2, r4
 80087a0:	4649      	mov	r1, r9
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	3001      	adds	r0, #1
 80087a8:	d0e6      	beq.n	8008778 <_printf_common+0xa4>
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7d9      	b.n	8008762 <_printf_common+0x8e>
	...

080087b0 <_printf_i>:
 80087b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	460c      	mov	r4, r1
 80087b6:	4691      	mov	r9, r2
 80087b8:	7e27      	ldrb	r7, [r4, #24]
 80087ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087bc:	2f78      	cmp	r7, #120	; 0x78
 80087be:	4680      	mov	r8, r0
 80087c0:	469a      	mov	sl, r3
 80087c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c6:	d807      	bhi.n	80087d8 <_printf_i+0x28>
 80087c8:	2f62      	cmp	r7, #98	; 0x62
 80087ca:	d80a      	bhi.n	80087e2 <_printf_i+0x32>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	f000 80d8 	beq.w	8008982 <_printf_i+0x1d2>
 80087d2:	2f58      	cmp	r7, #88	; 0x58
 80087d4:	f000 80a3 	beq.w	800891e <_printf_i+0x16e>
 80087d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087e0:	e03a      	b.n	8008858 <_printf_i+0xa8>
 80087e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087e6:	2b15      	cmp	r3, #21
 80087e8:	d8f6      	bhi.n	80087d8 <_printf_i+0x28>
 80087ea:	a001      	add	r0, pc, #4	; (adr r0, 80087f0 <_printf_i+0x40>)
 80087ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087f0:	08008849 	.word	0x08008849
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	080087d9 	.word	0x080087d9
 80087fc:	080087d9 	.word	0x080087d9
 8008800:	080087d9 	.word	0x080087d9
 8008804:	080087d9 	.word	0x080087d9
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080087d9 	.word	0x080087d9
 8008810:	080087d9 	.word	0x080087d9
 8008814:	080087d9 	.word	0x080087d9
 8008818:	080087d9 	.word	0x080087d9
 800881c:	08008969 	.word	0x08008969
 8008820:	0800888d 	.word	0x0800888d
 8008824:	0800894b 	.word	0x0800894b
 8008828:	080087d9 	.word	0x080087d9
 800882c:	080087d9 	.word	0x080087d9
 8008830:	0800898b 	.word	0x0800898b
 8008834:	080087d9 	.word	0x080087d9
 8008838:	0800888d 	.word	0x0800888d
 800883c:	080087d9 	.word	0x080087d9
 8008840:	080087d9 	.word	0x080087d9
 8008844:	08008953 	.word	0x08008953
 8008848:	680b      	ldr	r3, [r1, #0]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	600a      	str	r2, [r1, #0]
 8008850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008858:	2301      	movs	r3, #1
 800885a:	e0a3      	b.n	80089a4 <_printf_i+0x1f4>
 800885c:	6825      	ldr	r5, [r4, #0]
 800885e:	6808      	ldr	r0, [r1, #0]
 8008860:	062e      	lsls	r6, r5, #24
 8008862:	f100 0304 	add.w	r3, r0, #4
 8008866:	d50a      	bpl.n	800887e <_printf_i+0xce>
 8008868:	6805      	ldr	r5, [r0, #0]
 800886a:	600b      	str	r3, [r1, #0]
 800886c:	2d00      	cmp	r5, #0
 800886e:	da03      	bge.n	8008878 <_printf_i+0xc8>
 8008870:	232d      	movs	r3, #45	; 0x2d
 8008872:	426d      	negs	r5, r5
 8008874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008878:	485e      	ldr	r0, [pc, #376]	; (80089f4 <_printf_i+0x244>)
 800887a:	230a      	movs	r3, #10
 800887c:	e019      	b.n	80088b2 <_printf_i+0x102>
 800887e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008882:	6805      	ldr	r5, [r0, #0]
 8008884:	600b      	str	r3, [r1, #0]
 8008886:	bf18      	it	ne
 8008888:	b22d      	sxthne	r5, r5
 800888a:	e7ef      	b.n	800886c <_printf_i+0xbc>
 800888c:	680b      	ldr	r3, [r1, #0]
 800888e:	6825      	ldr	r5, [r4, #0]
 8008890:	1d18      	adds	r0, r3, #4
 8008892:	6008      	str	r0, [r1, #0]
 8008894:	0628      	lsls	r0, r5, #24
 8008896:	d501      	bpl.n	800889c <_printf_i+0xec>
 8008898:	681d      	ldr	r5, [r3, #0]
 800889a:	e002      	b.n	80088a2 <_printf_i+0xf2>
 800889c:	0669      	lsls	r1, r5, #25
 800889e:	d5fb      	bpl.n	8008898 <_printf_i+0xe8>
 80088a0:	881d      	ldrh	r5, [r3, #0]
 80088a2:	4854      	ldr	r0, [pc, #336]	; (80089f4 <_printf_i+0x244>)
 80088a4:	2f6f      	cmp	r7, #111	; 0x6f
 80088a6:	bf0c      	ite	eq
 80088a8:	2308      	moveq	r3, #8
 80088aa:	230a      	movne	r3, #10
 80088ac:	2100      	movs	r1, #0
 80088ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088b2:	6866      	ldr	r6, [r4, #4]
 80088b4:	60a6      	str	r6, [r4, #8]
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	bfa2      	ittt	ge
 80088ba:	6821      	ldrge	r1, [r4, #0]
 80088bc:	f021 0104 	bicge.w	r1, r1, #4
 80088c0:	6021      	strge	r1, [r4, #0]
 80088c2:	b90d      	cbnz	r5, 80088c8 <_printf_i+0x118>
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	d04d      	beq.n	8008964 <_printf_i+0x1b4>
 80088c8:	4616      	mov	r6, r2
 80088ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ce:	fb03 5711 	mls	r7, r3, r1, r5
 80088d2:	5dc7      	ldrb	r7, [r0, r7]
 80088d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088d8:	462f      	mov	r7, r5
 80088da:	42bb      	cmp	r3, r7
 80088dc:	460d      	mov	r5, r1
 80088de:	d9f4      	bls.n	80088ca <_printf_i+0x11a>
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d10b      	bne.n	80088fc <_printf_i+0x14c>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	07df      	lsls	r7, r3, #31
 80088e8:	d508      	bpl.n	80088fc <_printf_i+0x14c>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	4299      	cmp	r1, r3
 80088f0:	bfde      	ittt	le
 80088f2:	2330      	movle	r3, #48	; 0x30
 80088f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088fc:	1b92      	subs	r2, r2, r6
 80088fe:	6122      	str	r2, [r4, #16]
 8008900:	f8cd a000 	str.w	sl, [sp]
 8008904:	464b      	mov	r3, r9
 8008906:	aa03      	add	r2, sp, #12
 8008908:	4621      	mov	r1, r4
 800890a:	4640      	mov	r0, r8
 800890c:	f7ff fee2 	bl	80086d4 <_printf_common>
 8008910:	3001      	adds	r0, #1
 8008912:	d14c      	bne.n	80089ae <_printf_i+0x1fe>
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	b004      	add	sp, #16
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	4835      	ldr	r0, [pc, #212]	; (80089f4 <_printf_i+0x244>)
 8008920:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	680e      	ldr	r6, [r1, #0]
 8008928:	061f      	lsls	r7, r3, #24
 800892a:	f856 5b04 	ldr.w	r5, [r6], #4
 800892e:	600e      	str	r6, [r1, #0]
 8008930:	d514      	bpl.n	800895c <_printf_i+0x1ac>
 8008932:	07d9      	lsls	r1, r3, #31
 8008934:	bf44      	itt	mi
 8008936:	f043 0320 	orrmi.w	r3, r3, #32
 800893a:	6023      	strmi	r3, [r4, #0]
 800893c:	b91d      	cbnz	r5, 8008946 <_printf_i+0x196>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f023 0320 	bic.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	2310      	movs	r3, #16
 8008948:	e7b0      	b.n	80088ac <_printf_i+0xfc>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	2378      	movs	r3, #120	; 0x78
 8008954:	4828      	ldr	r0, [pc, #160]	; (80089f8 <_printf_i+0x248>)
 8008956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800895a:	e7e3      	b.n	8008924 <_printf_i+0x174>
 800895c:	065e      	lsls	r6, r3, #25
 800895e:	bf48      	it	mi
 8008960:	b2ad      	uxthmi	r5, r5
 8008962:	e7e6      	b.n	8008932 <_printf_i+0x182>
 8008964:	4616      	mov	r6, r2
 8008966:	e7bb      	b.n	80088e0 <_printf_i+0x130>
 8008968:	680b      	ldr	r3, [r1, #0]
 800896a:	6826      	ldr	r6, [r4, #0]
 800896c:	6960      	ldr	r0, [r4, #20]
 800896e:	1d1d      	adds	r5, r3, #4
 8008970:	600d      	str	r5, [r1, #0]
 8008972:	0635      	lsls	r5, r6, #24
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	d501      	bpl.n	800897c <_printf_i+0x1cc>
 8008978:	6018      	str	r0, [r3, #0]
 800897a:	e002      	b.n	8008982 <_printf_i+0x1d2>
 800897c:	0671      	lsls	r1, r6, #25
 800897e:	d5fb      	bpl.n	8008978 <_printf_i+0x1c8>
 8008980:	8018      	strh	r0, [r3, #0]
 8008982:	2300      	movs	r3, #0
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	4616      	mov	r6, r2
 8008988:	e7ba      	b.n	8008900 <_printf_i+0x150>
 800898a:	680b      	ldr	r3, [r1, #0]
 800898c:	1d1a      	adds	r2, r3, #4
 800898e:	600a      	str	r2, [r1, #0]
 8008990:	681e      	ldr	r6, [r3, #0]
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	2100      	movs	r1, #0
 8008996:	4630      	mov	r0, r6
 8008998:	f7f7 fc22 	bl	80001e0 <memchr>
 800899c:	b108      	cbz	r0, 80089a2 <_printf_i+0x1f2>
 800899e:	1b80      	subs	r0, r0, r6
 80089a0:	6060      	str	r0, [r4, #4]
 80089a2:	6863      	ldr	r3, [r4, #4]
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	2300      	movs	r3, #0
 80089a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ac:	e7a8      	b.n	8008900 <_printf_i+0x150>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	4632      	mov	r2, r6
 80089b2:	4649      	mov	r1, r9
 80089b4:	4640      	mov	r0, r8
 80089b6:	47d0      	blx	sl
 80089b8:	3001      	adds	r0, #1
 80089ba:	d0ab      	beq.n	8008914 <_printf_i+0x164>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	079b      	lsls	r3, r3, #30
 80089c0:	d413      	bmi.n	80089ea <_printf_i+0x23a>
 80089c2:	68e0      	ldr	r0, [r4, #12]
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	4298      	cmp	r0, r3
 80089c8:	bfb8      	it	lt
 80089ca:	4618      	movlt	r0, r3
 80089cc:	e7a4      	b.n	8008918 <_printf_i+0x168>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4632      	mov	r2, r6
 80089d2:	4649      	mov	r1, r9
 80089d4:	4640      	mov	r0, r8
 80089d6:	47d0      	blx	sl
 80089d8:	3001      	adds	r0, #1
 80089da:	d09b      	beq.n	8008914 <_printf_i+0x164>
 80089dc:	3501      	adds	r5, #1
 80089de:	68e3      	ldr	r3, [r4, #12]
 80089e0:	9903      	ldr	r1, [sp, #12]
 80089e2:	1a5b      	subs	r3, r3, r1
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	dcf2      	bgt.n	80089ce <_printf_i+0x21e>
 80089e8:	e7eb      	b.n	80089c2 <_printf_i+0x212>
 80089ea:	2500      	movs	r5, #0
 80089ec:	f104 0619 	add.w	r6, r4, #25
 80089f0:	e7f5      	b.n	80089de <_printf_i+0x22e>
 80089f2:	bf00      	nop
 80089f4:	08009235 	.word	0x08009235
 80089f8:	08009246 	.word	0x08009246

080089fc <_putc_r>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	460d      	mov	r5, r1
 8008a00:	4614      	mov	r4, r2
 8008a02:	4606      	mov	r6, r0
 8008a04:	b118      	cbz	r0, 8008a0e <_putc_r+0x12>
 8008a06:	6983      	ldr	r3, [r0, #24]
 8008a08:	b90b      	cbnz	r3, 8008a0e <_putc_r+0x12>
 8008a0a:	f7ff fa8b 	bl	8007f24 <__sinit>
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <_putc_r+0x84>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	d124      	bne.n	8008a5e <_putc_r+0x62>
 8008a14:	6874      	ldr	r4, [r6, #4]
 8008a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a18:	07d8      	lsls	r0, r3, #31
 8008a1a:	d405      	bmi.n	8008a28 <_putc_r+0x2c>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	0599      	lsls	r1, r3, #22
 8008a20:	d402      	bmi.n	8008a28 <_putc_r+0x2c>
 8008a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a24:	f7ff fb1c 	bl	8008060 <__retarget_lock_acquire_recursive>
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	da05      	bge.n	8008a3e <_putc_r+0x42>
 8008a32:	69a2      	ldr	r2, [r4, #24]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	db1c      	blt.n	8008a72 <_putc_r+0x76>
 8008a38:	b2eb      	uxtb	r3, r5
 8008a3a:	2b0a      	cmp	r3, #10
 8008a3c:	d019      	beq.n	8008a72 <_putc_r+0x76>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	701d      	strb	r5, [r3, #0]
 8008a46:	b2ed      	uxtb	r5, r5
 8008a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a4a:	07da      	lsls	r2, r3, #31
 8008a4c:	d405      	bmi.n	8008a5a <_putc_r+0x5e>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	059b      	lsls	r3, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_putc_r+0x5e>
 8008a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a56:	f7ff fb04 	bl	8008062 <__retarget_lock_release_recursive>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <_putc_r+0x88>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d101      	bne.n	8008a68 <_putc_r+0x6c>
 8008a64:	68b4      	ldr	r4, [r6, #8]
 8008a66:	e7d6      	b.n	8008a16 <_putc_r+0x1a>
 8008a68:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <_putc_r+0x8c>)
 8008a6a:	429c      	cmp	r4, r3
 8008a6c:	bf08      	it	eq
 8008a6e:	68f4      	ldreq	r4, [r6, #12]
 8008a70:	e7d1      	b.n	8008a16 <_putc_r+0x1a>
 8008a72:	4629      	mov	r1, r5
 8008a74:	4622      	mov	r2, r4
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff f858 	bl	8007b2c <__swbuf_r>
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	e7e3      	b.n	8008a48 <_putc_r+0x4c>
 8008a80:	080091e4 	.word	0x080091e4
 8008a84:	08009204 	.word	0x08009204
 8008a88:	080091c4 	.word	0x080091c4

08008a8c <_read_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d07      	ldr	r5, [pc, #28]	; (8008aac <_read_r+0x20>)
 8008a90:	4604      	mov	r4, r0
 8008a92:	4608      	mov	r0, r1
 8008a94:	4611      	mov	r1, r2
 8008a96:	2200      	movs	r2, #0
 8008a98:	602a      	str	r2, [r5, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f7fa fcb2 	bl	8003404 <_read>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_read_r+0x1e>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_read_r+0x1e>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	200005d4 	.word	0x200005d4

08008ab0 <_fstat_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	; (8008ad0 <_fstat_r+0x20>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	f7fa fcca 	bl	8003456 <_fstat>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d102      	bne.n	8008acc <_fstat_r+0x1c>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	b103      	cbz	r3, 8008acc <_fstat_r+0x1c>
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	bf00      	nop
 8008ad0:	200005d4 	.word	0x200005d4

08008ad4 <_isatty_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	; (8008af0 <_isatty_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7fa fcc9 	bl	8003476 <_isatty>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_isatty_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_isatty_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	200005d4 	.word	0x200005d4

08008af4 <memmove>:
 8008af4:	4288      	cmp	r0, r1
 8008af6:	b510      	push	{r4, lr}
 8008af8:	eb01 0402 	add.w	r4, r1, r2
 8008afc:	d902      	bls.n	8008b04 <memmove+0x10>
 8008afe:	4284      	cmp	r4, r0
 8008b00:	4623      	mov	r3, r4
 8008b02:	d807      	bhi.n	8008b14 <memmove+0x20>
 8008b04:	1e43      	subs	r3, r0, #1
 8008b06:	42a1      	cmp	r1, r4
 8008b08:	d008      	beq.n	8008b1c <memmove+0x28>
 8008b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b12:	e7f8      	b.n	8008b06 <memmove+0x12>
 8008b14:	4402      	add	r2, r0
 8008b16:	4601      	mov	r1, r0
 8008b18:	428a      	cmp	r2, r1
 8008b1a:	d100      	bne.n	8008b1e <memmove+0x2a>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b26:	e7f7      	b.n	8008b18 <memmove+0x24>

08008b28 <_realloc_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	460e      	mov	r6, r1
 8008b30:	b921      	cbnz	r1, 8008b3c <_realloc_r+0x14>
 8008b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b36:	4611      	mov	r1, r2
 8008b38:	f7fe be86 	b.w	8007848 <_malloc_r>
 8008b3c:	b922      	cbnz	r2, 8008b48 <_realloc_r+0x20>
 8008b3e:	f7fe fe33 	bl	80077a8 <_free_r>
 8008b42:	4625      	mov	r5, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b48:	f000 f814 	bl	8008b74 <_malloc_usable_size_r>
 8008b4c:	42a0      	cmp	r0, r4
 8008b4e:	d20f      	bcs.n	8008b70 <_realloc_r+0x48>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7fe fe78 	bl	8007848 <_malloc_r>
 8008b58:	4605      	mov	r5, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d0f2      	beq.n	8008b44 <_realloc_r+0x1c>
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4622      	mov	r2, r4
 8008b62:	f7fe fe0b 	bl	800777c <memcpy>
 8008b66:	4631      	mov	r1, r6
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7fe fe1d 	bl	80077a8 <_free_r>
 8008b6e:	e7e9      	b.n	8008b44 <_realloc_r+0x1c>
 8008b70:	4635      	mov	r5, r6
 8008b72:	e7e7      	b.n	8008b44 <_realloc_r+0x1c>

08008b74 <_malloc_usable_size_r>:
 8008b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b78:	1f18      	subs	r0, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbc      	itt	lt
 8008b7e:	580b      	ldrlt	r3, [r1, r0]
 8008b80:	18c0      	addlt	r0, r0, r3
 8008b82:	4770      	bx	lr

08008b84 <_init>:
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	bf00      	nop
 8008b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8a:	bc08      	pop	{r3}
 8008b8c:	469e      	mov	lr, r3
 8008b8e:	4770      	bx	lr

08008b90 <_fini>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr
