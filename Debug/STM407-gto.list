
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  2000010c  080092d0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001df4  080092d0  00021df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016100  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003275  00000000  00000000  0003623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  000394b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232bb  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001551e  00000000  00000000  0005ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ec2  00000000  00000000  000742b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c17b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c90  00000000  00000000  0014c1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b50 	.word	0x08008b50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08008b50 	.word	0x08008b50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4798      	blx	r3
   WIZCHIP.CS._select();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0a12      	lsrs	r2, r2, #8
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4610      	mov	r0, r2
 80005ba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <WIZCHIP_READ+0x58>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <WIZCHIP_READ+0x58>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <WIZCHIP_READ+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	200f      	movs	r0, #15
 80005ee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <WIZCHIP_READ+0x58>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0a12      	lsrs	r2, r2, #8
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <WIZCHIP_READ+0x58>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4610      	mov	r0, r2
 8000608:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <WIZCHIP_READ+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <WIZCHIP_READ+0x58>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <WIZCHIP_READ+0x58>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4798      	blx	r3

   return ret;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]
   //uint8_t h = 0xF0;
   //uint8_t aa, ah;

   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	e02a      	b.n	80006aa <WIZCHIP_WRITE_BUF+0x7a>
  {

	 WIZCHIP.CS._select();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	20f0      	movs	r0, #240	; 0xf0
 8000660:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b291      	uxth	r1, r2
 800066a:	8afa      	ldrh	r2, [r7, #22]
 800066c:	440a      	add	r2, r1
 800066e:	b292      	uxth	r2, r2
 8000670:	0a12      	lsrs	r2, r2, #8
 8000672:	b292      	uxth	r2, r2
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440a      	add	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte da0ta)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	440a      	add	r2, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
  	 WIZCHIP.CS._deselect();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d0      	bcc.n	8000654 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5200 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]
 80006ee:	e02a      	b.n	8000746 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	200f      	movs	r0, #15
 80006fc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b291      	uxth	r1, r2
 8000706:	8afa      	ldrh	r2, [r7, #22]
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	0a12      	lsrs	r2, r2, #8
 800070e:	b292      	uxth	r2, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	8afa      	ldrh	r2, [r7, #22]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440a      	add	r2, r1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	8afa      	ldrh	r2, [r7, #22]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	188c      	adds	r4, r1, r2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
 8000746:	8afa      	ldrh	r2, [r7, #22]
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3d0      	bcc.n	80006f0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	2300      	movs	r3, #0
 8000778:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3304      	adds	r3, #4
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	3320      	adds	r3, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <WIZCHIP_READ>
 8000788:	4603      	mov	r3, r0
 800078a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b29c      	uxth	r4, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3304      	adds	r3, #4
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	3321      	adds	r3, #33	; 0x21
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff1a 	bl	80005d4 <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4423      	add	r3, r4
 80007a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3304      	adds	r3, #4
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	3320      	adds	r3, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0c 	bl	80005d4 <WIZCHIP_READ>
 80007bc:	4603      	mov	r3, r0
 80007be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3304      	adds	r3, #4
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	3321      	adds	r3, #33	; 0x21
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff00 	bl	80005d4 <WIZCHIP_READ>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4423      	add	r3, r4
 80007da:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d1ca      	bne.n	800077a <getSn_TX_FSR+0x12>
   return val;
 80007e4:	89fb      	ldrh	r3, [r7, #14]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80007ee:	b590      	push	{r4, r7, lr}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3304      	adds	r3, #4
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	3326      	adds	r3, #38	; 0x26
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <WIZCHIP_READ>
 800080e:	4603      	mov	r3, r0
 8000810:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b29c      	uxth	r4, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3304      	adds	r3, #4
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	3327      	adds	r3, #39	; 0x27
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <WIZCHIP_READ>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4423      	add	r3, r4
 800082c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d016      	beq.n	8000862 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3304      	adds	r3, #4
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	3326      	adds	r3, #38	; 0x26
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fec9 	bl	80005d4 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	3327      	adds	r3, #39	; 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff febd 	bl	80005d4 <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d1ca      	bne.n	8000800 <getSn_RX_RSR+0x12>
   return val;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800087e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000882:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e020      	b.n	80008cc <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 800088a:	201a      	movs	r0, #26
 800088c:	f7ff fea2 	bl	80005d4 <WIZCHIP_READ>
 8000890:	4603      	mov	r3, r0
 8000892:	4619      	mov	r1, r3
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	ea01 0203 	and.w	r2, r1, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd9      	blt.n	800088a <getSn_RxBASE+0x16>

   return rxbase;
 80008d6:	68bb      	ldr	r3, [r7, #8]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 80008ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ee:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e020      	b.n	8000938 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 80008f6:	201b      	movs	r0, #27
 80008f8:	f7ff fe6c 	bl	80005d4 <WIZCHIP_READ>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	ea01 0203 	and.w	r2, r1, r3
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	2201      	movs	r2, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	b29b      	uxth	r3, r3
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	461a      	mov	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	3301      	adds	r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbd9      	blt.n	80008f6 <getSn_TxBASE+0x16>
   return txbase;
 8000942:	68bb      	ldr	r3, [r7, #8]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3304      	adds	r3, #4
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	3324      	adds	r3, #36	; 0x24
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe35 	bl	80005d4 <WIZCHIP_READ>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29c      	uxth	r4, r3
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3304      	adds	r3, #4
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	3325      	adds	r3, #37	; 0x25
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe2a 	bl	80005d4 <WIZCHIP_READ>
 8000980:	4603      	mov	r3, r0
 8000982:	b29b      	uxth	r3, r3
 8000984:	4423      	add	r3, r4
 8000986:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8000988:	201b      	movs	r0, #27
 800098a:	f7ff fe23 	bl	80005d4 <WIZCHIP_READ>
 800098e:	4603      	mov	r3, r0
 8000990:	4619      	mov	r1, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	ea01 0203 	and.w	r2, r1, r3
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa42 f303 	asr.w	r3, r2, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	4013      	ands	r3, r2
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff8a 	bl	80008e0 <getSn_TxBASE>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	89bb      	ldrh	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80009d6:	89ba      	ldrh	r2, [r7, #12]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	18d4      	adds	r4, r2, r3
 80009dc:	201b      	movs	r0, #27
 80009de:	f7ff fdf9 	bl	80005d4 <WIZCHIP_READ>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4619      	mov	r1, r3
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	ea01 0203 	and.w	r2, r1, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa42 f303 	asr.w	r3, r2, r3
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dd33      	ble.n	8000a72 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8000a0a:	201b      	movs	r0, #27
 8000a0c:	f7ff fde2 	bl	80005d4 <WIZCHIP_READ>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4619      	mov	r1, r3
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	ea01 0203 	and.w	r2, r1, r3
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa42 f303 	asr.w	r3, r2, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a3c:	897b      	ldrh	r3, [r7, #10]
 8000a3e:	893a      	ldrh	r2, [r7, #8]
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdf4 	bl	8000630 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8000a48:	893b      	ldrh	r3, [r7, #8]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	893b      	ldrh	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff40 	bl	80008e0 <getSn_TxBASE>
 8000a60:	4603      	mov	r3, r0
 8000a62:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a64:	897b      	ldrh	r3, [r7, #10]
 8000a66:	893a      	ldrh	r2, [r7, #8]
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fde0 	bl	8000630 <WIZCHIP_WRITE_BUF>
 8000a70:	e005      	b.n	8000a7e <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8000a72:	897b      	ldrh	r3, [r7, #10]
 8000a74:	88ba      	ldrh	r2, [r7, #4]
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fdd9 	bl	8000630 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 8000a7e:	89fa      	ldrh	r2, [r7, #14]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	3324      	adds	r3, #36	; 0x24
 8000a8e:	461a      	mov	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	f7ff fd6c 	bl	8000578 <WIZCHIP_WRITE>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	3325      	adds	r3, #37	; 0x25
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f7ff fd61 	bl	8000578 <WIZCHIP_WRITE>
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000abe:	b590      	push	{r4, r7, lr}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	3328      	adds	r3, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd7c 	bl	80005d4 <WIZCHIP_READ>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29c      	uxth	r4, r3
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	3329      	adds	r3, #41	; 0x29
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd71 	bl	80005d4 <WIZCHIP_READ>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4423      	add	r3, r4
 8000af8:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8000afa:	201a      	movs	r0, #26
 8000afc:	f7ff fd6a 	bl	80005d4 <WIZCHIP_READ>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4619      	mov	r1, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	ea01 0203 	and.w	r2, r1, r3
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fe9e 	bl	8000874 <getSn_RxBASE>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8000b42:	89ba      	ldrh	r2, [r7, #12]
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	18d4      	adds	r4, r2, r3
 8000b48:	201a      	movs	r0, #26
 8000b4a:	f7ff fd43 	bl	80005d4 <WIZCHIP_READ>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	ea01 0203 	and.w	r2, r1, r3
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa42 f303 	asr.w	r3, r2, r3
 8000b68:	2201      	movs	r2, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	429c      	cmp	r4, r3
 8000b74:	dd33      	ble.n	8000bde <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8000b76:	201a      	movs	r0, #26
 8000b78:	f7ff fd2c 	bl	80005d4 <WIZCHIP_READ>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	ea01 0203 	and.w	r2, r1, r3
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	2201      	movs	r2, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8000ba8:	897b      	ldrh	r3, [r7, #10]
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd8c 	bl	80006cc <WIZCHIP_READ_BUF>
    wizdata += size;
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	893b      	ldrh	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe54 	bl	8000874 <getSn_RxBASE>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8000bd0:	897b      	ldrh	r3, [r7, #10]
 8000bd2:	893a      	ldrh	r2, [r7, #8]
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd78 	bl	80006cc <WIZCHIP_READ_BUF>
 8000bdc:	e005      	b.n	8000bea <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	88ba      	ldrh	r2, [r7, #4]
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd71 	bl	80006cc <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	3328      	adds	r3, #40	; 0x28
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4610      	mov	r0, r2
 8000c08:	f7ff fcb6 	bl	8000578 <WIZCHIP_WRITE>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	3329      	adds	r3, #41	; 0x29
 8000c14:	461a      	mov	r2, r3
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fcab 	bl	8000578 <WIZCHIP_WRITE>
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71bb      	strb	r3, [r7, #6]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d902      	bls.n	8000c56 <socket+0x2a>
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e0e2      	b.n	8000e1c <socket+0x1f0>
	switch(protocol)
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d819      	bhi.n	8000c92 <socket+0x66>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <socket+0x38>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c79 	.word	0x08000c79
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000c99 	.word	0x08000c99
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	08000c99 	.word	0x08000c99
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	200f      	movs	r0, #15
 8000c82:	f7ff fd23 	bl	80006cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <socket+0x6c>
 8000c8c:	f06f 0302 	mvn.w	r3, #2
 8000c90:	e0c4      	b.n	8000e1c <socket+0x1f0>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000c92:	f06f 0304 	mvn.w	r3, #4
 8000c96:	e0c1      	b.n	8000e1c <socket+0x1f0>
         break;
 8000c98:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <socket+0x7e>
 8000ca4:	f06f 0305 	mvn.w	r3, #5
 8000ca8:	e0b8      	b.n	8000e1c <socket+0x1f0>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d019      	beq.n	8000ce4 <socket+0xb8>
	{
   	switch(protocol)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d002      	beq.n	8000cbc <socket+0x90>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d008      	beq.n	8000ccc <socket+0xa0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000cba:	e018      	b.n	8000cee <socket+0xc2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d110      	bne.n	8000ce8 <socket+0xbc>
 8000cc6:	f06f 0305 	mvn.w	r3, #5
 8000cca:	e0a7      	b.n	8000e1c <socket+0x1f0>
   	      if(flag & SF_IGMP_VER2)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <socket+0xc0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db06      	blt.n	8000cec <socket+0xc0>
 8000cde:	f06f 0305 	mvn.w	r3, #5
 8000ce2:	e09b      	b.n	8000e1c <socket+0x1f0>
   	}
   }
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <socket+0xc2>
   	      break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <socket+0xc2>
   	      break;
 8000cec:	bf00      	nop
	close(sn);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f8a1 	bl	8000e38 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b25a      	sxtb	r2, r3
 8000d08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fc30 	bl	8000578 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d110      	bne.n	8000d40 <socket+0x114>
	{
	   port = sock_any_port++;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <socket+0x1f8>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <socket+0x1f8>)
 8000d28:	8011      	strh	r1, [r2, #0]
 8000d2a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <socket+0x1f8>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <socket+0x114>
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <socket+0x1f8>)
 8000d3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d3e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3304      	adds	r3, #4
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	3304      	adds	r3, #4
 8000d48:	461a      	mov	r2, r3
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff fc0f 	bl	8000578 <WIZCHIP_WRITE>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	3305      	adds	r3, #5
 8000d62:	461a      	mov	r2, r3
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f7ff fc04 	bl	8000578 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3304      	adds	r3, #4
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	3301      	adds	r3, #1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbfc 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d80:	bf00      	nop
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3304      	adds	r3, #4
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc22 	bl	80005d4 <WIZCHIP_READ>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f5      	bne.n	8000d82 <socket+0x156>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <socket+0x1fc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4013      	ands	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <socket+0x1fc>)
 8000db2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <socket+0x1fc>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <socket+0x1fc>)
 8000dd0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <socket+0x200>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <socket+0x200>)
 8000dee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <socket+0x204>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <socket+0x208>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e02:	bf00      	nop
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3304      	adds	r3, #4
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbe1 	bl	80005d4 <WIZCHIP_READ>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f5      	beq.n	8000e04 <socket+0x1d8>
   return (int8_t)sn;
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000128 	.word	0x20000128
 8000e2c:	2000012a 	.word	0x2000012a
 8000e30:	2000012c 	.word	0x2000012c
 8000e34:	20000134 	.word	0x20000134

08000e38 <close>:

int8_t close(uint8_t sn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d902      	bls.n	8000e4e <close+0x16>
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e04d      	b.n	8000eea <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3304      	adds	r3, #4
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	3301      	adds	r3, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb8d 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000e5e:	bf00      	nop
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3304      	adds	r3, #4
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	3301      	adds	r3, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fbb3 	bl	80005d4 <WIZCHIP_READ>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f5      	bne.n	8000e60 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	3304      	adds	r3, #4
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb7a 	bl	8000578 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2201      	movs	r2, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <close+0xbc>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <close+0xbc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <close+0xc0>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <close+0xc0>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <close+0xc4>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <close+0xc8>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000ed2:	bf00      	nop
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	3303      	adds	r3, #3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb79 	bl	80005d4 <WIZCHIP_READ>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f5      	bne.n	8000ed4 <close+0x9c>
	return SOCK_OK;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000128 	.word	0x20000128
 8000ef8:	2000012a 	.word	0x2000012a
 8000efc:	2000012c 	.word	0x2000012c
 8000f00:	20000134 	.word	0x20000134

08000f04 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d902      	bls.n	8000f20 <connect+0x1c>
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e0b1      	b.n	8001084 <connect+0x180>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3304      	adds	r3, #4
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb54 	bl	80005d4 <WIZCHIP_READ>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <connect+0x38>
 8000f36:	f06f 0304 	mvn.w	r3, #4
 8000f3a:	e0a3      	b.n	8001084 <connect+0x180>
   CHECK_SOCKINIT();
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	3303      	adds	r3, #3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fb45 	bl	80005d4 <WIZCHIP_READ>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b13      	cmp	r3, #19
 8000f4e:	d002      	beq.n	8000f56 <connect+0x52>
 8000f50:	f06f 0302 	mvn.w	r3, #2
 8000f54:	e096      	b.n	8001084 <connect+0x180>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	3201      	adds	r2, #1
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	3202      	adds	r2, #2
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	3203      	adds	r2, #3
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d002      	beq.n	8000f94 <connect+0x90>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <connect+0x96>
 8000f94:	f06f 030b 	mvn.w	r3, #11
 8000f98:	e074      	b.n	8001084 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <connect+0xa2>
 8000fa0:	f06f 030a 	mvn.w	r3, #10
 8000fa4:	e06e      	b.n	8001084 <connect+0x180>
	setSn_DIPR(sn,addr);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	330c      	adds	r3, #12
 8000fae:	2204      	movs	r2, #4
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fb3c 	bl	8000630 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	3310      	adds	r3, #16
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4610      	mov	r0, r2
 8000fce:	f7ff fad3 	bl	8000578 <WIZCHIP_WRITE>
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	3311      	adds	r3, #17
 8000fda:	461a      	mov	r2, r3
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f7ff fac8 	bl	8000578 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3304      	adds	r3, #4
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fac0 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ff8:	bf00      	nop
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	3301      	adds	r3, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fae6 	bl	80005d4 <WIZCHIP_READ>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f5      	bne.n	8000ffa <connect+0xf6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <connect+0x188>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	fa42 f303 	asr.w	r3, r2, r3
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d025      	beq.n	800106e <connect+0x16a>
 8001022:	2300      	movs	r3, #0
 8001024:	e02e      	b.n	8001084 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	3304      	adds	r3, #4
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	3302      	adds	r3, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fad0 	bl	80005d4 <WIZCHIP_READ>
 8001034:	4603      	mov	r3, r0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <connect+0x150>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	3304      	adds	r3, #4
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	3302      	adds	r3, #2
 8001046:	2108      	movs	r1, #8
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa95 	bl	8000578 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800104e:	f06f 030c 	mvn.w	r3, #12
 8001052:	e017      	b.n	8001084 <connect+0x180>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	3304      	adds	r3, #4
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	3303      	adds	r3, #3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fab9 	bl	80005d4 <WIZCHIP_READ>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <connect+0x16a>
		{
			return SOCKERR_SOCKCLOSED;
 8001068:	f06f 0303 	mvn.w	r3, #3
 800106c:	e00a      	b.n	8001084 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	3304      	adds	r3, #4
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	3303      	adds	r3, #3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff faac 	bl	80005d4 <WIZCHIP_READ>
 800107c:	4603      	mov	r3, r0
 800107e:	2b17      	cmp	r3, #23
 8001080:	d1d1      	bne.n	8001026 <connect+0x122>
		}
	}
   
   return SOCK_OK;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000128 	.word	0x20000128

08001090 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b04      	cmp	r3, #4
 800109e:	d902      	bls.n	80010a6 <disconnect+0x16>
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	e059      	b.n	800115a <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3304      	adds	r3, #4
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa91 	bl	80005d4 <WIZCHIP_READ>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d002      	beq.n	80010c2 <disconnect+0x32>
 80010bc:	f06f 0304 	mvn.w	r3, #4
 80010c0:	e04b      	b.n	800115a <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	3304      	adds	r3, #4
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	3301      	adds	r3, #1
 80010ca:	2108      	movs	r1, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa53 	bl	8000578 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80010d2:	bf00      	nop
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3304      	adds	r3, #4
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	3301      	adds	r3, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa79 	bl	80005d4 <WIZCHIP_READ>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f5      	bne.n	80010d4 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2201      	movs	r2, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <disconnect+0xd4>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <disconnect+0xd4>)
 8001104:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <disconnect+0xd8>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	fa42 f303 	asr.w	r3, r2, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d014      	beq.n	8001144 <disconnect+0xb4>
 800111a:	2300      	movs	r3, #0
 800111c:	e01d      	b.n	800115a <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	3304      	adds	r3, #4
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	3302      	adds	r3, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa54 	bl	80005d4 <WIZCHIP_READ>
 800112c:	4603      	mov	r3, r0
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <disconnect+0xb4>
	   {
	      close(sn);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fe7d 	bl	8000e38 <close>
	      return SOCKERR_TIMEOUT;
 800113e:	f06f 030c 	mvn.w	r3, #12
 8001142:	e00a      	b.n	800115a <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3304      	adds	r3, #4
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	3303      	adds	r3, #3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa41 	bl	80005d4 <WIZCHIP_READ>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e2      	bne.n	800111e <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000012a 	.word	0x2000012a
 8001168:	20000128 	.word	0x20000128

0800116c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001180:	2300      	movs	r3, #0
 8001182:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d902      	bls.n	8001190 <send+0x24>
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e0d8      	b.n	8001342 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3304      	adds	r3, #4
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa1c 	bl	80005d4 <WIZCHIP_READ>
 800119c:	4603      	mov	r3, r0
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d002      	beq.n	80011ac <send+0x40>
 80011a6:	f06f 0304 	mvn.w	r3, #4
 80011aa:	e0ca      	b.n	8001342 <send+0x1d6>
   CHECK_SOCKDATA();
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <send+0x4c>
 80011b2:	f06f 030d 	mvn.w	r3, #13
 80011b6:	e0c4      	b.n	8001342 <send+0x1d6>
   tmp = getSn_SR(sn);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	3304      	adds	r3, #4
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	3303      	adds	r3, #3
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa07 	bl	80005d4 <WIZCHIP_READ>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b17      	cmp	r3, #23
 80011ce:	d005      	beq.n	80011dc <send+0x70>
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b1c      	cmp	r3, #28
 80011d4:	d002      	beq.n	80011dc <send+0x70>
 80011d6:	f06f 0306 	mvn.w	r3, #6
 80011da:	e0b2      	b.n	8001342 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <send+0x1e0>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	fa42 f303 	asr.w	r3, r2, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d033      	beq.n	8001258 <send+0xec>
   {
      tmp = getSn_IR(sn);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3304      	adds	r3, #4
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	3302      	adds	r3, #2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9eb 	bl	80005d4 <WIZCHIP_READ>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d017      	beq.n	800123c <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3304      	adds	r3, #4
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	3302      	adds	r3, #2
 8001214:	2110      	movs	r1, #16
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9ae 	bl	8000578 <WIZCHIP_WRITE>
         //M20150401 : Typing Error
         //#if _WZICHIP_ == 5200
         sock_is_sending &= ~(1<<sn);         
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2201      	movs	r2, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	b21b      	sxth	r3, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <send+0x1e0>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4013      	ands	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <send+0x1e0>)
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	e00d      	b.n	8001258 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <send+0xe8>
      {
         close(sn);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fdf5 	bl	8000e38 <close>
         return SOCKERR_TIMEOUT;
 800124e:	f06f 030c 	mvn.w	r3, #12
 8001252:	e076      	b.n	8001342 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001254:	2300      	movs	r3, #0
 8001256:	e074      	b.n	8001342 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8001258:	201b      	movs	r0, #27
 800125a:	f7ff f9bb 	bl	80005d4 <WIZCHIP_READ>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	ea01 0203 	and.w	r2, r1, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa42 f303 	asr.w	r3, r2, r3
 8001278:	2201      	movs	r2, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	029b      	lsls	r3, r3, #10
 8001282:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001284:	88ba      	ldrh	r2, [r7, #4]
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d901      	bls.n	8001290 <send+0x124>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fa68 	bl	8000768 <getSn_TX_FSR>
 8001298:	4603      	mov	r3, r0
 800129a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	3304      	adds	r3, #4
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	3303      	adds	r3, #3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f995 	bl	80005d4 <WIZCHIP_READ>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b17      	cmp	r3, #23
 80012b2:	d009      	beq.n	80012c8 <send+0x15c>
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b1c      	cmp	r3, #28
 80012b8:	d006      	beq.n	80012c8 <send+0x15c>
      {
         close(sn);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fdbb 	bl	8000e38 <close>
         return SOCKERR_SOCKSTATUS;
 80012c2:	f06f 0306 	mvn.w	r3, #6
 80012c6:	e03c      	b.n	8001342 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <send+0x1e4>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <send+0x17c>
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	89bb      	ldrh	r3, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d901      	bls.n	80012e8 <send+0x17c>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e02c      	b.n	8001342 <send+0x1d6>
      if(len <= freesize) break;
 80012e8:	88ba      	ldrh	r2, [r7, #4]
 80012ea:	89bb      	ldrh	r3, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d900      	bls.n	80012f2 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 80012f0:	e7ce      	b.n	8001290 <send+0x124>
      if(len <= freesize) break;
 80012f2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fb26 	bl	800094c <wiz_send_data>
   
   setSn_CR(sn,Sn_CR_SEND);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3304      	adds	r3, #4
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	3301      	adds	r3, #1
 8001308:	2120      	movs	r1, #32
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f934 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001310:	bf00      	nop
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3304      	adds	r3, #4
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	3301      	adds	r3, #1
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f95a 	bl	80005d4 <WIZCHIP_READ>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f5      	bne.n	8001312 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2201      	movs	r2, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <send+0x1e0>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <send+0x1e0>)
 800133e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001340:	88bb      	ldrh	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000012a 	.word	0x2000012a
 8001350:	20000128 	.word	0x20000128

08001354 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d902      	bls.n	8001378 <recv+0x24>
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e0a8      	b.n	80014ca <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	3304      	adds	r3, #4
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f928 	bl	80005d4 <WIZCHIP_READ>
 8001384:	4603      	mov	r3, r0
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	2b01      	cmp	r3, #1
 800138c:	d002      	beq.n	8001394 <recv+0x40>
 800138e:	f06f 0304 	mvn.w	r3, #4
 8001392:	e09a      	b.n	80014ca <recv+0x176>
   CHECK_SOCKDATA();
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <recv+0x4c>
 800139a:	f06f 030d 	mvn.w	r3, #13
 800139e:	e094      	b.n	80014ca <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 80013a0:	201a      	movs	r0, #26
 80013a2:	f7ff f917 	bl	80005d4 <WIZCHIP_READ>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	ea01 0203 	and.w	r2, r1, r3
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa42 f303 	asr.w	r3, r2, r3
 80013c0:	2201      	movs	r2, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80013cc:	89ba      	ldrh	r2, [r7, #12]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d201      	bcs.n	80013d8 <recv+0x84>
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fa07 	bl	80007ee <getSn_RX_RSR>
 80013e0:	4603      	mov	r3, r0
 80013e2:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	3304      	adds	r3, #4
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	3303      	adds	r3, #3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8f1 	bl	80005d4 <WIZCHIP_READ>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b17      	cmp	r3, #23
 80013fa:	d030      	beq.n	800145e <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b1c      	cmp	r3, #28
 8001400:	d126      	bne.n	8001450 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001402:	89bb      	ldrh	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d13d      	bne.n	8001484 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f9ac 	bl	8000768 <getSn_TX_FSR>
 8001410:	4603      	mov	r3, r0
 8001412:	461c      	mov	r4, r3
 8001414:	201b      	movs	r0, #27
 8001416:	f7ff f8dd 	bl	80005d4 <WIZCHIP_READ>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	ea01 0203 	and.w	r2, r1, r3
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa42 f303 	asr.w	r3, r2, r3
 8001434:	2201      	movs	r2, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	429c      	cmp	r4, r3
 8001440:	d10d      	bne.n	800145e <recv+0x10a>
               {
                  close(sn);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fcf7 	bl	8000e38 <close>
                  return SOCKERR_SOCKSTATUS;
 800144a:	f06f 0306 	mvn.w	r3, #6
 800144e:	e03c      	b.n	80014ca <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fcf0 	bl	8000e38 <close>
               return SOCKERR_SOCKSTATUS;
 8001458:	f06f 0306 	mvn.w	r3, #6
 800145c:	e035      	b.n	80014ca <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <recv+0x180>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	fa42 f303 	asr.w	r3, r2, r3
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <recv+0x128>
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <recv+0x128>
 8001478:	2300      	movs	r3, #0
 800147a:	e026      	b.n	80014ca <recv+0x176>
         if(recvsize != 0) break;
 800147c:	89bb      	ldrh	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001482:	e7a9      	b.n	80013d8 <recv+0x84>
               if(recvsize != 0) break;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <recv+0x136>
         if(recvsize != 0) break;
 8001488:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800148a:	89ba      	ldrh	r2, [r7, #12]
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	d201      	bcs.n	8001496 <recv+0x142>
 8001492:	89bb      	ldrh	r3, [r7, #12]
 8001494:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001496:	88ba      	ldrh	r2, [r7, #4]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb0e 	bl	8000abe <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	3304      	adds	r3, #4
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	3301      	adds	r3, #1
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f863 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80014b2:	bf00      	nop
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3304      	adds	r3, #4
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	3301      	adds	r3, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f889 	bl	80005d4 <WIZCHIP_READ>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f5      	bne.n	80014b4 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80014c8:	88bb      	ldrh	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000128 	.word	0x20000128

080014d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 800154c:	2300      	movs	r3, #0
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <reg_wizchip_cs_cbfunc+0x16>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <reg_wizchip_cs_cbfunc+0x40>)
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <reg_wizchip_cs_cbfunc+0x44>)
 800158a:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <reg_wizchip_cs_cbfunc+0x40>)
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <reg_wizchip_cs_cbfunc+0x48>)
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	e006      	b.n	80015a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <reg_wizchip_cs_cbfunc+0x40>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <reg_wizchip_cs_cbfunc+0x40>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6153      	str	r3, [r2, #20]
   }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000004 	.word	0x20000004
 80015b4:	080014f5 	.word	0x080014f5
 80015b8:	08001503 	.word	0x08001503

080015bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80015c6:	bf00      	nop
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f9      	beq.n	80015c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <reg_wizchip_spi_cbfunc+0x24>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <reg_wizchip_spi_cbfunc+0x50>)
 80015e4:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <reg_wizchip_spi_cbfunc+0x54>)
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	e006      	b.n	80015fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	61d3      	str	r3, [r2, #28]
   }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000004 	.word	0x20000004
 800160c:	08001549 	.word	0x08001549
 8001610:	08001559 	.word	0x08001559

08001614 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == 5200 || _WIZCHIP_ == 5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d85e      	bhi.n	80016ec <ctlwizchip+0xd8>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <ctlwizchip+0x20>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001659 	.word	0x08001659
 8001638:	0800165f 	.word	0x0800165f
 800163c:	0800168b 	.word	0x0800168b
 8001640:	0800167f 	.word	0x0800167f
 8001644:	08001699 	.word	0x08001699
 8001648:	080016a5 	.word	0x080016a5
 800164c:	080016ed 	.word	0x080016ed
 8001650:	080016ed 	.word	0x080016ed
 8001654:	080016b3 	.word	0x080016b3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001658:	f000 f852 	bl	8001700 <wizchip_sw_reset>
         break;
 800165c:	e049      	b.n	80016f2 <ctlwizchip+0xde>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3304      	adds	r3, #4
 800166c:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f887 	bl	8001788 <wizchip_init>
 800167a:	4603      	mov	r3, r0
 800167c:	e03a      	b.n	80016f4 <ctlwizchip+0xe0>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f932 	bl	80018ec <wizchip_clrinterrupt>
         break;
 8001688:	e033      	b.n	80016f2 <ctlwizchip+0xde>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800168a:	f000 f952 	bl	8001932 <wizchip_getinterrupt>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	801a      	strh	r2, [r3, #0]
         break;
 8001696:	e02c      	b.n	80016f2 <ctlwizchip+0xde>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f96e 	bl	800197e <wizchip_setinterruptmask>
         break;         
 80016a2:	e026      	b.n	80016f2 <ctlwizchip+0xde>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80016a4:	f000 f98b 	bl	80019be <wizchip_getinterruptmask>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	801a      	strh	r2, [r3, #0]
         break;
 80016b0:	e01f      	b.n	80016f2 <ctlwizchip+0xde>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <ctlwizchip+0xe8>)
 80016b4:	789a      	ldrb	r2, [r3, #2]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <ctlwizchip+0xe8>)
 80016c0:	78d2      	ldrb	r2, [r2, #3]
 80016c2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3302      	adds	r3, #2
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <ctlwizchip+0xe8>)
 80016ca:	7912      	ldrb	r2, [r2, #4]
 80016cc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	3303      	adds	r3, #3
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <ctlwizchip+0xe8>)
 80016d4:	7952      	ldrb	r2, [r2, #5]
 80016d6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3304      	adds	r3, #4
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <ctlwizchip+0xe8>)
 80016de:	7992      	ldrb	r2, [r2, #6]
 80016e0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	3305      	adds	r3, #5
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
         break;
 80016ea:	e002      	b.n	80016f2 <ctlwizchip+0xde>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	e000      	b.n	80016f4 <ctlwizchip+0xe0>
   }
   return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000004 	.word	0x20000004

08001700 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2206      	movs	r2, #6
 800170a:	4619      	mov	r1, r3
 800170c:	2009      	movs	r0, #9
 800170e:	f7fe ffdd 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2204      	movs	r2, #4
 8001718:	4619      	mov	r1, r3
 800171a:	2001      	movs	r0, #1
 800171c:	f7fe ffd6 	bl	80006cc <WIZCHIP_READ_BUF>
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	2005      	movs	r0, #5
 800172a:	f7fe ffcf 	bl	80006cc <WIZCHIP_READ_BUF>
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2204      	movs	r2, #4
 8001734:	4619      	mov	r1, r3
 8001736:	200f      	movs	r0, #15
 8001738:	f7fe ffc8 	bl	80006cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	2000      	movs	r0, #0
 8001740:	f7fe ff1a 	bl	8000578 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001744:	2000      	movs	r0, #0
 8001746:	f7fe ff45 	bl	80005d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2206      	movs	r2, #6
 800174e:	4619      	mov	r1, r3
 8001750:	2009      	movs	r0, #9
 8001752:	f7fe ff6d 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2204      	movs	r2, #4
 800175c:	4619      	mov	r1, r3
 800175e:	2001      	movs	r0, #1
 8001760:	f7fe ff66 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2204      	movs	r2, #4
 800176a:	4619      	mov	r1, r3
 800176c:	2005      	movs	r0, #5
 800176e:	f7fe ff5f 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2204      	movs	r2, #4
 8001778:	4619      	mov	r1, r3
 800177a:	200f      	movs	r0, #15
 800177c:	f7fe ff58 	bl	8000630 <WIZCHIP_WRITE_BUF>
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001796:	f7ff ffb3 	bl	8001700 <wizchip_sw_reset>
   if(txsize)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d04e      	beq.n	800183e <wizchip_init+0xb6>
   {
      tmp = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73bb      	strb	r3, [r7, #14]
         tmp += txsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else      
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e015      	b.n	80017d6 <wizchip_init+0x4e>
      {
         tmp += txsize[i];
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	4413      	add	r3, r2
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 80017bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	dd02      	ble.n	80017ca <wizchip_init+0x42>
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	e08c      	b.n	80018e4 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	dde5      	ble.n	80017aa <wizchip_init+0x22>
      }
   #endif
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e028      	b.n	8001836 <wizchip_init+0xae>
         setSn_TXBUF_SIZE(i, txsize[i]);
 80017e4:	201b      	movs	r0, #27
 80017e6:	f7fe fef5 	bl	80005d4 <WIZCHIP_READ>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b25a      	sxtb	r2, r3
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2103      	movs	r1, #3
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4013      	ands	r3, r2
 8001802:	b25a      	sxtb	r2, r3
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	440b      	add	r3, r1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	b25b      	sxtb	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b25b      	sxtb	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4619      	mov	r1, r3
 8001824:	201b      	movs	r0, #27
 8001826:	f7fe fea7 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	2b03      	cmp	r3, #3
 800183c:	ddd2      	ble.n	80017e4 <wizchip_init+0x5c>
   }
   if(rxsize)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d04e      	beq.n	80018e2 <wizchip_init+0x15a>
   {
      tmp = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	73bb      	strb	r3, [r7, #14]
         tmp += rxsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else         
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e015      	b.n	800187a <wizchip_init+0xf2>
      {
         tmp += rxsize[i];
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	4413      	add	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 8001860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001864:	2b10      	cmp	r3, #16
 8001866:	dd02      	ble.n	800186e <wizchip_init+0xe6>
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	e03a      	b.n	80018e4 <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3301      	adds	r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b03      	cmp	r3, #3
 8001880:	dde5      	ble.n	800184e <wizchip_init+0xc6>
      }
   #endif

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e028      	b.n	80018da <wizchip_init+0x152>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8001888:	201a      	movs	r0, #26
 800188a:	f7fe fea3 	bl	80005d4 <WIZCHIP_READ>
 800188e:	4603      	mov	r3, r0
 8001890:	b25a      	sxtb	r2, r3
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2103      	movs	r1, #3
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	b25a      	sxtb	r2, r3
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	440b      	add	r3, r1
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	201a      	movs	r0, #26
 80018ca:	f7fe fe55 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	ddd2      	ble.n	8001888 <wizchip_init+0x100>
   }
   return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b29b      	uxth	r3, r3
 8001900:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < 5500
   ir |= (1<<4); // IK_WOL
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == 5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < 5200
   sir &= 0x0F;
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ == 5100
   ir |= sir;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	4313      	orrs	r3, r2
 8001918:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	2015      	movs	r0, #21
 8001926:	f7fe fe27 	bl	8000578 <WIZCHIP_WRITE>
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
   setSIR(sir);
#endif   
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
 8001944:	2015      	movs	r0, #21
 8001946:	f7fe fe45 	bl	80005d4 <WIZCHIP_READ>
 800194a:	4603      	mov	r3, r0
 800194c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8001950:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < 5500
#if _WIZCHIP_ < 5200
   ir &= ~(1<<4); // IK_WOL
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f023 0310 	bic.w	r3, r3, #16
 8001960:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b29a      	uxth	r2, r3
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001974:	88bb      	ldrh	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < 5500
   imr &= ~(1<<4); // IK_WOL
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f023 0310 	bic.w	r3, r3, #16
 800199a:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ == 5100
   simr &= 0x0F;
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4619      	mov	r1, r3
 80019b0:	2016      	movs	r0, #22
 80019b2:	f7fe fde1 	bl	8000578 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
 80019d0:	2016      	movs	r0, #22
 80019d2:	f7fe fdff 	bl	80005d4 <WIZCHIP_READ>
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < 5500
   imr &= ~(1<<4); // IK_WOL
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f023 0310 	bic.w	r3, r3, #16
 80019e8:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80019fc:	88bb      	ldrh	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2206      	movs	r2, #6
 8001a14:	4619      	mov	r1, r3
 8001a16:	2009      	movs	r0, #9
 8001a18:	f7fe fe0a 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	330e      	adds	r3, #14
 8001a20:	2204      	movs	r2, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7fe fe03 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	330a      	adds	r3, #10
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	2005      	movs	r0, #5
 8001a34:	f7fe fdfc 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3306      	adds	r3, #6
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	200f      	movs	r0, #15
 8001a42:	f7fe fdf5 	bl	8000630 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7c9a      	ldrb	r2, [r3, #18]
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <wizchip_setnetinfo+0x70>)
 8001a4c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7cda      	ldrb	r2, [r3, #19]
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <wizchip_setnetinfo+0x70>)
 8001a54:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7d1a      	ldrb	r2, [r3, #20]
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <wizchip_setnetinfo+0x70>)
 8001a5c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7d5a      	ldrb	r2, [r3, #21]
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <wizchip_setnetinfo+0x70>)
 8001a64:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7d9a      	ldrb	r2, [r3, #22]
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <wizchip_setnetinfo+0x74>)
 8001a6c:	701a      	strb	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000138 	.word	0x20000138
 8001a7c:	2000013c 	.word	0x2000013c

08001a80 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2206      	movs	r2, #6
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2009      	movs	r0, #9
 8001a90:	f7fe fe1c 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	330e      	adds	r3, #14
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7fe fe15 	bl	80006cc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	330a      	adds	r3, #10
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f7fe fe0e 	bl	80006cc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3306      	adds	r3, #6
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f7fe fe07 	bl	80006cc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <wizchip_getnetinfo+0x70>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <wizchip_getnetinfo+0x70>)
 8001ac8:	785a      	ldrb	r2, [r3, #1]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <wizchip_getnetinfo+0x70>)
 8001ad0:	789a      	ldrb	r2, [r3, #2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <wizchip_getnetinfo+0x70>)
 8001ad8:	78da      	ldrb	r2, [r3, #3]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <wizchip_getnetinfo+0x74>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	759a      	strb	r2, [r3, #22]
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000138 	.word	0x20000138
 8001af4:	2000013c 	.word	0x2000013c

08001af8 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <DHCP_time_handler+0x18>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <DHCP_time_handler+0x18>)
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000140 	.word	0x20000140

08001b14 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <DWT_Delay_us+0x40>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001b22:	f003 f8d1 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <DWT_Delay_us+0x44>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9b      	lsrs	r3, r3, #18
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001b38:	bf00      	nop
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <DWT_Delay_us+0x40>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3f8      	bcc.n	8001b3a <DWT_Delay_us+0x26>
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e0001000 	.word	0xe0001000
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <cs_sel>:
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);															\
} while(0)

char msg[60];

void cs_sel() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001b60:	2200      	movs	r2, #0
 8001b62:	2110      	movs	r1, #16
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <cs_sel+0x14>)
 8001b66:	f002 fc69 	bl	800443c <HAL_GPIO_WritePin>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020000 	.word	0x40020000

08001b74 <cs_desel>:

void cs_desel() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <cs_desel+0x14>)
 8001b7e:	f002 fc5d 	bl	800443c <HAL_GPIO_WritePin>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40020000 	.word	0x40020000

08001b8c <spi_rb>:

uint8_t spi_rb(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFFU);
 8001b92:	1df9      	adds	r1, r7, #7
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <spi_rb+0x20>)
 8001b9c:	f003 fe08 	bl	80057b0 <HAL_SPI_Receive>
	return rbuf;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001b94 	.word	0x20001b94

08001bb0 <spi_wb>:

void spi_wb(uint8_t b) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFFU);
 8001bba:	1df9      	adds	r1, r7, #7
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <spi_wb+0x20>)
 8001bc4:	f003 fcb8 	bl	8005538 <HAL_SPI_Transmit>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20001b94 	.word	0x20001b94

08001bd4 <HAL_UART_RxCpltCallback>:
DMA_InitTypeDef  DMA_InitStructure;

/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_UART_RxCpltCallback+0x1d4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	4970      	ldr	r1, [pc, #448]	; (8001dac <HAL_UART_RxCpltCallback+0x1d8>)
 8001bea:	4871      	ldr	r0, [pc, #452]	; (8001db0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001bec:	f004 fff1 	bl	8006bd2 <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	496d      	ldr	r1, [pc, #436]	; (8001dac <HAL_UART_RxCpltCallback+0x1d8>)
 8001bf6:	486e      	ldr	r0, [pc, #440]	; (8001db0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001bf8:	f004 ff59 	bl	8006aae <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 8001bfc:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_UART_RxCpltCallback+0x1e0>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d15e      	bne.n	8001cca <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	496b      	ldr	r1, [pc, #428]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001c10:	486b      	ldr	r0, [pc, #428]	; (8001dc0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001c12:	f004 ffde 	bl	8006bd2 <HAL_UART_Receive_IT>

		switch(status){
 8001c16:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d002      	beq.n	8001c24 <HAL_UART_RxCpltCallback+0x50>
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d011      	beq.n	8001c46 <HAL_UART_RxCpltCallback+0x72>
 8001c22:	e055      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8001c24:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b5b      	cmp	r3, #91	; 0x5b
 8001c2a:	d150      	bne.n	8001cce <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001c2e:	225b      	movs	r2, #91	; 0x5b
 8001c30:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001c32:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8001c38:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8001c44:	e043      	b.n	8001cce <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c4c:	d109      	bne.n	8001c62 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001c50:	225b      	movs	r2, #91	; 0x5b
 8001c52:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001c54:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8001c60:	e036      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b5d      	cmp	r3, #93	; 0x5d
 8001c68:	d115      	bne.n	8001c96 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b22      	cmp	r3, #34	; 0x22
 8001c70:	d10d      	bne.n	8001c8e <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	b2d1      	uxtb	r1, r2
 8001c7a:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c7c:	7011      	strb	r1, [r2, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001c82:	7819      	ldrb	r1, [r3, #0]
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001c86:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
		            status = START ;
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
		        break ;
 8001c94:	e01c      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 8001c96:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b24      	cmp	r3, #36	; 0x24
 8001c9c:	d80b      	bhi.n	8001cb6 <HAL_UART_RxCpltCallback+0xe2>
 8001c9e:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	b2d1      	uxtb	r1, r2
 8001ca6:	4a49      	ldr	r2, [pc, #292]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001ca8:	7011      	strb	r1, [r2, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_UART_RxCpltCallback+0x1e8>)
 8001cae:	7819      	ldrb	r1, [r3, #0]
 8001cb0:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001cb2:	5499      	strb	r1, [r3, r2]
		        break ;
 8001cb4:	e00c      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_UART_RxCpltCallback+0x1f8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
		        break ;
 8001cc8:	e002      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 8001cce:	bf00      	nop

	if (huart->Instance == USART6) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <HAL_UART_RxCpltCallback+0x200>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d15e      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	493e      	ldr	r1, [pc, #248]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001cde:	483f      	ldr	r0, [pc, #252]	; (8001ddc <HAL_UART_RxCpltCallback+0x208>)
 8001ce0:	f004 ff77 	bl	8006bd2 <HAL_UART_Receive_IT>

		switch(GTO_status){
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_UART_RxCpltCallback+0x20c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d002      	beq.n	8001cf2 <HAL_UART_RxCpltCallback+0x11e>
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d011      	beq.n	8001d14 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 8001cf0:	e055      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b28      	cmp	r3, #40	; 0x28
 8001cf8:	d150      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_UART_RxCpltCallback+0x210>)
 8001cfc:	2228      	movs	r2, #40	; 0x28
 8001cfe:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_UART_RxCpltCallback+0x20c>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 8001d0c:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_UART_RxCpltCallback+0x218>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
					break ;
 8001d12:	e043      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b28      	cmp	r3, #40	; 0x28
 8001d1a:	d109      	bne.n	8001d30 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_UART_RxCpltCallback+0x210>)
 8001d1e:	2228      	movs	r2, #40	; 0x28
 8001d20:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_UART_RxCpltCallback+0x20c>)
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
					break ;
 8001d2e:	e036      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b29      	cmp	r3, #41	; 0x29
 8001d36:	d115      	bne.n	8001d64 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b0a      	cmp	r3, #10
 8001d3e:	d10d      	bne.n	8001d5c <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	b2d1      	uxtb	r1, r2
 8001d48:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d4a:	7011      	strb	r1, [r2, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001d50:	7819      	ldrb	r1, [r3, #0]
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_UART_RxCpltCallback+0x210>)
 8001d54:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_UART_RxCpltCallback+0x218>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_UART_RxCpltCallback+0x20c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
					break ;
 8001d62:	e01c      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d80b      	bhi.n	8001d84 <HAL_UART_RxCpltCallback+0x1b0>
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	b2d1      	uxtb	r1, r2
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d76:	7011      	strb	r1, [r2, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_UART_RxCpltCallback+0x204>)
 8001d7c:	7819      	ldrb	r1, [r3, #0]
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_UART_RxCpltCallback+0x210>)
 8001d80:	5499      	strb	r1, [r3, r2]
					break ;
 8001d82:	e00c      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_UART_RxCpltCallback+0x20c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_UART_RxCpltCallback+0x214>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_UART_RxCpltCallback+0x218>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
					break ;
 8001d96:	e002      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
	}
 8001d98:	bf00      	nop
 8001d9a:	e000      	b.n	8001d9e <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 8001d9c:	bf00      	nop
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40011000 	.word	0x40011000
 8001dac:	20001add 	.word	0x20001add
 8001db0:	2000121c 	.word	0x2000121c
 8001db4:	20000144 	.word	0x20000144
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	20000218 	.word	0x20000218
 8001dc0:	20001bf0 	.word	0x20001bf0
 8001dc4:	2000002f 	.word	0x2000002f
 8001dc8:	20001d68 	.word	0x20001d68
 8001dcc:	2000017c 	.word	0x2000017c
 8001dd0:	20000145 	.word	0x20000145
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	20001b90 	.word	0x20001b90
 8001ddc:	20001ae0 	.word	0x20001ae0
 8001de0:	20000030 	.word	0x20000030
 8001de4:	20001b24 	.word	0x20001b24
 8001de8:	20001d94 	.word	0x20001d94
 8001dec:	20000147 	.word	0x20000147

08001df0 <HAL_GPIO_EXTI_Callback>:
/*##########################################################################################################*/

/*##########################################################################################################*/
//External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	printf("EXTERNAL INTERRUPT CALLBACK EVENT !! \r\n");
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x20>)
 8001dfc:	f005 fe00 	bl	8007a00 <puts>
	etherNet_Flag = 1;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x24>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
	//setSn_IR(0, 0xff);
	//TCP_Ethernet_Server();
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	08008b68 	.word	0x08008b68
 8001e14:	20000146 	.word	0x20000146

08001e18 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4804      	ldr	r0, [pc, #16]	; (8001e40 <_write+0x28>)
 8001e30:	f004 fe3d 	bl	8006aae <HAL_UART_Transmit>
	return len;
 8001e34:	687b      	ldr	r3, [r7, #4]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000121c 	.word	0x2000121c

08001e44 <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe f9be 	bl	80001d0 <strlen>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	230a      	movs	r3, #10
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f004 fe26 	bl	8006aae <HAL_UART_Transmit>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8001e74:	6838      	ldr	r0, [r7, #0]
 8001e76:	f7fe f9ab 	bl	80001d0 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	230a      	movs	r3, #10
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f004 fe13 	bl	8006aae <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8001e88:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001e8c:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001e8e:	f107 010c 	add.w	r1, r7, #12
 8001e92:	230a      	movs	r3, #10
 8001e94:	2202      	movs	r2, #2
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f004 fe09 	bl	8006aae <HAL_UART_Transmit>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b092      	sub	sp, #72	; 0x48
 8001ea8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eaa:	f001 fc73 	bl	8003794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eae:	f000 fb15 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb2:	f000 fdf1 	bl	8002a98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb6:	f000 fdcf 	bl	8002a58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eba:	f000 fd77 	bl	80029ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001ebe:	f000 fd4b 	bl	8002958 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001ec2:	f000 fcf5 	bl	80028b0 <MX_UART4_Init>
  MX_UART5_Init();
 8001ec6:	f000 fd1d 	bl	8002904 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8001eca:	f000 fd99 	bl	8002a00 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001ece:	f000 fbf3 	bl	80026b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001ed2:	f000 fc4f 	bl	8002774 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001ed6:	f000 fcb5 	bl	8002844 <MX_TIM7_Init>
  MX_RTC_Init();
 8001eda:	f000 fb93 	bl	8002604 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ede:	f000 fb7d 	bl	80025dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*##########################################################################################################*/
  /*START DEBUGGING MESSAGE*/

  printf("\r\n * Start STM32F407 for Master Anchor - 20210818 GTO * \r\n\n");
 8001ee2:	4885      	ldr	r0, [pc, #532]	; (80020f8 <main+0x254>)
 8001ee4:	f005 fd8c 	bl	8007a00 <puts>
  printf(" =============== 1. UART and 4Mbps test Okay (USART 1, 2, 3, 4, 5, 6) \r\n");
 8001ee8:	4884      	ldr	r0, [pc, #528]	; (80020fc <main+0x258>)
 8001eea:	f005 fd89 	bl	8007a00 <puts>
  printf(" =============== 2. GPIO test Okay \r\n");
 8001eee:	4884      	ldr	r0, [pc, #528]	; (8002100 <main+0x25c>)
 8001ef0:	f005 fd86 	bl	8007a00 <puts>
  printf(" =============== 3. SPI and EXTI test Okay (for Ethernet) \r\n");
 8001ef4:	4883      	ldr	r0, [pc, #524]	; (8002104 <main+0x260>)
 8001ef6:	f005 fd83 	bl	8007a00 <puts>
  printf(" =============== 4. ETHERNET test Okay (Handler Callback) \r\n");
 8001efa:	4883      	ldr	r0, [pc, #524]	; (8002108 <main+0x264>)
 8001efc:	f005 fd80 	bl	8007a00 <puts>
  printf("\n");
 8001f00:	200a      	movs	r0, #10
 8001f02:	f005 fcf9 	bl	80078f8 <putchar>
  /*##########################################################################################################*/

  /*##########################################################################################################*/
  /*INTERRUPT SET*/
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001f06:	2201      	movs	r2, #1
 8001f08:	4980      	ldr	r1, [pc, #512]	; (800210c <main+0x268>)
 8001f0a:	4881      	ldr	r0, [pc, #516]	; (8002110 <main+0x26c>)
 8001f0c:	f004 fe61 	bl	8006bd2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 8001f10:	2201      	movs	r2, #1
 8001f12:	4980      	ldr	r1, [pc, #512]	; (8002114 <main+0x270>)
 8001f14:	4880      	ldr	r0, [pc, #512]	; (8002118 <main+0x274>)
 8001f16:	f004 fe5c 	bl	8006bd2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	497f      	ldr	r1, [pc, #508]	; (800211c <main+0x278>)
 8001f1e:	4880      	ldr	r0, [pc, #512]	; (8002120 <main+0x27c>)
 8001f20:	f004 fe57 	bl	8006bd2 <HAL_UART_Receive_IT>

  /*PIN SET*/
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2a:	487e      	ldr	r0, [pc, #504]	; (8002124 <main+0x280>)
 8001f2c:	f002 fa86 	bl	800443c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 8001f30:	2200      	movs	r2, #0
 8001f32:	2101      	movs	r1, #1
 8001f34:	487c      	ldr	r0, [pc, #496]	; (8002128 <main+0x284>)
 8001f36:	f002 fa81 	bl	800443c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	487b      	ldr	r0, [pc, #492]	; (800212c <main+0x288>)
 8001f40:	f002 fa7c 	bl	800443c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 8001f44:	2200      	movs	r2, #0
 8001f46:	2108      	movs	r1, #8
 8001f48:	4878      	ldr	r0, [pc, #480]	; (800212c <main+0x288>)
 8001f4a:	f002 fa77 	bl	800443c <HAL_GPIO_WritePin>

  /*##########################################################################################################*/
  /*ETHERNET SET*/
  //gto
  //printf("\r\n EHTERNET RUNNING .... 20210813 \r\n");
  E_RST_HIGH();								// Ethernet Enable
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2110      	movs	r1, #16
 8001f52:	4876      	ldr	r0, [pc, #472]	; (800212c <main+0x288>)
 8001f54:	f002 fa72 	bl	800443c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, E_RST, 1);		// Ethernet Enable

  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);	// Ethernet Extra Interrupt Enable

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001f58:	4975      	ldr	r1, [pc, #468]	; (8002130 <main+0x28c>)
 8001f5a:	4876      	ldr	r0, [pc, #472]	; (8002134 <main+0x290>)
 8001f5c:	f7ff fb08 	bl	8001570 <reg_wizchip_cs_cbfunc>

  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8001f60:	4975      	ldr	r1, [pc, #468]	; (8002138 <main+0x294>)
 8001f62:	4876      	ldr	r0, [pc, #472]	; (800213c <main+0x298>)
 8001f64:	f7ff fb2a 	bl	80015bc <reg_wizchip_spi_cbfunc>


  wizchip_init(bufSize, bufSize);
 8001f68:	4975      	ldr	r1, [pc, #468]	; (8002140 <main+0x29c>)
 8001f6a:	4875      	ldr	r0, [pc, #468]	; (8002140 <main+0x29c>)
 8001f6c:	f7ff fc0c 	bl	8001788 <wizchip_init>
						  .sn 	= {255, 255, 255, 0},					// Subnet mask
						  .gw 	= {192, 168, 2, 1}};					// Gateway address
  */


  wiz_NetInfo netInfo = { .mac 	= {0x59, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	f8c3 2013 	str.w	r2, [r3, #19]
 8001f84:	4a6f      	ldr	r2, [pc, #444]	; (8002144 <main+0x2a0>)
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f8e:	6018      	str	r0, [r3, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	8019      	strh	r1, [r3, #0]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <main+0x2a4>)
 8001f96:	f107 031e 	add.w	r3, r7, #30
 8001f9a:	6810      	ldr	r0, [r2, #0]
 8001f9c:	6018      	str	r0, [r3, #0]
 8001f9e:	4a6b      	ldr	r2, [pc, #428]	; (800214c <main+0x2a8>)
 8001fa0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001fa4:	6810      	ldr	r0, [r2, #0]
 8001fa6:	6018      	str	r0, [r3, #0]
 8001fa8:	4a69      	ldr	r2, [pc, #420]	; (8002150 <main+0x2ac>)
 8001faa:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8001fae:	6810      	ldr	r0, [r2, #0]
 8001fb0:	6018      	str	r0, [r3, #0]
 		  	  	  	  	  .ip 	= {10, 0, 7, 211},						// IP address
 						  .sn 	= {255, 255, 248, 0},					// Subnet mask
 						  .gw 	= {10, 0, 0, 1}};						// Gateway address

  wizchip_setnetinfo(&netInfo);
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd26 	bl	8001a08 <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fd5d 	bl	8001a80 <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	2218      	movs	r2, #24
 8001fca:	4962      	ldr	r1, [pc, #392]	; (8002154 <main+0x2b0>)
 8001fcc:	4850      	ldr	r0, [pc, #320]	; (8002110 <main+0x26c>)
 8001fce:	f004 fd6e 	bl	8006aae <HAL_UART_Transmit>
 8001fd2:	7e3b      	ldrb	r3, [r7, #24]
 8001fd4:	461c      	mov	r4, r3
 8001fd6:	7e7b      	ldrb	r3, [r7, #25]
 8001fd8:	461d      	mov	r5, r3
 8001fda:	7ebb      	ldrb	r3, [r7, #26]
 8001fdc:	7efa      	ldrb	r2, [r7, #27]
 8001fde:	7f39      	ldrb	r1, [r7, #28]
 8001fe0:	7f78      	ldrb	r0, [r7, #29]
 8001fe2:	9003      	str	r0, [sp, #12]
 8001fe4:	9102      	str	r1, [sp, #8]
 8001fe6:	9201      	str	r2, [sp, #4]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	462b      	mov	r3, r5
 8001fec:	4622      	mov	r2, r4
 8001fee:	495a      	ldr	r1, [pc, #360]	; (8002158 <main+0x2b4>)
 8001ff0:	485a      	ldr	r0, [pc, #360]	; (800215c <main+0x2b8>)
 8001ff2:	f005 fd1d 	bl	8007a30 <siprintf>
 8001ff6:	4859      	ldr	r0, [pc, #356]	; (800215c <main+0x2b8>)
 8001ff8:	f7fe f8ea 	bl	80001d0 <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2364      	movs	r3, #100	; 0x64
 8002002:	4956      	ldr	r1, [pc, #344]	; (800215c <main+0x2b8>)
 8002004:	4842      	ldr	r0, [pc, #264]	; (8002110 <main+0x26c>)
 8002006:	f004 fd52 	bl	8006aae <HAL_UART_Transmit>
 800200a:	7fbb      	ldrb	r3, [r7, #30]
 800200c:	4619      	mov	r1, r3
 800200e:	7ffb      	ldrb	r3, [r7, #31]
 8002010:	4618      	mov	r0, r3
 8002012:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002016:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800201a:	9201      	str	r2, [sp, #4]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4603      	mov	r3, r0
 8002020:	460a      	mov	r2, r1
 8002022:	494f      	ldr	r1, [pc, #316]	; (8002160 <main+0x2bc>)
 8002024:	484d      	ldr	r0, [pc, #308]	; (800215c <main+0x2b8>)
 8002026:	f005 fd03 	bl	8007a30 <siprintf>
 800202a:	484c      	ldr	r0, [pc, #304]	; (800215c <main+0x2b8>)
 800202c:	f7fe f8d0 	bl	80001d0 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	2364      	movs	r3, #100	; 0x64
 8002036:	4949      	ldr	r1, [pc, #292]	; (800215c <main+0x2b8>)
 8002038:	4835      	ldr	r0, [pc, #212]	; (8002110 <main+0x26c>)
 800203a:	f004 fd38 	bl	8006aae <HAL_UART_Transmit>
 800203e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002042:	4619      	mov	r1, r3
 8002044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002048:	4618      	mov	r0, r3
 800204a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800204e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002052:	9201      	str	r2, [sp, #4]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	4603      	mov	r3, r0
 8002058:	460a      	mov	r2, r1
 800205a:	4942      	ldr	r1, [pc, #264]	; (8002164 <main+0x2c0>)
 800205c:	483f      	ldr	r0, [pc, #252]	; (800215c <main+0x2b8>)
 800205e:	f005 fce7 	bl	8007a30 <siprintf>
 8002062:	483e      	ldr	r0, [pc, #248]	; (800215c <main+0x2b8>)
 8002064:	f7fe f8b4 	bl	80001d0 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	b29a      	uxth	r2, r3
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	493b      	ldr	r1, [pc, #236]	; (800215c <main+0x2b8>)
 8002070:	4827      	ldr	r0, [pc, #156]	; (8002110 <main+0x26c>)
 8002072:	f004 fd1c 	bl	8006aae <HAL_UART_Transmit>
 8002076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800207a:	4619      	mov	r1, r3
 800207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002080:	4618      	mov	r0, r3
 8002082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002086:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	4935      	ldr	r1, [pc, #212]	; (8002168 <main+0x2c4>)
 8002094:	4831      	ldr	r0, [pc, #196]	; (800215c <main+0x2b8>)
 8002096:	f005 fccb 	bl	8007a30 <siprintf>
 800209a:	4830      	ldr	r0, [pc, #192]	; (800215c <main+0x2b8>)
 800209c:	f7fe f898 	bl	80001d0 <strlen>
 80020a0:	4603      	mov	r3, r0
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2364      	movs	r3, #100	; 0x64
 80020a6:	492d      	ldr	r1, [pc, #180]	; (800215c <main+0x2b8>)
 80020a8:	4819      	ldr	r0, [pc, #100]	; (8002110 <main+0x26c>)
 80020aa:	f004 fd00 	bl	8006aae <HAL_UART_Transmit>

  // target server ip set
  Destination_Setup.destip[0] = 10; Destination_Setup.destip[1] = 0; Destination_Setup.destip[2] = 0; Destination_Setup.destip[3] = 87;
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <main+0x2c8>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	709a      	strb	r2, [r3, #2]
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <main+0x2c8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	70da      	strb	r2, [r3, #3]
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <main+0x2c8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	711a      	strb	r2, [r3, #4]
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <main+0x2c8>)
 80020c2:	2257      	movs	r2, #87	; 0x57
 80020c4:	715a      	strb	r2, [r3, #5]
  // target server port set
  Destination_Setup.port = 60500;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <main+0x2c8>)
 80020c8:	f64e 4254 	movw	r2, #60500	; 0xec54
 80020cc:	801a      	strh	r2, [r3, #0]

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  //HAL_GPIO_WritePin(GPIOC, E_RST, 0);

  uint8_t tmp;
  uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <main+0x2cc>)
 80020d0:	1d3c      	adds	r4, r7, #4
 80020d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* WIZCHIP SOCKET Buffer initialize */
  if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff fa99 	bl	8001614 <ctlwizchip>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d146      	bne.n	8002178 <main+0x2d4>
  {
	  printf("WIZCHIP Initialized fail.\r\n");
 80020ea:	4822      	ldr	r0, [pc, #136]	; (8002174 <main+0x2d0>)
 80020ec:	f005 fc88 	bl	8007a00 <puts>
	  DWT_Delay_us(10);
 80020f0:	200a      	movs	r0, #10
 80020f2:	f7ff fd0f 	bl	8001b14 <DWT_Delay_us>
	  while(1);
 80020f6:	e7fe      	b.n	80020f6 <main+0x252>
 80020f8:	08008b90 	.word	0x08008b90
 80020fc:	08008bcc 	.word	0x08008bcc
 8002100:	08008c14 	.word	0x08008c14
 8002104:	08008c3c 	.word	0x08008c3c
 8002108:	08008c78 	.word	0x08008c78
 800210c:	20001add 	.word	0x20001add
 8002110:	2000121c 	.word	0x2000121c
 8002114:	2000002c 	.word	0x2000002c
 8002118:	20001bf0 	.word	0x20001bf0
 800211c:	20001b90 	.word	0x20001b90
 8002120:	20001ae0 	.word	0x20001ae0
 8002124:	40020400 	.word	0x40020400
 8002128:	40021000 	.word	0x40021000
 800212c:	40020800 	.word	0x40020800
 8002130:	08001b75 	.word	0x08001b75
 8002134:	08001b5d 	.word	0x08001b5d
 8002138:	08001bb1 	.word	0x08001bb1
 800213c:	08001b8d 	.word	0x08001b8d
 8002140:	20000034 	.word	0x20000034
 8002144:	08008e64 	.word	0x08008e64
 8002148:	08008e6c 	.word	0x08008e6c
 800214c:	08008e70 	.word	0x08008e70
 8002150:	08008e74 	.word	0x08008e74
 8002154:	08008cb4 	.word	0x08008cb4
 8002158:	08008cd0 	.word	0x08008cd0
 800215c:	20000194 	.word	0x20000194
 8002160:	08008cf4 	.word	0x08008cf4
 8002164:	08008d14 	.word	0x08008d14
 8002168:	08008d34 	.word	0x08008d34
 800216c:	20000188 	.word	0x20000188
 8002170:	08008e78 	.word	0x08008e78
 8002174:	08008d54 	.word	0x08008d54

  /* PHY link status check */

  do
  {
	  if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8002178:	f107 0317 	add.w	r3, r7, #23
 800217c:	4619      	mov	r1, r3
 800217e:	200f      	movs	r0, #15
 8002180:	f7ff fa48 	bl	8001614 <ctlwizchip>
 8002184:	4603      	mov	r3, r0
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <main+0x2ee>
		  DWT_Delay_us(10);
 800218c:	200a      	movs	r0, #10
 800218e:	f7ff fcc1 	bl	8001b14 <DWT_Delay_us>
		  printf("Unknown PHY Link stauts.\r\n");
 8002192:	48b5      	ldr	r0, [pc, #724]	; (8002468 <main+0x5c4>)
 8002194:	f005 fc34 	bl	8007a00 <puts>
  }while(tmp == PHY_LINK_OFF);
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0ec      	beq.n	8002178 <main+0x2d4>

	  //DWT_Delay_us(1000);											// 10 microsecond
	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  //loopback_tcps(SOCK_TCPS, 20, 60500);
	  loopback_tcpc(1, 60500);
 800219e:	f64e 4154 	movw	r1, #60500	; 0xec54
 80021a2:	2001      	movs	r0, #1
 80021a4:	f000 fd58 	bl	8002c58 <loopback_tcpc>
	  DWT_Delay_us(1000);
 80021a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ac:	f7ff fcb2 	bl	8001b14 <DWT_Delay_us>

	  //setIMR(0x01);
	  //setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.

	  if (uart1_key_Flag){
 80021b0:	4bae      	ldr	r3, [pc, #696]	; (800246c <main+0x5c8>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80ed 	beq.w	8002394 <main+0x4f0>
		  uart1_key_Flag = 0;
 80021ba:	4bac      	ldr	r3, [pc, #688]	; (800246c <main+0x5c8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 80021c0:	4bab      	ldr	r3, [pc, #684]	; (8002470 <main+0x5cc>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	3b32      	subs	r3, #50	; 0x32
 80021c6:	2b48      	cmp	r3, #72	; 0x48
 80021c8:	f200 80e5 	bhi.w	8002396 <main+0x4f2>
 80021cc:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <main+0x330>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	08002317 	.word	0x08002317
 80021d8:	08002397 	.word	0x08002397
 80021dc:	08002397 	.word	0x08002397
 80021e0:	08002397 	.word	0x08002397
 80021e4:	0800232d 	.word	0x0800232d
 80021e8:	08002397 	.word	0x08002397
 80021ec:	08002397 	.word	0x08002397
 80021f0:	08002397 	.word	0x08002397
 80021f4:	08002397 	.word	0x08002397
 80021f8:	08002397 	.word	0x08002397
 80021fc:	08002397 	.word	0x08002397
 8002200:	08002397 	.word	0x08002397
 8002204:	08002397 	.word	0x08002397
 8002208:	08002397 	.word	0x08002397
 800220c:	08002397 	.word	0x08002397
 8002210:	08002397 	.word	0x08002397
 8002214:	08002397 	.word	0x08002397
 8002218:	08002397 	.word	0x08002397
 800221c:	08002397 	.word	0x08002397
 8002220:	08002397 	.word	0x08002397
 8002224:	08002397 	.word	0x08002397
 8002228:	08002397 	.word	0x08002397
 800222c:	08002397 	.word	0x08002397
 8002230:	08002397 	.word	0x08002397
 8002234:	08002397 	.word	0x08002397
 8002238:	08002397 	.word	0x08002397
 800223c:	08002397 	.word	0x08002397
 8002240:	08002397 	.word	0x08002397
 8002244:	08002397 	.word	0x08002397
 8002248:	08002397 	.word	0x08002397
 800224c:	08002397 	.word	0x08002397
 8002250:	08002397 	.word	0x08002397
 8002254:	08002397 	.word	0x08002397
 8002258:	08002397 	.word	0x08002397
 800225c:	08002397 	.word	0x08002397
 8002260:	08002397 	.word	0x08002397
 8002264:	08002397 	.word	0x08002397
 8002268:	08002397 	.word	0x08002397
 800226c:	08002397 	.word	0x08002397
 8002270:	08002397 	.word	0x08002397
 8002274:	08002397 	.word	0x08002397
 8002278:	08002397 	.word	0x08002397
 800227c:	08002397 	.word	0x08002397
 8002280:	08002397 	.word	0x08002397
 8002284:	08002397 	.word	0x08002397
 8002288:	08002397 	.word	0x08002397
 800228c:	08002397 	.word	0x08002397
 8002290:	080022f9 	.word	0x080022f9
 8002294:	08002397 	.word	0x08002397
 8002298:	0800237b 	.word	0x0800237b
 800229c:	08002397 	.word	0x08002397
 80022a0:	08002389 	.word	0x08002389
 80022a4:	08002397 	.word	0x08002397
 80022a8:	08002397 	.word	0x08002397
 80022ac:	08002397 	.word	0x08002397
 80022b0:	08002397 	.word	0x08002397
 80022b4:	08002397 	.word	0x08002397
 80022b8:	08002397 	.word	0x08002397
 80022bc:	08002397 	.word	0x08002397
 80022c0:	08002397 	.word	0x08002397
 80022c4:	08002397 	.word	0x08002397
 80022c8:	08002397 	.word	0x08002397
 80022cc:	08002397 	.word	0x08002397
 80022d0:	08002397 	.word	0x08002397
 80022d4:	08002343 	.word	0x08002343
 80022d8:	08002311 	.word	0x08002311
 80022dc:	08002351 	.word	0x08002351
 80022e0:	08002397 	.word	0x08002397
 80022e4:	08002397 	.word	0x08002397
 80022e8:	08002397 	.word	0x08002397
 80022ec:	0800236d 	.word	0x0800236d
 80022f0:	08002397 	.word	0x08002397
 80022f4:	0800235f 	.word	0x0800235f
			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 80022f8:	495e      	ldr	r1, [pc, #376]	; (8002474 <main+0x5d0>)
 80022fa:	485f      	ldr	r0, [pc, #380]	; (8002478 <main+0x5d4>)
 80022fc:	f7ff fda2 	bl	8001e44 <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 8002300:	495e      	ldr	r1, [pc, #376]	; (800247c <main+0x5d8>)
 8002302:	485d      	ldr	r0, [pc, #372]	; (8002478 <main+0x5d4>)
 8002304:	f7ff fdb1 	bl	8001e6a <debugPrintln>
				  printf("printf test\r\n");
 8002308:	485d      	ldr	r0, [pc, #372]	; (8002480 <main+0x5dc>)
 800230a:	f005 fb79 	bl	8007a00 <puts>
				  break;
 800230e:	e042      	b.n	8002396 <main+0x4f2>

			  case 's':
				  Sync_out();
 8002310:	f000 fdb4 	bl	8002e7c <Sync_out>
				  break;
 8002314:	e03f      	b.n	8002396 <main+0x4f2>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2101      	movs	r1, #1
 800231a:	485a      	ldr	r0, [pc, #360]	; (8002484 <main+0x5e0>)
 800231c:	f002 f88e 	bl	800443c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 8002320:	2200      	movs	r2, #0
 8002322:	2120      	movs	r1, #32
 8002324:	4858      	ldr	r0, [pc, #352]	; (8002488 <main+0x5e4>)
 8002326:	f002 f889 	bl	800443c <HAL_GPIO_WritePin>
				  break;
 800232a:	e034      	b.n	8002396 <main+0x4f2>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	4854      	ldr	r0, [pc, #336]	; (8002484 <main+0x5e0>)
 8002332:	f002 f883 	bl	800443c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8002336:	2201      	movs	r2, #1
 8002338:	2120      	movs	r1, #32
 800233a:	4853      	ldr	r0, [pc, #332]	; (8002488 <main+0x5e4>)
 800233c:	f002 f87e 	bl	800443c <HAL_GPIO_WritePin>
				  break;
 8002340:	e029      	b.n	8002396 <main+0x4f2>

			  case 'r':
				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 8002342:	230a      	movs	r3, #10
 8002344:	2201      	movs	r2, #1
 8002346:	4951      	ldr	r1, [pc, #324]	; (800248c <main+0x5e8>)
 8002348:	4851      	ldr	r0, [pc, #324]	; (8002490 <main+0x5ec>)
 800234a:	f004 fbb0 	bl	8006aae <HAL_UART_Transmit>
				  break;
 800234e:	e022      	b.n	8002396 <main+0x4f2>

			  case 't':
				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 8002350:	230a      	movs	r3, #10
 8002352:	2201      	movs	r2, #1
 8002354:	494f      	ldr	r1, [pc, #316]	; (8002494 <main+0x5f0>)
 8002356:	4850      	ldr	r0, [pc, #320]	; (8002498 <main+0x5f4>)
 8002358:	f004 fba9 	bl	8006aae <HAL_UART_Transmit>
				  break;
 800235c:	e01b      	b.n	8002396 <main+0x4f2>

			  case 'z':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800235e:	2364      	movs	r3, #100	; 0x64
 8002360:	2223      	movs	r2, #35	; 0x23
 8002362:	494e      	ldr	r1, [pc, #312]	; (800249c <main+0x5f8>)
 8002364:	484a      	ldr	r0, [pc, #296]	; (8002490 <main+0x5ec>)
 8002366:	f004 fba2 	bl	8006aae <HAL_UART_Transmit>
				  break;
 800236a:	e014      	b.n	8002396 <main+0x4f2>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800236c:	2364      	movs	r3, #100	; 0x64
 800236e:	2223      	movs	r2, #35	; 0x23
 8002370:	494b      	ldr	r1, [pc, #300]	; (80024a0 <main+0x5fc>)
 8002372:	4847      	ldr	r0, [pc, #284]	; (8002490 <main+0x5ec>)
 8002374:	f004 fb9b 	bl	8006aae <HAL_UART_Transmit>
				  break;
 8002378:	e00d      	b.n	8002396 <main+0x4f2>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 800237a:	2364      	movs	r3, #100	; 0x64
 800237c:	2223      	movs	r2, #35	; 0x23
 800237e:	4949      	ldr	r1, [pc, #292]	; (80024a4 <main+0x600>)
 8002380:	4843      	ldr	r0, [pc, #268]	; (8002490 <main+0x5ec>)
 8002382:	f004 fb94 	bl	8006aae <HAL_UART_Transmit>
				  break;
 8002386:	e006      	b.n	8002396 <main+0x4f2>
					  printf("\r\n");
				  }

				  printf("----------------------------- for loop end \r\n");
				  */
				  send(0, test_100, 100);
 8002388:	2264      	movs	r2, #100	; 0x64
 800238a:	4947      	ldr	r1, [pc, #284]	; (80024a8 <main+0x604>)
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe feed 	bl	800116c <send>


				  break;
 8002392:	e000      	b.n	8002396 <main+0x4f2>
		  }
	  }
 8002394:	bf00      	nop

	  //setIMR(0x01);
	  //setSn_IR(0, Sn_IR_RECV);	//Interrupt occurs only in the recv interrupt of socket '0'.


	  if(uart2_key_Flag) {
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <main+0x608>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d024      	beq.n	80023e8 <main+0x544>
		  uart2_key_Flag = 0;
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <main+0x608>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 80023a4:	4842      	ldr	r0, [pc, #264]	; (80024b0 <main+0x60c>)
 80023a6:	f005 fb2b 	bl	8007a00 <puts>
		  reset_CMD = SubStr(rxd, 0, 35);
 80023aa:	2223      	movs	r2, #35	; 0x23
 80023ac:	2100      	movs	r1, #0
 80023ae:	4841      	ldr	r0, [pc, #260]	; (80024b4 <main+0x610>)
 80023b0:	f000 fd94 	bl	8002edc <SubStr>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <main+0x614>)
 80023b8:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <main+0x614>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	483e      	ldr	r0, [pc, #248]	; (80024bc <main+0x618>)
 80023c2:	f005 fa81 	bl	80078c8 <iprintf>
		  //HAL_Delay(1);
		  for (int i = 0; i < LENGTH; i++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	e00a      	b.n	80023e2 <main+0x53e>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 80023cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ce:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <main+0x610>)
 80023d0:	1899      	adds	r1, r3, r2
 80023d2:	230a      	movs	r3, #10
 80023d4:	2201      	movs	r2, #1
 80023d6:	4828      	ldr	r0, [pc, #160]	; (8002478 <main+0x5d4>)
 80023d8:	f004 fb69 	bl	8006aae <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	3301      	adds	r3, #1
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	2b22      	cmp	r3, #34	; 0x22
 80023e6:	ddf1      	ble.n	80023cc <main+0x528>
		  }
	  }

	  if(uart_6_flag) {
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <main+0x61c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <main+0x57a>
		  uart_6_flag = 0;
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <main+0x61c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 80023f6:	4833      	ldr	r0, [pc, #204]	; (80024c4 <main+0x620>)
 80023f8:	f005 fb02 	bl	8007a00 <puts>

		  //HAL_Delay(1);

		  for (int i = 0; i < GTO_LENGTH; i++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002400:	e00a      	b.n	8002418 <main+0x574>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <main+0x624>)
 8002406:	1899      	adds	r1, r3, r2
 8002408:	230a      	movs	r3, #10
 800240a:	2201      	movs	r2, #1
 800240c:	481a      	ldr	r0, [pc, #104]	; (8002478 <main+0x5d4>)
 800240e:	f004 fb4e 	bl	8006aae <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	3301      	adds	r3, #1
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	2b0a      	cmp	r3, #10
 800241c:	ddf1      	ble.n	8002402 <main+0x55e>
		  }
		  //printf("\r\n\r\n");

	  }

	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 800241e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002422:	4819      	ldr	r0, [pc, #100]	; (8002488 <main+0x5e4>)
 8002424:	f001 fff2 	bl	800440c <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <main+0x628>)
 800242e:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 8002430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002434:	4814      	ldr	r0, [pc, #80]	; (8002488 <main+0x5e4>)
 8002436:	f001 ffe9 	bl	800440c <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <main+0x62c>)
 8002440:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 8002442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <main+0x5e4>)
 8002448:	f001 ffe0 	bl	800440c <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <main+0x630>)
 8002452:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 8002454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002458:	480b      	ldr	r0, [pc, #44]	; (8002488 <main+0x5e4>)
 800245a:	f001 ffd7 	bl	800440c <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <main+0x634>)
 8002464:	701a      	strb	r2, [r3, #0]
  {
 8002466:	e69a      	b.n	800219e <main+0x2fa>
 8002468:	08008d70 	.word	0x08008d70
 800246c:	20000144 	.word	0x20000144
 8002470:	20001add 	.word	0x20001add
 8002474:	08008d8c 	.word	0x08008d8c
 8002478:	2000121c 	.word	0x2000121c
 800247c:	08008da0 	.word	0x08008da0
 8002480:	08008db4 	.word	0x08008db4
 8002484:	40021000 	.word	0x40021000
 8002488:	40020400 	.word	0x40020400
 800248c:	2000002c 	.word	0x2000002c
 8002490:	20001bf0 	.word	0x20001bf0
 8002494:	2000002e 	.word	0x2000002e
 8002498:	20001ae0 	.word	0x20001ae0
 800249c:	08008dc4 	.word	0x08008dc4
 80024a0:	08008de8 	.word	0x08008de8
 80024a4:	08008e0c 	.word	0x08008e0c
 80024a8:	20000038 	.word	0x20000038
 80024ac:	20000145 	.word	0x20000145
 80024b0:	08008e30 	.word	0x08008e30
 80024b4:	20001d68 	.word	0x20001d68
 80024b8:	20000184 	.word	0x20000184
 80024bc:	08008e40 	.word	0x08008e40
 80024c0:	20000147 	.word	0x20000147
 80024c4:	08008e50 	.word	0x08008e50
 80024c8:	20001b24 	.word	0x20001b24
 80024cc:	200001d0 	.word	0x200001d0
 80024d0:	20001d04 	.word	0x20001d04
 80024d4:	20001266 	.word	0x20001266
 80024d8:	2000017b 	.word	0x2000017b

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b098      	sub	sp, #96	; 0x60
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e6:	2230      	movs	r2, #48	; 0x30
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 f93a 	bl	8007764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <SystemClock_Config+0xf8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <SystemClock_Config+0xf8>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <SystemClock_Config+0xf8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <SystemClock_Config+0xfc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <SystemClock_Config+0xfc>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <SystemClock_Config+0xfc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002546:	230a      	movs	r3, #10
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254a:	2301      	movs	r3, #1
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800254e:	2310      	movs	r3, #16
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002552:	2301      	movs	r3, #1
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002556:	2302      	movs	r3, #2
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800255a:	2300      	movs	r3, #0
 800255c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800255e:	2308      	movs	r3, #8
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002562:	23a8      	movs	r3, #168	; 0xa8
 8002564:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002566:	2302      	movs	r3, #2
 8002568:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800256a:	2304      	movs	r3, #4
 800256c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002572:	4618      	mov	r0, r3
 8002574:	f001 ff94 	bl	80044a0 <HAL_RCC_OscConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800257e:	f000 fd19 	bl	8002fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002582:	230f      	movs	r3, #15
 8002584:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	2102      	movs	r1, #2
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 f9f6 	bl	8004990 <HAL_RCC_ClockConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80025aa:	f000 fd03 	bl	8002fb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025ae:	2302      	movs	r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fbe9 	bl	8004d94 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80025c8:	f000 fcf4 	bl	8002fb4 <Error_Handler>
  }
}
 80025cc:	bf00      	nop
 80025ce:	3760      	adds	r7, #96	; 0x60
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40007000 	.word	0x40007000

080025dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2025      	movs	r0, #37	; 0x25
 80025e6:	f001 f9cf 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ea:	2025      	movs	r0, #37	; 0x25
 80025ec:	f001 f9e8 	bl	80039c0 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2047      	movs	r0, #71	; 0x47
 80025f6:	f001 f9c7 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025fa:	2047      	movs	r0, #71	; 0x47
 80025fc:	f001 f9e0 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <MX_RTC_Init+0xac>)
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <MX_RTC_Init+0xb0>)
 8002620:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <MX_RTC_Init+0xac>)
 8002624:	2200      	movs	r2, #0
 8002626:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <MX_RTC_Init+0xac>)
 800262a:	227f      	movs	r2, #127	; 0x7f
 800262c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <MX_RTC_Init+0xac>)
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <MX_RTC_Init+0xac>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <MX_RTC_Init+0xac>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <MX_RTC_Init+0xac>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002646:	481a      	ldr	r0, [pc, #104]	; (80026b0 <MX_RTC_Init+0xac>)
 8002648:	f002 fc86 	bl	8004f58 <HAL_RTC_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002652:	f000 fcaf 	bl	8002fb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002656:	2300      	movs	r3, #0
 8002658:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800265a:	2300      	movs	r3, #0
 800265c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800265e:	2300      	movs	r3, #0
 8002660:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2201      	movs	r2, #1
 800266e:	4619      	mov	r1, r3
 8002670:	480f      	ldr	r0, [pc, #60]	; (80026b0 <MX_RTC_Init+0xac>)
 8002672:	f002 fd02 	bl	800507a <HAL_RTC_SetTime>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800267c:	f000 fc9a 	bl	8002fb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002680:	2301      	movs	r3, #1
 8002682:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002684:	2301      	movs	r3, #1
 8002686:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002688:	2301      	movs	r3, #1
 800268a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800268c:	2300      	movs	r3, #0
 800268e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	2201      	movs	r2, #1
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <MX_RTC_Init+0xac>)
 8002698:	f002 fdac 	bl	80051f4 <HAL_RTC_SetDate>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80026a2:	f000 fc87 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20001a68 	.word	0x20001a68
 80026b4:	40002800 	.word	0x40002800

080026b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026c0:	4a2a      	ldr	r2, [pc, #168]	; (800276c <MX_SPI1_Init+0xb4>)
 80026c2:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026ca:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026ee:	2210      	movs	r2, #16
 80026f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_SPI1_Init+0xb0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_SPI1_Init+0xb0>)
 8002700:	2200      	movs	r2, #0
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_SPI1_Init+0xb0>)
 8002706:	220a      	movs	r2, #10
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800270a:	4817      	ldr	r0, [pc, #92]	; (8002768 <MX_SPI1_Init+0xb0>)
 800270c:	f002 fe8b 	bl	8005426 <HAL_SPI_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002716:	f000 fc4d 	bl	8002fb4 <Error_Handler>
  /**SPI2 GPIO Configuration
	PB4     ------> SPI1_SCK
	PB6     ------> SPI1_MISO
	PB7     ------> SPI1_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002728:	23e0      	movs	r3, #224	; 0xe0
 800272a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002738:	2305      	movs	r3, #5
 800273a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	4619      	mov	r1, r3
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <MX_SPI1_Init+0xb8>)
 8002742:	f001 fcc7 	bl	80040d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002746:	2310      	movs	r3, #16
 8002748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274a:	2301      	movs	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274e:	2301      	movs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_SPI1_Init+0xb8>)
 800275c:	f001 fcba 	bl	80040d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_Init 2 */

}
 8002760:	bf00      	nop
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20001b94 	.word	0x20001b94
 800276c:	40013000 	.word	0x40013000
 8002770:	40020000 	.word	0x40020000

08002774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a0:	4b26      	ldr	r3, [pc, #152]	; (800283c <MX_TIM1_Init+0xc8>)
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <MX_TIM1_Init+0xcc>)
 80027a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <MX_TIM1_Init+0xc8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <MX_TIM1_Init+0xc8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <MX_TIM1_Init+0xc8>)
 80027b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <MX_TIM1_Init+0xc8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_TIM1_Init+0xc8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_TIM1_Init+0xc8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027cc:	481b      	ldr	r0, [pc, #108]	; (800283c <MX_TIM1_Init+0xc8>)
 80027ce:	f003 fbd3 	bl	8005f78 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80027d8:	f000 fbec 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027e2:	f107 0320 	add.w	r3, r7, #32
 80027e6:	4619      	mov	r1, r3
 80027e8:	4814      	ldr	r0, [pc, #80]	; (800283c <MX_TIM1_Init+0xc8>)
 80027ea:	f003 fd8d 	bl	8006308 <HAL_TIM_ConfigClockSource>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80027f4:	f000 fbde 	bl	8002fb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80027f8:	2306      	movs	r3, #6
 80027fa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_TIM1_Init+0xc8>)
 8002808:	f003 fe42 	bl	8006490 <HAL_TIM_SlaveConfigSynchro>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002812:	f000 fbcf 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <MX_TIM1_Init+0xc8>)
 8002824:	f004 f866 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800282e:	f000 fbc1 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20001a90 	.word	0x20001a90
 8002840:	40010000 	.word	0x40010000

08002844 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_TIM7_Init+0x64>)
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <MX_TIM7_Init+0x68>)
 8002856:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_TIM7_Init+0x64>)
 800285a:	2229      	movs	r2, #41	; 0x29
 800285c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_TIM7_Init+0x64>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_TIM7_Init+0x64>)
 8002866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_TIM7_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MX_TIM7_Init+0x64>)
 8002874:	f003 fb80 	bl	8005f78 <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800287e:	f000 fb99 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800288a:	463b      	mov	r3, r7
 800288c:	4619      	mov	r1, r3
 800288e:	4806      	ldr	r0, [pc, #24]	; (80028a8 <MX_TIM7_Init+0x64>)
 8002890:	f004 f830 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800289a:	f000 fb8b 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20001cbc 	.word	0x20001cbc
 80028ac:	40001400 	.word	0x40001400

080028b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_UART4_Init+0x4c>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <MX_UART4_Init+0x50>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_UART4_Init+0x4c>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_UART4_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_UART4_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_UART4_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_UART4_Init+0x4c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_UART4_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_UART4_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_UART4_Init+0x4c>)
 80028e8:	f004 f894 	bl	8006a14 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80028f2:	f000 fb5f 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20001b4c 	.word	0x20001b4c
 8002900:	40004c00 	.word	0x40004c00

08002904 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_UART5_Init+0x4c>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <MX_UART5_Init+0x50>)
 800290c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_UART5_Init+0x4c>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_UART5_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_UART5_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MX_UART5_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_UART5_Init+0x4c>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <MX_UART5_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_UART5_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <MX_UART5_Init+0x4c>)
 800293c:	f004 f86a 	bl	8006a14 <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002946:	f000 fb35 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200001d4 	.word	0x200001d4
 8002954:	40005000 	.word	0x40005000

08002958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <MX_USART1_UART_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_USART1_UART_Init+0x4c>)
 8002990:	f004 f840 	bl	8006a14 <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800299a:	f000 fb0b 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000121c 	.word	0x2000121c
 80029a8:	40011000 	.word	0x40011000

080029ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_USART2_UART_Init+0x50>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_USART2_UART_Init+0x4c>)
 80029e4:	f004 f816 	bl	8006a14 <HAL_UART_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029ee:	f000 fae1 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20001bf0 	.word	0x20001bf0
 80029fc:	40004400 	.word	0x40004400

08002a00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <MX_USART6_UART_Init+0x50>)
 8002a08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <MX_USART6_UART_Init+0x54>)
 8002a0e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a24:	220c      	movs	r2, #12
 8002a26:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_USART6_UART_Init+0x4c>)
 8002a38:	f003 ffec 	bl	8006a14 <HAL_UART_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a42:	f000 fab7 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20001ae0 	.word	0x20001ae0
 8002a50:	40011400 	.word	0x40011400
 8002a54:	003d0900 	.word	0x003d0900

08002a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_DMA_Init+0x3c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <MX_DMA_Init+0x3c>)
 8002a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_DMA_Init+0x3c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	203b      	movs	r0, #59	; 0x3b
 8002a80:	f000 ff82 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002a84:	203b      	movs	r0, #59	; 0x3b
 8002a86:	f000 ff9b 	bl	80039c0 <HAL_NVIC_EnableIRQ>

}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a62      	ldr	r2, [pc, #392]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a5b      	ldr	r2, [pc, #364]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <MX_GPIO_Init+0x1a8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	211a      	movs	r1, #26
 8002b5a:	483a      	ldr	r0, [pc, #232]	; (8002c44 <MX_GPIO_Init+0x1ac>)
 8002b5c:	f001 fc6e 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 8002b66:	4838      	ldr	r0, [pc, #224]	; (8002c48 <MX_GPIO_Init+0x1b0>)
 8002b68:	f001 fc68 	bl	800443c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b72:	4836      	ldr	r0, [pc, #216]	; (8002c4c <MX_GPIO_Init+0x1b4>)
 8002b74:	f001 fc62 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4834      	ldr	r0, [pc, #208]	; (8002c50 <MX_GPIO_Init+0x1b8>)
 8002b7e:	f001 fc5d 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002b82:	231a      	movs	r3, #26
 8002b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	2301      	movs	r3, #1
 8002b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	482a      	ldr	r0, [pc, #168]	; (8002c44 <MX_GPIO_Init+0x1ac>)
 8002b9a:	f001 fa9b 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <MX_GPIO_Init+0x1bc>)
 8002ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4827      	ldr	r0, [pc, #156]	; (8002c50 <MX_GPIO_Init+0x1b8>)
 8002bb2:	f001 fa8f 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5
 8002bb6:	f44f 6363 	mov.w	r3, #3632	; 0xe30
 8002bba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	481e      	ldr	r0, [pc, #120]	; (8002c48 <MX_GPIO_Init+0x1b0>)
 8002bd0:	f001 fa80 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bd4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4817      	ldr	r0, [pc, #92]	; (8002c48 <MX_GPIO_Init+0x1b0>)
 8002bea:	f001 fa73 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4811      	ldr	r0, [pc, #68]	; (8002c4c <MX_GPIO_Init+0x1b4>)
 8002c08:	f001 fa64 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4619      	mov	r1, r3
 8002c22:	480b      	ldr	r0, [pc, #44]	; (8002c50 <MX_GPIO_Init+0x1b8>)
 8002c24:	f001 fa56 	bl	80040d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2017      	movs	r0, #23
 8002c2e:	f000 feab 	bl	8003988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c32:	2017      	movs	r0, #23
 8002c34:	f000 fec4 	bl	80039c0 <HAL_NVIC_EnableIRQ>

}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	10110000 	.word	0x10110000

08002c58 <loopback_tcpc>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*TCP Client*/
#ifdef __TCP_CLIENT__
void loopback_tcpc(SOCKET s, uint16_t port)
{
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af04      	add	r7, sp, #16
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460a      	mov	r2, r1
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	4613      	mov	r3, r2
 8002c66:	80bb      	strh	r3, [r7, #4]
   uint16_t RSR_len;
   uint16_t received_len;
   uint16_t any_port = 60500;
 8002c68:	f64e 4354 	movw	r3, #60500	; 0xec54
 8002c6c:	82bb      	strh	r3, [r7, #20]
   uint8_t * data_buf = TX_BUF;
 8002c6e:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <loopback_tcpc+0x1fc>)
 8002c70:	613b      	str	r3, [r7, #16]
   //printf("socket client -> %d \r\n", s);

   switch (getSn_SR(s))
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	3304      	adds	r3, #4
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	3303      	adds	r3, #3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fcaa 	bl	80005d4 <WIZCHIP_READ>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b1c      	cmp	r3, #28
 8002c84:	f200 80db 	bhi.w	8002e3e <loopback_tcpc+0x1e6>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <loopback_tcpc+0x38>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002dd7 	.word	0x08002dd7
 8002c94:	08002e3f 	.word	0x08002e3f
 8002c98:	08002e3f 	.word	0x08002e3f
 8002c9c:	08002e3f 	.word	0x08002e3f
 8002ca0:	08002e3f 	.word	0x08002e3f
 8002ca4:	08002e3f 	.word	0x08002e3f
 8002ca8:	08002e3f 	.word	0x08002e3f
 8002cac:	08002e3f 	.word	0x08002e3f
 8002cb0:	08002e3f 	.word	0x08002e3f
 8002cb4:	08002e3f 	.word	0x08002e3f
 8002cb8:	08002e3f 	.word	0x08002e3f
 8002cbc:	08002e3f 	.word	0x08002e3f
 8002cc0:	08002e3f 	.word	0x08002e3f
 8002cc4:	08002e3f 	.word	0x08002e3f
 8002cc8:	08002e3f 	.word	0x08002e3f
 8002ccc:	08002e3f 	.word	0x08002e3f
 8002cd0:	08002e3f 	.word	0x08002e3f
 8002cd4:	08002e3f 	.word	0x08002e3f
 8002cd8:	08002e3f 	.word	0x08002e3f
 8002cdc:	08002e1f 	.word	0x08002e1f
 8002ce0:	08002e3f 	.word	0x08002e3f
 8002ce4:	08002e3f 	.word	0x08002e3f
 8002ce8:	08002e3f 	.word	0x08002e3f
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002e3f 	.word	0x08002e3f
 8002cf4:	08002e3f 	.word	0x08002e3f
 8002cf8:	08002e3f 	.word	0x08002e3f
 8002cfc:	08002e3f 	.word	0x08002e3f
 8002d00:	08002d8b 	.word	0x08002d8b
   {
   	   	//printf("socket client -> %d \r\n", s);
		case SOCK_ESTABLISHED:                 /* if connection is established */
				  if(ch_status[s]==1)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <loopback_tcpc+0x200>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d11a      	bne.n	8002d44 <loopback_tcpc+0xec>
				  {
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d0e:	79f9      	ldrb	r1, [r7, #7]
							 Destination_Setup.destip[0],Destination_Setup.destip[1],Destination_Setup.destip[2],Destination_Setup.destip[3],Destination_Setup.port);
 8002d10:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <loopback_tcpc+0x204>)
 8002d12:	789b      	ldrb	r3, [r3, #2]
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d14:	461c      	mov	r4, r3
							 Destination_Setup.destip[0],Destination_Setup.destip[1],Destination_Setup.destip[2],Destination_Setup.destip[3],Destination_Setup.port);
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <loopback_tcpc+0x204>)
 8002d18:	78db      	ldrb	r3, [r3, #3]
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d1a:	461d      	mov	r5, r3
							 Destination_Setup.destip[0],Destination_Setup.destip[1],Destination_Setup.destip[2],Destination_Setup.destip[3],Destination_Setup.port);
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <loopback_tcpc+0x204>)
 8002d1e:	791b      	ldrb	r3, [r3, #4]
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d20:	461a      	mov	r2, r3
							 Destination_Setup.destip[0],Destination_Setup.destip[1],Destination_Setup.destip[2],Destination_Setup.destip[3],Destination_Setup.port);
 8002d22:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <loopback_tcpc+0x204>)
 8002d24:	795b      	ldrb	r3, [r3, #5]
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d26:	4618      	mov	r0, r3
							 Destination_Setup.destip[0],Destination_Setup.destip[1],Destination_Setup.destip[2],Destination_Setup.destip[3],Destination_Setup.port);
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <loopback_tcpc+0x204>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
					 printf("%d : Server IP : %d.%d.%d.%d , Port : %d  Connect \r\n", s,
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	9001      	str	r0, [sp, #4]
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	462b      	mov	r3, r5
 8002d34:	4622      	mov	r2, r4
 8002d36:	484a      	ldr	r0, [pc, #296]	; (8002e60 <loopback_tcpc+0x208>)
 8002d38:	f004 fdc6 	bl	80078c8 <iprintf>
					 //printf("\r\n%d : Server IP : %d.%d.%d.%d  , Port : %d  Connected",s, 10, 0, 0 , 87, 60500);
					 ch_status[s] = 2;
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4a46      	ldr	r2, [pc, #280]	; (8002e58 <loopback_tcpc+0x200>)
 8002d40:	2102      	movs	r1, #2
 8002d42:	54d1      	strb	r1, [r2, r3]
				  }

				  if ((RSR_len = getSn_RX_RSR(s)) > 0)         /* check Rx data */
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fd51 	bl	80007ee <getSn_RX_RSR>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	82fb      	strh	r3, [r7, #22]
 8002d50:	8afb      	ldrh	r3, [r7, #22]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <loopback_tcpc+0x1ea>
				  {
					 if (RSR_len > DATA_BUF_SIZE) RSR_len = DATA_BUF_SIZE;   /* if Rx data size is lager than TX_RX_MAX_BUF_SIZE */
 8002d56:	8afb      	ldrh	r3, [r7, #22]
 8002d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5c:	d902      	bls.n	8002d64 <loopback_tcpc+0x10c>
 8002d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d62:	82fb      	strh	r3, [r7, #22]
																						/* the data size to read is MAX_BUF_SIZE. */
					 received_len = recv(s, data_buf, RSR_len);         /* read the received data */
 8002d64:	8afa      	ldrh	r2, [r7, #22]
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	6939      	ldr	r1, [r7, #16]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe faf2 	bl	8001354 <recv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	81fb      	strh	r3, [r7, #14]
					 send(s, data_buf, received_len);         /* sent the received data */
 8002d74:	89fa      	ldrh	r2, [r7, #14]
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f9f6 	bl	800116c <send>

					 printf("RX : %s \r\n",data_buf);
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	4838      	ldr	r0, [pc, #224]	; (8002e64 <loopback_tcpc+0x20c>)
 8002d84:	f004 fda0 	bl	80078c8 <iprintf>
				  }

				  break;
 8002d88:	e05b      	b.n	8002e42 <loopback_tcpc+0x1ea>

		case SOCK_CLOSE_WAIT:                                 /* If the client request to close */
				  printf("\r\n%d : close ! \r\n", s);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4836      	ldr	r0, [pc, #216]	; (8002e68 <loopback_tcpc+0x210>)
 8002d90:	f004 fd9a 	bl	80078c8 <iprintf>
				  if ((RSR_len = getSn_RX_RSR(s)) > 0)         /* check Rx data */
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fd29 	bl	80007ee <getSn_RX_RSR>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	82fb      	strh	r3, [r7, #22]
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <loopback_tcpc+0x16c>
				  {
					 if (RSR_len > DATA_BUF_SIZE) RSR_len = DATA_BUF_SIZE;   /* if Rx data size is lager than TX_RX_MAX_BUF_SIZE */
 8002da6:	8afb      	ldrh	r3, [r7, #22]
 8002da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dac:	d902      	bls.n	8002db4 <loopback_tcpc+0x15c>
 8002dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002db2:	82fb      	strh	r3, [r7, #22]
																								/* the data size to read is MAX_BUF_SIZE. */
					 received_len = recv(s, data_buf, RSR_len);         /* read the received data */
 8002db4:	8afa      	ldrh	r2, [r7, #22]
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	6939      	ldr	r1, [r7, #16]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe faca 	bl	8001354 <recv>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	81fb      	strh	r3, [r7, #14]
				  }
				  disconnect(s);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f962 	bl	8001090 <disconnect>
				  ch_status[s] = 0;
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <loopback_tcpc+0x200>)
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	54d1      	strb	r1, [r2, r3]
				  break;
 8002dd4:	e03a      	b.n	8002e4c <loopback_tcpc+0x1f4>

		case SOCK_CLOSED:                                               /* if a socket is closed */
				  if(!ch_status[s])
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <loopback_tcpc+0x200>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <loopback_tcpc+0x19c>
				  {
					 printf("\r\n%d : Loop-Back TCP Client Started. port: %d\r\n", s, port);
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	88ba      	ldrh	r2, [r7, #4]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4821      	ldr	r0, [pc, #132]	; (8002e6c <loopback_tcpc+0x214>)
 8002de8:	f004 fd6e 	bl	80078c8 <iprintf>
					 ch_status[s] = 1;
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <loopback_tcpc+0x200>)
 8002df0:	2101      	movs	r1, #1
 8002df2:	54d1      	strb	r1, [r2, r3]
				  }
				  if(socket(s, Sn_MR_TCP, any_port++, 0x00) == 0)    /* reinitialize the socket */
 8002df4:	8aba      	ldrh	r2, [r7, #20]
 8002df6:	1c53      	adds	r3, r2, #1
 8002df8:	82bb      	strh	r3, [r7, #20]
 8002dfa:	79f8      	ldrb	r0, [r7, #7]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2101      	movs	r1, #1
 8002e00:	f7fd ff14 	bl	8000c2c <socket>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11d      	bne.n	8002e46 <loopback_tcpc+0x1ee>
				  {
					 printf("\a%d : Fail to create socket.\r\n",s);
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4818      	ldr	r0, [pc, #96]	; (8002e70 <loopback_tcpc+0x218>)
 8002e10:	f004 fd5a 	bl	80078c8 <iprintf>
					 ch_status[s] = 0;
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <loopback_tcpc+0x200>)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	54d1      	strb	r1, [r2, r3]
				  }
				  break;
 8002e1c:	e013      	b.n	8002e46 <loopback_tcpc+0x1ee>

		case SOCK_INIT:     /* if a socket is initiated */
				  if(sys_tick_cnt == 0)
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <loopback_tcpc+0x21c>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d111      	bne.n	8002e4a <loopback_tcpc+0x1f2>
				  {
					  connect(s, Destination_Setup.destip, Destination_Setup.port); /* Try to connect to TCP server(Socket, DestIP, DestPort) */
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <loopback_tcpc+0x204>)
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	4912      	ldr	r1, [pc, #72]	; (8002e78 <loopback_tcpc+0x220>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f868 	bl	8000f04 <connect>
					  sys_tick_cnt = 3000;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <loopback_tcpc+0x21c>)
 8002e36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e3a:	801a      	strh	r2, [r3, #0]
				  }
				  break;
 8002e3c:	e005      	b.n	8002e4a <loopback_tcpc+0x1f2>
		default:
				  break;
 8002e3e:	bf00      	nop
 8002e40:	e004      	b.n	8002e4c <loopback_tcpc+0x1f4>
				  break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <loopback_tcpc+0x1f4>
				  break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <loopback_tcpc+0x1f4>
				  break;
 8002e4a:	bf00      	nop
	}
}
 8002e4c:	bf00      	nop
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bdb0      	pop	{r4, r5, r7, pc}
 8002e54:	20000a1c 	.word	0x20000a1c
 8002e58:	2000014c 	.word	0x2000014c
 8002e5c:	20000188 	.word	0x20000188
 8002e60:	08008e88 	.word	0x08008e88
 8002e64:	08008ec0 	.word	0x08008ec0
 8002e68:	08008ecc 	.word	0x08008ecc
 8002e6c:	08008ee0 	.word	0x08008ee0
 8002e70:	08008f10 	.word	0x08008f10
 8002e74:	200001d2 	.word	0x200001d2
 8002e78:	2000018a 	.word	0x2000018a

08002e7c <Sync_out>:
/*##########################################################################################################*/
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8002e80:	2201      	movs	r2, #1
 8002e82:	2120      	movs	r1, #32
 8002e84:	4810      	ldr	r0, [pc, #64]	; (8002ec8 <Sync_out+0x4c>)
 8002e86:	f001 fad9 	bl	800443c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	480f      	ldr	r0, [pc, #60]	; (8002ecc <Sync_out+0x50>)
 8002e90:	f001 fad4 	bl	800443c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 8002e94:	2201      	movs	r2, #1
 8002e96:	2102      	movs	r1, #2
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <Sync_out+0x54>)
 8002e9a:	f001 facf 	bl	800443c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <Sync_out+0x58>)
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <Sync_out+0x5c>)
 8002ea6:	f003 fe02 	bl	8006aae <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 8002eaa:	2064      	movs	r0, #100	; 0x64
 8002eac:	f7fe fe32 	bl	8001b14 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <Sync_out+0x54>)
 8002eb6:	f001 fac1 	bl	800443c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4803      	ldr	r0, [pc, #12]	; (8002ecc <Sync_out+0x50>)
 8002ec0:	f001 fabc 	bl	800443c <HAL_GPIO_WritePin>
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	2000002d 	.word	0x2000002d
 8002ed8:	20001ae0 	.word	0x20001ae0

08002edc <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <SubStr+0x16>
        return NULL ;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e033      	b.n	8002f5a <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fc1e 	bl	8007738 <malloc>
 8002efc:	4603      	mov	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7fd f965 	bl	80001d0 <strlen>
 8002f06:	4603      	mov	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	dd03      	ble.n	8002f1e <SubStr+0x42>
        nLength = nStart + nLen ;
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e00d      	b.n	8002f40 <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	441a      	add	r2, r3
 8002f2a:	69f9      	ldr	r1, [r7, #28]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1acb      	subs	r3, r1, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	440b      	add	r3, r1
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dbed      	blt.n	8002f24 <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4413      	add	r3, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8002f58:	697b      	ldr	r3, [r7, #20]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f76:	f000 fc2f 	bl	80037d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM6) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10f      	bne.n	8002fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
  	  wizDHCPticks++;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002f8e:	801a      	strh	r2, [r3, #0]
  	  //printf("TIM6 callback ==== %d \r\n", wizDHCPticks);
  	  if(wizDHCPticks >= 1000)
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f98:	d304      	bcc.n	8002fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
  	  {
  		  wizDHCPticks = 0;
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
  		  DHCP_time_handler();
 8002fa0:	f7fe fdaa 	bl	8001af8 <DHCP_time_handler>
  	  }
  }
  /* USER CODE END Callback 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40001000 	.word	0x40001000
 8002fb0:	20000148 	.word	0x20000148

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <Error_Handler+0x8>
	...

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_MspInit+0x4c>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_RTC_MspInit+0x24>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d102      	bne.n	8003028 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RTC_MspInit+0x28>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40002800 	.word	0x40002800
 8003038:	42470e3c 	.word	0x42470e3c

0800303c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a30      	ldr	r2, [pc, #192]	; (800311c <HAL_SPI_MspInit+0xe0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d159      	bne.n	8003112 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 8003068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_SPI_MspInit+0xe4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003096:	23f0      	movs	r3, #240	; 0xf0
 8003098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030a6:	2305      	movs	r3, #5
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	4619      	mov	r1, r3
 80030b0:	481c      	ldr	r0, [pc, #112]	; (8003124 <HAL_SPI_MspInit+0xe8>)
 80030b2:	f001 f80f 	bl	80040d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030b8:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_SPI_MspInit+0xf0>)
 80030ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80030c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030da:	2200      	movs	r2, #0
 80030dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <HAL_SPI_MspInit+0xec>)
 80030f8:	f000 fc70 	bl	80039dc <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8003102:	f7ff ff57 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_SPI_MspInit+0xec>)
 800310a:	649a      	str	r2, [r3, #72]	; 0x48
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_SPI_MspInit+0xec>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40013000 	.word	0x40013000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000
 8003128:	20001d08 	.word	0x20001d08
 800312c:	40026458 	.word	0x40026458

08003130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_TIM_Base_MspInit+0x70>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800315e:	e01a      	b.n	8003196 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_TIM_Base_MspInit+0x78>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d115      	bne.n	8003196 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 8003174:	f043 0320 	orr.w	r3, r3, #32
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_TIM_Base_MspInit+0x74>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2037      	movs	r0, #55	; 0x37
 800318c:	f000 fbfc 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003190:	2037      	movs	r0, #55	; 0x37
 8003192:	f000 fc15 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40001400 	.word	0x40001400

080031ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b092      	sub	sp, #72	; 0x48
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a99      	ldr	r2, [pc, #612]	; (8003430 <HAL_UART_MspInit+0x284>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d135      	bne.n	800323a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
 80031d2:	4b98      	ldr	r3, [pc, #608]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a97      	ldr	r2, [pc, #604]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b95      	ldr	r3, [pc, #596]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a90      	ldr	r2, [pc, #576]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b8e      	ldr	r3, [pc, #568]	; (8003434 <HAL_UART_MspInit+0x288>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003206:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003210:	2301      	movs	r3, #1
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003218:	2308      	movs	r3, #8
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003220:	4619      	mov	r1, r3
 8003222:	4885      	ldr	r0, [pc, #532]	; (8003438 <HAL_UART_MspInit+0x28c>)
 8003224:	f000 ff56 	bl	80040d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	2034      	movs	r0, #52	; 0x34
 800322e:	f000 fbab 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003232:	2034      	movs	r0, #52	; 0x34
 8003234:	f000 fbc4 	bl	80039c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003238:	e0f6      	b.n	8003428 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==UART5)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7f      	ldr	r2, [pc, #508]	; (800343c <HAL_UART_MspInit+0x290>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d153      	bne.n	80032ec <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
 8003248:	4b7a      	ldr	r3, [pc, #488]	; (8003434 <HAL_UART_MspInit+0x288>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	4a79      	ldr	r2, [pc, #484]	; (8003434 <HAL_UART_MspInit+0x288>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
 8003254:	4b77      	ldr	r3, [pc, #476]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_UART_MspInit+0x288>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6313      	str	r3, [r2, #48]	; 0x30
 8003270:	4b70      	ldr	r3, [pc, #448]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003286:	f043 0308 	orr.w	r3, r3, #8
 800328a:	6313      	str	r3, [r2, #48]	; 0x30
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <HAL_UART_MspInit+0x288>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a2:	2301      	movs	r3, #1
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032aa:	2308      	movs	r3, #8
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032b2:	4619      	mov	r1, r3
 80032b4:	4860      	ldr	r0, [pc, #384]	; (8003438 <HAL_UART_MspInit+0x28c>)
 80032b6:	f000 ff0d 	bl	80040d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032ba:	2304      	movs	r3, #4
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032ca:	2308      	movs	r3, #8
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032d2:	4619      	mov	r1, r3
 80032d4:	485a      	ldr	r0, [pc, #360]	; (8003440 <HAL_UART_MspInit+0x294>)
 80032d6:	f000 fefd 	bl	80040d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	2035      	movs	r0, #53	; 0x35
 80032e0:	f000 fb52 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80032e4:	2035      	movs	r0, #53	; 0x35
 80032e6:	f000 fb6b 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 80032ea:	e09d      	b.n	8003428 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a54      	ldr	r2, [pc, #336]	; (8003444 <HAL_UART_MspInit+0x298>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d12d      	bne.n	8003352 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <HAL_UART_MspInit+0x288>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003300:	f043 0310 	orr.w	r3, r3, #16
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_UART_MspInit+0x288>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800332e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003340:	2307      	movs	r3, #7
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003348:	4619      	mov	r1, r3
 800334a:	483f      	ldr	r0, [pc, #252]	; (8003448 <HAL_UART_MspInit+0x29c>)
 800334c:	f000 fec2 	bl	80040d4 <HAL_GPIO_Init>
}
 8003350:	e06a      	b.n	8003428 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <HAL_UART_MspInit+0x2a0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d134      	bne.n	80033c6 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	4b34      	ldr	r3, [pc, #208]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a33      	ldr	r2, [pc, #204]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_UART_MspInit+0x288>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_UART_MspInit+0x288>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_UART_MspInit+0x288>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6313      	str	r3, [r2, #48]	; 0x30
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_UART_MspInit+0x288>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003394:	230c      	movs	r3, #12
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033a4:	2307      	movs	r3, #7
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033ac:	4619      	mov	r1, r3
 80033ae:	4826      	ldr	r0, [pc, #152]	; (8003448 <HAL_UART_MspInit+0x29c>)
 80033b0:	f000 fe90 	bl	80040d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	2026      	movs	r0, #38	; 0x26
 80033ba:	f000 fae5 	bl	8003988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033be:	2026      	movs	r0, #38	; 0x26
 80033c0:	f000 fafe 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 80033c4:	e030      	b.n	8003428 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART6)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_UART_MspInit+0x2a4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d12b      	bne.n	8003428 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033da:	f043 0320 	orr.w	r3, r3, #32
 80033de:	6453      	str	r3, [r2, #68]	; 0x44
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_UART_MspInit+0x288>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003408:	23c0      	movs	r3, #192	; 0xc0
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003418:	2308      	movs	r3, #8
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003420:	4619      	mov	r1, r3
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <HAL_UART_MspInit+0x28c>)
 8003424:	f000 fe56 	bl	80040d4 <HAL_GPIO_Init>
}
 8003428:	bf00      	nop
 800342a:	3748      	adds	r7, #72	; 0x48
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40004c00 	.word	0x40004c00
 8003434:	40023800 	.word	0x40023800
 8003438:	40020800 	.word	0x40020800
 800343c:	40005000 	.word	0x40005000
 8003440:	40020c00 	.word	0x40020c00
 8003444:	40011000 	.word	0x40011000
 8003448:	40020000 	.word	0x40020000
 800344c:	40004400 	.word	0x40004400
 8003450:	40011400 	.word	0x40011400

08003454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003464:	2200      	movs	r2, #0
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	2036      	movs	r0, #54	; 0x36
 800346a:	f000 fa8d 	bl	8003988 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800346e:	2036      	movs	r0, #54	; 0x36
 8003470:	f000 faa6 	bl	80039c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_InitTick+0xa4>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_InitTick+0xa4>)
 800347e:	f043 0310 	orr.w	r3, r3, #16
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_InitTick+0xa4>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003490:	f107 0210 	add.w	r2, r7, #16
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fc48 	bl	8004d30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034a0:	f001 fc1e 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 80034a4:	4603      	mov	r3, r0
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <HAL_InitTick+0xa8>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	3b01      	subs	r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_InitTick+0xac>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <HAL_InitTick+0xb0>)
 80034bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_InitTick+0xac>)
 80034c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034c6:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <HAL_InitTick+0xac>)
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_InitTick+0xac>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_InitTick+0xac>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034d8:	4809      	ldr	r0, [pc, #36]	; (8003500 <HAL_InitTick+0xac>)
 80034da:	f002 fd4d 	bl	8005f78 <HAL_TIM_Base_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80034e4:	4806      	ldr	r0, [pc, #24]	; (8003500 <HAL_InitTick+0xac>)
 80034e6:	f002 fd97 	bl	8006018 <HAL_TIM_Base_Start_IT>
 80034ea:	4603      	mov	r3, r0
 80034ec:	e000      	b.n	80034f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3730      	adds	r7, #48	; 0x30
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	20001d98 	.word	0x20001d98
 8003504:	40001000 	.word	0x40001000

08003508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800350c:	e7fe      	b.n	800350c <NMI_Handler+0x4>

0800350e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003512:	e7fe      	b.n	8003512 <HardFault_Handler+0x4>

08003514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <MemManage_Handler+0x4>

0800351a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351e:	e7fe      	b.n	800351e <BusFault_Handler+0x4>

08003520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003524:	e7fe      	b.n	8003524 <UsageFault_Handler+0x4>

08003526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003562:	2080      	movs	r0, #128	; 0x80
 8003564:	f000 ff84 	bl	8004470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}

0800356c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <USART1_IRQHandler+0x10>)
 8003572:	f003 fb5f 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000121c 	.word	0x2000121c

08003580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <USART2_IRQHandler+0x10>)
 8003586:	f003 fb55 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20001bf0 	.word	0x20001bf0

08003594 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <UART4_IRQHandler+0x10>)
 800359a:	f003 fb4b 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20001b4c 	.word	0x20001b4c

080035a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <UART5_IRQHandler+0x10>)
 80035ae:	f003 fb41 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200001d4 	.word	0x200001d4

080035bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <TIM6_DAC_IRQHandler+0x10>)
 80035c2:	f002 fd99 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001d98 	.word	0x20001d98

080035d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <TIM7_IRQHandler+0x10>)
 80035d6:	f002 fd8f 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20001cbc 	.word	0x20001cbc

080035e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA2_Stream3_IRQHandler+0x10>)
 80035ea:	f000 fb37 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20001d08 	.word	0x20001d08

080035f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <USART6_IRQHandler+0x10>)
 80035fe:	f003 fb19 	bl	8006c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001ae0 	.word	0x20001ae0

0800360c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00a      	b.n	8003634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800361e:	f3af 8000 	nop.w
 8003622:	4601      	mov	r1, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	b2ca      	uxtb	r2, r1
 800362c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbf0      	blt.n	800361e <_read+0x12>
	}

return len;
 800363c:	687b      	ldr	r3, [r7, #4]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
	return -1;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800366e:	605a      	str	r2, [r3, #4]
	return 0;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_isatty>:

int _isatty(int file)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	return 1;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	return 0;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <_sbrk+0x5c>)
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <_sbrk+0x60>)
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <_sbrk+0x64>)
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <_sbrk+0x68>)
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <_sbrk+0x64>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d207      	bcs.n	80036f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e0:	f004 f800 	bl	80076e4 <__errno>
 80036e4:	4603      	mov	r3, r0
 80036e6:	220c      	movs	r2, #12
 80036e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	e009      	b.n	8003704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <_sbrk+0x64>)
 8003700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20020000 	.word	0x20020000
 8003710:	00000400 	.word	0x00000400
 8003714:	20000154 	.word	0x20000154
 8003718:	20001df8 	.word	0x20001df8

0800371c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <SystemInit+0x20>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <SystemInit+0x20>)
 8003728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800372c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003746:	490e      	ldr	r1, [pc, #56]	; (8003780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003748:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800374c:	e002      	b.n	8003754 <LoopCopyDataInit>

0800374e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003752:	3304      	adds	r3, #4

08003754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003758:	d3f9      	bcc.n	800374e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800375a:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800375c:	4c0b      	ldr	r4, [pc, #44]	; (800378c <LoopFillZerobss+0x26>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003760:	e001      	b.n	8003766 <LoopFillZerobss>

08003762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003764:	3204      	adds	r2, #4

08003766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003768:	d3fb      	bcc.n	8003762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800376a:	f7ff ffd7 	bl	800371c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376e:	f003 ffbf 	bl	80076f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003772:	f7fe fb97 	bl	8001ea4 <main>
  bx  lr    
 8003776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800377c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003780:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8003784:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 8003788:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800378c:	20001df4 	.word	0x20001df4

08003790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003790:	e7fe      	b.n	8003790 <ADC_IRQHandler>
	...

08003794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <HAL_Init+0x40>)
 800379e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_Init+0x40>)
 80037aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_Init+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_Init+0x40>)
 80037b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037bc:	2003      	movs	r0, #3
 80037be:	f000 f8d8 	bl	8003972 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7ff fe46 	bl	8003454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c8:	f7ff fbfa 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023c00 	.word	0x40023c00

080037d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x20>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_IncTick+0x24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_IncTick+0x24>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	200000a4 	.word	0x200000a4
 80037fc:	20001de0 	.word	0x20001de0

08003800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return uwTick;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_GetTick+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20001de0 	.word	0x20001de0

08003818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
         );
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff4c 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800399a:	f7ff ff61 	bl	8003860 <__NVIC_GetPriorityGrouping>
 800399e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f7ff ffb1 	bl	800390c <NVIC_EncodePriority>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff80 	bl	80038b8 <__NVIC_SetPriority>
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff54 	bl	800387c <__NVIC_EnableIRQ>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ff0a 	bl	8003800 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e099      	b.n	8003b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a18:	e00f      	b.n	8003a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a1a:	f7ff fef1 	bl	8003800 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d908      	bls.n	8003a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e078      	b.n	8003b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e8      	bne.n	8003a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_DMA_Init+0x158>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d117      	bne.n	8003afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fa7b 	bl	8003fdc <DMA_CheckFifoParam>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003afa:	2301      	movs	r3, #1
 8003afc:	e016      	b.n	8003b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa32 	bl	8003f70 <DMA_CalcBaseAndBitshift>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	223f      	movs	r2, #63	; 0x3f
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	f010803f 	.word	0xf010803f

08003b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b46:	f7ff fe5b 	bl	8003800 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e052      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0216 	bic.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_DMA_Abort+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0208 	bic.w	r2, r2, #8
 8003ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bba:	e013      	b.n	8003be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7ff fe20 	bl	8003800 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d90c      	bls.n	8003be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e015      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	223f      	movs	r2, #63	; 0x3f
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00c      	b.n	8003c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2205      	movs	r2, #5
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c68:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <HAL_DMA_IRQHandler+0x258>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a92      	ldr	r2, [pc, #584]	; (8003eb8 <HAL_DMA_IRQHandler+0x25c>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2208      	movs	r2, #8
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d043      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	2210      	movs	r2, #16
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d024      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
 8003d8a:	e01f      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
 8003d9c:	e016      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0208 	bic.w	r2, r2, #8
 8003dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808e 	beq.w	8003efa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8086 	beq.w	8003efa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2220      	movs	r2, #32
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d136      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0216 	bic.w	r2, r2, #22
 8003e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x1da>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	223f      	movs	r2, #63	; 0x3f
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07d      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
        }
        return;
 8003e72:	e078      	b.n	8003f66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d030      	beq.n	8003efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e02b      	b.n	8003efa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d027      	beq.n	8003efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
 8003eb2:	e022      	b.n	8003efa <HAL_DMA_IRQHandler+0x29e>
 8003eb4:	2000009c 	.word	0x2000009c
 8003eb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0210 	bic.w	r2, r2, #16
 8003ed8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d032      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2205      	movs	r2, #5
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d307      	bcc.n	8003f42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f2      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x2ca>
 8003f40:	e000      	b.n	8003f44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e000      	b.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f66:	bf00      	nop
    }
  }
}
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3b10      	subs	r3, #16
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d909      	bls.n	8003fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb0:	e007      	b.n	8003fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	aaaaaaab 	.word	0xaaaaaaab
 8003fd8:	08009114 	.word	0x08009114

08003fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11f      	bne.n	8004036 <DMA_CheckFifoParam+0x5a>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d856      	bhi.n	80040aa <DMA_CheckFifoParam+0xce>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <DMA_CheckFifoParam+0x28>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004015 	.word	0x08004015
 8004008:	08004027 	.word	0x08004027
 800400c:	08004015 	.word	0x08004015
 8004010:	080040ab 	.word	0x080040ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d046      	beq.n	80040ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e043      	b.n	80040ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402e:	d140      	bne.n	80040b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e03d      	b.n	80040b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d121      	bne.n	8004084 <DMA_CheckFifoParam+0xa8>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d837      	bhi.n	80040b6 <DMA_CheckFifoParam+0xda>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <DMA_CheckFifoParam+0x70>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004063 	.word	0x08004063
 8004054:	0800405d 	.word	0x0800405d
 8004058:	08004075 	.word	0x08004075
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      break;
 8004060:	e030      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d025      	beq.n	80040ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004072:	e022      	b.n	80040ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004082:	e01c      	b.n	80040be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d903      	bls.n	8004092 <DMA_CheckFifoParam+0xb6>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d003      	beq.n	8004098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004090:	e018      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      break;
 8004096:	e015      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e00b      	b.n	80040c2 <DMA_CheckFifoParam+0xe6>
      break;
 80040aa:	bf00      	nop
 80040ac:	e00a      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e008      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e006      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040c2:	bf00      	nop
    }
  } 
  
  return status; 
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e16b      	b.n	80043c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	f040 815a 	bne.w	80043c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d005      	beq.n	8004126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004122:	2b02      	cmp	r3, #2
 8004124:	d130      	bne.n	8004188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b03      	cmp	r3, #3
 8004192:	d017      	beq.n	80041c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d123      	bne.n	8004218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0203 	and.w	r2, r3, #3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80b4 	beq.w	80043c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	4b60      	ldr	r3, [pc, #384]	; (80043e0 <HAL_GPIO_Init+0x30c>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a5f      	ldr	r2, [pc, #380]	; (80043e0 <HAL_GPIO_Init+0x30c>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <HAL_GPIO_Init+0x30c>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004276:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_GPIO_Init+0x310>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a52      	ldr	r2, [pc, #328]	; (80043e8 <HAL_GPIO_Init+0x314>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02b      	beq.n	80042fa <HAL_GPIO_Init+0x226>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_GPIO_Init+0x318>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d025      	beq.n	80042f6 <HAL_GPIO_Init+0x222>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a50      	ldr	r2, [pc, #320]	; (80043f0 <HAL_GPIO_Init+0x31c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01f      	beq.n	80042f2 <HAL_GPIO_Init+0x21e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4f      	ldr	r2, [pc, #316]	; (80043f4 <HAL_GPIO_Init+0x320>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d019      	beq.n	80042ee <HAL_GPIO_Init+0x21a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4e      	ldr	r2, [pc, #312]	; (80043f8 <HAL_GPIO_Init+0x324>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_GPIO_Init+0x216>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4d      	ldr	r2, [pc, #308]	; (80043fc <HAL_GPIO_Init+0x328>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_GPIO_Init+0x212>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4c      	ldr	r2, [pc, #304]	; (8004400 <HAL_GPIO_Init+0x32c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x20e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a4b      	ldr	r2, [pc, #300]	; (8004404 <HAL_GPIO_Init+0x330>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_GPIO_Init+0x20a>
 80042da:	2307      	movs	r3, #7
 80042dc:	e00e      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042de:	2308      	movs	r3, #8
 80042e0:	e00c      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042e2:	2306      	movs	r3, #6
 80042e4:	e00a      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042e6:	2305      	movs	r3, #5
 80042e8:	e008      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042ea:	2304      	movs	r3, #4
 80042ec:	e006      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e004      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e002      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_GPIO_Init+0x228>
 80042fa:	2300      	movs	r3, #0
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f002 0203 	and.w	r2, r2, #3
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	4093      	lsls	r3, r2
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430c:	4935      	ldr	r1, [pc, #212]	; (80043e4 <HAL_GPIO_Init+0x310>)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	3302      	adds	r3, #2
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_GPIO_Init+0x334>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <HAL_GPIO_Init+0x334>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_GPIO_Init+0x334>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <HAL_GPIO_Init+0x334>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_GPIO_Init+0x334>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_GPIO_Init+0x334>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_GPIO_Init+0x334>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_GPIO_Init+0x334>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	f67f ae90 	bls.w	80040f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40013800 	.word	0x40013800
 80043e8:	40020000 	.word	0x40020000
 80043ec:	40020400 	.word	0x40020400
 80043f0:	40020800 	.word	0x40020800
 80043f4:	40020c00 	.word	0x40020c00
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40021400 	.word	0x40021400
 8004400:	40021800 	.word	0x40021800
 8004404:	40021c00 	.word	0x40021c00
 8004408:	40013c00 	.word	0x40013c00

0800440c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e001      	b.n	800442e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
 8004448:	4613      	mov	r3, r2
 800444a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004458:	e003      	b.n	8004462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	041a      	lsls	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fcae 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40013c00 	.word	0x40013c00

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e264      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d075      	beq.n	80045aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044be:	4ba3      	ldr	r3, [pc, #652]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ca:	4ba0      	ldr	r3, [pc, #640]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d112      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4b9d      	ldr	r3, [pc, #628]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e2:	d10b      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4b99      	ldr	r3, [pc, #612]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05b      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d157      	bne.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e23f      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x74>
 8004506:	4b91      	ldr	r3, [pc, #580]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a90      	ldr	r2, [pc, #576]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e01d      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b8b      	ldr	r3, [pc, #556]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a8a      	ldr	r2, [pc, #552]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b88      	ldr	r3, [pc, #544]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a87      	ldr	r2, [pc, #540]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004538:	4b84      	ldr	r3, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a83      	ldr	r2, [pc, #524]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b81      	ldr	r3, [pc, #516]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a80      	ldr	r2, [pc, #512]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7ff f952 	bl	8003800 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004560:	f7ff f94e 	bl	8003800 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e204      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0xc0>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7ff f93e 	bl	8003800 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7ff f93a 	bl	8003800 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1f0      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	4b6c      	ldr	r3, [pc, #432]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b5f      	ldr	r3, [pc, #380]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1c4      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4952      	ldr	r1, [pc, #328]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCC_OscConfig+0x2b0>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7ff f8f3 	bl	8003800 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461e:	f7ff f8ef 	bl	8003800 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1a5      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4940      	ldr	r1, [pc, #256]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_OscConfig+0x2b0>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7ff f8d2 	bl	8003800 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004660:	f7ff f8ce 	bl	8003800 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e184      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d030      	beq.n	80046ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_RCC_OscConfig+0x2b4>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7ff f8b2 	bl	8003800 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a0:	f7ff f8ae 	bl	8003800 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e164      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x200>
 80046be:	e015      	b.n	80046ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCC_OscConfig+0x2b4>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7ff f89b 	bl	8003800 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ce:	f7ff f897 	bl	8003800 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e14d      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a0 	beq.w	800483a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	6413      	str	r3, [r2, #64]	; 0x40
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x2b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_RCC_OscConfig+0x2b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <HAL_RCC_OscConfig+0x2b8>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7ff f85d 	bl	8003800 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e011      	b.n	800476e <HAL_RCC_OscConfig+0x2ce>
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	42470000 	.word	0x42470000
 8004754:	42470e80 	.word	0x42470e80
 8004758:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7ff f850 	bl	8003800 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e106      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b85      	ldr	r3, [pc, #532]	; (8004984 <HAL_RCC_OscConfig+0x4e4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x2f0>
 8004782:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a80      	ldr	r2, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	e01c      	b.n	80047ca <HAL_RCC_OscConfig+0x32a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b05      	cmp	r3, #5
 8004796:	d10c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x312>
 8004798:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	4a7a      	ldr	r2, [pc, #488]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6713      	str	r3, [r2, #112]	; 0x70
 80047a4:	4b78      	ldr	r3, [pc, #480]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a77      	ldr	r2, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e00b      	b.n	80047ca <HAL_RCC_OscConfig+0x32a>
 80047b2:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a74      	ldr	r2, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	4b72      	ldr	r3, [pc, #456]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a71      	ldr	r2, [pc, #452]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d015      	beq.n	80047fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7ff f815 	bl	8003800 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7ff f811 	bl	8003800 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0c5      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ee      	beq.n	80047da <HAL_RCC_OscConfig+0x33a>
 80047fc:	e014      	b.n	8004828 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fe ffff 	bl	8003800 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fe fffb 	bl	8003800 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0af      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481c:	4b5a      	ldr	r3, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ee      	bne.n	8004806 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d105      	bne.n	800483a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 809b 	beq.w	800497a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004844:	4b50      	ldr	r3, [pc, #320]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b08      	cmp	r3, #8
 800484e:	d05c      	beq.n	800490a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d141      	bne.n	80048dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCC_OscConfig+0x4ec>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485e:	f7fe ffcf 	bl	8003800 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004866:	f7fe ffcb 	bl	8003800 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e081      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004878:	4b43      	ldr	r3, [pc, #268]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f0      	bne.n	8004866 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	019b      	lsls	r3, r3, #6
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	3b01      	subs	r3, #1
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	4937      	ldr	r1, [pc, #220]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCC_OscConfig+0x4ec>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe ffa4 	bl	8003800 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fe ffa0 	bl	8003800 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e056      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x41c>
 80048da:	e04e      	b.n	800497a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b2b      	ldr	r3, [pc, #172]	; (800498c <HAL_RCC_OscConfig+0x4ec>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fe ff8d 	bl	8003800 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fe ff89 	bl	8003800 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e03f      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCC_OscConfig+0x44a>
 8004908:	e037      	b.n	800497a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e032      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <HAL_RCC_OscConfig+0x4e8>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d028      	beq.n	8004976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d121      	bne.n	8004976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d11a      	bne.n	8004976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800494c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494e:	4293      	cmp	r3, r2
 8004950:	d111      	bne.n	8004976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	3b01      	subs	r3, #1
 8004960:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40007000 	.word	0x40007000
 8004988:	40023800 	.word	0x40023800
 800498c:	42470060 	.word	0x42470060

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cc      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b68      	ldr	r3, [pc, #416]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90c      	bls.n	80049cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a58      	ldr	r2, [pc, #352]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a08:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	494d      	ldr	r1, [pc, #308]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d044      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e067      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4934      	ldr	r1, [pc, #208]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fe febe 	bl	8003800 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fe feba 	bl	8003800 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20c      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4916      	ldr	r1, [pc, #88]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	490e      	ldr	r1, [pc, #56]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b16:	f000 f821 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	490a      	ldr	r1, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fc8c 	bl	8003454 <HAL_InitTick>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023c00 	.word	0x40023c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	080090fc 	.word	0x080090fc
 8004b54:	2000009c 	.word	0x2000009c
 8004b58:	200000a0 	.word	0x200000a0

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b62:	2100      	movs	r1, #0
 8004b64:	6079      	str	r1, [r7, #4]
 8004b66:	2100      	movs	r1, #0
 8004b68:	60f9      	str	r1, [r7, #12]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b6e:	2100      	movs	r1, #0
 8004b70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b72:	4952      	ldr	r1, [pc, #328]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004b74:	6889      	ldr	r1, [r1, #8]
 8004b76:	f001 010c 	and.w	r1, r1, #12
 8004b7a:	2908      	cmp	r1, #8
 8004b7c:	d00d      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x3e>
 8004b7e:	2908      	cmp	r1, #8
 8004b80:	f200 8094 	bhi.w	8004cac <HAL_RCC_GetSysClockFreq+0x150>
 8004b84:	2900      	cmp	r1, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x32>
 8004b88:	2904      	cmp	r1, #4
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x38>
 8004b8c:	e08e      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b90:	60bb      	str	r3, [r7, #8]
       break;
 8004b92:	e08e      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b94:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b96:	60bb      	str	r3, [r7, #8]
      break;
 8004b98:	e08b      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b9a:	4948      	ldr	r1, [pc, #288]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004b9c:	6849      	ldr	r1, [r1, #4]
 8004b9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ba2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba4:	4945      	ldr	r1, [pc, #276]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba6:	6849      	ldr	r1, [r1, #4]
 8004ba8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004bac:	2900      	cmp	r1, #0
 8004bae:	d024      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb0:	4942      	ldr	r1, [pc, #264]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004bb2:	6849      	ldr	r1, [r1, #4]
 8004bb4:	0989      	lsrs	r1, r1, #6
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004bc0:	f04f 0500 	mov.w	r5, #0
 8004bc4:	ea00 0204 	and.w	r2, r0, r4
 8004bc8:	ea01 0305 	and.w	r3, r1, r5
 8004bcc:	493d      	ldr	r1, [pc, #244]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bce:	fb01 f003 	mul.w	r0, r1, r3
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	fb01 f102 	mul.w	r1, r1, r2
 8004bd8:	1844      	adds	r4, r0, r1
 8004bda:	493a      	ldr	r1, [pc, #232]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bdc:	fba2 0101 	umull	r0, r1, r2, r1
 8004be0:	1863      	adds	r3, r4, r1
 8004be2:	4619      	mov	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	f7fb fb48 	bl	8000280 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e04a      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfa:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	ea02 0400 	and.w	r4, r2, r0
 8004c12:	ea03 0501 	and.w	r5, r3, r1
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	014b      	lsls	r3, r1, #5
 8004c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c28:	0142      	lsls	r2, r0, #5
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	1b00      	subs	r0, r0, r4
 8004c30:	eb61 0105 	sbc.w	r1, r1, r5
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	018b      	lsls	r3, r1, #6
 8004c3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c42:	0182      	lsls	r2, r0, #6
 8004c44:	1a12      	subs	r2, r2, r0
 8004c46:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	00d9      	lsls	r1, r3, #3
 8004c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c58:	00d0      	lsls	r0, r2, #3
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	1912      	adds	r2, r2, r4
 8004c60:	eb45 0303 	adc.w	r3, r5, r3
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	0299      	lsls	r1, r3, #10
 8004c6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c72:	0290      	lsls	r0, r2, #10
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	f7fb fafc 	bl	8000280 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	60bb      	str	r3, [r7, #8]
      break;
 8004caa:	e002      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cae:	60bb      	str	r3, [r7, #8]
      break;
 8004cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bdb0      	pop	{r4, r5, r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	017d7840 	.word	0x017d7840

08004cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	2000009c 	.word	0x2000009c

08004ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce4:	f7ff fff0 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	0a9b      	lsrs	r3, r3, #10
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4903      	ldr	r1, [pc, #12]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40023800 	.word	0x40023800
 8004d04:	0800910c 	.word	0x0800910c

08004d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d0c:	f7ff ffdc 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	0b5b      	lsrs	r3, r3, #13
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4903      	ldr	r1, [pc, #12]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	0800910c 	.word	0x0800910c

08004d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	220f      	movs	r2, #15
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0203 	and.w	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d64:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <HAL_RCC_GetClockConfig+0x60>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40023c00 	.word	0x40023c00

08004d94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d035      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dbc:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc2:	f7fe fd1d 	bl	8003800 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dca:	f7fe fd19 	bl	8003800 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0b0      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ddc:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	019a      	lsls	r2, r3, #6
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4955      	ldr	r1, [pc, #340]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfc:	4b52      	ldr	r3, [pc, #328]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e02:	f7fe fcfd 	bl	8003800 <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e0a:	f7fe fcf9 	bl	8003800 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e090      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8083 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4b44      	ldr	r3, [pc, #272]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a43      	ldr	r2, [pc, #268]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3e      	ldr	r2, [pc, #248]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7fe fccf 	bl	8003800 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fe fccb 	bl	8003800 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e062      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e84:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d028      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea2:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eb8:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ebe:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d114      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fe fc99 	bl	8003800 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fe fc95 	bl	8003800 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e02a      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ee      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f00:	d10d      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
 8004f1c:	e005      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f28:	6093      	str	r3, [r2, #8]
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	4905      	ldr	r1, [pc, #20]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	42470068 	.word	0x42470068
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42470e40 	.word	0x42470e40

08004f58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e083      	b.n	8005072 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7f5b      	ldrb	r3, [r3, #29]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe f848 	bl	8003010 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ca      	movs	r2, #202	; 0xca
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2253      	movs	r2, #83	; 0x53
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9fb 	bl	8005392 <RTC_EnterInitMode>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e05e      	b.n	8005072 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6919      	ldr	r1, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	041a      	lsls	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005012:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f98d 	bl	8005342 <HAL_RTC_WaitForSynchro>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e018      	b.n	8005072 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005070:	2300      	movs	r3, #0
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800507a:	b590      	push	{r4, r7, lr}
 800507c:	b087      	sub	sp, #28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	7f1b      	ldrb	r3, [r3, #28]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_RTC_SetTime+0x1c>
 8005092:	2302      	movs	r3, #2
 8005094:	e0aa      	b.n	80051ec <HAL_RTC_SetTime+0x172>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d126      	bne.n	80050f6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f992 	bl	80053ea <RTC_ByteToBcd2>
 80050c6:	4603      	mov	r3, r0
 80050c8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f98b 	bl	80053ea <RTC_ByteToBcd2>
 80050d4:	4603      	mov	r3, r0
 80050d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050d8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f983 	bl	80053ea <RTC_ByteToBcd2>
 80050e4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e018      	b.n	8005128 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005116:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800511c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	22ca      	movs	r2, #202	; 0xca
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2253      	movs	r2, #83	; 0x53
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f92a 	bl	8005392 <RTC_EnterInitMode>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2204      	movs	r2, #4
 8005150:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e047      	b.n	80051ec <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005166:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800516a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800517a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	431a      	orrs	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d111      	bne.n	80051d6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f8c5 	bl	8005342 <HAL_RTC_WaitForSynchro>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	22ff      	movs	r2, #255	; 0xff
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2204      	movs	r2, #4
 80051ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00a      	b.n	80051ec <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80051ea:	2300      	movs	r3, #0
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd90      	pop	{r4, r7, pc}

080051f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	7f1b      	ldrb	r3, [r3, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_RTC_SetDate+0x1c>
 800520c:	2302      	movs	r3, #2
 800520e:	e094      	b.n	800533a <HAL_RTC_SetDate+0x146>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10e      	bne.n	8005240 <HAL_RTC_SetDate+0x4c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	330a      	adds	r3, #10
 800523a:	b2da      	uxtb	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11c      	bne.n	8005280 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	78db      	ldrb	r3, [r3, #3]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8cd 	bl	80053ea <RTC_ByteToBcd2>
 8005250:	4603      	mov	r3, r0
 8005252:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f8c6 	bl	80053ea <RTC_ByteToBcd2>
 800525e:	4603      	mov	r3, r0
 8005260:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005262:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	789b      	ldrb	r3, [r3, #2]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f8be 	bl	80053ea <RTC_ByteToBcd2>
 800526e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005270:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e00e      	b.n	800529e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800528c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005292:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	22ca      	movs	r2, #202	; 0xca
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2253      	movs	r2, #83	; 0x53
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f86f 	bl	8005392 <RTC_EnterInitMode>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	22ff      	movs	r2, #255	; 0xff
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2204      	movs	r2, #4
 80052c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e033      	b.n	800533a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d111      	bne.n	8005324 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f81e 	bl	8005342 <HAL_RTC_WaitForSynchro>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2204      	movs	r2, #4
 8005318:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e00a      	b.n	800533a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005338:	2300      	movs	r3, #0
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd90      	pop	{r4, r7, pc}

08005342 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800535c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fe fa4f 	bl	8003800 <HAL_GetTick>
 8005362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005364:	e009      	b.n	800537a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005366:	f7fe fa4b 	bl	8003800 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005374:	d901      	bls.n	800537a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e007      	b.n	800538a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ee      	beq.n	8005366 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d119      	bne.n	80053e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295
 80053b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053b6:	f7fe fa23 	bl	8003800 <HAL_GetTick>
 80053ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053bc:	e009      	b.n	80053d2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053be:	f7fe fa1f 	bl	8003800 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053cc:	d901      	bls.n	80053d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e007      	b.n	80053e2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ee      	beq.n	80053be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80053f8:	e005      	b.n	8005406 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	3b0a      	subs	r3, #10
 8005404:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b09      	cmp	r3, #9
 800540a:	d8f6      	bhi.n	80053fa <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	b2da      	uxtb	r2, r3
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4313      	orrs	r3, r2
 8005418:	b2db      	uxtb	r3, r3
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e07b      	b.n	8005530 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005448:	d009      	beq.n	800545e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	61da      	str	r2, [r3, #28]
 8005450:	e005      	b.n	800545e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fd fddf 	bl	800303c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005494:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	ea42 0103 	orr.w	r1, r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 0104 	and.w	r1, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0210 	and.w	r2, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_SPI_Transmit+0x22>
 8005556:	2302      	movs	r3, #2
 8005558:	e126      	b.n	80057a8 <HAL_SPI_Transmit+0x270>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005562:	f7fe f94d 	bl	8003800 <HAL_GetTick>
 8005566:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d002      	beq.n	800557e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005578:	2302      	movs	r3, #2
 800557a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800557c:	e10b      	b.n	8005796 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_Transmit+0x52>
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800558e:	e102      	b.n	8005796 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2203      	movs	r2, #3
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d6:	d10f      	bne.n	80055f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d007      	beq.n	8005616 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561e:	d14b      	bne.n	80056b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_SPI_Transmit+0xf6>
 8005628:	8afb      	ldrh	r3, [r7, #22]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d13e      	bne.n	80056ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005652:	e02b      	b.n	80056ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d112      	bne.n	8005688 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	86da      	strh	r2, [r3, #54]	; 0x36
 8005686:	e011      	b.n	80056ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005688:	f7fe f8ba 	bl	8003800 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d803      	bhi.n	80056a0 <HAL_SPI_Transmit+0x168>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Transmit+0x16e>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056aa:	e074      	b.n	8005796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ce      	bne.n	8005654 <HAL_SPI_Transmit+0x11c>
 80056b6:	e04c      	b.n	8005752 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Transmit+0x18e>
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d140      	bne.n	8005748 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056ec:	e02c      	b.n	8005748 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d113      	bne.n	8005724 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
 8005722:	e011      	b.n	8005748 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005724:	f7fe f86c 	bl	8003800 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d803      	bhi.n	800573c <HAL_SPI_Transmit+0x204>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Transmit+0x20a>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005746:	e026      	b.n	8005796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1cd      	bne.n	80056ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fbcc 	bl	8005ef4 <SPI_EndRxTxTransaction>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e000      	b.n	8005796 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057cc:	d112      	bne.n	80057f4 <HAL_SPI_Receive+0x44>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10e      	bne.n	80057f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2204      	movs	r2, #4
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8f1 	bl	80059d2 <HAL_SPI_TransmitReceive>
 80057f0:	4603      	mov	r3, r0
 80057f2:	e0ea      	b.n	80059ca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_SPI_Receive+0x52>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0e3      	b.n	80059ca <HAL_SPI_Receive+0x21a>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800580a:	f7fd fff9 	bl	8003800 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d002      	beq.n	8005822 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800581c:	2302      	movs	r3, #2
 800581e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005820:	e0ca      	b.n	80059b8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_SPI_Receive+0x7e>
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005832:	e0c1      	b.n	80059b8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2204      	movs	r2, #4
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	88fa      	ldrh	r2, [r7, #6]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587a:	d10f      	bne.n	800589c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d007      	beq.n	80058ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d162      	bne.n	8005988 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058c2:	e02e      	b.n	8005922 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d115      	bne.n	80058fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f103 020c 	add.w	r2, r3, #12
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058fc:	e011      	b.n	8005922 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058fe:	f7fd ff7f 	bl	8003800 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d803      	bhi.n	8005916 <HAL_SPI_Receive+0x166>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d102      	bne.n	800591c <HAL_SPI_Receive+0x16c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005920:	e04a      	b.n	80059b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1cb      	bne.n	80058c4 <HAL_SPI_Receive+0x114>
 800592c:	e031      	b.n	8005992 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d113      	bne.n	8005964 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	b292      	uxth	r2, r2
 8005948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005962:	e011      	b.n	8005988 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fd ff4c 	bl	8003800 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Receive+0x1cc>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x1d2>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005986:	e017      	b.n	80059b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1cd      	bne.n	800592e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fa46 	bl	8005e28 <SPI_EndRxTransaction>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	e000      	b.n	80059b8 <HAL_SPI_Receive+0x208>
  }

error :
 80059b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b08c      	sub	sp, #48	; 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x26>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e18a      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x33c>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a00:	f7fd fefe 	bl	8003800 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d00f      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d107      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
 8005a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a40:	e15b      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a5a:	e14e      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d003      	beq.n	8005a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	887a      	ldrh	r2, [r7, #2]
 8005a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005acc:	d178      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x10a>
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d166      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b00:	e053      	b.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d11b      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d113      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b8a:	f7fd fe39 	bl	8003800 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d807      	bhi.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d003      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ba8:	e0a7      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1a6      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1a1      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bbe:	e07c      	b.n	8005cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x1fc>
 8005bc8:	8b7b      	ldrh	r3, [r7, #26]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d16b      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf4:	e057      	b.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d11c      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d017      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d114      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c80:	f7fd fdbe 	bl	8003800 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_TransmitReceive+0x2c6>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x2cc>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca4:	e029      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1a2      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d19d      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f918 	bl	8005ef4 <SPI_EndRxTxTransaction>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cd6:	e010      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	e000      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d28:	f7fd fd6a 	bl	8003800 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d38:	f7fd fd62 	bl	8003800 <HAL_GetTick>
 8005d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d3e:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	015b      	lsls	r3, r3, #5
 8005d44:	0d1b      	lsrs	r3, r3, #20
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d4e:	e054      	b.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d050      	beq.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d58:	f7fd fd52 	bl	8003800 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d902      	bls.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d13d      	bne.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d86:	d111      	bne.n	8005dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d90:	d004      	beq.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d107      	bne.n	8005dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	d10f      	bne.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e017      	b.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d19b      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000009c 	.word	0x2000009c

08005e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3c:	d111      	bne.n	8005e62 <SPI_EndRxTransaction+0x3a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e46:	d004      	beq.n	8005e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d107      	bne.n	8005e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e6a:	d12a      	bne.n	8005ec2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d012      	beq.n	8005e9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ff49 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02d      	beq.n	8005ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e026      	b.n	8005eea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff ff36 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01a      	beq.n	8005ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e013      	b.n	8005eea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2101      	movs	r1, #1
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff23 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e000      	b.n	8005eea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <SPI_EndRxTxTransaction+0x7c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <SPI_EndRxTxTransaction+0x80>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	0d5b      	lsrs	r3, r3, #21
 8005f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d112      	bne.n	8005f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff fef4 	bl	8005d18 <SPI_WaitFlagStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e00f      	b.n	8005f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d0f2      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x52>
 8005f60:	e000      	b.n	8005f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f62:	bf00      	nop
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000009c 	.word	0x2000009c
 8005f74:	165e9f81 	.word	0x165e9f81

08005f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e041      	b.n	800600e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fd f8c6 	bl	8003130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fad4 	bl	8006564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e04e      	b.n	80060ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_TIM_Base_Start_IT+0xc4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d01d      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	; (80060e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d111      	bne.n	80060bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d010      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	e007      	b.n	80060cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40001800 	.word	0x40001800

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9f4 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9e6 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f9f7 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0204 	mvn.w	r2, #4
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9ca 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9bc 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f9cd 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9a0 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f992 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9a3 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b10      	cmp	r3, #16
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f976 	bl	8006528 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f968 	bl	8006514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f979 	bl	800653c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10e      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0201 	mvn.w	r2, #1
 8006274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fc fe74 	bl	8002f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d10e      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d107      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbac 	bl	8006a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d10e      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d107      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f93e 	bl	8006550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0220 	mvn.w	r2, #32
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb76 	bl	80069ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIM_ConfigClockSource+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e0b3      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x180>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006358:	d03e      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0xd0>
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	f200 8087 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	f000 8085 	beq.w	8006474 <HAL_TIM_ConfigClockSource+0x16c>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d87f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d01a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xa2>
 8006374:	2b70      	cmp	r3, #112	; 0x70
 8006376:	d87b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d050      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x116>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d877      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d03c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0xf6>
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d873      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d058      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x136>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d86f      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d064      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x156>
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d86b      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d060      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x156>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d867      	bhi.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x156>
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d05a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063a8:	e062      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f000 fa7b 	bl	80068b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	609a      	str	r2, [r3, #8]
      break;
 80063d6:	e04e      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f000 fa64 	bl	80068b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063fa:	609a      	str	r2, [r3, #8]
      break;
 80063fc:	e03b      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	f000 f9d8 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2150      	movs	r1, #80	; 0x50
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fa31 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 800641c:	e02b      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 f9f7 	bl	800681e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2160      	movs	r1, #96	; 0x60
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fa21 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 800643c:	e01b      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f9b8 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fa11 	bl	800687e <TIM_ITRx_SetConfig>
      break;
 800645c:	e00b      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fa08 	bl	800687e <TIM_ITRx_SetConfig>
        break;
 800646e:	e002      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006474:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e031      	b.n	800650c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8f2 	bl	80066a4 <TIM_SlaveTimer_SetConfig>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e018      	b.n	800650c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a40      	ldr	r2, [pc, #256]	; (8006678 <TIM_Base_SetConfig+0x114>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d013      	beq.n	80065a4 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006582:	d00f      	beq.n	80065a4 <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3d      	ldr	r2, [pc, #244]	; (800667c <TIM_Base_SetConfig+0x118>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00b      	beq.n	80065a4 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3c      	ldr	r2, [pc, #240]	; (8006680 <TIM_Base_SetConfig+0x11c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a3b      	ldr	r2, [pc, #236]	; (8006684 <TIM_Base_SetConfig+0x120>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3a      	ldr	r2, [pc, #232]	; (8006688 <TIM_Base_SetConfig+0x124>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d108      	bne.n	80065b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2f      	ldr	r2, [pc, #188]	; (8006678 <TIM_Base_SetConfig+0x114>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d02b      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d027      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2c      	ldr	r2, [pc, #176]	; (800667c <TIM_Base_SetConfig+0x118>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d023      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2b      	ldr	r2, [pc, #172]	; (8006680 <TIM_Base_SetConfig+0x11c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01f      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <TIM_Base_SetConfig+0x120>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01b      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a29      	ldr	r2, [pc, #164]	; (8006688 <TIM_Base_SetConfig+0x124>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d017      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a28      	ldr	r2, [pc, #160]	; (800668c <TIM_Base_SetConfig+0x128>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a27      	ldr	r2, [pc, #156]	; (8006690 <TIM_Base_SetConfig+0x12c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a26      	ldr	r2, [pc, #152]	; (8006694 <TIM_Base_SetConfig+0x130>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a25      	ldr	r2, [pc, #148]	; (8006698 <TIM_Base_SetConfig+0x134>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a24      	ldr	r2, [pc, #144]	; (800669c <TIM_Base_SetConfig+0x138>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <TIM_Base_SetConfig+0x13c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <TIM_Base_SetConfig+0x114>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_Base_SetConfig+0xf8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <TIM_Base_SetConfig+0x124>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40010400 	.word	0x40010400
 800668c:	40014000 	.word	0x40014000
 8006690:	40014400 	.word	0x40014400
 8006694:	40014800 	.word	0x40014800
 8006698:	40001800 	.word	0x40001800
 800669c:	40001c00 	.word	0x40001c00
 80066a0:	40002000 	.word	0x40002000

080066a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b70      	cmp	r3, #112	; 0x70
 80066e8:	d01a      	beq.n	8006720 <TIM_SlaveTimer_SetConfig+0x7c>
 80066ea:	2b70      	cmp	r3, #112	; 0x70
 80066ec:	d860      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 80066ee:	2b60      	cmp	r3, #96	; 0x60
 80066f0:	d054      	beq.n	800679c <TIM_SlaveTimer_SetConfig+0xf8>
 80066f2:	2b60      	cmp	r3, #96	; 0x60
 80066f4:	d85c      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 80066f6:	2b50      	cmp	r3, #80	; 0x50
 80066f8:	d046      	beq.n	8006788 <TIM_SlaveTimer_SetConfig+0xe4>
 80066fa:	2b50      	cmp	r3, #80	; 0x50
 80066fc:	d858      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d019      	beq.n	8006736 <TIM_SlaveTimer_SetConfig+0x92>
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d854      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006706:	2b30      	cmp	r3, #48	; 0x30
 8006708:	d054      	beq.n	80067b4 <TIM_SlaveTimer_SetConfig+0x110>
 800670a:	2b30      	cmp	r3, #48	; 0x30
 800670c:	d850      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 800670e:	2b20      	cmp	r3, #32
 8006710:	d050      	beq.n	80067b4 <TIM_SlaveTimer_SetConfig+0x110>
 8006712:	2b20      	cmp	r3, #32
 8006714:	d84c      	bhi.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d04c      	beq.n	80067b4 <TIM_SlaveTimer_SetConfig+0x110>
 800671a:	2b10      	cmp	r3, #16
 800671c:	d04a      	beq.n	80067b4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800671e:	e047      	b.n	80067b0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68d9      	ldr	r1, [r3, #12]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f000 f8c0 	bl	80068b4 <TIM_ETR_SetConfig>
      break;
 8006734:	e03f      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b05      	cmp	r3, #5
 800673c:	d101      	bne.n	8006742 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e03a      	b.n	80067b8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a1a      	ldr	r2, [r3, #32]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006768:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
      break;
 8006786:	e016      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6899      	ldr	r1, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	461a      	mov	r2, r3
 8006796:	f000 f813 	bl	80067c0 <TIM_TI1_ConfigInputStage>
      break;
 800679a:	e00c      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	461a      	mov	r2, r3
 80067aa:	f000 f838 	bl	800681e <TIM_TI2_ConfigInputStage>
      break;
 80067ae:	e002      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80067b4:	bf00      	nop
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 030a 	bic.w	r3, r3, #10
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681e:	b480      	push	{r7}
 8006820:	b087      	sub	sp, #28
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0210 	bic.w	r2, r3, #16
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	031b      	lsls	r3, r3, #12
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800685a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	f043 0307 	orr.w	r3, r3, #7
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	021a      	lsls	r2, r3, #8
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4313      	orrs	r3, r2
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e05a      	b.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d022      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d01d      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d018      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00e      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d10c      	bne.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800
 80069dc:	40000c00 	.word	0x40000c00
 80069e0:	40010400 	.word	0x40010400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40001800 	.word	0x40001800

080069ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e03f      	b.n	8006aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fc fbb6 	bl	80031ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2224      	movs	r2, #36	; 0x24
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fc7b 	bl	8007354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b08a      	sub	sp, #40	; 0x28
 8006ab2:	af02      	add	r7, sp, #8
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d17c      	bne.n	8006bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_UART_Transmit+0x2c>
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e075      	b.n	8006bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Transmit+0x3e>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e06e      	b.n	8006bca <HAL_UART_Transmit+0x11c>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2221      	movs	r2, #33	; 0x21
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b02:	f7fc fe7d 	bl	8003800 <HAL_GetTick>
 8006b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1c:	d108      	bne.n	8006b30 <HAL_UART_Transmit+0x82>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e003      	b.n	8006b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b40:	e02a      	b.n	8006b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fa3d 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e036      	b.n	8006bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	3302      	adds	r3, #2
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e007      	b.n	8006b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1cf      	bne.n	8006b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2140      	movs	r1, #64	; 0x40
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa0d 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e006      	b.n	8006bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d11d      	bne.n	8006c28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_UART_Receive_IT+0x26>
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e016      	b.n	8006c2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_UART_Receive_IT+0x38>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e00f      	b.n	8006c2a <HAL_UART_Receive_IT+0x58>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fa1e 	bl	8007060 <UART_Start_Receive_IT>
 8006c24:	4603      	mov	r3, r0
 8006c26:	e000      	b.n	8006c2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_UART_IRQHandler+0x52>
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fad1 	bl	8007226 <UART_Receive_IT>
      return;
 8006c84:	e17c      	b.n	8006f80 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80b1 	beq.w	8006df0 <HAL_UART_IRQHandler+0x1bc>
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x70>
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80a6 	beq.w	8006df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x90>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xb0>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f043 0202 	orr.w	r2, r3, #2
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_UART_IRQHandler+0xd0>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	f043 0204 	orr.w	r2, r3, #4
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00f      	beq.n	8006d2e <HAL_UART_IRQHandler+0xfa>
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <HAL_UART_IRQHandler+0xee>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f043 0208 	orr.w	r2, r3, #8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 811f 	beq.w	8006f76 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <HAL_UART_IRQHandler+0x11e>
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa6a 	bl	8007226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_UART_IRQHandler+0x146>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d031      	beq.n	8006dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9aa 	bl	80070d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d123      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d013      	beq.n	8006dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_UART_IRQHandler+0x354>)
 8006dac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fc ff30 	bl	8003c18 <HAL_DMA_Abort_IT>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	e00e      	b.n	8006dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8e6 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e00a      	b.n	8006dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8e2 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e006      	b.n	8006dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f8de 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dea:	e0c4      	b.n	8006f76 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	bf00      	nop
    return;
 8006dee:	e0c2      	b.n	8006f76 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 80a2 	bne.w	8006f3e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 809c 	beq.w	8006f3e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8096 	beq.w	8006f3e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d14f      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006e40:	8a3b      	ldrh	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8099 	beq.w	8006f7a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e4c:	8a3a      	ldrh	r2, [r7, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	f080 8093 	bcs.w	8006f7a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8a3a      	ldrh	r2, [r7, #16]
 8006e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e64:	d02b      	beq.n	8006ebe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e74:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695a      	ldr	r2, [r3, #20]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e94:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0210 	bic.w	r2, r2, #16
 8006eb2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fc fe3d 	bl	8003b38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f870 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ed4:	e051      	b.n	8006f7a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d047      	beq.n	8006f7e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006eee:	8a7b      	ldrh	r3, [r7, #18]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d044      	beq.n	8006f7e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f02:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0210 	bic.w	r2, r2, #16
 8006f30:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f32:	8a7b      	ldrh	r3, [r7, #18]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f83c 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f3c:	e01f      	b.n	8006f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d008      	beq.n	8006f5a <HAL_UART_IRQHandler+0x326>
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f8ff 	bl	8007156 <UART_Transmit_IT>
    return;
 8006f58:	e012      	b.n	8006f80 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00d      	beq.n	8006f80 <HAL_UART_IRQHandler+0x34c>
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f941 	bl	80071f6 <UART_EndTransmit_IT>
    return;
 8006f74:	e004      	b.n	8006f80 <HAL_UART_IRQHandler+0x34c>
    return;
 8006f76:	bf00      	nop
 8006f78:	e002      	b.n	8006f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f7e:	bf00      	nop
  }
}
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	0800712f 	.word	0x0800712f

08006f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e02c      	b.n	8007038 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d028      	beq.n	8007038 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fec:	f7fc fc08 	bl	8003800 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d21d      	bcs.n	8007038 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800700a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e00f      	b.n	8007058 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	429a      	cmp	r2, r3
 8007054:	d0c3      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2222      	movs	r2, #34	; 0x22
 800708a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0220 	orr.w	r2, r2, #32
 80070c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	2b01      	cmp	r3, #1
 8007102:	d107      	bne.n	8007114 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0210 	bic.w	r2, r2, #16
 8007112:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff ff29 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b21      	cmp	r3, #33	; 0x21
 8007168:	d13e      	bne.n	80071e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d114      	bne.n	800719e <UART_Transmit_IT+0x48>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d110      	bne.n	800719e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	1c9a      	adds	r2, r3, #2
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]
 800719c:	e008      	b.n	80071b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6211      	str	r1, [r2, #32]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4619      	mov	r1, r3
 80071be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10f      	bne.n	80071e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e000      	b.n	80071ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071e8:	2302      	movs	r3, #2
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff feb8 	bl	8006f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b22      	cmp	r3, #34	; 0x22
 8007238:	f040 8087 	bne.w	800734a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d117      	bne.n	8007276 <UART_Receive_IT+0x50>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d113      	bne.n	8007276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007264:	b29a      	uxth	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	629a      	str	r2, [r3, #40]	; 0x28
 8007274:	e026      	b.n	80072c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007288:	d007      	beq.n	800729a <UART_Receive_IT+0x74>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <UART_Receive_IT+0x82>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e008      	b.n	80072ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4619      	mov	r1, r3
 80072d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d136      	bne.n	8007346 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0220 	bic.w	r2, r2, #32
 80072e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10e      	bne.n	8007336 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0210 	bic.w	r2, r2, #16
 8007326:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe40 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
 8007334:	e002      	b.n	800733c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fc4c 	bl	8001bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e002      	b.n	800734c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	b09f      	sub	sp, #124	; 0x7c
 800735a:	af00      	add	r7, sp, #0
 800735c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	68d9      	ldr	r1, [r3, #12]
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	ea40 0301 	orr.w	r3, r0, r1
 8007374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	431a      	orrs	r2, r3
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	431a      	orrs	r2, r3
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	4313      	orrs	r3, r2
 800738c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800738e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007398:	f021 010c 	bic.w	r1, r1, #12
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073a2:	430b      	orrs	r3, r1
 80073a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b2:	6999      	ldr	r1, [r3, #24]
 80073b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	ea40 0301 	orr.w	r3, r0, r1
 80073bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4bc5      	ldr	r3, [pc, #788]	; (80076d8 <UART_SetConfig+0x384>)
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d004      	beq.n	80073d2 <UART_SetConfig+0x7e>
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4bc3      	ldr	r3, [pc, #780]	; (80076dc <UART_SetConfig+0x388>)
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d103      	bne.n	80073da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073d2:	f7fd fc99 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 80073d6:	6778      	str	r0, [r7, #116]	; 0x74
 80073d8:	e002      	b.n	80073e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073da:	f7fd fc81 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 80073de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e8:	f040 80b6 	bne.w	8007558 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ee:	461c      	mov	r4, r3
 80073f0:	f04f 0500 	mov.w	r5, #0
 80073f4:	4622      	mov	r2, r4
 80073f6:	462b      	mov	r3, r5
 80073f8:	1891      	adds	r1, r2, r2
 80073fa:	6439      	str	r1, [r7, #64]	; 0x40
 80073fc:	415b      	adcs	r3, r3
 80073fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007400:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007404:	1912      	adds	r2, r2, r4
 8007406:	eb45 0303 	adc.w	r3, r5, r3
 800740a:	f04f 0000 	mov.w	r0, #0
 800740e:	f04f 0100 	mov.w	r1, #0
 8007412:	00d9      	lsls	r1, r3, #3
 8007414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007418:	00d0      	lsls	r0, r2, #3
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	1911      	adds	r1, r2, r4
 8007420:	6639      	str	r1, [r7, #96]	; 0x60
 8007422:	416b      	adcs	r3, r5
 8007424:	667b      	str	r3, [r7, #100]	; 0x64
 8007426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	461a      	mov	r2, r3
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	1891      	adds	r1, r2, r2
 8007432:	63b9      	str	r1, [r7, #56]	; 0x38
 8007434:	415b      	adcs	r3, r3
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800743c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007440:	f7f8 ff1e 	bl	8000280 <__aeabi_uldivmod>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4ba5      	ldr	r3, [pc, #660]	; (80076e0 <UART_SetConfig+0x38c>)
 800744a:	fba3 2302 	umull	r2, r3, r3, r2
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	011e      	lsls	r6, r3, #4
 8007452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007454:	461c      	mov	r4, r3
 8007456:	f04f 0500 	mov.w	r5, #0
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	1891      	adds	r1, r2, r2
 8007460:	6339      	str	r1, [r7, #48]	; 0x30
 8007462:	415b      	adcs	r3, r3
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
 8007466:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800746a:	1912      	adds	r2, r2, r4
 800746c:	eb45 0303 	adc.w	r3, r5, r3
 8007470:	f04f 0000 	mov.w	r0, #0
 8007474:	f04f 0100 	mov.w	r1, #0
 8007478:	00d9      	lsls	r1, r3, #3
 800747a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800747e:	00d0      	lsls	r0, r2, #3
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	1911      	adds	r1, r2, r4
 8007486:	65b9      	str	r1, [r7, #88]	; 0x58
 8007488:	416b      	adcs	r3, r5
 800748a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800748c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	461a      	mov	r2, r3
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	1891      	adds	r1, r2, r2
 8007498:	62b9      	str	r1, [r7, #40]	; 0x28
 800749a:	415b      	adcs	r3, r3
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800749e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80074a6:	f7f8 feeb 	bl	8000280 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4b8c      	ldr	r3, [pc, #560]	; (80076e0 <UART_SetConfig+0x38c>)
 80074b0:	fba3 1302 	umull	r1, r3, r3, r2
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	2164      	movs	r1, #100	; 0x64
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	3332      	adds	r3, #50	; 0x32
 80074c2:	4a87      	ldr	r2, [pc, #540]	; (80076e0 <UART_SetConfig+0x38c>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074d0:	441e      	add	r6, r3
 80074d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d4:	4618      	mov	r0, r3
 80074d6:	f04f 0100 	mov.w	r1, #0
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	1894      	adds	r4, r2, r2
 80074e0:	623c      	str	r4, [r7, #32]
 80074e2:	415b      	adcs	r3, r3
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
 80074e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ea:	1812      	adds	r2, r2, r0
 80074ec:	eb41 0303 	adc.w	r3, r1, r3
 80074f0:	f04f 0400 	mov.w	r4, #0
 80074f4:	f04f 0500 	mov.w	r5, #0
 80074f8:	00dd      	lsls	r5, r3, #3
 80074fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074fe:	00d4      	lsls	r4, r2, #3
 8007500:	4622      	mov	r2, r4
 8007502:	462b      	mov	r3, r5
 8007504:	1814      	adds	r4, r2, r0
 8007506:	653c      	str	r4, [r7, #80]	; 0x50
 8007508:	414b      	adcs	r3, r1
 800750a:	657b      	str	r3, [r7, #84]	; 0x54
 800750c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	461a      	mov	r2, r3
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	1891      	adds	r1, r2, r2
 8007518:	61b9      	str	r1, [r7, #24]
 800751a:	415b      	adcs	r3, r3
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007522:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007526:	f7f8 feab 	bl	8000280 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4b6c      	ldr	r3, [pc, #432]	; (80076e0 <UART_SetConfig+0x38c>)
 8007530:	fba3 1302 	umull	r1, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2164      	movs	r1, #100	; 0x64
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	3332      	adds	r3, #50	; 0x32
 8007542:	4a67      	ldr	r2, [pc, #412]	; (80076e0 <UART_SetConfig+0x38c>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 0207 	and.w	r2, r3, #7
 800754e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4432      	add	r2, r6
 8007554:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007556:	e0b9      	b.n	80076cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755a:	461c      	mov	r4, r3
 800755c:	f04f 0500 	mov.w	r5, #0
 8007560:	4622      	mov	r2, r4
 8007562:	462b      	mov	r3, r5
 8007564:	1891      	adds	r1, r2, r2
 8007566:	6139      	str	r1, [r7, #16]
 8007568:	415b      	adcs	r3, r3
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007570:	1912      	adds	r2, r2, r4
 8007572:	eb45 0303 	adc.w	r3, r5, r3
 8007576:	f04f 0000 	mov.w	r0, #0
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	00d9      	lsls	r1, r3, #3
 8007580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007584:	00d0      	lsls	r0, r2, #3
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	eb12 0804 	adds.w	r8, r2, r4
 800758e:	eb43 0905 	adc.w	r9, r3, r5
 8007592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	008b      	lsls	r3, r1, #2
 80075a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075aa:	0082      	lsls	r2, r0, #2
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f8 fe66 	bl	8000280 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4b49      	ldr	r3, [pc, #292]	; (80076e0 <UART_SetConfig+0x38c>)
 80075ba:	fba3 2302 	umull	r2, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	011e      	lsls	r6, r3, #4
 80075c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c4:	4618      	mov	r0, r3
 80075c6:	f04f 0100 	mov.w	r1, #0
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	1894      	adds	r4, r2, r2
 80075d0:	60bc      	str	r4, [r7, #8]
 80075d2:	415b      	adcs	r3, r3
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075da:	1812      	adds	r2, r2, r0
 80075dc:	eb41 0303 	adc.w	r3, r1, r3
 80075e0:	f04f 0400 	mov.w	r4, #0
 80075e4:	f04f 0500 	mov.w	r5, #0
 80075e8:	00dd      	lsls	r5, r3, #3
 80075ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075ee:	00d4      	lsls	r4, r2, #3
 80075f0:	4622      	mov	r2, r4
 80075f2:	462b      	mov	r3, r5
 80075f4:	1814      	adds	r4, r2, r0
 80075f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80075f8:	414b      	adcs	r3, r1
 80075fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4618      	mov	r0, r3
 8007602:	f04f 0100 	mov.w	r1, #0
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	008b      	lsls	r3, r1, #2
 8007610:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007614:	0082      	lsls	r2, r0, #2
 8007616:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800761a:	f7f8 fe31 	bl	8000280 <__aeabi_uldivmod>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4b2f      	ldr	r3, [pc, #188]	; (80076e0 <UART_SetConfig+0x38c>)
 8007624:	fba3 1302 	umull	r1, r3, r3, r2
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	2164      	movs	r1, #100	; 0x64
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	3332      	adds	r3, #50	; 0x32
 8007636:	4a2a      	ldr	r2, [pc, #168]	; (80076e0 <UART_SetConfig+0x38c>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007642:	441e      	add	r6, r3
 8007644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007646:	4618      	mov	r0, r3
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	1894      	adds	r4, r2, r2
 8007652:	603c      	str	r4, [r7, #0]
 8007654:	415b      	adcs	r3, r3
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765c:	1812      	adds	r2, r2, r0
 800765e:	eb41 0303 	adc.w	r3, r1, r3
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	f04f 0500 	mov.w	r5, #0
 800766a:	00dd      	lsls	r5, r3, #3
 800766c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007670:	00d4      	lsls	r4, r2, #3
 8007672:	4622      	mov	r2, r4
 8007674:	462b      	mov	r3, r5
 8007676:	eb12 0a00 	adds.w	sl, r2, r0
 800767a:	eb43 0b01 	adc.w	fp, r3, r1
 800767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4618      	mov	r0, r3
 8007684:	f04f 0100 	mov.w	r1, #0
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007696:	0082      	lsls	r2, r0, #2
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	f7f8 fdf0 	bl	8000280 <__aeabi_uldivmod>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <UART_SetConfig+0x38c>)
 80076a6:	fba3 1302 	umull	r1, r3, r3, r2
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2164      	movs	r1, #100	; 0x64
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	3332      	adds	r3, #50	; 0x32
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <UART_SetConfig+0x38c>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4432      	add	r2, r6
 80076ca:	609a      	str	r2, [r3, #8]
}
 80076cc:	bf00      	nop
 80076ce:	377c      	adds	r7, #124	; 0x7c
 80076d0:	46bd      	mov	sp, r7
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	bf00      	nop
 80076d8:	40011000 	.word	0x40011000
 80076dc:	40011400 	.word	0x40011400
 80076e0:	51eb851f 	.word	0x51eb851f

080076e4 <__errno>:
 80076e4:	4b01      	ldr	r3, [pc, #4]	; (80076ec <__errno+0x8>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200000a8 	.word	0x200000a8

080076f0 <__libc_init_array>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4d0d      	ldr	r5, [pc, #52]	; (8007728 <__libc_init_array+0x38>)
 80076f4:	4c0d      	ldr	r4, [pc, #52]	; (800772c <__libc_init_array+0x3c>)
 80076f6:	1b64      	subs	r4, r4, r5
 80076f8:	10a4      	asrs	r4, r4, #2
 80076fa:	2600      	movs	r6, #0
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	d109      	bne.n	8007714 <__libc_init_array+0x24>
 8007700:	4d0b      	ldr	r5, [pc, #44]	; (8007730 <__libc_init_array+0x40>)
 8007702:	4c0c      	ldr	r4, [pc, #48]	; (8007734 <__libc_init_array+0x44>)
 8007704:	f001 fa24 	bl	8008b50 <_init>
 8007708:	1b64      	subs	r4, r4, r5
 800770a:	10a4      	asrs	r4, r4, #2
 800770c:	2600      	movs	r6, #0
 800770e:	42a6      	cmp	r6, r4
 8007710:	d105      	bne.n	800771e <__libc_init_array+0x2e>
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	f855 3b04 	ldr.w	r3, [r5], #4
 8007718:	4798      	blx	r3
 800771a:	3601      	adds	r6, #1
 800771c:	e7ee      	b.n	80076fc <__libc_init_array+0xc>
 800771e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007722:	4798      	blx	r3
 8007724:	3601      	adds	r6, #1
 8007726:	e7f2      	b.n	800770e <__libc_init_array+0x1e>
 8007728:	080091bc 	.word	0x080091bc
 800772c:	080091bc 	.word	0x080091bc
 8007730:	080091bc 	.word	0x080091bc
 8007734:	080091c0 	.word	0x080091c0

08007738 <malloc>:
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <malloc+0xc>)
 800773a:	4601      	mov	r1, r0
 800773c:	6818      	ldr	r0, [r3, #0]
 800773e:	f000 b869 	b.w	8007814 <_malloc_r>
 8007742:	bf00      	nop
 8007744:	200000a8 	.word	0x200000a8

08007748 <memcpy>:
 8007748:	440a      	add	r2, r1
 800774a:	4291      	cmp	r1, r2
 800774c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007750:	d100      	bne.n	8007754 <memcpy+0xc>
 8007752:	4770      	bx	lr
 8007754:	b510      	push	{r4, lr}
 8007756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775e:	4291      	cmp	r1, r2
 8007760:	d1f9      	bne.n	8007756 <memcpy+0xe>
 8007762:	bd10      	pop	{r4, pc}

08007764 <memset>:
 8007764:	4402      	add	r2, r0
 8007766:	4603      	mov	r3, r0
 8007768:	4293      	cmp	r3, r2
 800776a:	d100      	bne.n	800776e <memset+0xa>
 800776c:	4770      	bx	lr
 800776e:	f803 1b01 	strb.w	r1, [r3], #1
 8007772:	e7f9      	b.n	8007768 <memset+0x4>

08007774 <_free_r>:
 8007774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007776:	2900      	cmp	r1, #0
 8007778:	d048      	beq.n	800780c <_free_r+0x98>
 800777a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800777e:	9001      	str	r0, [sp, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f1a1 0404 	sub.w	r4, r1, #4
 8007786:	bfb8      	it	lt
 8007788:	18e4      	addlt	r4, r4, r3
 800778a:	f000 fcc7 	bl	800811c <__malloc_lock>
 800778e:	4a20      	ldr	r2, [pc, #128]	; (8007810 <_free_r+0x9c>)
 8007790:	9801      	ldr	r0, [sp, #4]
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	4615      	mov	r5, r2
 8007796:	b933      	cbnz	r3, 80077a6 <_free_r+0x32>
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	6014      	str	r4, [r2, #0]
 800779c:	b003      	add	sp, #12
 800779e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a2:	f000 bcc1 	b.w	8008128 <__malloc_unlock>
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	d90b      	bls.n	80077c2 <_free_r+0x4e>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	1862      	adds	r2, r4, r1
 80077ae:	4293      	cmp	r3, r2
 80077b0:	bf04      	itt	eq
 80077b2:	681a      	ldreq	r2, [r3, #0]
 80077b4:	685b      	ldreq	r3, [r3, #4]
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	bf04      	itt	eq
 80077ba:	1852      	addeq	r2, r2, r1
 80077bc:	6022      	streq	r2, [r4, #0]
 80077be:	602c      	str	r4, [r5, #0]
 80077c0:	e7ec      	b.n	800779c <_free_r+0x28>
 80077c2:	461a      	mov	r2, r3
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b10b      	cbz	r3, 80077cc <_free_r+0x58>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d9fa      	bls.n	80077c2 <_free_r+0x4e>
 80077cc:	6811      	ldr	r1, [r2, #0]
 80077ce:	1855      	adds	r5, r2, r1
 80077d0:	42a5      	cmp	r5, r4
 80077d2:	d10b      	bne.n	80077ec <_free_r+0x78>
 80077d4:	6824      	ldr	r4, [r4, #0]
 80077d6:	4421      	add	r1, r4
 80077d8:	1854      	adds	r4, r2, r1
 80077da:	42a3      	cmp	r3, r4
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	d1dd      	bne.n	800779c <_free_r+0x28>
 80077e0:	681c      	ldr	r4, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	6053      	str	r3, [r2, #4]
 80077e6:	4421      	add	r1, r4
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	e7d7      	b.n	800779c <_free_r+0x28>
 80077ec:	d902      	bls.n	80077f4 <_free_r+0x80>
 80077ee:	230c      	movs	r3, #12
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	e7d3      	b.n	800779c <_free_r+0x28>
 80077f4:	6825      	ldr	r5, [r4, #0]
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf04      	itt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	bf04      	itt	eq
 8007804:	1949      	addeq	r1, r1, r5
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	6054      	str	r4, [r2, #4]
 800780a:	e7c7      	b.n	800779c <_free_r+0x28>
 800780c:	b003      	add	sp, #12
 800780e:	bd30      	pop	{r4, r5, pc}
 8007810:	20000158 	.word	0x20000158

08007814 <_malloc_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	1ccd      	adds	r5, r1, #3
 8007818:	f025 0503 	bic.w	r5, r5, #3
 800781c:	3508      	adds	r5, #8
 800781e:	2d0c      	cmp	r5, #12
 8007820:	bf38      	it	cc
 8007822:	250c      	movcc	r5, #12
 8007824:	2d00      	cmp	r5, #0
 8007826:	4606      	mov	r6, r0
 8007828:	db01      	blt.n	800782e <_malloc_r+0x1a>
 800782a:	42a9      	cmp	r1, r5
 800782c:	d903      	bls.n	8007836 <_malloc_r+0x22>
 800782e:	230c      	movs	r3, #12
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	f000 fc71 	bl	800811c <__malloc_lock>
 800783a:	4921      	ldr	r1, [pc, #132]	; (80078c0 <_malloc_r+0xac>)
 800783c:	680a      	ldr	r2, [r1, #0]
 800783e:	4614      	mov	r4, r2
 8007840:	b99c      	cbnz	r4, 800786a <_malloc_r+0x56>
 8007842:	4f20      	ldr	r7, [pc, #128]	; (80078c4 <_malloc_r+0xb0>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	b923      	cbnz	r3, 8007852 <_malloc_r+0x3e>
 8007848:	4621      	mov	r1, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f8e0 	bl	8007a10 <_sbrk_r>
 8007850:	6038      	str	r0, [r7, #0]
 8007852:	4629      	mov	r1, r5
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f8db 	bl	8007a10 <_sbrk_r>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	d123      	bne.n	80078a6 <_malloc_r+0x92>
 800785e:	230c      	movs	r3, #12
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	4630      	mov	r0, r6
 8007864:	f000 fc60 	bl	8008128 <__malloc_unlock>
 8007868:	e7e3      	b.n	8007832 <_malloc_r+0x1e>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	1b5b      	subs	r3, r3, r5
 800786e:	d417      	bmi.n	80078a0 <_malloc_r+0x8c>
 8007870:	2b0b      	cmp	r3, #11
 8007872:	d903      	bls.n	800787c <_malloc_r+0x68>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	441c      	add	r4, r3
 8007878:	6025      	str	r5, [r4, #0]
 800787a:	e004      	b.n	8007886 <_malloc_r+0x72>
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	42a2      	cmp	r2, r4
 8007880:	bf0c      	ite	eq
 8007882:	600b      	streq	r3, [r1, #0]
 8007884:	6053      	strne	r3, [r2, #4]
 8007886:	4630      	mov	r0, r6
 8007888:	f000 fc4e 	bl	8008128 <__malloc_unlock>
 800788c:	f104 000b 	add.w	r0, r4, #11
 8007890:	1d23      	adds	r3, r4, #4
 8007892:	f020 0007 	bic.w	r0, r0, #7
 8007896:	1ac2      	subs	r2, r0, r3
 8007898:	d0cc      	beq.n	8007834 <_malloc_r+0x20>
 800789a:	1a1b      	subs	r3, r3, r0
 800789c:	50a3      	str	r3, [r4, r2]
 800789e:	e7c9      	b.n	8007834 <_malloc_r+0x20>
 80078a0:	4622      	mov	r2, r4
 80078a2:	6864      	ldr	r4, [r4, #4]
 80078a4:	e7cc      	b.n	8007840 <_malloc_r+0x2c>
 80078a6:	1cc4      	adds	r4, r0, #3
 80078a8:	f024 0403 	bic.w	r4, r4, #3
 80078ac:	42a0      	cmp	r0, r4
 80078ae:	d0e3      	beq.n	8007878 <_malloc_r+0x64>
 80078b0:	1a21      	subs	r1, r4, r0
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f8ac 	bl	8007a10 <_sbrk_r>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1dd      	bne.n	8007878 <_malloc_r+0x64>
 80078bc:	e7cf      	b.n	800785e <_malloc_r+0x4a>
 80078be:	bf00      	nop
 80078c0:	20000158 	.word	0x20000158
 80078c4:	2000015c 	.word	0x2000015c

080078c8 <iprintf>:
 80078c8:	b40f      	push	{r0, r1, r2, r3}
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <iprintf+0x2c>)
 80078cc:	b513      	push	{r0, r1, r4, lr}
 80078ce:	681c      	ldr	r4, [r3, #0]
 80078d0:	b124      	cbz	r4, 80078dc <iprintf+0x14>
 80078d2:	69a3      	ldr	r3, [r4, #24]
 80078d4:	b913      	cbnz	r3, 80078dc <iprintf+0x14>
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 fb0a 	bl	8007ef0 <__sinit>
 80078dc:	ab05      	add	r3, sp, #20
 80078de:	9a04      	ldr	r2, [sp, #16]
 80078e0:	68a1      	ldr	r1, [r4, #8]
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fdab 	bl	8008440 <_vfiprintf_r>
 80078ea:	b002      	add	sp, #8
 80078ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f0:	b004      	add	sp, #16
 80078f2:	4770      	bx	lr
 80078f4:	200000a8 	.word	0x200000a8

080078f8 <putchar>:
 80078f8:	4b09      	ldr	r3, [pc, #36]	; (8007920 <putchar+0x28>)
 80078fa:	b513      	push	{r0, r1, r4, lr}
 80078fc:	681c      	ldr	r4, [r3, #0]
 80078fe:	4601      	mov	r1, r0
 8007900:	b134      	cbz	r4, 8007910 <putchar+0x18>
 8007902:	69a3      	ldr	r3, [r4, #24]
 8007904:	b923      	cbnz	r3, 8007910 <putchar+0x18>
 8007906:	9001      	str	r0, [sp, #4]
 8007908:	4620      	mov	r0, r4
 800790a:	f000 faf1 	bl	8007ef0 <__sinit>
 800790e:	9901      	ldr	r1, [sp, #4]
 8007910:	68a2      	ldr	r2, [r4, #8]
 8007912:	4620      	mov	r0, r4
 8007914:	b002      	add	sp, #8
 8007916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791a:	f001 b855 	b.w	80089c8 <_putc_r>
 800791e:	bf00      	nop
 8007920:	200000a8 	.word	0x200000a8

08007924 <_puts_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	460e      	mov	r6, r1
 8007928:	4605      	mov	r5, r0
 800792a:	b118      	cbz	r0, 8007934 <_puts_r+0x10>
 800792c:	6983      	ldr	r3, [r0, #24]
 800792e:	b90b      	cbnz	r3, 8007934 <_puts_r+0x10>
 8007930:	f000 fade 	bl	8007ef0 <__sinit>
 8007934:	69ab      	ldr	r3, [r5, #24]
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	b913      	cbnz	r3, 8007940 <_puts_r+0x1c>
 800793a:	4628      	mov	r0, r5
 800793c:	f000 fad8 	bl	8007ef0 <__sinit>
 8007940:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <_puts_r+0xd0>)
 8007942:	429c      	cmp	r4, r3
 8007944:	d120      	bne.n	8007988 <_puts_r+0x64>
 8007946:	686c      	ldr	r4, [r5, #4]
 8007948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800794a:	07db      	lsls	r3, r3, #31
 800794c:	d405      	bmi.n	800795a <_puts_r+0x36>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	0598      	lsls	r0, r3, #22
 8007952:	d402      	bmi.n	800795a <_puts_r+0x36>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f000 fb69 	bl	800802c <__retarget_lock_acquire_recursive>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	0719      	lsls	r1, r3, #28
 800795e:	d51d      	bpl.n	800799c <_puts_r+0x78>
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	b1db      	cbz	r3, 800799c <_puts_r+0x78>
 8007964:	3e01      	subs	r6, #1
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800796c:	3b01      	subs	r3, #1
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	bb39      	cbnz	r1, 80079c2 <_puts_r+0x9e>
 8007972:	2b00      	cmp	r3, #0
 8007974:	da38      	bge.n	80079e8 <_puts_r+0xc4>
 8007976:	4622      	mov	r2, r4
 8007978:	210a      	movs	r1, #10
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f8bc 	bl	8007af8 <__swbuf_r>
 8007980:	3001      	adds	r0, #1
 8007982:	d011      	beq.n	80079a8 <_puts_r+0x84>
 8007984:	250a      	movs	r5, #10
 8007986:	e011      	b.n	80079ac <_puts_r+0x88>
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <_puts_r+0xd4>)
 800798a:	429c      	cmp	r4, r3
 800798c:	d101      	bne.n	8007992 <_puts_r+0x6e>
 800798e:	68ac      	ldr	r4, [r5, #8]
 8007990:	e7da      	b.n	8007948 <_puts_r+0x24>
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <_puts_r+0xd8>)
 8007994:	429c      	cmp	r4, r3
 8007996:	bf08      	it	eq
 8007998:	68ec      	ldreq	r4, [r5, #12]
 800799a:	e7d5      	b.n	8007948 <_puts_r+0x24>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f90e 	bl	8007bc0 <__swsetup_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d0dd      	beq.n	8007964 <_puts_r+0x40>
 80079a8:	f04f 35ff 	mov.w	r5, #4294967295
 80079ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ae:	07da      	lsls	r2, r3, #31
 80079b0:	d405      	bmi.n	80079be <_puts_r+0x9a>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	059b      	lsls	r3, r3, #22
 80079b6:	d402      	bmi.n	80079be <_puts_r+0x9a>
 80079b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ba:	f000 fb38 	bl	800802e <__retarget_lock_release_recursive>
 80079be:	4628      	mov	r0, r5
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da04      	bge.n	80079d0 <_puts_r+0xac>
 80079c6:	69a2      	ldr	r2, [r4, #24]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	dc06      	bgt.n	80079da <_puts_r+0xb6>
 80079cc:	290a      	cmp	r1, #10
 80079ce:	d004      	beq.n	80079da <_puts_r+0xb6>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	7019      	strb	r1, [r3, #0]
 80079d8:	e7c5      	b.n	8007966 <_puts_r+0x42>
 80079da:	4622      	mov	r2, r4
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f88b 	bl	8007af8 <__swbuf_r>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1bf      	bne.n	8007966 <_puts_r+0x42>
 80079e6:	e7df      	b.n	80079a8 <_puts_r+0x84>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	250a      	movs	r5, #10
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	701d      	strb	r5, [r3, #0]
 80079f2:	e7db      	b.n	80079ac <_puts_r+0x88>
 80079f4:	08009140 	.word	0x08009140
 80079f8:	08009160 	.word	0x08009160
 80079fc:	08009120 	.word	0x08009120

08007a00 <puts>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <puts+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f7ff bf8d 	b.w	8007924 <_puts_r>
 8007a0a:	bf00      	nop
 8007a0c:	200000a8 	.word	0x200000a8

08007a10 <_sbrk_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	; (8007a2c <_sbrk_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7fb fe48 	bl	80036b0 <_sbrk>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_sbrk_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_sbrk_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	20001df0 	.word	0x20001df0

08007a30 <siprintf>:
 8007a30:	b40e      	push	{r1, r2, r3}
 8007a32:	b500      	push	{lr}
 8007a34:	b09c      	sub	sp, #112	; 0x70
 8007a36:	ab1d      	add	r3, sp, #116	; 0x74
 8007a38:	9002      	str	r0, [sp, #8]
 8007a3a:	9006      	str	r0, [sp, #24]
 8007a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a40:	4809      	ldr	r0, [pc, #36]	; (8007a68 <siprintf+0x38>)
 8007a42:	9107      	str	r1, [sp, #28]
 8007a44:	9104      	str	r1, [sp, #16]
 8007a46:	4909      	ldr	r1, [pc, #36]	; (8007a6c <siprintf+0x3c>)
 8007a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4c:	9105      	str	r1, [sp, #20]
 8007a4e:	6800      	ldr	r0, [r0, #0]
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	a902      	add	r1, sp, #8
 8007a54:	f000 fbca 	bl	80081ec <_svfiprintf_r>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	b01c      	add	sp, #112	; 0x70
 8007a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a64:	b003      	add	sp, #12
 8007a66:	4770      	bx	lr
 8007a68:	200000a8 	.word	0x200000a8
 8007a6c:	ffff0208 	.word	0xffff0208

08007a70 <__sread>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	460c      	mov	r4, r1
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	f000 ffee 	bl	8008a58 <_read_r>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	bfab      	itete	ge
 8007a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a82:	89a3      	ldrhlt	r3, [r4, #12]
 8007a84:	181b      	addge	r3, r3, r0
 8007a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a8a:	bfac      	ite	ge
 8007a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a8e:	81a3      	strhlt	r3, [r4, #12]
 8007a90:	bd10      	pop	{r4, pc}

08007a92 <__swrite>:
 8007a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a96:	461f      	mov	r7, r3
 8007a98:	898b      	ldrh	r3, [r1, #12]
 8007a9a:	05db      	lsls	r3, r3, #23
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	d505      	bpl.n	8007ab0 <__swrite+0x1e>
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f000 fac0 	bl	8008030 <_lseek_r>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac6:	f000 b869 	b.w	8007b9c <_write_r>

08007aca <__sseek>:
 8007aca:	b510      	push	{r4, lr}
 8007acc:	460c      	mov	r4, r1
 8007ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad2:	f000 faad 	bl	8008030 <_lseek_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	bf15      	itete	ne
 8007adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ae6:	81a3      	strheq	r3, [r4, #12]
 8007ae8:	bf18      	it	ne
 8007aea:	81a3      	strhne	r3, [r4, #12]
 8007aec:	bd10      	pop	{r4, pc}

08007aee <__sclose>:
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 b8d3 	b.w	8007c9c <_close_r>
	...

08007af8 <__swbuf_r>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	460e      	mov	r6, r1
 8007afc:	4614      	mov	r4, r2
 8007afe:	4605      	mov	r5, r0
 8007b00:	b118      	cbz	r0, 8007b0a <__swbuf_r+0x12>
 8007b02:	6983      	ldr	r3, [r0, #24]
 8007b04:	b90b      	cbnz	r3, 8007b0a <__swbuf_r+0x12>
 8007b06:	f000 f9f3 	bl	8007ef0 <__sinit>
 8007b0a:	4b21      	ldr	r3, [pc, #132]	; (8007b90 <__swbuf_r+0x98>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	d12b      	bne.n	8007b68 <__swbuf_r+0x70>
 8007b10:	686c      	ldr	r4, [r5, #4]
 8007b12:	69a3      	ldr	r3, [r4, #24]
 8007b14:	60a3      	str	r3, [r4, #8]
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	071a      	lsls	r2, r3, #28
 8007b1a:	d52f      	bpl.n	8007b7c <__swbuf_r+0x84>
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	b36b      	cbz	r3, 8007b7c <__swbuf_r+0x84>
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	1ac0      	subs	r0, r0, r3
 8007b26:	6963      	ldr	r3, [r4, #20]
 8007b28:	b2f6      	uxtb	r6, r6
 8007b2a:	4283      	cmp	r3, r0
 8007b2c:	4637      	mov	r7, r6
 8007b2e:	dc04      	bgt.n	8007b3a <__swbuf_r+0x42>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f948 	bl	8007dc8 <_fflush_r>
 8007b38:	bb30      	cbnz	r0, 8007b88 <__swbuf_r+0x90>
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	701e      	strb	r6, [r3, #0]
 8007b48:	6963      	ldr	r3, [r4, #20]
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	4283      	cmp	r3, r0
 8007b4e:	d004      	beq.n	8007b5a <__swbuf_r+0x62>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	07db      	lsls	r3, r3, #31
 8007b54:	d506      	bpl.n	8007b64 <__swbuf_r+0x6c>
 8007b56:	2e0a      	cmp	r6, #10
 8007b58:	d104      	bne.n	8007b64 <__swbuf_r+0x6c>
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 f933 	bl	8007dc8 <_fflush_r>
 8007b62:	b988      	cbnz	r0, 8007b88 <__swbuf_r+0x90>
 8007b64:	4638      	mov	r0, r7
 8007b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <__swbuf_r+0x9c>)
 8007b6a:	429c      	cmp	r4, r3
 8007b6c:	d101      	bne.n	8007b72 <__swbuf_r+0x7a>
 8007b6e:	68ac      	ldr	r4, [r5, #8]
 8007b70:	e7cf      	b.n	8007b12 <__swbuf_r+0x1a>
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <__swbuf_r+0xa0>)
 8007b74:	429c      	cmp	r4, r3
 8007b76:	bf08      	it	eq
 8007b78:	68ec      	ldreq	r4, [r5, #12]
 8007b7a:	e7ca      	b.n	8007b12 <__swbuf_r+0x1a>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 f81e 	bl	8007bc0 <__swsetup_r>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d0cb      	beq.n	8007b20 <__swbuf_r+0x28>
 8007b88:	f04f 37ff 	mov.w	r7, #4294967295
 8007b8c:	e7ea      	b.n	8007b64 <__swbuf_r+0x6c>
 8007b8e:	bf00      	nop
 8007b90:	08009140 	.word	0x08009140
 8007b94:	08009160 	.word	0x08009160
 8007b98:	08009120 	.word	0x08009120

08007b9c <_write_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	; (8007bbc <_write_r+0x20>)
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	602a      	str	r2, [r5, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f7fa f934 	bl	8001e18 <_write>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_write_r+0x1e>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_write_r+0x1e>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20001df0 	.word	0x20001df0

08007bc0 <__swsetup_r>:
 8007bc0:	4b32      	ldr	r3, [pc, #200]	; (8007c8c <__swsetup_r+0xcc>)
 8007bc2:	b570      	push	{r4, r5, r6, lr}
 8007bc4:	681d      	ldr	r5, [r3, #0]
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	b125      	cbz	r5, 8007bd6 <__swsetup_r+0x16>
 8007bcc:	69ab      	ldr	r3, [r5, #24]
 8007bce:	b913      	cbnz	r3, 8007bd6 <__swsetup_r+0x16>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f98d 	bl	8007ef0 <__sinit>
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <__swsetup_r+0xd0>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d10f      	bne.n	8007bfc <__swsetup_r+0x3c>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be4:	0719      	lsls	r1, r3, #28
 8007be6:	d42c      	bmi.n	8007c42 <__swsetup_r+0x82>
 8007be8:	06dd      	lsls	r5, r3, #27
 8007bea:	d411      	bmi.n	8007c10 <__swsetup_r+0x50>
 8007bec:	2309      	movs	r3, #9
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	e03e      	b.n	8007c7a <__swsetup_r+0xba>
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <__swsetup_r+0xd4>)
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d101      	bne.n	8007c06 <__swsetup_r+0x46>
 8007c02:	68ac      	ldr	r4, [r5, #8]
 8007c04:	e7eb      	b.n	8007bde <__swsetup_r+0x1e>
 8007c06:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <__swsetup_r+0xd8>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	bf08      	it	eq
 8007c0c:	68ec      	ldreq	r4, [r5, #12]
 8007c0e:	e7e6      	b.n	8007bde <__swsetup_r+0x1e>
 8007c10:	0758      	lsls	r0, r3, #29
 8007c12:	d512      	bpl.n	8007c3a <__swsetup_r+0x7a>
 8007c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c16:	b141      	cbz	r1, 8007c2a <__swsetup_r+0x6a>
 8007c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	d002      	beq.n	8007c26 <__swsetup_r+0x66>
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff fda7 	bl	8007774 <_free_r>
 8007c26:	2300      	movs	r3, #0
 8007c28:	6363      	str	r3, [r4, #52]	; 0x34
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	2300      	movs	r3, #0
 8007c34:	6063      	str	r3, [r4, #4]
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f043 0308 	orr.w	r3, r3, #8
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	b94b      	cbnz	r3, 8007c5a <__swsetup_r+0x9a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c50:	d003      	beq.n	8007c5a <__swsetup_r+0x9a>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 fa21 	bl	800809c <__smakebuf_r>
 8007c5a:	89a0      	ldrh	r0, [r4, #12]
 8007c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c60:	f010 0301 	ands.w	r3, r0, #1
 8007c64:	d00a      	beq.n	8007c7c <__swsetup_r+0xbc>
 8007c66:	2300      	movs	r3, #0
 8007c68:	60a3      	str	r3, [r4, #8]
 8007c6a:	6963      	ldr	r3, [r4, #20]
 8007c6c:	425b      	negs	r3, r3
 8007c6e:	61a3      	str	r3, [r4, #24]
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	b943      	cbnz	r3, 8007c86 <__swsetup_r+0xc6>
 8007c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c78:	d1ba      	bne.n	8007bf0 <__swsetup_r+0x30>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	0781      	lsls	r1, r0, #30
 8007c7e:	bf58      	it	pl
 8007c80:	6963      	ldrpl	r3, [r4, #20]
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	e7f4      	b.n	8007c70 <__swsetup_r+0xb0>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e7f7      	b.n	8007c7a <__swsetup_r+0xba>
 8007c8a:	bf00      	nop
 8007c8c:	200000a8 	.word	0x200000a8
 8007c90:	08009140 	.word	0x08009140
 8007c94:	08009160 	.word	0x08009160
 8007c98:	08009120 	.word	0x08009120

08007c9c <_close_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d06      	ldr	r5, [pc, #24]	; (8007cb8 <_close_r+0x1c>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7fb fccd 	bl	8003646 <_close>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_close_r+0x1a>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_close_r+0x1a>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	20001df0 	.word	0x20001df0

08007cbc <__sflush_r>:
 8007cbc:	898a      	ldrh	r2, [r1, #12]
 8007cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	0710      	lsls	r0, r2, #28
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	d458      	bmi.n	8007d7c <__sflush_r+0xc0>
 8007cca:	684b      	ldr	r3, [r1, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dc05      	bgt.n	8007cdc <__sflush_r+0x20>
 8007cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dc02      	bgt.n	8007cdc <__sflush_r+0x20>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d0f9      	beq.n	8007cd6 <__sflush_r+0x1a>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ce8:	682f      	ldr	r7, [r5, #0]
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	d032      	beq.n	8007d54 <__sflush_r+0x98>
 8007cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	075a      	lsls	r2, r3, #29
 8007cf4:	d505      	bpl.n	8007d02 <__sflush_r+0x46>
 8007cf6:	6863      	ldr	r3, [r4, #4]
 8007cf8:	1ac0      	subs	r0, r0, r3
 8007cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cfc:	b10b      	cbz	r3, 8007d02 <__sflush_r+0x46>
 8007cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d00:	1ac0      	subs	r0, r0, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	4602      	mov	r2, r0
 8007d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d08:	6a21      	ldr	r1, [r4, #32]
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b0      	blx	r6
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	d106      	bne.n	8007d22 <__sflush_r+0x66>
 8007d14:	6829      	ldr	r1, [r5, #0]
 8007d16:	291d      	cmp	r1, #29
 8007d18:	d82c      	bhi.n	8007d74 <__sflush_r+0xb8>
 8007d1a:	4a2a      	ldr	r2, [pc, #168]	; (8007dc4 <__sflush_r+0x108>)
 8007d1c:	40ca      	lsrs	r2, r1
 8007d1e:	07d6      	lsls	r6, r2, #31
 8007d20:	d528      	bpl.n	8007d74 <__sflush_r+0xb8>
 8007d22:	2200      	movs	r2, #0
 8007d24:	6062      	str	r2, [r4, #4]
 8007d26:	04d9      	lsls	r1, r3, #19
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	d504      	bpl.n	8007d38 <__sflush_r+0x7c>
 8007d2e:	1c42      	adds	r2, r0, #1
 8007d30:	d101      	bne.n	8007d36 <__sflush_r+0x7a>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b903      	cbnz	r3, 8007d38 <__sflush_r+0x7c>
 8007d36:	6560      	str	r0, [r4, #84]	; 0x54
 8007d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d3a:	602f      	str	r7, [r5, #0]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d0ca      	beq.n	8007cd6 <__sflush_r+0x1a>
 8007d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d44:	4299      	cmp	r1, r3
 8007d46:	d002      	beq.n	8007d4e <__sflush_r+0x92>
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7ff fd13 	bl	8007774 <_free_r>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	6360      	str	r0, [r4, #52]	; 0x34
 8007d52:	e7c1      	b.n	8007cd8 <__sflush_r+0x1c>
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	2301      	movs	r3, #1
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b0      	blx	r6
 8007d5c:	1c41      	adds	r1, r0, #1
 8007d5e:	d1c7      	bne.n	8007cf0 <__sflush_r+0x34>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0c4      	beq.n	8007cf0 <__sflush_r+0x34>
 8007d66:	2b1d      	cmp	r3, #29
 8007d68:	d001      	beq.n	8007d6e <__sflush_r+0xb2>
 8007d6a:	2b16      	cmp	r3, #22
 8007d6c:	d101      	bne.n	8007d72 <__sflush_r+0xb6>
 8007d6e:	602f      	str	r7, [r5, #0]
 8007d70:	e7b1      	b.n	8007cd6 <__sflush_r+0x1a>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	e7ad      	b.n	8007cd8 <__sflush_r+0x1c>
 8007d7c:	690f      	ldr	r7, [r1, #16]
 8007d7e:	2f00      	cmp	r7, #0
 8007d80:	d0a9      	beq.n	8007cd6 <__sflush_r+0x1a>
 8007d82:	0793      	lsls	r3, r2, #30
 8007d84:	680e      	ldr	r6, [r1, #0]
 8007d86:	bf08      	it	eq
 8007d88:	694b      	ldreq	r3, [r1, #20]
 8007d8a:	600f      	str	r7, [r1, #0]
 8007d8c:	bf18      	it	ne
 8007d8e:	2300      	movne	r3, #0
 8007d90:	eba6 0807 	sub.w	r8, r6, r7
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	f1b8 0f00 	cmp.w	r8, #0
 8007d9a:	dd9c      	ble.n	8007cd6 <__sflush_r+0x1a>
 8007d9c:	6a21      	ldr	r1, [r4, #32]
 8007d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007da0:	4643      	mov	r3, r8
 8007da2:	463a      	mov	r2, r7
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b0      	blx	r6
 8007da8:	2800      	cmp	r0, #0
 8007daa:	dc06      	bgt.n	8007dba <__sflush_r+0xfe>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	e78e      	b.n	8007cd8 <__sflush_r+0x1c>
 8007dba:	4407      	add	r7, r0
 8007dbc:	eba8 0800 	sub.w	r8, r8, r0
 8007dc0:	e7e9      	b.n	8007d96 <__sflush_r+0xda>
 8007dc2:	bf00      	nop
 8007dc4:	20400001 	.word	0x20400001

08007dc8 <_fflush_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	690b      	ldr	r3, [r1, #16]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b913      	cbnz	r3, 8007dd8 <_fflush_r+0x10>
 8007dd2:	2500      	movs	r5, #0
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	b118      	cbz	r0, 8007de2 <_fflush_r+0x1a>
 8007dda:	6983      	ldr	r3, [r0, #24]
 8007ddc:	b90b      	cbnz	r3, 8007de2 <_fflush_r+0x1a>
 8007dde:	f000 f887 	bl	8007ef0 <__sinit>
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <_fflush_r+0x6c>)
 8007de4:	429c      	cmp	r4, r3
 8007de6:	d11b      	bne.n	8007e20 <_fflush_r+0x58>
 8007de8:	686c      	ldr	r4, [r5, #4]
 8007dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0ef      	beq.n	8007dd2 <_fflush_r+0xa>
 8007df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007df4:	07d0      	lsls	r0, r2, #31
 8007df6:	d404      	bmi.n	8007e02 <_fflush_r+0x3a>
 8007df8:	0599      	lsls	r1, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_fflush_r+0x3a>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfe:	f000 f915 	bl	800802c <__retarget_lock_acquire_recursive>
 8007e02:	4628      	mov	r0, r5
 8007e04:	4621      	mov	r1, r4
 8007e06:	f7ff ff59 	bl	8007cbc <__sflush_r>
 8007e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e0c:	07da      	lsls	r2, r3, #31
 8007e0e:	4605      	mov	r5, r0
 8007e10:	d4e0      	bmi.n	8007dd4 <_fflush_r+0xc>
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	059b      	lsls	r3, r3, #22
 8007e16:	d4dd      	bmi.n	8007dd4 <_fflush_r+0xc>
 8007e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e1a:	f000 f908 	bl	800802e <__retarget_lock_release_recursive>
 8007e1e:	e7d9      	b.n	8007dd4 <_fflush_r+0xc>
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <_fflush_r+0x70>)
 8007e22:	429c      	cmp	r4, r3
 8007e24:	d101      	bne.n	8007e2a <_fflush_r+0x62>
 8007e26:	68ac      	ldr	r4, [r5, #8]
 8007e28:	e7df      	b.n	8007dea <_fflush_r+0x22>
 8007e2a:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <_fflush_r+0x74>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	bf08      	it	eq
 8007e30:	68ec      	ldreq	r4, [r5, #12]
 8007e32:	e7da      	b.n	8007dea <_fflush_r+0x22>
 8007e34:	08009140 	.word	0x08009140
 8007e38:	08009160 	.word	0x08009160
 8007e3c:	08009120 	.word	0x08009120

08007e40 <std>:
 8007e40:	2300      	movs	r3, #0
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	e9c0 3300 	strd	r3, r3, [r0]
 8007e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e4e:	6083      	str	r3, [r0, #8]
 8007e50:	8181      	strh	r1, [r0, #12]
 8007e52:	6643      	str	r3, [r0, #100]	; 0x64
 8007e54:	81c2      	strh	r2, [r0, #14]
 8007e56:	6183      	str	r3, [r0, #24]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	305c      	adds	r0, #92	; 0x5c
 8007e5e:	f7ff fc81 	bl	8007764 <memset>
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <std+0x38>)
 8007e64:	6263      	str	r3, [r4, #36]	; 0x24
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <std+0x3c>)
 8007e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <std+0x40>)
 8007e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <std+0x44>)
 8007e70:	6224      	str	r4, [r4, #32]
 8007e72:	6323      	str	r3, [r4, #48]	; 0x30
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	bf00      	nop
 8007e78:	08007a71 	.word	0x08007a71
 8007e7c:	08007a93 	.word	0x08007a93
 8007e80:	08007acb 	.word	0x08007acb
 8007e84:	08007aef 	.word	0x08007aef

08007e88 <_cleanup_r>:
 8007e88:	4901      	ldr	r1, [pc, #4]	; (8007e90 <_cleanup_r+0x8>)
 8007e8a:	f000 b8af 	b.w	8007fec <_fwalk_reent>
 8007e8e:	bf00      	nop
 8007e90:	08007dc9 	.word	0x08007dc9

08007e94 <__sfmoreglue>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	1e4a      	subs	r2, r1, #1
 8007e98:	2568      	movs	r5, #104	; 0x68
 8007e9a:	4355      	muls	r5, r2
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ea2:	f7ff fcb7 	bl	8007814 <_malloc_r>
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	b140      	cbz	r0, 8007ebc <__sfmoreglue+0x28>
 8007eaa:	2100      	movs	r1, #0
 8007eac:	e9c0 1600 	strd	r1, r6, [r0]
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	60a0      	str	r0, [r4, #8]
 8007eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007eb8:	f7ff fc54 	bl	8007764 <memset>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}

08007ec0 <__sfp_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sfp_lock_acquire+0x8>)
 8007ec2:	f000 b8b3 	b.w	800802c <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20001dec 	.word	0x20001dec

08007ecc <__sfp_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__sfp_lock_release+0x8>)
 8007ece:	f000 b8ae 	b.w	800802e <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20001dec 	.word	0x20001dec

08007ed8 <__sinit_lock_acquire>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sinit_lock_acquire+0x8>)
 8007eda:	f000 b8a7 	b.w	800802c <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20001de7 	.word	0x20001de7

08007ee4 <__sinit_lock_release>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__sinit_lock_release+0x8>)
 8007ee6:	f000 b8a2 	b.w	800802e <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	20001de7 	.word	0x20001de7

08007ef0 <__sinit>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	f7ff fff0 	bl	8007ed8 <__sinit_lock_acquire>
 8007ef8:	69a3      	ldr	r3, [r4, #24]
 8007efa:	b11b      	cbz	r3, 8007f04 <__sinit+0x14>
 8007efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f00:	f7ff bff0 	b.w	8007ee4 <__sinit_lock_release>
 8007f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f08:	6523      	str	r3, [r4, #80]	; 0x50
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <__sinit+0x68>)
 8007f0c:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <__sinit+0x6c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f12:	42a3      	cmp	r3, r4
 8007f14:	bf04      	itt	eq
 8007f16:	2301      	moveq	r3, #1
 8007f18:	61a3      	streq	r3, [r4, #24]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f820 	bl	8007f60 <__sfp>
 8007f20:	6060      	str	r0, [r4, #4]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 f81c 	bl	8007f60 <__sfp>
 8007f28:	60a0      	str	r0, [r4, #8]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f818 	bl	8007f60 <__sfp>
 8007f30:	2200      	movs	r2, #0
 8007f32:	60e0      	str	r0, [r4, #12]
 8007f34:	2104      	movs	r1, #4
 8007f36:	6860      	ldr	r0, [r4, #4]
 8007f38:	f7ff ff82 	bl	8007e40 <std>
 8007f3c:	68a0      	ldr	r0, [r4, #8]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	2109      	movs	r1, #9
 8007f42:	f7ff ff7d 	bl	8007e40 <std>
 8007f46:	68e0      	ldr	r0, [r4, #12]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	2112      	movs	r1, #18
 8007f4c:	f7ff ff78 	bl	8007e40 <std>
 8007f50:	2301      	movs	r3, #1
 8007f52:	61a3      	str	r3, [r4, #24]
 8007f54:	e7d2      	b.n	8007efc <__sinit+0xc>
 8007f56:	bf00      	nop
 8007f58:	0800911c 	.word	0x0800911c
 8007f5c:	08007e89 	.word	0x08007e89

08007f60 <__sfp>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4607      	mov	r7, r0
 8007f64:	f7ff ffac 	bl	8007ec0 <__sfp_lock_acquire>
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <__sfp+0x84>)
 8007f6a:	681e      	ldr	r6, [r3, #0]
 8007f6c:	69b3      	ldr	r3, [r6, #24]
 8007f6e:	b913      	cbnz	r3, 8007f76 <__sfp+0x16>
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbd 	bl	8007ef0 <__sinit>
 8007f76:	3648      	adds	r6, #72	; 0x48
 8007f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	d503      	bpl.n	8007f88 <__sfp+0x28>
 8007f80:	6833      	ldr	r3, [r6, #0]
 8007f82:	b30b      	cbz	r3, 8007fc8 <__sfp+0x68>
 8007f84:	6836      	ldr	r6, [r6, #0]
 8007f86:	e7f7      	b.n	8007f78 <__sfp+0x18>
 8007f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f8c:	b9d5      	cbnz	r5, 8007fc4 <__sfp+0x64>
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <__sfp+0x88>)
 8007f90:	60e3      	str	r3, [r4, #12]
 8007f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f96:	6665      	str	r5, [r4, #100]	; 0x64
 8007f98:	f000 f847 	bl	800802a <__retarget_lock_init_recursive>
 8007f9c:	f7ff ff96 	bl	8007ecc <__sfp_lock_release>
 8007fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fa8:	6025      	str	r5, [r4, #0]
 8007faa:	61a5      	str	r5, [r4, #24]
 8007fac:	2208      	movs	r2, #8
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fb4:	f7ff fbd6 	bl	8007764 <memset>
 8007fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc4:	3468      	adds	r4, #104	; 0x68
 8007fc6:	e7d9      	b.n	8007f7c <__sfp+0x1c>
 8007fc8:	2104      	movs	r1, #4
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f7ff ff62 	bl	8007e94 <__sfmoreglue>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	6030      	str	r0, [r6, #0]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1d5      	bne.n	8007f84 <__sfp+0x24>
 8007fd8:	f7ff ff78 	bl	8007ecc <__sfp_lock_release>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	e7ee      	b.n	8007fc0 <__sfp+0x60>
 8007fe2:	bf00      	nop
 8007fe4:	0800911c 	.word	0x0800911c
 8007fe8:	ffff0001 	.word	0xffff0001

08007fec <_fwalk_reent>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	4688      	mov	r8, r1
 8007ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ff8:	2700      	movs	r7, #0
 8007ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8008002:	d505      	bpl.n	8008010 <_fwalk_reent+0x24>
 8008004:	6824      	ldr	r4, [r4, #0]
 8008006:	2c00      	cmp	r4, #0
 8008008:	d1f7      	bne.n	8007ffa <_fwalk_reent+0xe>
 800800a:	4638      	mov	r0, r7
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008010:	89ab      	ldrh	r3, [r5, #12]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d907      	bls.n	8008026 <_fwalk_reent+0x3a>
 8008016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800801a:	3301      	adds	r3, #1
 800801c:	d003      	beq.n	8008026 <_fwalk_reent+0x3a>
 800801e:	4629      	mov	r1, r5
 8008020:	4630      	mov	r0, r6
 8008022:	47c0      	blx	r8
 8008024:	4307      	orrs	r7, r0
 8008026:	3568      	adds	r5, #104	; 0x68
 8008028:	e7e9      	b.n	8007ffe <_fwalk_reent+0x12>

0800802a <__retarget_lock_init_recursive>:
 800802a:	4770      	bx	lr

0800802c <__retarget_lock_acquire_recursive>:
 800802c:	4770      	bx	lr

0800802e <__retarget_lock_release_recursive>:
 800802e:	4770      	bx	lr

08008030 <_lseek_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_lseek_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7fb fb28 	bl	8003694 <_lseek>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_lseek_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_lseek_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20001df0 	.word	0x20001df0

08008054 <__swhatbuf_r>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	2900      	cmp	r1, #0
 800805e:	b096      	sub	sp, #88	; 0x58
 8008060:	4614      	mov	r4, r2
 8008062:	461d      	mov	r5, r3
 8008064:	da07      	bge.n	8008076 <__swhatbuf_r+0x22>
 8008066:	2300      	movs	r3, #0
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	89b3      	ldrh	r3, [r6, #12]
 800806c:	061a      	lsls	r2, r3, #24
 800806e:	d410      	bmi.n	8008092 <__swhatbuf_r+0x3e>
 8008070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008074:	e00e      	b.n	8008094 <__swhatbuf_r+0x40>
 8008076:	466a      	mov	r2, sp
 8008078:	f000 fd00 	bl	8008a7c <_fstat_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	dbf2      	blt.n	8008066 <__swhatbuf_r+0x12>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800808a:	425a      	negs	r2, r3
 800808c:	415a      	adcs	r2, r3
 800808e:	602a      	str	r2, [r5, #0]
 8008090:	e7ee      	b.n	8008070 <__swhatbuf_r+0x1c>
 8008092:	2340      	movs	r3, #64	; 0x40
 8008094:	2000      	movs	r0, #0
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	b016      	add	sp, #88	; 0x58
 800809a:	bd70      	pop	{r4, r5, r6, pc}

0800809c <__smakebuf_r>:
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a0:	079d      	lsls	r5, r3, #30
 80080a2:	4606      	mov	r6, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	d507      	bpl.n	80080b8 <__smakebuf_r+0x1c>
 80080a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	2301      	movs	r3, #1
 80080b2:	6163      	str	r3, [r4, #20]
 80080b4:	b002      	add	sp, #8
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	ab01      	add	r3, sp, #4
 80080ba:	466a      	mov	r2, sp
 80080bc:	f7ff ffca 	bl	8008054 <__swhatbuf_r>
 80080c0:	9900      	ldr	r1, [sp, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff fba5 	bl	8007814 <_malloc_r>
 80080ca:	b948      	cbnz	r0, 80080e0 <__smakebuf_r+0x44>
 80080cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d4ef      	bmi.n	80080b4 <__smakebuf_r+0x18>
 80080d4:	f023 0303 	bic.w	r3, r3, #3
 80080d8:	f043 0302 	orr.w	r3, r3, #2
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	e7e3      	b.n	80080a8 <__smakebuf_r+0xc>
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <__smakebuf_r+0x7c>)
 80080e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	6020      	str	r0, [r4, #0]
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	6163      	str	r3, [r4, #20]
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	6120      	str	r0, [r4, #16]
 80080f6:	b15b      	cbz	r3, 8008110 <__smakebuf_r+0x74>
 80080f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 fccf 	bl	8008aa0 <_isatty_r>
 8008102:	b128      	cbz	r0, 8008110 <__smakebuf_r+0x74>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	89a0      	ldrh	r0, [r4, #12]
 8008112:	4305      	orrs	r5, r0
 8008114:	81a5      	strh	r5, [r4, #12]
 8008116:	e7cd      	b.n	80080b4 <__smakebuf_r+0x18>
 8008118:	08007e89 	.word	0x08007e89

0800811c <__malloc_lock>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__malloc_lock+0x8>)
 800811e:	f7ff bf85 	b.w	800802c <__retarget_lock_acquire_recursive>
 8008122:	bf00      	nop
 8008124:	20001de8 	.word	0x20001de8

08008128 <__malloc_unlock>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__malloc_unlock+0x8>)
 800812a:	f7ff bf80 	b.w	800802e <__retarget_lock_release_recursive>
 800812e:	bf00      	nop
 8008130:	20001de8 	.word	0x20001de8

08008134 <__ssputs_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	688e      	ldr	r6, [r1, #8]
 800813a:	429e      	cmp	r6, r3
 800813c:	4682      	mov	sl, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4690      	mov	r8, r2
 8008142:	461f      	mov	r7, r3
 8008144:	d838      	bhi.n	80081b8 <__ssputs_r+0x84>
 8008146:	898a      	ldrh	r2, [r1, #12]
 8008148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800814c:	d032      	beq.n	80081b4 <__ssputs_r+0x80>
 800814e:	6825      	ldr	r5, [r4, #0]
 8008150:	6909      	ldr	r1, [r1, #16]
 8008152:	eba5 0901 	sub.w	r9, r5, r1
 8008156:	6965      	ldr	r5, [r4, #20]
 8008158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800815c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008160:	3301      	adds	r3, #1
 8008162:	444b      	add	r3, r9
 8008164:	106d      	asrs	r5, r5, #1
 8008166:	429d      	cmp	r5, r3
 8008168:	bf38      	it	cc
 800816a:	461d      	movcc	r5, r3
 800816c:	0553      	lsls	r3, r2, #21
 800816e:	d531      	bpl.n	80081d4 <__ssputs_r+0xa0>
 8008170:	4629      	mov	r1, r5
 8008172:	f7ff fb4f 	bl	8007814 <_malloc_r>
 8008176:	4606      	mov	r6, r0
 8008178:	b950      	cbnz	r0, 8008190 <__ssputs_r+0x5c>
 800817a:	230c      	movs	r3, #12
 800817c:	f8ca 3000 	str.w	r3, [sl]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	6921      	ldr	r1, [r4, #16]
 8008192:	464a      	mov	r2, r9
 8008194:	f7ff fad8 	bl	8007748 <memcpy>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	6126      	str	r6, [r4, #16]
 80081a6:	6165      	str	r5, [r4, #20]
 80081a8:	444e      	add	r6, r9
 80081aa:	eba5 0509 	sub.w	r5, r5, r9
 80081ae:	6026      	str	r6, [r4, #0]
 80081b0:	60a5      	str	r5, [r4, #8]
 80081b2:	463e      	mov	r6, r7
 80081b4:	42be      	cmp	r6, r7
 80081b6:	d900      	bls.n	80081ba <__ssputs_r+0x86>
 80081b8:	463e      	mov	r6, r7
 80081ba:	4632      	mov	r2, r6
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	4641      	mov	r1, r8
 80081c0:	f000 fc7e 	bl	8008ac0 <memmove>
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	4432      	add	r2, r6
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	6022      	str	r2, [r4, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e7db      	b.n	800818c <__ssputs_r+0x58>
 80081d4:	462a      	mov	r2, r5
 80081d6:	f000 fc8d 	bl	8008af4 <_realloc_r>
 80081da:	4606      	mov	r6, r0
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1e1      	bne.n	80081a4 <__ssputs_r+0x70>
 80081e0:	6921      	ldr	r1, [r4, #16]
 80081e2:	4650      	mov	r0, sl
 80081e4:	f7ff fac6 	bl	8007774 <_free_r>
 80081e8:	e7c7      	b.n	800817a <__ssputs_r+0x46>
	...

080081ec <_svfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	4698      	mov	r8, r3
 80081f2:	898b      	ldrh	r3, [r1, #12]
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	b09d      	sub	sp, #116	; 0x74
 80081f8:	4607      	mov	r7, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	d50e      	bpl.n	800821e <_svfiprintf_r+0x32>
 8008200:	690b      	ldr	r3, [r1, #16]
 8008202:	b963      	cbnz	r3, 800821e <_svfiprintf_r+0x32>
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	f7ff fb05 	bl	8007814 <_malloc_r>
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	6128      	str	r0, [r5, #16]
 800820e:	b920      	cbnz	r0, 800821a <_svfiprintf_r+0x2e>
 8008210:	230c      	movs	r3, #12
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e0d1      	b.n	80083be <_svfiprintf_r+0x1d2>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	616b      	str	r3, [r5, #20]
 800821e:	2300      	movs	r3, #0
 8008220:	9309      	str	r3, [sp, #36]	; 0x24
 8008222:	2320      	movs	r3, #32
 8008224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008228:	f8cd 800c 	str.w	r8, [sp, #12]
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d8 <_svfiprintf_r+0x1ec>
 8008232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008236:	f04f 0901 	mov.w	r9, #1
 800823a:	4623      	mov	r3, r4
 800823c:	469a      	mov	sl, r3
 800823e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008242:	b10a      	cbz	r2, 8008248 <_svfiprintf_r+0x5c>
 8008244:	2a25      	cmp	r2, #37	; 0x25
 8008246:	d1f9      	bne.n	800823c <_svfiprintf_r+0x50>
 8008248:	ebba 0b04 	subs.w	fp, sl, r4
 800824c:	d00b      	beq.n	8008266 <_svfiprintf_r+0x7a>
 800824e:	465b      	mov	r3, fp
 8008250:	4622      	mov	r2, r4
 8008252:	4629      	mov	r1, r5
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff ff6d 	bl	8008134 <__ssputs_r>
 800825a:	3001      	adds	r0, #1
 800825c:	f000 80aa 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008262:	445a      	add	r2, fp
 8008264:	9209      	str	r2, [sp, #36]	; 0x24
 8008266:	f89a 3000 	ldrb.w	r3, [sl]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 80a2 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008270:	2300      	movs	r3, #0
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827a:	f10a 0a01 	add.w	sl, sl, #1
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008286:	931a      	str	r3, [sp, #104]	; 0x68
 8008288:	4654      	mov	r4, sl
 800828a:	2205      	movs	r2, #5
 800828c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008290:	4851      	ldr	r0, [pc, #324]	; (80083d8 <_svfiprintf_r+0x1ec>)
 8008292:	f7f7 ffa5 	bl	80001e0 <memchr>
 8008296:	9a04      	ldr	r2, [sp, #16]
 8008298:	b9d8      	cbnz	r0, 80082d2 <_svfiprintf_r+0xe6>
 800829a:	06d0      	lsls	r0, r2, #27
 800829c:	bf44      	itt	mi
 800829e:	2320      	movmi	r3, #32
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	0711      	lsls	r1, r2, #28
 80082a6:	bf44      	itt	mi
 80082a8:	232b      	movmi	r3, #43	; 0x2b
 80082aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ae:	f89a 3000 	ldrb.w	r3, [sl]
 80082b2:	2b2a      	cmp	r3, #42	; 0x2a
 80082b4:	d015      	beq.n	80082e2 <_svfiprintf_r+0xf6>
 80082b6:	9a07      	ldr	r2, [sp, #28]
 80082b8:	4654      	mov	r4, sl
 80082ba:	2000      	movs	r0, #0
 80082bc:	f04f 0c0a 	mov.w	ip, #10
 80082c0:	4621      	mov	r1, r4
 80082c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c6:	3b30      	subs	r3, #48	; 0x30
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d94e      	bls.n	800836a <_svfiprintf_r+0x17e>
 80082cc:	b1b0      	cbz	r0, 80082fc <_svfiprintf_r+0x110>
 80082ce:	9207      	str	r2, [sp, #28]
 80082d0:	e014      	b.n	80082fc <_svfiprintf_r+0x110>
 80082d2:	eba0 0308 	sub.w	r3, r0, r8
 80082d6:	fa09 f303 	lsl.w	r3, r9, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	46a2      	mov	sl, r4
 80082e0:	e7d2      	b.n	8008288 <_svfiprintf_r+0x9c>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d19      	adds	r1, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9103      	str	r1, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbb      	ittet	lt
 80082ee:	425b      	neglt	r3, r3
 80082f0:	f042 0202 	orrlt.w	r2, r2, #2
 80082f4:	9307      	strge	r3, [sp, #28]
 80082f6:	9307      	strlt	r3, [sp, #28]
 80082f8:	bfb8      	it	lt
 80082fa:	9204      	strlt	r2, [sp, #16]
 80082fc:	7823      	ldrb	r3, [r4, #0]
 80082fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008300:	d10c      	bne.n	800831c <_svfiprintf_r+0x130>
 8008302:	7863      	ldrb	r3, [r4, #1]
 8008304:	2b2a      	cmp	r3, #42	; 0x2a
 8008306:	d135      	bne.n	8008374 <_svfiprintf_r+0x188>
 8008308:	9b03      	ldr	r3, [sp, #12]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	9203      	str	r2, [sp, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfb8      	it	lt
 8008314:	f04f 33ff 	movlt.w	r3, #4294967295
 8008318:	3402      	adds	r4, #2
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e8 <_svfiprintf_r+0x1fc>
 8008320:	7821      	ldrb	r1, [r4, #0]
 8008322:	2203      	movs	r2, #3
 8008324:	4650      	mov	r0, sl
 8008326:	f7f7 ff5b 	bl	80001e0 <memchr>
 800832a:	b140      	cbz	r0, 800833e <_svfiprintf_r+0x152>
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	eba0 000a 	sub.w	r0, r0, sl
 8008332:	fa03 f000 	lsl.w	r0, r3, r0
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	4303      	orrs	r3, r0
 800833a:	3401      	adds	r4, #1
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4826      	ldr	r0, [pc, #152]	; (80083dc <_svfiprintf_r+0x1f0>)
 8008344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008348:	2206      	movs	r2, #6
 800834a:	f7f7 ff49 	bl	80001e0 <memchr>
 800834e:	2800      	cmp	r0, #0
 8008350:	d038      	beq.n	80083c4 <_svfiprintf_r+0x1d8>
 8008352:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <_svfiprintf_r+0x1f4>)
 8008354:	bb1b      	cbnz	r3, 800839e <_svfiprintf_r+0x1b2>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	3307      	adds	r3, #7
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	3308      	adds	r3, #8
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008364:	4433      	add	r3, r6
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	e767      	b.n	800823a <_svfiprintf_r+0x4e>
 800836a:	fb0c 3202 	mla	r2, ip, r2, r3
 800836e:	460c      	mov	r4, r1
 8008370:	2001      	movs	r0, #1
 8008372:	e7a5      	b.n	80082c0 <_svfiprintf_r+0xd4>
 8008374:	2300      	movs	r3, #0
 8008376:	3401      	adds	r4, #1
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	4619      	mov	r1, r3
 800837c:	f04f 0c0a 	mov.w	ip, #10
 8008380:	4620      	mov	r0, r4
 8008382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008386:	3a30      	subs	r2, #48	; 0x30
 8008388:	2a09      	cmp	r2, #9
 800838a:	d903      	bls.n	8008394 <_svfiprintf_r+0x1a8>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0c5      	beq.n	800831c <_svfiprintf_r+0x130>
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	e7c3      	b.n	800831c <_svfiprintf_r+0x130>
 8008394:	fb0c 2101 	mla	r1, ip, r1, r2
 8008398:	4604      	mov	r4, r0
 800839a:	2301      	movs	r3, #1
 800839c:	e7f0      	b.n	8008380 <_svfiprintf_r+0x194>
 800839e:	ab03      	add	r3, sp, #12
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	462a      	mov	r2, r5
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083a6:	a904      	add	r1, sp, #16
 80083a8:	4638      	mov	r0, r7
 80083aa:	f3af 8000 	nop.w
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	4606      	mov	r6, r0
 80083b2:	d1d6      	bne.n	8008362 <_svfiprintf_r+0x176>
 80083b4:	89ab      	ldrh	r3, [r5, #12]
 80083b6:	065b      	lsls	r3, r3, #25
 80083b8:	f53f af2c 	bmi.w	8008214 <_svfiprintf_r+0x28>
 80083bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083be:	b01d      	add	sp, #116	; 0x74
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	ab03      	add	r3, sp, #12
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	462a      	mov	r2, r5
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083cc:	a904      	add	r1, sp, #16
 80083ce:	4638      	mov	r0, r7
 80083d0:	f000 f9d4 	bl	800877c <_printf_i>
 80083d4:	e7eb      	b.n	80083ae <_svfiprintf_r+0x1c2>
 80083d6:	bf00      	nop
 80083d8:	08009180 	.word	0x08009180
 80083dc:	0800918a 	.word	0x0800918a
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008135 	.word	0x08008135
 80083e8:	08009186 	.word	0x08009186

080083ec <__sfputc_r>:
 80083ec:	6893      	ldr	r3, [r2, #8]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	b410      	push	{r4}
 80083f4:	6093      	str	r3, [r2, #8]
 80083f6:	da08      	bge.n	800840a <__sfputc_r+0x1e>
 80083f8:	6994      	ldr	r4, [r2, #24]
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	db01      	blt.n	8008402 <__sfputc_r+0x16>
 80083fe:	290a      	cmp	r1, #10
 8008400:	d103      	bne.n	800840a <__sfputc_r+0x1e>
 8008402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008406:	f7ff bb77 	b.w	8007af8 <__swbuf_r>
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	1c58      	adds	r0, r3, #1
 800840e:	6010      	str	r0, [r2, #0]
 8008410:	7019      	strb	r1, [r3, #0]
 8008412:	4608      	mov	r0, r1
 8008414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008418:	4770      	bx	lr

0800841a <__sfputs_r>:
 800841a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	4614      	mov	r4, r2
 8008422:	18d5      	adds	r5, r2, r3
 8008424:	42ac      	cmp	r4, r5
 8008426:	d101      	bne.n	800842c <__sfputs_r+0x12>
 8008428:	2000      	movs	r0, #0
 800842a:	e007      	b.n	800843c <__sfputs_r+0x22>
 800842c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008430:	463a      	mov	r2, r7
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ffda 	bl	80083ec <__sfputc_r>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d1f3      	bne.n	8008424 <__sfputs_r+0xa>
 800843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008440 <_vfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	460d      	mov	r5, r1
 8008446:	b09d      	sub	sp, #116	; 0x74
 8008448:	4614      	mov	r4, r2
 800844a:	4698      	mov	r8, r3
 800844c:	4606      	mov	r6, r0
 800844e:	b118      	cbz	r0, 8008458 <_vfiprintf_r+0x18>
 8008450:	6983      	ldr	r3, [r0, #24]
 8008452:	b90b      	cbnz	r3, 8008458 <_vfiprintf_r+0x18>
 8008454:	f7ff fd4c 	bl	8007ef0 <__sinit>
 8008458:	4b89      	ldr	r3, [pc, #548]	; (8008680 <_vfiprintf_r+0x240>)
 800845a:	429d      	cmp	r5, r3
 800845c:	d11b      	bne.n	8008496 <_vfiprintf_r+0x56>
 800845e:	6875      	ldr	r5, [r6, #4]
 8008460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	d405      	bmi.n	8008472 <_vfiprintf_r+0x32>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d402      	bmi.n	8008472 <_vfiprintf_r+0x32>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f7ff fddd 	bl	800802c <__retarget_lock_acquire_recursive>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	071b      	lsls	r3, r3, #28
 8008476:	d501      	bpl.n	800847c <_vfiprintf_r+0x3c>
 8008478:	692b      	ldr	r3, [r5, #16]
 800847a:	b9eb      	cbnz	r3, 80084b8 <_vfiprintf_r+0x78>
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f7ff fb9e 	bl	8007bc0 <__swsetup_r>
 8008484:	b1c0      	cbz	r0, 80084b8 <_vfiprintf_r+0x78>
 8008486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008488:	07dc      	lsls	r4, r3, #31
 800848a:	d50e      	bpl.n	80084aa <_vfiprintf_r+0x6a>
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	b01d      	add	sp, #116	; 0x74
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	4b7b      	ldr	r3, [pc, #492]	; (8008684 <_vfiprintf_r+0x244>)
 8008498:	429d      	cmp	r5, r3
 800849a:	d101      	bne.n	80084a0 <_vfiprintf_r+0x60>
 800849c:	68b5      	ldr	r5, [r6, #8]
 800849e:	e7df      	b.n	8008460 <_vfiprintf_r+0x20>
 80084a0:	4b79      	ldr	r3, [pc, #484]	; (8008688 <_vfiprintf_r+0x248>)
 80084a2:	429d      	cmp	r5, r3
 80084a4:	bf08      	it	eq
 80084a6:	68f5      	ldreq	r5, [r6, #12]
 80084a8:	e7da      	b.n	8008460 <_vfiprintf_r+0x20>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	0598      	lsls	r0, r3, #22
 80084ae:	d4ed      	bmi.n	800848c <_vfiprintf_r+0x4c>
 80084b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084b2:	f7ff fdbc 	bl	800802e <__retarget_lock_release_recursive>
 80084b6:	e7e9      	b.n	800848c <_vfiprintf_r+0x4c>
 80084b8:	2300      	movs	r3, #0
 80084ba:	9309      	str	r3, [sp, #36]	; 0x24
 80084bc:	2320      	movs	r3, #32
 80084be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084c6:	2330      	movs	r3, #48	; 0x30
 80084c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800868c <_vfiprintf_r+0x24c>
 80084cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084d0:	f04f 0901 	mov.w	r9, #1
 80084d4:	4623      	mov	r3, r4
 80084d6:	469a      	mov	sl, r3
 80084d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084dc:	b10a      	cbz	r2, 80084e2 <_vfiprintf_r+0xa2>
 80084de:	2a25      	cmp	r2, #37	; 0x25
 80084e0:	d1f9      	bne.n	80084d6 <_vfiprintf_r+0x96>
 80084e2:	ebba 0b04 	subs.w	fp, sl, r4
 80084e6:	d00b      	beq.n	8008500 <_vfiprintf_r+0xc0>
 80084e8:	465b      	mov	r3, fp
 80084ea:	4622      	mov	r2, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7ff ff93 	bl	800841a <__sfputs_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	f000 80aa 	beq.w	800864e <_vfiprintf_r+0x20e>
 80084fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fc:	445a      	add	r2, fp
 80084fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008500:	f89a 3000 	ldrb.w	r3, [sl]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80a2 	beq.w	800864e <_vfiprintf_r+0x20e>
 800850a:	2300      	movs	r3, #0
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008514:	f10a 0a01 	add.w	sl, sl, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008520:	931a      	str	r3, [sp, #104]	; 0x68
 8008522:	4654      	mov	r4, sl
 8008524:	2205      	movs	r2, #5
 8008526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852a:	4858      	ldr	r0, [pc, #352]	; (800868c <_vfiprintf_r+0x24c>)
 800852c:	f7f7 fe58 	bl	80001e0 <memchr>
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	b9d8      	cbnz	r0, 800856c <_vfiprintf_r+0x12c>
 8008534:	06d1      	lsls	r1, r2, #27
 8008536:	bf44      	itt	mi
 8008538:	2320      	movmi	r3, #32
 800853a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800853e:	0713      	lsls	r3, r2, #28
 8008540:	bf44      	itt	mi
 8008542:	232b      	movmi	r3, #43	; 0x2b
 8008544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008548:	f89a 3000 	ldrb.w	r3, [sl]
 800854c:	2b2a      	cmp	r3, #42	; 0x2a
 800854e:	d015      	beq.n	800857c <_vfiprintf_r+0x13c>
 8008550:	9a07      	ldr	r2, [sp, #28]
 8008552:	4654      	mov	r4, sl
 8008554:	2000      	movs	r0, #0
 8008556:	f04f 0c0a 	mov.w	ip, #10
 800855a:	4621      	mov	r1, r4
 800855c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008560:	3b30      	subs	r3, #48	; 0x30
 8008562:	2b09      	cmp	r3, #9
 8008564:	d94e      	bls.n	8008604 <_vfiprintf_r+0x1c4>
 8008566:	b1b0      	cbz	r0, 8008596 <_vfiprintf_r+0x156>
 8008568:	9207      	str	r2, [sp, #28]
 800856a:	e014      	b.n	8008596 <_vfiprintf_r+0x156>
 800856c:	eba0 0308 	sub.w	r3, r0, r8
 8008570:	fa09 f303 	lsl.w	r3, r9, r3
 8008574:	4313      	orrs	r3, r2
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	46a2      	mov	sl, r4
 800857a:	e7d2      	b.n	8008522 <_vfiprintf_r+0xe2>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	1d19      	adds	r1, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9103      	str	r1, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfbb      	ittet	lt
 8008588:	425b      	neglt	r3, r3
 800858a:	f042 0202 	orrlt.w	r2, r2, #2
 800858e:	9307      	strge	r3, [sp, #28]
 8008590:	9307      	strlt	r3, [sp, #28]
 8008592:	bfb8      	it	lt
 8008594:	9204      	strlt	r2, [sp, #16]
 8008596:	7823      	ldrb	r3, [r4, #0]
 8008598:	2b2e      	cmp	r3, #46	; 0x2e
 800859a:	d10c      	bne.n	80085b6 <_vfiprintf_r+0x176>
 800859c:	7863      	ldrb	r3, [r4, #1]
 800859e:	2b2a      	cmp	r3, #42	; 0x2a
 80085a0:	d135      	bne.n	800860e <_vfiprintf_r+0x1ce>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	1d1a      	adds	r2, r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	9203      	str	r2, [sp, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bfb8      	it	lt
 80085ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80085b2:	3402      	adds	r4, #2
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800869c <_vfiprintf_r+0x25c>
 80085ba:	7821      	ldrb	r1, [r4, #0]
 80085bc:	2203      	movs	r2, #3
 80085be:	4650      	mov	r0, sl
 80085c0:	f7f7 fe0e 	bl	80001e0 <memchr>
 80085c4:	b140      	cbz	r0, 80085d8 <_vfiprintf_r+0x198>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	eba0 000a 	sub.w	r0, r0, sl
 80085cc:	fa03 f000 	lsl.w	r0, r3, r0
 80085d0:	9b04      	ldr	r3, [sp, #16]
 80085d2:	4303      	orrs	r3, r0
 80085d4:	3401      	adds	r4, #1
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085dc:	482c      	ldr	r0, [pc, #176]	; (8008690 <_vfiprintf_r+0x250>)
 80085de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085e2:	2206      	movs	r2, #6
 80085e4:	f7f7 fdfc 	bl	80001e0 <memchr>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d03f      	beq.n	800866c <_vfiprintf_r+0x22c>
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <_vfiprintf_r+0x254>)
 80085ee:	bb1b      	cbnz	r3, 8008638 <_vfiprintf_r+0x1f8>
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	3307      	adds	r3, #7
 80085f4:	f023 0307 	bic.w	r3, r3, #7
 80085f8:	3308      	adds	r3, #8
 80085fa:	9303      	str	r3, [sp, #12]
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	443b      	add	r3, r7
 8008600:	9309      	str	r3, [sp, #36]	; 0x24
 8008602:	e767      	b.n	80084d4 <_vfiprintf_r+0x94>
 8008604:	fb0c 3202 	mla	r2, ip, r2, r3
 8008608:	460c      	mov	r4, r1
 800860a:	2001      	movs	r0, #1
 800860c:	e7a5      	b.n	800855a <_vfiprintf_r+0x11a>
 800860e:	2300      	movs	r3, #0
 8008610:	3401      	adds	r4, #1
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	4619      	mov	r1, r3
 8008616:	f04f 0c0a 	mov.w	ip, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008620:	3a30      	subs	r2, #48	; 0x30
 8008622:	2a09      	cmp	r2, #9
 8008624:	d903      	bls.n	800862e <_vfiprintf_r+0x1ee>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0c5      	beq.n	80085b6 <_vfiprintf_r+0x176>
 800862a:	9105      	str	r1, [sp, #20]
 800862c:	e7c3      	b.n	80085b6 <_vfiprintf_r+0x176>
 800862e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008632:	4604      	mov	r4, r0
 8008634:	2301      	movs	r3, #1
 8008636:	e7f0      	b.n	800861a <_vfiprintf_r+0x1da>
 8008638:	ab03      	add	r3, sp, #12
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	462a      	mov	r2, r5
 800863e:	4b16      	ldr	r3, [pc, #88]	; (8008698 <_vfiprintf_r+0x258>)
 8008640:	a904      	add	r1, sp, #16
 8008642:	4630      	mov	r0, r6
 8008644:	f3af 8000 	nop.w
 8008648:	4607      	mov	r7, r0
 800864a:	1c78      	adds	r0, r7, #1
 800864c:	d1d6      	bne.n	80085fc <_vfiprintf_r+0x1bc>
 800864e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008650:	07d9      	lsls	r1, r3, #31
 8008652:	d405      	bmi.n	8008660 <_vfiprintf_r+0x220>
 8008654:	89ab      	ldrh	r3, [r5, #12]
 8008656:	059a      	lsls	r2, r3, #22
 8008658:	d402      	bmi.n	8008660 <_vfiprintf_r+0x220>
 800865a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865c:	f7ff fce7 	bl	800802e <__retarget_lock_release_recursive>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	065b      	lsls	r3, r3, #25
 8008664:	f53f af12 	bmi.w	800848c <_vfiprintf_r+0x4c>
 8008668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866a:	e711      	b.n	8008490 <_vfiprintf_r+0x50>
 800866c:	ab03      	add	r3, sp, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	462a      	mov	r2, r5
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <_vfiprintf_r+0x258>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f880 	bl	800877c <_printf_i>
 800867c:	e7e4      	b.n	8008648 <_vfiprintf_r+0x208>
 800867e:	bf00      	nop
 8008680:	08009140 	.word	0x08009140
 8008684:	08009160 	.word	0x08009160
 8008688:	08009120 	.word	0x08009120
 800868c:	08009180 	.word	0x08009180
 8008690:	0800918a 	.word	0x0800918a
 8008694:	00000000 	.word	0x00000000
 8008698:	0800841b 	.word	0x0800841b
 800869c:	08009186 	.word	0x08009186

080086a0 <_printf_common>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	4616      	mov	r6, r2
 80086a6:	4699      	mov	r9, r3
 80086a8:	688a      	ldr	r2, [r1, #8]
 80086aa:	690b      	ldr	r3, [r1, #16]
 80086ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bfb8      	it	lt
 80086b4:	4613      	movlt	r3, r2
 80086b6:	6033      	str	r3, [r6, #0]
 80086b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086bc:	4607      	mov	r7, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b10a      	cbz	r2, 80086c6 <_printf_common+0x26>
 80086c2:	3301      	adds	r3, #1
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	0699      	lsls	r1, r3, #26
 80086ca:	bf42      	ittt	mi
 80086cc:	6833      	ldrmi	r3, [r6, #0]
 80086ce:	3302      	addmi	r3, #2
 80086d0:	6033      	strmi	r3, [r6, #0]
 80086d2:	6825      	ldr	r5, [r4, #0]
 80086d4:	f015 0506 	ands.w	r5, r5, #6
 80086d8:	d106      	bne.n	80086e8 <_printf_common+0x48>
 80086da:	f104 0a19 	add.w	sl, r4, #25
 80086de:	68e3      	ldr	r3, [r4, #12]
 80086e0:	6832      	ldr	r2, [r6, #0]
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc26      	bgt.n	8008736 <_printf_common+0x96>
 80086e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ec:	1e13      	subs	r3, r2, #0
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	0692      	lsls	r2, r2, #26
 80086f6:	d42b      	bmi.n	8008750 <_printf_common+0xb0>
 80086f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086fc:	4649      	mov	r1, r9
 80086fe:	4638      	mov	r0, r7
 8008700:	47c0      	blx	r8
 8008702:	3001      	adds	r0, #1
 8008704:	d01e      	beq.n	8008744 <_printf_common+0xa4>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	68e5      	ldr	r5, [r4, #12]
 800870a:	6832      	ldr	r2, [r6, #0]
 800870c:	f003 0306 	and.w	r3, r3, #6
 8008710:	2b04      	cmp	r3, #4
 8008712:	bf08      	it	eq
 8008714:	1aad      	subeq	r5, r5, r2
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	6922      	ldr	r2, [r4, #16]
 800871a:	bf0c      	ite	eq
 800871c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008720:	2500      	movne	r5, #0
 8008722:	4293      	cmp	r3, r2
 8008724:	bfc4      	itt	gt
 8008726:	1a9b      	subgt	r3, r3, r2
 8008728:	18ed      	addgt	r5, r5, r3
 800872a:	2600      	movs	r6, #0
 800872c:	341a      	adds	r4, #26
 800872e:	42b5      	cmp	r5, r6
 8008730:	d11a      	bne.n	8008768 <_printf_common+0xc8>
 8008732:	2000      	movs	r0, #0
 8008734:	e008      	b.n	8008748 <_printf_common+0xa8>
 8008736:	2301      	movs	r3, #1
 8008738:	4652      	mov	r2, sl
 800873a:	4649      	mov	r1, r9
 800873c:	4638      	mov	r0, r7
 800873e:	47c0      	blx	r8
 8008740:	3001      	adds	r0, #1
 8008742:	d103      	bne.n	800874c <_printf_common+0xac>
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	3501      	adds	r5, #1
 800874e:	e7c6      	b.n	80086de <_printf_common+0x3e>
 8008750:	18e1      	adds	r1, r4, r3
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	2030      	movs	r0, #48	; 0x30
 8008756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800875a:	4422      	add	r2, r4
 800875c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008764:	3302      	adds	r3, #2
 8008766:	e7c7      	b.n	80086f8 <_printf_common+0x58>
 8008768:	2301      	movs	r3, #1
 800876a:	4622      	mov	r2, r4
 800876c:	4649      	mov	r1, r9
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	3001      	adds	r0, #1
 8008774:	d0e6      	beq.n	8008744 <_printf_common+0xa4>
 8008776:	3601      	adds	r6, #1
 8008778:	e7d9      	b.n	800872e <_printf_common+0x8e>
	...

0800877c <_printf_i>:
 800877c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	460c      	mov	r4, r1
 8008782:	4691      	mov	r9, r2
 8008784:	7e27      	ldrb	r7, [r4, #24]
 8008786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008788:	2f78      	cmp	r7, #120	; 0x78
 800878a:	4680      	mov	r8, r0
 800878c:	469a      	mov	sl, r3
 800878e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008792:	d807      	bhi.n	80087a4 <_printf_i+0x28>
 8008794:	2f62      	cmp	r7, #98	; 0x62
 8008796:	d80a      	bhi.n	80087ae <_printf_i+0x32>
 8008798:	2f00      	cmp	r7, #0
 800879a:	f000 80d8 	beq.w	800894e <_printf_i+0x1d2>
 800879e:	2f58      	cmp	r7, #88	; 0x58
 80087a0:	f000 80a3 	beq.w	80088ea <_printf_i+0x16e>
 80087a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087ac:	e03a      	b.n	8008824 <_printf_i+0xa8>
 80087ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087b2:	2b15      	cmp	r3, #21
 80087b4:	d8f6      	bhi.n	80087a4 <_printf_i+0x28>
 80087b6:	a001      	add	r0, pc, #4	; (adr r0, 80087bc <_printf_i+0x40>)
 80087b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087bc:	08008815 	.word	0x08008815
 80087c0:	08008829 	.word	0x08008829
 80087c4:	080087a5 	.word	0x080087a5
 80087c8:	080087a5 	.word	0x080087a5
 80087cc:	080087a5 	.word	0x080087a5
 80087d0:	080087a5 	.word	0x080087a5
 80087d4:	08008829 	.word	0x08008829
 80087d8:	080087a5 	.word	0x080087a5
 80087dc:	080087a5 	.word	0x080087a5
 80087e0:	080087a5 	.word	0x080087a5
 80087e4:	080087a5 	.word	0x080087a5
 80087e8:	08008935 	.word	0x08008935
 80087ec:	08008859 	.word	0x08008859
 80087f0:	08008917 	.word	0x08008917
 80087f4:	080087a5 	.word	0x080087a5
 80087f8:	080087a5 	.word	0x080087a5
 80087fc:	08008957 	.word	0x08008957
 8008800:	080087a5 	.word	0x080087a5
 8008804:	08008859 	.word	0x08008859
 8008808:	080087a5 	.word	0x080087a5
 800880c:	080087a5 	.word	0x080087a5
 8008810:	0800891f 	.word	0x0800891f
 8008814:	680b      	ldr	r3, [r1, #0]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	600a      	str	r2, [r1, #0]
 800881c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008824:	2301      	movs	r3, #1
 8008826:	e0a3      	b.n	8008970 <_printf_i+0x1f4>
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	6808      	ldr	r0, [r1, #0]
 800882c:	062e      	lsls	r6, r5, #24
 800882e:	f100 0304 	add.w	r3, r0, #4
 8008832:	d50a      	bpl.n	800884a <_printf_i+0xce>
 8008834:	6805      	ldr	r5, [r0, #0]
 8008836:	600b      	str	r3, [r1, #0]
 8008838:	2d00      	cmp	r5, #0
 800883a:	da03      	bge.n	8008844 <_printf_i+0xc8>
 800883c:	232d      	movs	r3, #45	; 0x2d
 800883e:	426d      	negs	r5, r5
 8008840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008844:	485e      	ldr	r0, [pc, #376]	; (80089c0 <_printf_i+0x244>)
 8008846:	230a      	movs	r3, #10
 8008848:	e019      	b.n	800887e <_printf_i+0x102>
 800884a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800884e:	6805      	ldr	r5, [r0, #0]
 8008850:	600b      	str	r3, [r1, #0]
 8008852:	bf18      	it	ne
 8008854:	b22d      	sxthne	r5, r5
 8008856:	e7ef      	b.n	8008838 <_printf_i+0xbc>
 8008858:	680b      	ldr	r3, [r1, #0]
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	1d18      	adds	r0, r3, #4
 800885e:	6008      	str	r0, [r1, #0]
 8008860:	0628      	lsls	r0, r5, #24
 8008862:	d501      	bpl.n	8008868 <_printf_i+0xec>
 8008864:	681d      	ldr	r5, [r3, #0]
 8008866:	e002      	b.n	800886e <_printf_i+0xf2>
 8008868:	0669      	lsls	r1, r5, #25
 800886a:	d5fb      	bpl.n	8008864 <_printf_i+0xe8>
 800886c:	881d      	ldrh	r5, [r3, #0]
 800886e:	4854      	ldr	r0, [pc, #336]	; (80089c0 <_printf_i+0x244>)
 8008870:	2f6f      	cmp	r7, #111	; 0x6f
 8008872:	bf0c      	ite	eq
 8008874:	2308      	moveq	r3, #8
 8008876:	230a      	movne	r3, #10
 8008878:	2100      	movs	r1, #0
 800887a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887e:	6866      	ldr	r6, [r4, #4]
 8008880:	60a6      	str	r6, [r4, #8]
 8008882:	2e00      	cmp	r6, #0
 8008884:	bfa2      	ittt	ge
 8008886:	6821      	ldrge	r1, [r4, #0]
 8008888:	f021 0104 	bicge.w	r1, r1, #4
 800888c:	6021      	strge	r1, [r4, #0]
 800888e:	b90d      	cbnz	r5, 8008894 <_printf_i+0x118>
 8008890:	2e00      	cmp	r6, #0
 8008892:	d04d      	beq.n	8008930 <_printf_i+0x1b4>
 8008894:	4616      	mov	r6, r2
 8008896:	fbb5 f1f3 	udiv	r1, r5, r3
 800889a:	fb03 5711 	mls	r7, r3, r1, r5
 800889e:	5dc7      	ldrb	r7, [r0, r7]
 80088a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a4:	462f      	mov	r7, r5
 80088a6:	42bb      	cmp	r3, r7
 80088a8:	460d      	mov	r5, r1
 80088aa:	d9f4      	bls.n	8008896 <_printf_i+0x11a>
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	d10b      	bne.n	80088c8 <_printf_i+0x14c>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07df      	lsls	r7, r3, #31
 80088b4:	d508      	bpl.n	80088c8 <_printf_i+0x14c>
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	6861      	ldr	r1, [r4, #4]
 80088ba:	4299      	cmp	r1, r3
 80088bc:	bfde      	ittt	le
 80088be:	2330      	movle	r3, #48	; 0x30
 80088c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c8:	1b92      	subs	r2, r2, r6
 80088ca:	6122      	str	r2, [r4, #16]
 80088cc:	f8cd a000 	str.w	sl, [sp]
 80088d0:	464b      	mov	r3, r9
 80088d2:	aa03      	add	r2, sp, #12
 80088d4:	4621      	mov	r1, r4
 80088d6:	4640      	mov	r0, r8
 80088d8:	f7ff fee2 	bl	80086a0 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	d14c      	bne.n	800897a <_printf_i+0x1fe>
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	b004      	add	sp, #16
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	4835      	ldr	r0, [pc, #212]	; (80089c0 <_printf_i+0x244>)
 80088ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	680e      	ldr	r6, [r1, #0]
 80088f4:	061f      	lsls	r7, r3, #24
 80088f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088fa:	600e      	str	r6, [r1, #0]
 80088fc:	d514      	bpl.n	8008928 <_printf_i+0x1ac>
 80088fe:	07d9      	lsls	r1, r3, #31
 8008900:	bf44      	itt	mi
 8008902:	f043 0320 	orrmi.w	r3, r3, #32
 8008906:	6023      	strmi	r3, [r4, #0]
 8008908:	b91d      	cbnz	r5, 8008912 <_printf_i+0x196>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	f023 0320 	bic.w	r3, r3, #32
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	2310      	movs	r3, #16
 8008914:	e7b0      	b.n	8008878 <_printf_i+0xfc>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	f043 0320 	orr.w	r3, r3, #32
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	2378      	movs	r3, #120	; 0x78
 8008920:	4828      	ldr	r0, [pc, #160]	; (80089c4 <_printf_i+0x248>)
 8008922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008926:	e7e3      	b.n	80088f0 <_printf_i+0x174>
 8008928:	065e      	lsls	r6, r3, #25
 800892a:	bf48      	it	mi
 800892c:	b2ad      	uxthmi	r5, r5
 800892e:	e7e6      	b.n	80088fe <_printf_i+0x182>
 8008930:	4616      	mov	r6, r2
 8008932:	e7bb      	b.n	80088ac <_printf_i+0x130>
 8008934:	680b      	ldr	r3, [r1, #0]
 8008936:	6826      	ldr	r6, [r4, #0]
 8008938:	6960      	ldr	r0, [r4, #20]
 800893a:	1d1d      	adds	r5, r3, #4
 800893c:	600d      	str	r5, [r1, #0]
 800893e:	0635      	lsls	r5, r6, #24
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	d501      	bpl.n	8008948 <_printf_i+0x1cc>
 8008944:	6018      	str	r0, [r3, #0]
 8008946:	e002      	b.n	800894e <_printf_i+0x1d2>
 8008948:	0671      	lsls	r1, r6, #25
 800894a:	d5fb      	bpl.n	8008944 <_printf_i+0x1c8>
 800894c:	8018      	strh	r0, [r3, #0]
 800894e:	2300      	movs	r3, #0
 8008950:	6123      	str	r3, [r4, #16]
 8008952:	4616      	mov	r6, r2
 8008954:	e7ba      	b.n	80088cc <_printf_i+0x150>
 8008956:	680b      	ldr	r3, [r1, #0]
 8008958:	1d1a      	adds	r2, r3, #4
 800895a:	600a      	str	r2, [r1, #0]
 800895c:	681e      	ldr	r6, [r3, #0]
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	2100      	movs	r1, #0
 8008962:	4630      	mov	r0, r6
 8008964:	f7f7 fc3c 	bl	80001e0 <memchr>
 8008968:	b108      	cbz	r0, 800896e <_printf_i+0x1f2>
 800896a:	1b80      	subs	r0, r0, r6
 800896c:	6060      	str	r0, [r4, #4]
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	6123      	str	r3, [r4, #16]
 8008972:	2300      	movs	r3, #0
 8008974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008978:	e7a8      	b.n	80088cc <_printf_i+0x150>
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	4632      	mov	r2, r6
 800897e:	4649      	mov	r1, r9
 8008980:	4640      	mov	r0, r8
 8008982:	47d0      	blx	sl
 8008984:	3001      	adds	r0, #1
 8008986:	d0ab      	beq.n	80088e0 <_printf_i+0x164>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	079b      	lsls	r3, r3, #30
 800898c:	d413      	bmi.n	80089b6 <_printf_i+0x23a>
 800898e:	68e0      	ldr	r0, [r4, #12]
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	4298      	cmp	r0, r3
 8008994:	bfb8      	it	lt
 8008996:	4618      	movlt	r0, r3
 8008998:	e7a4      	b.n	80088e4 <_printf_i+0x168>
 800899a:	2301      	movs	r3, #1
 800899c:	4632      	mov	r2, r6
 800899e:	4649      	mov	r1, r9
 80089a0:	4640      	mov	r0, r8
 80089a2:	47d0      	blx	sl
 80089a4:	3001      	adds	r0, #1
 80089a6:	d09b      	beq.n	80088e0 <_printf_i+0x164>
 80089a8:	3501      	adds	r5, #1
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	9903      	ldr	r1, [sp, #12]
 80089ae:	1a5b      	subs	r3, r3, r1
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	dcf2      	bgt.n	800899a <_printf_i+0x21e>
 80089b4:	e7eb      	b.n	800898e <_printf_i+0x212>
 80089b6:	2500      	movs	r5, #0
 80089b8:	f104 0619 	add.w	r6, r4, #25
 80089bc:	e7f5      	b.n	80089aa <_printf_i+0x22e>
 80089be:	bf00      	nop
 80089c0:	08009191 	.word	0x08009191
 80089c4:	080091a2 	.word	0x080091a2

080089c8 <_putc_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	460d      	mov	r5, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	4606      	mov	r6, r0
 80089d0:	b118      	cbz	r0, 80089da <_putc_r+0x12>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <_putc_r+0x12>
 80089d6:	f7ff fa8b 	bl	8007ef0 <__sinit>
 80089da:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <_putc_r+0x84>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d124      	bne.n	8008a2a <_putc_r+0x62>
 80089e0:	6874      	ldr	r4, [r6, #4]
 80089e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e4:	07d8      	lsls	r0, r3, #31
 80089e6:	d405      	bmi.n	80089f4 <_putc_r+0x2c>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	0599      	lsls	r1, r3, #22
 80089ec:	d402      	bmi.n	80089f4 <_putc_r+0x2c>
 80089ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f0:	f7ff fb1c 	bl	800802c <__retarget_lock_acquire_recursive>
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	da05      	bge.n	8008a0a <_putc_r+0x42>
 80089fe:	69a2      	ldr	r2, [r4, #24]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	db1c      	blt.n	8008a3e <_putc_r+0x76>
 8008a04:	b2eb      	uxtb	r3, r5
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d019      	beq.n	8008a3e <_putc_r+0x76>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	701d      	strb	r5, [r3, #0]
 8008a12:	b2ed      	uxtb	r5, r5
 8008a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_putc_r+0x5e>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_putc_r+0x5e>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f7ff fb04 	bl	800802e <__retarget_lock_release_recursive>
 8008a26:	4628      	mov	r0, r5
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <_putc_r+0x88>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	d101      	bne.n	8008a34 <_putc_r+0x6c>
 8008a30:	68b4      	ldr	r4, [r6, #8]
 8008a32:	e7d6      	b.n	80089e2 <_putc_r+0x1a>
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <_putc_r+0x8c>)
 8008a36:	429c      	cmp	r4, r3
 8008a38:	bf08      	it	eq
 8008a3a:	68f4      	ldreq	r4, [r6, #12]
 8008a3c:	e7d1      	b.n	80089e2 <_putc_r+0x1a>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4622      	mov	r2, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff f858 	bl	8007af8 <__swbuf_r>
 8008a48:	4605      	mov	r5, r0
 8008a4a:	e7e3      	b.n	8008a14 <_putc_r+0x4c>
 8008a4c:	08009140 	.word	0x08009140
 8008a50:	08009160 	.word	0x08009160
 8008a54:	08009120 	.word	0x08009120

08008a58 <_read_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d07      	ldr	r5, [pc, #28]	; (8008a78 <_read_r+0x20>)
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	2200      	movs	r2, #0
 8008a64:	602a      	str	r2, [r5, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f7fa fdd0 	bl	800360c <_read>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_read_r+0x1e>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_read_r+0x1e>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20001df0 	.word	0x20001df0

08008a7c <_fstat_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	; (8008a9c <_fstat_r+0x20>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f7fa fde8 	bl	800365e <_fstat>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d102      	bne.n	8008a98 <_fstat_r+0x1c>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	b103      	cbz	r3, 8008a98 <_fstat_r+0x1c>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20001df0 	.word	0x20001df0

08008aa0 <_isatty_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_isatty_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7fa fde7 	bl	800367e <_isatty>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_isatty_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_isatty_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20001df0 	.word	0x20001df0

08008ac0 <memmove>:
 8008ac0:	4288      	cmp	r0, r1
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	eb01 0402 	add.w	r4, r1, r2
 8008ac8:	d902      	bls.n	8008ad0 <memmove+0x10>
 8008aca:	4284      	cmp	r4, r0
 8008acc:	4623      	mov	r3, r4
 8008ace:	d807      	bhi.n	8008ae0 <memmove+0x20>
 8008ad0:	1e43      	subs	r3, r0, #1
 8008ad2:	42a1      	cmp	r1, r4
 8008ad4:	d008      	beq.n	8008ae8 <memmove+0x28>
 8008ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ade:	e7f8      	b.n	8008ad2 <memmove+0x12>
 8008ae0:	4402      	add	r2, r0
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	428a      	cmp	r2, r1
 8008ae6:	d100      	bne.n	8008aea <memmove+0x2a>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af2:	e7f7      	b.n	8008ae4 <memmove+0x24>

08008af4 <_realloc_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	4607      	mov	r7, r0
 8008af8:	4614      	mov	r4, r2
 8008afa:	460e      	mov	r6, r1
 8008afc:	b921      	cbnz	r1, 8008b08 <_realloc_r+0x14>
 8008afe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b02:	4611      	mov	r1, r2
 8008b04:	f7fe be86 	b.w	8007814 <_malloc_r>
 8008b08:	b922      	cbnz	r2, 8008b14 <_realloc_r+0x20>
 8008b0a:	f7fe fe33 	bl	8007774 <_free_r>
 8008b0e:	4625      	mov	r5, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	f000 f814 	bl	8008b40 <_malloc_usable_size_r>
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d20f      	bcs.n	8008b3c <_realloc_r+0x48>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7fe fe78 	bl	8007814 <_malloc_r>
 8008b24:	4605      	mov	r5, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0f2      	beq.n	8008b10 <_realloc_r+0x1c>
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	f7fe fe0b 	bl	8007748 <memcpy>
 8008b32:	4631      	mov	r1, r6
 8008b34:	4638      	mov	r0, r7
 8008b36:	f7fe fe1d 	bl	8007774 <_free_r>
 8008b3a:	e7e9      	b.n	8008b10 <_realloc_r+0x1c>
 8008b3c:	4635      	mov	r5, r6
 8008b3e:	e7e7      	b.n	8008b10 <_realloc_r+0x1c>

08008b40 <_malloc_usable_size_r>:
 8008b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b44:	1f18      	subs	r0, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbc      	itt	lt
 8008b4a:	580b      	ldrlt	r3, [r1, r0]
 8008b4c:	18c0      	addlt	r0, r0, r3
 8008b4e:	4770      	bx	lr

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
