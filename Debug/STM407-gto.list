
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f58  08005f58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f60  08005f60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000078  08005fe0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08005fe0  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d23  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f9  00000000  00000000  00033dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000367c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00037950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032d1  00000000  00000000  000389d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001319d  00000000  00000000  0003bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d736f  00000000  00000000  0004ee3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001261ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  00126200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d98 	.word	0x08005d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005d98 	.word	0x08005d98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <DHCP_time_handler+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <DHCP_time_handler+0x18>)
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000094 	.word	0x20000094

08000594 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <DWT_Delay_us+0x40>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005a2:	f002 fae7 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <DWT_Delay_us+0x44>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	0c9b      	lsrs	r3, r3, #18
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80005b8:	bf00      	nop
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <DWT_Delay_us+0x40>)
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3f8      	bcc.n	80005ba <DWT_Delay_us+0x26>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	e0001000 	.word	0xe0001000
 80005d8:	431bde83 	.word	0x431bde83

080005dc <HAL_UART_RxCpltCallback>:


/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a71      	ldr	r2, [pc, #452]	; (80007b0 <HAL_UART_RxCpltCallback+0x1d4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d10d      	bne.n	800060a <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4970      	ldr	r1, [pc, #448]	; (80007b4 <HAL_UART_RxCpltCallback+0x1d8>)
 80005f2:	4871      	ldr	r0, [pc, #452]	; (80007b8 <HAL_UART_RxCpltCallback+0x1dc>)
 80005f4:	f003 fe41 	bl	800427a <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80005f8:	230a      	movs	r3, #10
 80005fa:	2201      	movs	r2, #1
 80005fc:	496d      	ldr	r1, [pc, #436]	; (80007b4 <HAL_UART_RxCpltCallback+0x1d8>)
 80005fe:	486e      	ldr	r0, [pc, #440]	; (80007b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000600:	f003 fda9 	bl	8004156 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 8000604:	4b6d      	ldr	r3, [pc, #436]	; (80007bc <HAL_UART_RxCpltCallback+0x1e0>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a6c      	ldr	r2, [pc, #432]	; (80007c0 <HAL_UART_RxCpltCallback+0x1e4>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d15e      	bne.n	80006d2 <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	496b      	ldr	r1, [pc, #428]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000618:	486b      	ldr	r0, [pc, #428]	; (80007c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800061a:	f003 fe2e 	bl	800427a <HAL_UART_Receive_IT>

		switch(status){
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <HAL_UART_RxCpltCallback+0x1f0>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d002      	beq.n	800062c <HAL_UART_RxCpltCallback+0x50>
 8000626:	2b02      	cmp	r3, #2
 8000628:	d011      	beq.n	800064e <HAL_UART_RxCpltCallback+0x72>
 800062a:	e055      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 800062c:	4b65      	ldr	r3, [pc, #404]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b5b      	cmp	r3, #91	; 0x5b
 8000632:	d150      	bne.n	80006d6 <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 8000634:	4b66      	ldr	r3, [pc, #408]	; (80007d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8000636:	225b      	movs	r2, #91	; 0x5b
 8000638:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 800063a:	4b66      	ldr	r3, [pc, #408]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000640:	4b62      	ldr	r3, [pc, #392]	; (80007cc <HAL_UART_RxCpltCallback+0x1f0>)
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 8000646:	4b64      	ldr	r3, [pc, #400]	; (80007d8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 800064c:	e043      	b.n	80006d6 <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 800064e:	4b5d      	ldr	r3, [pc, #372]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b5b      	cmp	r3, #91	; 0x5b
 8000654:	d109      	bne.n	800066a <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 8000656:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8000658:	225b      	movs	r2, #91	; 0x5b
 800065a:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 800065c:	4b5d      	ldr	r3, [pc, #372]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8000662:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <HAL_UART_RxCpltCallback+0x1f0>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8000668:	e036      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 800066a:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b5d      	cmp	r3, #93	; 0x5d
 8000670:	d115      	bne.n	800069e <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 8000672:	4b58      	ldr	r3, [pc, #352]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b22      	cmp	r3, #34	; 0x22
 8000678:	d10d      	bne.n	8000696 <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 800067a:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	4a54      	ldr	r2, [pc, #336]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 8000684:	7011      	strb	r1, [r2, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <HAL_UART_RxCpltCallback+0x1f4>)
 800068e:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8000690:	4b51      	ldr	r3, [pc, #324]	; (80007d8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
		            status = START ;
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <HAL_UART_RxCpltCallback+0x1f0>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
		        break ;
 800069c:	e01c      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b24      	cmp	r3, #36	; 0x24
 80006a4:	d80b      	bhi.n	80006be <HAL_UART_RxCpltCallback+0xe2>
 80006a6:	4b4b      	ldr	r3, [pc, #300]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	4a49      	ldr	r2, [pc, #292]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 80006b0:	7011      	strb	r1, [r2, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b43      	ldr	r3, [pc, #268]	; (80007c4 <HAL_UART_RxCpltCallback+0x1e8>)
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <HAL_UART_RxCpltCallback+0x1f4>)
 80006ba:	5499      	strb	r1, [r3, r2]
		        break ;
 80006bc:	e00c      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <HAL_UART_RxCpltCallback+0x1f0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <HAL_UART_RxCpltCallback+0x1f8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80006ca:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <HAL_UART_RxCpltCallback+0x1fc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
		        break ;
 80006d0:	e002      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80006d2:	bf00      	nop
 80006d4:	e000      	b.n	80006d8 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80006d6:	bf00      	nop

	if (huart->Instance == USART6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a3f      	ldr	r2, [pc, #252]	; (80007dc <HAL_UART_RxCpltCallback+0x200>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d15e      	bne.n	80007a0 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	493e      	ldr	r1, [pc, #248]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 80006e6:	483f      	ldr	r0, [pc, #252]	; (80007e4 <HAL_UART_RxCpltCallback+0x208>)
 80006e8:	f003 fdc7 	bl	800427a <HAL_UART_Receive_IT>

		switch(GTO_status){
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <HAL_UART_RxCpltCallback+0x20c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d002      	beq.n	80006fa <HAL_UART_RxCpltCallback+0x11e>
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d011      	beq.n	800071c <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 80006f8:	e055      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b28      	cmp	r3, #40	; 0x28
 8000700:	d150      	bne.n	80007a4 <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <HAL_UART_RxCpltCallback+0x210>)
 8000704:	2228      	movs	r2, #40	; 0x28
 8000706:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <HAL_UART_RxCpltCallback+0x20c>)
 8000710:	2202      	movs	r2, #2
 8000712:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 8000714:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <HAL_UART_RxCpltCallback+0x218>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
					break ;
 800071a:	e043      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 800071c:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b28      	cmp	r3, #40	; 0x28
 8000722:	d109      	bne.n	8000738 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8000724:	4b31      	ldr	r3, [pc, #196]	; (80007ec <HAL_UART_RxCpltCallback+0x210>)
 8000726:	2228      	movs	r2, #40	; 0x28
 8000728:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <HAL_UART_RxCpltCallback+0x20c>)
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
					break ;
 8000736:	e036      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b29      	cmp	r3, #41	; 0x29
 800073e:	d115      	bne.n	800076c <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b0a      	cmp	r3, #10
 8000746:	d10d      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	b2d1      	uxtb	r1, r2
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 8000752:	7011      	strb	r1, [r2, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <HAL_UART_RxCpltCallback+0x210>)
 800075c:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <HAL_UART_RxCpltCallback+0x218>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <HAL_UART_RxCpltCallback+0x20c>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
					break ;
 800076a:	e01c      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b0c      	cmp	r3, #12
 8000772:	d80b      	bhi.n	800078c <HAL_UART_RxCpltCallback+0x1b0>
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	b2d1      	uxtb	r1, r2
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 800077e:	7011      	strb	r1, [r2, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_UART_RxCpltCallback+0x204>)
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_UART_RxCpltCallback+0x210>)
 8000788:	5499      	strb	r1, [r3, r2]
					break ;
 800078a:	e00c      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <HAL_UART_RxCpltCallback+0x20c>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_UART_RxCpltCallback+0x214>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_UART_RxCpltCallback+0x218>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
					break ;
 800079e:	e002      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
	}
 80007a0:	bf00      	nop
 80007a2:	e000      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 80007a4:	bf00      	nop
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40011000 	.word	0x40011000
 80007b4:	20000209 	.word	0x20000209
 80007b8:	2000014c 	.word	0x2000014c
 80007bc:	20000098 	.word	0x20000098
 80007c0:	40004400 	.word	0x40004400
 80007c4:	20000148 	.word	0x20000148
 80007c8:	2000031c 	.word	0x2000031c
 80007cc:	20000003 	.word	0x20000003
 80007d0:	200003fc 	.word	0x200003fc
 80007d4:	200000ad 	.word	0x200000ad
 80007d8:	20000099 	.word	0x20000099
 80007dc:	40011400 	.word	0x40011400
 80007e0:	200002bc 	.word	0x200002bc
 80007e4:	2000020c 	.word	0x2000020c
 80007e8:	20000004 	.word	0x20000004
 80007ec:	20000250 	.word	0x20000250
 80007f0:	20000428 	.word	0x20000428
 80007f4:	2000009a 	.word	0x2000009a

080007f8 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	b29a      	uxth	r2, r3
 8000808:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <_write+0x28>)
 8000810:	f003 fca1 	bl	8004156 <HAL_UART_Transmit>
	return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000014c 	.word	0x2000014c

08000824 <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f7ff fcce 	bl	80001d0 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	b29a      	uxth	r2, r3
 8000838:	230a      	movs	r3, #10
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f003 fc8a 	bl	8004156 <HAL_UART_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000854:	6838      	ldr	r0, [r7, #0]
 8000856:	f7ff fcbb 	bl	80001d0 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	230a      	movs	r3, #10
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f003 fc77 	bl	8004156 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000868:	f640 230d 	movw	r3, #2573	; 0xa0d
 800086c:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 800086e:	f107 010c 	add.w	r1, r7, #12
 8000872:	230a      	movs	r3, #10
 8000874:	2202      	movs	r2, #2
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f003 fc6d 	bl	8004156 <HAL_UART_Transmit>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f001 f9b7 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f981 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fc3f 	bl	8001114 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000896:	f000 fbbd 	bl	8001014 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800089a:	f000 fb91 	bl	8000fc0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800089e:	f000 fb3b 	bl	8000f18 <MX_UART4_Init>
  MX_UART5_Init();
 80008a2:	f000 fb63 	bl	8000f6c <MX_UART5_Init>
  MX_USART6_UART_Init();
 80008a6:	f000 fc09 	bl	80010bc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80008aa:	f000 fa61 	bl	8000d70 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008ae:	f000 fa95 	bl	8000ddc <MX_TIM1_Init>
  MX_TIM7_Init();
 80008b2:	f000 fafb 	bl	8000eac <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 fbd7 	bl	8001068 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80008ba:	f000 f9ff 	bl	8000cbc <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008be:	f000 f9e9 	bl	8000c94 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	4995      	ldr	r1, [pc, #596]	; (8000b1c <main+0x298>)
 80008c6:	4896      	ldr	r0, [pc, #600]	; (8000b20 <main+0x29c>)
 80008c8:	f003 fcd7 	bl	800427a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 80008cc:	2201      	movs	r2, #1
 80008ce:	4995      	ldr	r1, [pc, #596]	; (8000b24 <main+0x2a0>)
 80008d0:	4895      	ldr	r0, [pc, #596]	; (8000b28 <main+0x2a4>)
 80008d2:	f003 fcd2 	bl	800427a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 80008d6:	2201      	movs	r2, #1
 80008d8:	4994      	ldr	r1, [pc, #592]	; (8000b2c <main+0x2a8>)
 80008da:	4895      	ldr	r0, [pc, #596]	; (8000b30 <main+0x2ac>)
 80008dc:	f003 fccd 	bl	800427a <HAL_UART_Receive_IT>
  //HAL_UART_Transmit(&huart1, start_data, 17, 10);
  //debugPrintln(&huart1, "\n Start STM32F407");
  printf("\r\n Start STM32F407 - 20210810\r\n");
 80008e0:	4894      	ldr	r0, [pc, #592]	; (8000b34 <main+0x2b0>)
 80008e2:	f004 fbbd 	bl	8005060 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); // GPIO PC1 OUTPUT HIGH -> tx enable
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4892      	ldr	r0, [pc, #584]	; (8000b38 <main+0x2b4>)
 80008ee:	f001 fd13 	bl	8002318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	4891      	ldr	r0, [pc, #580]	; (8000b3c <main+0x2b8>)
 80008f8:	f001 fd0e 	bl	8002318 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	488f      	ldr	r0, [pc, #572]	; (8000b40 <main+0x2bc>)
 8000902:	f001 fd09 	bl	8002318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	488d      	ldr	r0, [pc, #564]	; (8000b40 <main+0x2bc>)
 800090c:	f001 fd04 	bl	8002318 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);	// 1 second*/

	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  if (uart1_key_Flag){
 8000910:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <main+0x2c0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	f000 8091 	beq.w	8000a3c <main+0x1b8>
		  uart1_key_Flag = 0;
 800091a:	4b8a      	ldr	r3, [pc, #552]	; (8000b44 <main+0x2c0>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 8000920:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <main+0x298>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b7a      	cmp	r3, #122	; 0x7a
 8000926:	f300 808a 	bgt.w	8000a3e <main+0x1ba>
 800092a:	2b61      	cmp	r3, #97	; 0x61
 800092c:	da04      	bge.n	8000938 <main+0xb4>
 800092e:	2b32      	cmp	r3, #50	; 0x32
 8000930:	d04b      	beq.n	80009ca <main+0x146>
 8000932:	2b36      	cmp	r3, #54	; 0x36
 8000934:	d054      	beq.n	80009e0 <main+0x15c>
 8000936:	e082      	b.n	8000a3e <main+0x1ba>
 8000938:	3b61      	subs	r3, #97	; 0x61
 800093a:	2b19      	cmp	r3, #25
 800093c:	d87f      	bhi.n	8000a3e <main+0x1ba>
 800093e:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <main+0xc0>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	080009b3 	.word	0x080009b3
 8000948:	08000a3f 	.word	0x08000a3f
 800094c:	08000a2f 	.word	0x08000a2f
 8000950:	08000a3f 	.word	0x08000a3f
 8000954:	08000a3f 	.word	0x08000a3f
 8000958:	08000a3f 	.word	0x08000a3f
 800095c:	08000a3f 	.word	0x08000a3f
 8000960:	08000a3f 	.word	0x08000a3f
 8000964:	08000a3f 	.word	0x08000a3f
 8000968:	08000a3f 	.word	0x08000a3f
 800096c:	08000a3f 	.word	0x08000a3f
 8000970:	08000a3f 	.word	0x08000a3f
 8000974:	08000a3f 	.word	0x08000a3f
 8000978:	08000a3f 	.word	0x08000a3f
 800097c:	08000a3f 	.word	0x08000a3f
 8000980:	08000a3f 	.word	0x08000a3f
 8000984:	08000a3f 	.word	0x08000a3f
 8000988:	080009f7 	.word	0x080009f7
 800098c:	080009ad 	.word	0x080009ad
 8000990:	08000a05 	.word	0x08000a05
 8000994:	08000a3f 	.word	0x08000a3f
 8000998:	08000a3f 	.word	0x08000a3f
 800099c:	08000a3f 	.word	0x08000a3f
 80009a0:	08000a21 	.word	0x08000a21
 80009a4:	08000a3f 	.word	0x08000a3f
 80009a8:	08000a13 	.word	0x08000a13

			  case 's':
				  Sync_out();
 80009ac:	f000 fc7c 	bl	80012a8 <Sync_out>

				  break;
 80009b0:	e045      	b.n	8000a3e <main+0x1ba>

			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 80009b2:	4965      	ldr	r1, [pc, #404]	; (8000b48 <main+0x2c4>)
 80009b4:	485a      	ldr	r0, [pc, #360]	; (8000b20 <main+0x29c>)
 80009b6:	f7ff ff35 	bl	8000824 <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 80009ba:	4964      	ldr	r1, [pc, #400]	; (8000b4c <main+0x2c8>)
 80009bc:	4858      	ldr	r0, [pc, #352]	; (8000b20 <main+0x29c>)
 80009be:	f7ff ff44 	bl	800084a <debugPrintln>
				  printf("printf test\r\n");
 80009c2:	4863      	ldr	r0, [pc, #396]	; (8000b50 <main+0x2cc>)
 80009c4:	f004 fb4c 	bl	8005060 <puts>
				  break;
 80009c8:	e039      	b.n	8000a3e <main+0x1ba>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2101      	movs	r1, #1
 80009ce:	485b      	ldr	r0, [pc, #364]	; (8000b3c <main+0x2b8>)
 80009d0:	f001 fca2 	bl	8002318 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 80009d4:	2200      	movs	r2, #0
 80009d6:	2120      	movs	r1, #32
 80009d8:	4857      	ldr	r0, [pc, #348]	; (8000b38 <main+0x2b4>)
 80009da:	f001 fc9d 	bl	8002318 <HAL_GPIO_WritePin>

				  break;
 80009de:	e02e      	b.n	8000a3e <main+0x1ba>

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	4855      	ldr	r0, [pc, #340]	; (8000b3c <main+0x2b8>)
 80009e6:	f001 fc97 	bl	8002318 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 80009ea:	2201      	movs	r2, #1
 80009ec:	2120      	movs	r1, #32
 80009ee:	4852      	ldr	r0, [pc, #328]	; (8000b38 <main+0x2b4>)
 80009f0:	f001 fc92 	bl	8002318 <HAL_GPIO_WritePin>

				  break;
 80009f4:	e023      	b.n	8000a3e <main+0x1ba>


			  case 'r':
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	494a      	ldr	r1, [pc, #296]	; (8000b24 <main+0x2a0>)
 80009fc:	484a      	ldr	r0, [pc, #296]	; (8000b28 <main+0x2a4>)
 80009fe:	f003 fbaa 	bl	8004156 <HAL_UART_Transmit>

				  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  break;
 8000a02:	e01c      	b.n	8000a3e <main+0x1ba>

			  case 't':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &uart2_Signal, 1, 10);	// send data(0x00)

				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 8000a04:	230a      	movs	r3, #10
 8000a06:	2201      	movs	r2, #1
 8000a08:	4952      	ldr	r1, [pc, #328]	; (8000b54 <main+0x2d0>)
 8000a0a:	4849      	ldr	r0, [pc, #292]	; (8000b30 <main+0x2ac>)
 8000a0c:	f003 fba3 	bl	8004156 <HAL_UART_Transmit>

				  break;
 8000a10:	e015      	b.n	8000a3e <main+0x1ba>
			  case 'z':
				  //HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 10);
				  //HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
				  //HAL_GPIO_WritePin(GPIOC, RX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> rx enable

				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2223      	movs	r2, #35	; 0x23
 8000a16:	4950      	ldr	r1, [pc, #320]	; (8000b58 <main+0x2d4>)
 8000a18:	4843      	ldr	r0, [pc, #268]	; (8000b28 <main+0x2a4>)
 8000a1a:	f003 fb9c 	bl	8004156 <HAL_UART_Transmit>
				  /*if(uart2_key_Flag){
					  printf("PIC Received\r\n");
				  }*/


				  break;
 8000a1e:	e00e      	b.n	8000a3e <main+0x1ba>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	2223      	movs	r2, #35	; 0x23
 8000a24:	494d      	ldr	r1, [pc, #308]	; (8000b5c <main+0x2d8>)
 8000a26:	4840      	ldr	r0, [pc, #256]	; (8000b28 <main+0x2a4>)
 8000a28:	f003 fb95 	bl	8004156 <HAL_UART_Transmit>
				  break;
 8000a2c:	e007      	b.n	8000a3e <main+0x1ba>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	2223      	movs	r2, #35	; 0x23
 8000a32:	494b      	ldr	r1, [pc, #300]	; (8000b60 <main+0x2dc>)
 8000a34:	483c      	ldr	r0, [pc, #240]	; (8000b28 <main+0x2a4>)
 8000a36:	f003 fb8e 	bl	8004156 <HAL_UART_Transmit>

				  break;
 8000a3a:	e000      	b.n	8000a3e <main+0x1ba>

		  }
	  }
 8000a3c:	bf00      	nop


	  if(uart2_key_Flag) {
 8000a3e:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <main+0x2e0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d027      	beq.n	8000a96 <main+0x212>
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  uart2_key_Flag = 0;
 8000a46:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <main+0x2e0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8000a4c:	4846      	ldr	r0, [pc, #280]	; (8000b68 <main+0x2e4>)
 8000a4e:	f004 fb07 	bl	8005060 <puts>
		  //HAL_UART_Transmit(&huart1, "OK", 1, 10);
		  //HAL_UART_Transmit(&huart6, (uint8_t *) &uart2_Signal, 1, 10);				// send data(0x00)
		  //HAL_UART_Receive_IT(&huart2, &data, 1); // interrupt uart 2

		  reset_CMD = SubStr(rxd, 0, 35);
 8000a52:	2223      	movs	r2, #35	; 0x23
 8000a54:	2100      	movs	r1, #0
 8000a56:	4845      	ldr	r0, [pc, #276]	; (8000b6c <main+0x2e8>)
 8000a58:	f000 fc56 	bl	8001308 <SubStr>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <main+0x2ec>)
 8000a60:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 8000a62:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <main+0x2ec>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4842      	ldr	r0, [pc, #264]	; (8000b74 <main+0x2f0>)
 8000a6a:	f004 fa73 	bl	8004f54 <iprintf>

		  HAL_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f001 f906 	bl	8001c80 <HAL_Delay>
		  for (int i = 0; i < LENGTH; i++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	e00a      	b.n	8000a90 <main+0x20c>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <main+0x2e8>)
 8000a7e:	1899      	adds	r1, r3, r2
 8000a80:	230a      	movs	r3, #10
 8000a82:	2201      	movs	r2, #1
 8000a84:	4826      	ldr	r0, [pc, #152]	; (8000b20 <main+0x29c>)
 8000a86:	f003 fb66 	bl	8004156 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b22      	cmp	r3, #34	; 0x22
 8000a94:	ddf1      	ble.n	8000a7a <main+0x1f6>
		  }

	  }

	  if(uart_6_flag) {
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <main+0x2f4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d019      	beq.n	8000ad2 <main+0x24e>
		  uart_6_flag = 0;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <main+0x2f4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 8000aa4:	4835      	ldr	r0, [pc, #212]	; (8000b7c <main+0x2f8>)
 8000aa6:	f004 fadb 	bl	8005060 <puts>

		  HAL_Delay(1);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f001 f8e8 	bl	8001c80 <HAL_Delay>

		  for (int i = 0; i < GTO_LENGTH; i++) {
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	e00a      	b.n	8000acc <main+0x248>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <main+0x2fc>)
 8000aba:	1899      	adds	r1, r3, r2
 8000abc:	230a      	movs	r3, #10
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <main+0x29c>)
 8000ac2:	f003 fb48 	bl	8004156 <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	ddf1      	ble.n	8000ab6 <main+0x232>
		  //printf("\r\n\r\n");

	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	4818      	ldr	r0, [pc, #96]	; (8000b38 <main+0x2b4>)
 8000ad8:	f001 fc06 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <main+0x300>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <main+0x2b4>)
 8000aea:	f001 fbfd 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <main+0x304>)
 8000af4:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 8000af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <main+0x2b4>)
 8000afc:	f001 fbf4 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <main+0x308>)
 8000b06:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 8000b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0c:	480a      	ldr	r0, [pc, #40]	; (8000b38 <main+0x2b4>)
 8000b0e:	f001 fbeb 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <main+0x30c>)
 8000b18:	701a      	strb	r2, [r3, #0]
	  if (uart1_key_Flag){
 8000b1a:	e6f9      	b.n	8000910 <main+0x8c>
 8000b1c:	20000209 	.word	0x20000209
 8000b20:	2000014c 	.word	0x2000014c
 8000b24:	20000000 	.word	0x20000000
 8000b28:	2000031c 	.word	0x2000031c
 8000b2c:	200002bc 	.word	0x200002bc
 8000b30:	2000020c 	.word	0x2000020c
 8000b34:	08005db0 	.word	0x08005db0
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40020800 	.word	0x40020800
 8000b44:	20000098 	.word	0x20000098
 8000b48:	08005dd0 	.word	0x08005dd0
 8000b4c:	08005de4 	.word	0x08005de4
 8000b50:	08005df8 	.word	0x08005df8
 8000b54:	20000002 	.word	0x20000002
 8000b58:	08005e08 	.word	0x08005e08
 8000b5c:	08005e2c 	.word	0x08005e2c
 8000b60:	08005e50 	.word	0x08005e50
 8000b64:	20000099 	.word	0x20000099
 8000b68:	08005e74 	.word	0x08005e74
 8000b6c:	200003fc 	.word	0x200003fc
 8000b70:	200000f8 	.word	0x200000f8
 8000b74:	08005e84 	.word	0x08005e84
 8000b78:	2000009a 	.word	0x2000009a
 8000b7c:	08005e94 	.word	0x08005e94
 8000b80:	20000250 	.word	0x20000250
 8000b84:	20000100 	.word	0x20000100
 8000b88:	200003f8 	.word	0x200003f8
 8000b8c:	20000190 	.word	0x20000190
 8000b90:	200000ac 	.word	0x200000ac

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b098      	sub	sp, #96	; 0x60
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 f924 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <SystemClock_Config+0xf8>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <SystemClock_Config+0xf8>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <SystemClock_Config+0xf8>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <SystemClock_Config+0xfc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <SystemClock_Config+0xfc>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <SystemClock_Config+0xfc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bfe:	230a      	movs	r3, #10
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c16:	2308      	movs	r3, #8
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c1a:	23a8      	movs	r3, #168	; 0xa8
 8000c1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fb8e 	bl	800234c <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c36:	f000 fbd3 	bl	80013e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fdf0 	bl	800283c <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c62:	f000 fbbd 	bl	80013e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 ffe3 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c80:	f000 fbae 	bl	80013e0 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3760      	adds	r7, #96	; 0x60
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40007000 	.word	0x40007000

08000c94 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2025      	movs	r0, #37	; 0x25
 8000c9e:	f001 f8cb 	bl	8001e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca2:	2025      	movs	r0, #37	; 0x25
 8000ca4:	f001 f8e4 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2047      	movs	r0, #71	; 0x47
 8000cae:	f001 f8c3 	bl	8001e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cb2:	2047      	movs	r0, #71	; 0x47
 8000cb4:	f001 f8dc 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <MX_RTC_Init+0xac>)
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <MX_RTC_Init+0xb0>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_RTC_Init+0xac>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_RTC_Init+0xac>)
 8000ce2:	227f      	movs	r2, #127	; 0x7f
 8000ce4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_RTC_Init+0xac>)
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_RTC_Init+0xac>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_RTC_Init+0xac>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_RTC_Init+0xac>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <MX_RTC_Init+0xac>)
 8000d00:	f002 f880 	bl	8002e04 <HAL_RTC_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 fb69 	bl	80013e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <MX_RTC_Init+0xac>)
 8000d2a:	f002 f8fc 	bl	8002f26 <HAL_RTC_SetTime>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 fb54 	bl	80013e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_RTC_Init+0xac>)
 8000d50:	f002 f9a6 	bl	80030a0 <HAL_RTC_SetDate>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d5a:	f000 fb41 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000194 	.word	0x20000194
 8000d6c:	40002800 	.word	0x40002800

08000d70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_SPI1_Init+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_SPI1_Init+0x64>)
 8000dc2:	f002 fa86 	bl	80032d2 <HAL_SPI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dcc:	f000 fb08 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002c0 	.word	0x200002c0
 8000dd8:	40013000 	.word	0x40013000

08000ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e0a:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <MX_TIM1_Init+0xcc>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e36:	f002 fbf3 	bl	8003620 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000e40:	f000 face 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e52:	f002 fdad 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e5c:	f000 fac0 	bl	80013e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e60:	2306      	movs	r3, #6
 8000e62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e70:	f002 fe62 	bl	8003b38 <HAL_TIM_SlaveConfigSynchro>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e7a:	f000 fab1 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM1_Init+0xc8>)
 8000e8c:	f003 f886 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e96:	f000 faa3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3730      	adds	r7, #48	; 0x30
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001bc 	.word	0x200001bc
 8000ea8:	40010000 	.word	0x40010000

08000eac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_TIM7_Init+0x68>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ec2:	2229      	movs	r2, #41	; 0x29
 8000ec4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000edc:	f002 fba0 	bl	8003620 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ee6:	f000 fa7b 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM7_Init+0x64>)
 8000ef8:	f003 f850 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000f02:	f000 fa6d 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200003b0 	.word	0x200003b0
 8000f14:	40001400 	.word	0x40001400

08000f18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_UART4_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_UART4_Init+0x4c>)
 8000f50:	f003 f8b4 	bl	80040bc <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 fa41 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000278 	.word	0x20000278
 8000f68:	40004c00 	.word	0x40004c00

08000f6c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_UART5_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_UART5_Init+0x4c>)
 8000fa4:	f003 f88a 	bl	80040bc <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 fa17 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000104 	.word	0x20000104
 8000fbc:	40005000 	.word	0x40005000

08000fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_USART1_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff8:	f003 f860 	bl	80040bc <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001002:	f000 f9ed 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000014c 	.word	0x2000014c
 8001010:	40011000 	.word	0x40011000

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART2_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800104c:	f003 f836 	bl	80040bc <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f9c3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000031c 	.word	0x2000031c
 8001064:	40004400 	.word	0x40004400

08001068 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_USART3_UART_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f003 f80c 	bl	80040bc <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f999 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000b0 	.word	0x200000b0
 80010b8:	40004800 	.word	0x40004800

080010bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART6_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <MX_USART6_UART_Init+0x54>)
 80010ca:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010e0:	220c      	movs	r2, #12
 80010e2:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART6_UART_Init+0x4c>)
 80010f4:	f002 ffe2 	bl	80040bc <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f96f 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000020c 	.word	0x2000020c
 800110c:	40011400 	.word	0x40011400
 8001110:	003d0900 	.word	0x003d0900

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <MX_GPIO_Init+0x180>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <MX_GPIO_Init+0x180>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <MX_GPIO_Init+0x180>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <MX_GPIO_Init+0x180>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a51      	ldr	r2, [pc, #324]	; (8001294 <MX_GPIO_Init+0x180>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <MX_GPIO_Init+0x180>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <MX_GPIO_Init+0x180>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <MX_GPIO_Init+0x180>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b48      	ldr	r3, [pc, #288]	; (8001294 <MX_GPIO_Init+0x180>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <MX_GPIO_Init+0x180>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <MX_GPIO_Init+0x180>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_GPIO_Init+0x180>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <MX_GPIO_Init+0x180>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_GPIO_Init+0x180>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_GPIO_Init+0x180>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <MX_GPIO_Init+0x180>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a35      	ldr	r2, [pc, #212]	; (8001294 <MX_GPIO_Init+0x180>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <MX_GPIO_Init+0x180>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	210a      	movs	r1, #10
 80011d6:	4830      	ldr	r0, [pc, #192]	; (8001298 <MX_GPIO_Init+0x184>)
 80011d8:	f001 f89e 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <MX_GPIO_Init+0x188>)
 80011e4:	f001 f898 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 710c 	mov.w	r1, #560	; 0x230
 80011ee:	482c      	ldr	r0, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x18c>)
 80011f0:	f001 f892 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2101      	movs	r1, #1
 80011f8:	482a      	ldr	r0, [pc, #168]	; (80012a4 <MX_GPIO_Init+0x190>)
 80011fa:	f001 f88d 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011fe:	230a      	movs	r3, #10
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4820      	ldr	r0, [pc, #128]	; (8001298 <MX_GPIO_Init+0x184>)
 8001216:	f000 fecb 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800121a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <MX_GPIO_Init+0x18c>)
 8001230:	f000 febe 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_GPIO_Init+0x188>)
 800124e:	f000 feaf 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 8001252:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_GPIO_Init+0x18c>)
 800126c:	f000 fea0 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001270:	2301      	movs	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_GPIO_Init+0x190>)
 8001288:	f000 fe92 	bl	8001fb0 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40021000 	.word	0x40021000

080012a8 <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <Sync_out+0x4c>)
 80012b2:	f001 f831 	bl	8002318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <Sync_out+0x50>)
 80012bc:	f001 f82c 	bl	8002318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 80012c0:	2201      	movs	r2, #1
 80012c2:	2102      	movs	r1, #2
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <Sync_out+0x54>)
 80012c6:	f001 f827 	bl	8002318 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 80012ca:	230a      	movs	r3, #10
 80012cc:	2201      	movs	r2, #1
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <Sync_out+0x58>)
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <Sync_out+0x5c>)
 80012d2:	f002 ff40 	bl	8004156 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f7ff f95c 	bl	8000594 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <Sync_out+0x54>)
 80012e2:	f001 f819 	bl	8002318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 80012e6:	2200      	movs	r2, #0
 80012e8:	2101      	movs	r1, #1
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <Sync_out+0x50>)
 80012ec:	f001 f814 	bl	8002318 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40020800 	.word	0x40020800
 8001300:	20000001 	.word	0x20000001
 8001304:	2000020c 	.word	0x2000020c

08001308 <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <SubStr+0x16>
        return NULL ;
 800131a:	2300      	movs	r3, #0
 800131c:	e033      	b.n	8001386 <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3301      	adds	r3, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fd5c 	bl	8004de0 <malloc>
 8001328:	4603      	mov	r3, r0
 800132a:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7fe ff4f 	bl	80001d0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	429a      	cmp	r2, r3
 8001340:	dd03      	ble.n	800134a <SubStr+0x42>
        nLength = nStart + nLen ;
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e00d      	b.n	800136c <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	441a      	add	r2, r3
 8001356:	69f9      	ldr	r1, [r7, #28]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1acb      	subs	r3, r1, r3
 800135c:	4619      	mov	r1, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	440b      	add	r3, r1
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbed      	blt.n	8001350 <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	461a      	mov	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4413      	add	r3, r2
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 8001384:	697b      	ldr	r3, [r7, #20]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013a2:	f000 fc4d 	bl	8001c40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM6) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d10f      	bne.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x40>
	  wizDHCPticks++;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013ba:	801a      	strh	r2, [r3, #0]
	  if(wizDHCPticks >= 1000)
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c4:	d304      	bcc.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x40>
	  {
		  wizDHCPticks = 0;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
		  DHCP_time_handler();
 80013cc:	f7ff f8d4 	bl	8000578 <DHCP_time_handler>
	  }
  }
  /* USER CODE END Callback 1 */
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40001000 	.word	0x40001000
 80013dc:	2000009c 	.word	0x2000009c

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RTC_MspInit+0x24>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d102      	bne.n	8001454 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RTC_MspInit+0x28>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40002800 	.word	0x40002800
 8001464:	42470e3c 	.word	0x42470e3c

08001468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_SPI_MspInit+0x94>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d133      	bne.n	80014f2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_SPI_MspInit+0x98>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_SPI_MspInit+0x98>)
 8001494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_SPI_MspInit+0x98>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_SPI_MspInit+0x98>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_SPI_MspInit+0x98>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_SPI_MspInit+0x98>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014c2:	23f0      	movs	r3, #240	; 0xf0
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d2:	2305      	movs	r3, #5
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <HAL_SPI_MspInit+0x9c>)
 80014de:	f000 fd67 	bl	8001fb0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2023      	movs	r0, #35	; 0x23
 80014e8:	f000 fca6 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014ec:	2023      	movs	r0, #35	; 0x23
 80014ee:	f000 fcbf 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40013000 	.word	0x40013000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_TIM_Base_MspInit+0x70>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10e      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001536:	e01a      	b.n	800156e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_TIM_Base_MspInit+0x78>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d115      	bne.n	800156e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_TIM_Base_MspInit+0x74>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2037      	movs	r0, #55	; 0x37
 8001564:	f000 fc68 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001568:	2037      	movs	r0, #55	; 0x37
 800156a:	f000 fc81 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010000 	.word	0x40010000
 800157c:	40023800 	.word	0x40023800
 8001580:	40001400 	.word	0x40001400

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9c      	ldr	r2, [pc, #624]	; (8001814 <HAL_UART_MspInit+0x290>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d135      	bne.n	8001612 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015aa:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a9a      	ldr	r2, [pc, #616]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b98      	ldr	r3, [pc, #608]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
 80015c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a93      	ldr	r2, [pc, #588]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_UART_MspInit+0x294>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015f0:	2308      	movs	r3, #8
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f8:	4619      	mov	r1, r3
 80015fa:	4888      	ldr	r0, [pc, #544]	; (800181c <HAL_UART_MspInit+0x298>)
 80015fc:	f000 fcd8 	bl	8001fb0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2034      	movs	r0, #52	; 0x34
 8001606:	f000 fc17 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800160a:	2034      	movs	r0, #52	; 0x34
 800160c:	f000 fc30 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001610:	e145      	b.n	800189e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a82      	ldr	r2, [pc, #520]	; (8001820 <HAL_UART_MspInit+0x29c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d153      	bne.n	80016c4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
 8001620:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_UART_MspInit+0x294>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_UART_MspInit+0x294>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_UART_MspInit+0x294>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
 8001658:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_UART_MspInit+0x294>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_UART_MspInit+0x294>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001682:	2308      	movs	r3, #8
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800168a:	4619      	mov	r1, r3
 800168c:	4863      	ldr	r0, [pc, #396]	; (800181c <HAL_UART_MspInit+0x298>)
 800168e:	f000 fc8f 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001692:	2304      	movs	r3, #4
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016a2:	2308      	movs	r3, #8
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016aa:	4619      	mov	r1, r3
 80016ac:	485d      	ldr	r0, [pc, #372]	; (8001824 <HAL_UART_MspInit+0x2a0>)
 80016ae:	f000 fc7f 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2035      	movs	r0, #53	; 0x35
 80016b8:	f000 fbbe 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016bc:	2035      	movs	r0, #53	; 0x35
 80016be:	f000 fbd7 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 80016c2:	e0ec      	b.n	800189e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_UART_MspInit+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12d      	bne.n	800172a <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_UART_MspInit+0x294>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001706:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001718:	2307      	movs	r3, #7
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001720:	4619      	mov	r1, r3
 8001722:	4842      	ldr	r0, [pc, #264]	; (800182c <HAL_UART_MspInit+0x2a8>)
 8001724:	f000 fc44 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001728:	e0b9      	b.n	800189e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a40      	ldr	r2, [pc, #256]	; (8001830 <HAL_UART_MspInit+0x2ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d134      	bne.n	800179e <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <HAL_UART_MspInit+0x294>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_UART_MspInit+0x294>)
 800173e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_UART_MspInit+0x294>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_UART_MspInit+0x294>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176c:	230c      	movs	r3, #12
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177c:	2307      	movs	r3, #7
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001784:	4619      	mov	r1, r3
 8001786:	4829      	ldr	r0, [pc, #164]	; (800182c <HAL_UART_MspInit+0x2a8>)
 8001788:	f000 fc12 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2026      	movs	r0, #38	; 0x26
 8001792:	f000 fb51 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001796:	2026      	movs	r0, #38	; 0x26
 8001798:	f000 fb6a 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 800179c:	e07f      	b.n	800189e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <HAL_UART_MspInit+0x2b0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d149      	bne.n	800183c <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	6313      	str	r3, [r2, #48]	; 0x30
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_UART_MspInit+0x294>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017f2:	2307      	movs	r3, #7
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017fa:	4619      	mov	r1, r3
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <HAL_UART_MspInit+0x2b4>)
 80017fe:	f000 fbd7 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2027      	movs	r0, #39	; 0x27
 8001808:	f000 fb16 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800180c:	2027      	movs	r0, #39	; 0x27
 800180e:	f000 fb2f 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 8001812:	e044      	b.n	800189e <HAL_UART_MspInit+0x31a>
 8001814:	40004c00 	.word	0x40004c00
 8001818:	40023800 	.word	0x40023800
 800181c:	40020800 	.word	0x40020800
 8001820:	40005000 	.word	0x40005000
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40011000 	.word	0x40011000
 800182c:	40020000 	.word	0x40020000
 8001830:	40004400 	.word	0x40004400
 8001834:	40004800 	.word	0x40004800
 8001838:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_UART_MspInit+0x324>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_UART_MspInit+0x328>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_UART_MspInit+0x328>)
 8001850:	f043 0320 	orr.w	r3, r3, #32
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x328>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0x328>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_UART_MspInit+0x328>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_UART_MspInit+0x328>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800188e:	2308      	movs	r3, #8
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0x32c>)
 800189a:	f000 fb89 	bl	8001fb0 <HAL_GPIO_Init>
}
 800189e:	bf00      	nop
 80018a0:	3750      	adds	r7, #80	; 0x50
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40011400 	.word	0x40011400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020800 	.word	0x40020800

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2036      	movs	r0, #54	; 0x36
 80018ca:	f000 fab5 	bl	8001e38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ce:	2036      	movs	r0, #54	; 0x36
 80018d0:	f000 face 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_InitTick+0xa4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_InitTick+0xa4>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_InitTick+0xa4>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 f96e 	bl	8002bdc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001900:	f001 f944 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8001904:	4603      	mov	r3, r0
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_InitTick+0xa8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3b01      	subs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_InitTick+0xac>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_InitTick+0xb0>)
 800191c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_InitTick+0xac>)
 8001920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001924:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_InitTick+0xac>)
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_InitTick+0xac>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_InitTick+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_InitTick+0xac>)
 800193a:	f001 fe71 	bl	8003620 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_InitTick+0xac>)
 8001946:	f001 febb 	bl	80036c0 <HAL_TIM_Base_Start_IT>
 800194a:	4603      	mov	r3, r0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	431bde83 	.word	0x431bde83
 8001960:	2000042c 	.word	0x2000042c
 8001964:	40001000 	.word	0x40001000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <SPI1_IRQHandler+0x10>)
 80019c6:	f001 fd0d 	bl	80033e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002c0 	.word	0x200002c0

080019d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <USART1_IRQHandler+0x10>)
 80019da:	f002 fc7f 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000014c 	.word	0x2000014c

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART2_IRQHandler+0x10>)
 80019ee:	f002 fc75 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000031c 	.word	0x2000031c

080019fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <USART3_IRQHandler+0x10>)
 8001a02:	f002 fc6b 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000b0 	.word	0x200000b0

08001a10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <UART4_IRQHandler+0x10>)
 8001a16:	f002 fc61 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000278 	.word	0x20000278

08001a24 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <UART5_IRQHandler+0x10>)
 8001a2a:	f002 fc57 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000104 	.word	0x20000104

08001a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM6_DAC_IRQHandler+0x10>)
 8001a3e:	f001 feaf 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000042c 	.word	0x2000042c

08001a4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <TIM7_IRQHandler+0x10>)
 8001a52:	f001 fea5 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200003b0 	.word	0x200003b0

08001a60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART6_IRQHandler+0x10>)
 8001a66:	f002 fc39 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000020c 	.word	0x2000020c

08001a74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_isatty>:

int _isatty(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return 1;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
	return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f003 f920 	bl	8004d8c <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20020000 	.word	0x20020000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200000a0 	.word	0x200000a0
 8001b80:	20000488 	.word	0x20000488

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd2:	f7ff ffd7 	bl	8001b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f003 f8df 	bl	8004d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7fe fe53 	bl	8000884 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bec:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 8001bf0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bf4:	20000488 	.word	0x20000488

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f8fc 	bl	8001e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff fe42 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fbdc 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000010 	.word	0x20000010
 8001c64:	20000474 	.word	0x20000474

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000474 	.word	0x20000474

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000010 	.word	0x20000010

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	; (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff4c 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4a:	f7ff ff61 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff ffb1 	bl	8001dbc <NVIC_EncodePriority>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff80 	bl	8001d68 <__NVIC_SetPriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff54 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e9a:	f7ff fee5 	bl	8001c68 <HAL_GetTick>
 8001e9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e052      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0216 	bic.w	r2, r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001edc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_DMA_Abort+0x62>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0208 	bic.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0e:	e013      	b.n	8001f38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f10:	f7ff feaa 	bl	8001c68 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d90c      	bls.n	8001f38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e015      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e4      	bne.n	8001f10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00c      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e16b      	b.n	80022a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 815a 	bne.w	800229e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80b4 	beq.w	800229e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b60      	ldr	r3, [pc, #384]	; (80022bc <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <HAL_GPIO_Init+0x30c>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_GPIO_Init+0x310>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <HAL_GPIO_Init+0x314>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a51      	ldr	r2, [pc, #324]	; (80022c8 <HAL_GPIO_Init+0x318>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a50      	ldr	r2, [pc, #320]	; (80022cc <HAL_GPIO_Init+0x31c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x21a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <HAL_GPIO_Init+0x324>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x216>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <HAL_GPIO_Init+0x328>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x20a>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00e      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00c      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021be:	2306      	movs	r3, #6
 80021c0:	e00a      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <HAL_GPIO_Init+0x310>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_GPIO_Init+0x334>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_GPIO_Init+0x334>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f ae90 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40021c00 	.word	0x40021c00
 80022e4:	40013c00 	.word	0x40013c00

080022e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e264      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d075      	beq.n	8002456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d00c      	beq.n	8002390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002376:	4ba0      	ldr	r3, [pc, #640]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d112      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b9d      	ldr	r3, [pc, #628]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b99      	ldr	r3, [pc, #612]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d05b      	beq.n	8002454 <HAL_RCC_OscConfig+0x108>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d157      	bne.n	8002454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e23f      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x74>
 80023b2:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a90      	ldr	r2, [pc, #576]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a87      	ldr	r2, [pc, #540]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xb0>
 80023e4:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a83      	ldr	r2, [pc, #524]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc30 	bl	8001c68 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fc2c 	bl	8001c68 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e204      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xc0>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fc1c 	bl	8001c68 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fc18 	bl	8001c68 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1f0      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0xe8>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x152>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1c4      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4952      	ldr	r1, [pc, #328]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e03a      	b.n	800252a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_OscConfig+0x2b0>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7ff fbd1 	bl	8001c68 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff fbcd 	bl	8001c68 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1a5      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4940      	ldr	r1, [pc, #256]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0x2b0>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fbb0 	bl	8001c68 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff fbac 	bl	8001c68 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e184      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d030      	beq.n	8002598 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_RCC_OscConfig+0x2b4>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7ff fb90 	bl	8001c68 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff fb8c 	bl	8001c68 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e164      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x200>
 800256a:	e015      	b.n	8002598 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x2b4>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff fb79 	bl	8001c68 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257a:	f7ff fb75 	bl	8001c68 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e14d      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a0 	beq.w	80026e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x2b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_RCC_OscConfig+0x2b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_RCC_OscConfig+0x2b8>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb3b 	bl	8001c68 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e011      	b.n	800261a <HAL_RCC_OscConfig+0x2ce>
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470000 	.word	0x42470000
 8002600:	42470e80 	.word	0x42470e80
 8002604:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7ff fb2e 	bl	8001c68 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e106      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b85      	ldr	r3, [pc, #532]	; (8002830 <HAL_RCC_OscConfig+0x4e4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x2f0>
 800262e:	4b81      	ldr	r3, [pc, #516]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a80      	ldr	r2, [pc, #512]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x32a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x312>
 8002644:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x32a>
 800265e:	4b75      	ldr	r3, [pc, #468]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a74      	ldr	r2, [pc, #464]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	4b72      	ldr	r3, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a71      	ldr	r2, [pc, #452]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7ff faf3 	bl	8001c68 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7ff faef 	bl	8001c68 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0c5      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x33a>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fadd 	bl	8001c68 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fad9 	bl	8001c68 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0af      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b56      	ldr	r3, [pc, #344]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a55      	ldr	r2, [pc, #340]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 809b 	beq.w	8002826 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d05c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d141      	bne.n	8002788 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_OscConfig+0x4ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff faad 	bl	8001c68 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff faa9 	bl	8001c68 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e081      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	019b      	lsls	r3, r3, #6
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	041b      	lsls	r3, r3, #16
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4937      	ldr	r1, [pc, #220]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x4ec>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fa82 	bl	8001c68 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7ff fa7e 	bl	8001c68 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e056      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x41c>
 8002786:	e04e      	b.n	8002826 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x4ec>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fa6b 	bl	8001c68 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fa67 	bl	8001c68 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e03f      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x44a>
 80027b4:	e037      	b.n	8002826 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e032      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d028      	beq.n	8002822 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d11a      	bne.n	8002822 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f2:	4013      	ands	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d111      	bne.n	8002822 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d107      	bne.n	8002822 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40007000 	.word	0x40007000
 8002834:	40023800 	.word	0x40023800
 8002838:	42470060 	.word	0x42470060

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cc      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90c      	bls.n	8002878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e067      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7ff f99c 	bl	8001c68 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7ff f998 	bl	8001c68 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d20c      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f821 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe ff66 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08005ea8 	.word	0x08005ea8
 8002a00:	20000008 	.word	0x20000008
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a0e:	2100      	movs	r1, #0
 8002a10:	6079      	str	r1, [r7, #4]
 8002a12:	2100      	movs	r1, #0
 8002a14:	60f9      	str	r1, [r7, #12]
 8002a16:	2100      	movs	r1, #0
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1e:	4952      	ldr	r1, [pc, #328]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a20:	6889      	ldr	r1, [r1, #8]
 8002a22:	f001 010c 	and.w	r1, r1, #12
 8002a26:	2908      	cmp	r1, #8
 8002a28:	d00d      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a2a:	2908      	cmp	r1, #8
 8002a2c:	f200 8094 	bhi.w	8002b58 <HAL_RCC_GetSysClockFreq+0x150>
 8002a30:	2900      	cmp	r1, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x32>
 8002a34:	2904      	cmp	r1, #4
 8002a36:	d003      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x38>
 8002a38:	e08e      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a3a:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002a3c:	60bb      	str	r3, [r7, #8]
       break;
 8002a3e:	e08e      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a42:	60bb      	str	r3, [r7, #8]
      break;
 8002a44:	e08b      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a46:	4948      	ldr	r1, [pc, #288]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a48:	6849      	ldr	r1, [r1, #4]
 8002a4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a50:	4945      	ldr	r1, [pc, #276]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a52:	6849      	ldr	r1, [r1, #4]
 8002a54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a58:	2900      	cmp	r1, #0
 8002a5a:	d024      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5c:	4942      	ldr	r1, [pc, #264]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a5e:	6849      	ldr	r1, [r1, #4]
 8002a60:	0989      	lsrs	r1, r1, #6
 8002a62:	4608      	mov	r0, r1
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a6c:	f04f 0500 	mov.w	r5, #0
 8002a70:	ea00 0204 	and.w	r2, r0, r4
 8002a74:	ea01 0305 	and.w	r3, r1, r5
 8002a78:	493d      	ldr	r1, [pc, #244]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a7a:	fb01 f003 	mul.w	r0, r1, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	fb01 f102 	mul.w	r1, r1, r2
 8002a84:	1844      	adds	r4, r0, r1
 8002a86:	493a      	ldr	r1, [pc, #232]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a88:	fba2 0101 	umull	r0, r1, r2, r1
 8002a8c:	1863      	adds	r3, r4, r1
 8002a8e:	4619      	mov	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f7fd fbf2 	bl	8000280 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e04a      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	461a      	mov	r2, r3
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	ea02 0400 	and.w	r4, r2, r0
 8002abe:	ea03 0501 	and.w	r5, r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	014b      	lsls	r3, r1, #5
 8002ad0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad4:	0142      	lsls	r2, r0, #5
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	1b00      	subs	r0, r0, r4
 8002adc:	eb61 0105 	sbc.w	r1, r1, r5
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	018b      	lsls	r3, r1, #6
 8002aea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aee:	0182      	lsls	r2, r0, #6
 8002af0:	1a12      	subs	r2, r2, r0
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	00d9      	lsls	r1, r3, #3
 8002b00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b04:	00d0      	lsls	r0, r2, #3
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	1912      	adds	r2, r2, r4
 8002b0c:	eb45 0303 	adc.w	r3, r5, r3
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0299      	lsls	r1, r3, #10
 8002b1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b1e:	0290      	lsls	r0, r2, #10
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	f7fd fba6 	bl	8000280 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	60bb      	str	r3, [r7, #8]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002b5a:	60bb      	str	r3, [r7, #8]
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bdb0      	pop	{r4, r5, r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	017d7840 	.word	0x017d7840

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0a9b      	lsrs	r3, r3, #10
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08005eb8 	.word	0x08005eb8

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bb8:	f7ff ffdc 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0b5b      	lsrs	r3, r3, #13
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08005eb8 	.word	0x08005eb8

08002bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	220f      	movs	r2, #15
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_RCC_GetClockConfig+0x60>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	601a      	str	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d035      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c68:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fffb 	bl	8001c68 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c76:	f7fe fff7 	bl	8001c68 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0b0      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c88:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	019a      	lsls	r2, r3, #6
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	071b      	lsls	r3, r3, #28
 8002ca0:	4955      	ldr	r1, [pc, #340]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ca8:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cae:	f7fe ffdb 	bl	8001c68 <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cb6:	f7fe ffd7 	bl	8001c68 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e090      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8083 	beq.w	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3e      	ldr	r2, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe ffad 	bl	8001c68 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fe ffa9 	bl	8001c68 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e062      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d58:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d64:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d114      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe ff77 	bl	8001c68 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe ff73 	bl	8001c68 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e02a      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dac:	d10d      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	490d      	ldr	r1, [pc, #52]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dd4:	6093      	str	r3, [r2, #8]
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	4905      	ldr	r1, [pc, #20]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	42470068 	.word	0x42470068
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42470e40 	.word	0x42470e40

08002e04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e083      	b.n	8002f1e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7f5b      	ldrb	r3, [r3, #29]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fb08 	bl	800143c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	22ca      	movs	r2, #202	; 0xca
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2253      	movs	r2, #83	; 0x53
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9fb 	bl	800323e <RTC_EnterInitMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	22ff      	movs	r2, #255	; 0xff
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e05e      	b.n	8002f1e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6919      	ldr	r1, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ebe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f98d 	bl	80031ee <HAL_RTC_WaitForSynchro>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e018      	b.n	8002f1e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	22ff      	movs	r2, #255	; 0xff
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f26:	b590      	push	{r4, r7, lr}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	7f1b      	ldrb	r3, [r3, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_RTC_SetTime+0x1c>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0aa      	b.n	8003098 <HAL_RTC_SetTime+0x172>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d126      	bne.n	8002fa2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2200      	movs	r2, #0
 8002f66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f992 	bl	8003296 <RTC_ByteToBcd2>
 8002f72:	4603      	mov	r3, r0
 8002f74:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f98b 	bl	8003296 <RTC_ByteToBcd2>
 8002f80:	4603      	mov	r3, r0
 8002f82:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f84:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f983 	bl	8003296 <RTC_ByteToBcd2>
 8002f90:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f92:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	78db      	ldrb	r3, [r3, #3]
 8002f9a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e018      	b.n	8002fd4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002fc2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002fc8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	22ca      	movs	r2, #202	; 0xca
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2253      	movs	r2, #83	; 0x53
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f92a 	bl	800323e <RTC_EnterInitMode>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e047      	b.n	8003098 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003012:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003016:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003026:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	431a      	orrs	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d111      	bne.n	8003082 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8c5 	bl	80031ee <HAL_RTC_WaitForSynchro>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2204      	movs	r2, #4
 8003076:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00a      	b.n	8003098 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003096:	2300      	movs	r3, #0
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7f1b      	ldrb	r3, [r3, #28]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_RTC_SetDate+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e094      	b.n	80031e6 <HAL_RTC_SetDate+0x146>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2202      	movs	r2, #2
 80030c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10e      	bne.n	80030ec <HAL_RTC_SetDate+0x4c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	f023 0310 	bic.w	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	330a      	adds	r3, #10
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11c      	bne.n	800312c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8cd 	bl	8003296 <RTC_ByteToBcd2>
 80030fc:	4603      	mov	r3, r0
 80030fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f8c6 	bl	8003296 <RTC_ByteToBcd2>
 800310a:	4603      	mov	r3, r0
 800310c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800310e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	789b      	ldrb	r3, [r3, #2]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f8be 	bl	8003296 <RTC_ByteToBcd2>
 800311a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800311c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e00e      	b.n	800314a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	78db      	ldrb	r3, [r3, #3]
 8003130:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003138:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800313e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ca      	movs	r2, #202	; 0xca
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2253      	movs	r2, #83	; 0x53
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f86f 	bl	800323e <RTC_EnterInitMode>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	22ff      	movs	r2, #255	; 0xff
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2204      	movs	r2, #4
 8003172:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e033      	b.n	80031e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800318c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f81e 	bl	80031ee <HAL_RTC_WaitForSynchro>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2204      	movs	r2, #4
 80031c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e00a      	b.n	80031e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}

080031ee <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003208:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800320a:	f7fe fd2d 	bl	8001c68 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003210:	e009      	b.n	8003226 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003212:	f7fe fd29 	bl	8001c68 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003220:	d901      	bls.n	8003226 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e007      	b.n	8003236 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ee      	beq.n	8003212 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d119      	bne.n	800328c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003262:	f7fe fd01 	bl	8001c68 <HAL_GetTick>
 8003266:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003268:	e009      	b.n	800327e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800326a:	f7fe fcfd 	bl	8001c68 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003278:	d901      	bls.n	800327e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e007      	b.n	800328e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80032a4:	e005      	b.n	80032b2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	3b0a      	subs	r3, #10
 80032b0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d8f6      	bhi.n	80032a6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b2db      	uxtb	r3, r3
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07b      	b.n	80033dc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f4:	d009      	beq.n	800330a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	61da      	str	r2, [r3, #28]
 80032fc:	e005      	b.n	800330a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe f89f 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0104 	and.w	r1, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0210 	and.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
    return;
 8003426:	e0d7      	b.n	80035d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_SPI_IRQHandler+0x66>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	09db      	lsrs	r3, r3, #7
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
    return;
 8003448:	e0c6      	b.n	80035d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_SPI_IRQHandler+0x8c>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80b4 	beq.w	80035d8 <HAL_SPI_IRQHandler+0x1f4>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ad 	beq.w	80035d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d023      	beq.n	80034d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d011      	beq.n	80034ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f043 0204 	orr.w	r2, r3, #4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	e00b      	b.n	80034d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
        return;
 80034d0:	e082      	b.n	80035d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d014      	beq.n	8003508 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0208 	orr.w	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04f      	beq.n	80035d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003544:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <HAL_SPI_IRQHandler+0x17e>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d034      	beq.n	80035cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0203 	bic.w	r2, r2, #3
 8003570:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_SPI_IRQHandler+0x1fc>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fcf0 	bl	8001f6c <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035aa:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_SPI_IRQHandler+0x1fc>)
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fcda 	bl	8001f6c <HAL_DMA_Abort_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80035ca:	e003      	b.n	80035d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f809 	bl	80035e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80035d2:	e000      	b.n	80035d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80035d4:	bf00      	nop
    return;
 80035d6:	bf00      	nop
  }
}
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	080035f9 	.word	0x080035f9

080035e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ffe6 	bl	80035e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd ff5e 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 fad4 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e04e      	b.n	8003776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_TIM_Base_Start_IT+0xc4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d01d      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_Base_Start_IT+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIM_Base_Start_IT+0xcc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_TIM_Base_Start_IT+0xd0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIM_Base_Start_IT+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_TIM_Base_Start_IT+0xd8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_Base_Start_IT+0xdc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40010400 	.word	0x40010400
 8003798:	40014000 	.word	0x40014000
 800379c:	40001800 	.word	0x40001800

080037a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0202 	mvn.w	r2, #2
 80037cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9f4 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9e6 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9f7 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0204 	mvn.w	r2, #4
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9ca 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9bc 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f9cd 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0208 	mvn.w	r2, #8
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2204      	movs	r2, #4
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9a0 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f992 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f9a3 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0210 	mvn.w	r2, #16
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2208      	movs	r2, #8
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f976 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f968 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f979 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0201 	mvn.w	r2, #1
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fd36 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fbac 	bl	80040a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f93e 	bl	8003bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0220 	mvn.w	r2, #32
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fb76 	bl	8004094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_ConfigClockSource+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0b3      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x180>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a00:	d03e      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0xd0>
 8003a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a06:	f200 8087 	bhi.w	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	f000 8085 	beq.w	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d87f      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a18:	2b70      	cmp	r3, #112	; 0x70
 8003a1a:	d01a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xa2>
 8003a1c:	2b70      	cmp	r3, #112	; 0x70
 8003a1e:	d87b      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a20:	2b60      	cmp	r3, #96	; 0x60
 8003a22:	d050      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x116>
 8003a24:	2b60      	cmp	r3, #96	; 0x60
 8003a26:	d877      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a28:	2b50      	cmp	r3, #80	; 0x50
 8003a2a:	d03c      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xf6>
 8003a2c:	2b50      	cmp	r3, #80	; 0x50
 8003a2e:	d873      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d058      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x136>
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d86f      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d064      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x156>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d86b      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d060      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x156>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d867      	bhi.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d05c      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x156>
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d05a      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a50:	e062      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f000 fa7b 	bl	8003f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
      break;
 8003a7e:	e04e      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6899      	ldr	r1, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f000 fa64 	bl	8003f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa2:	609a      	str	r2, [r3, #8]
      break;
 8003aa4:	e03b      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f000 f9d8 	bl	8003e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2150      	movs	r1, #80	; 0x50
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa31 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003ac4:	e02b      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 f9f7 	bl	8003ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2160      	movs	r1, #96	; 0x60
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fa21 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e01b      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 f9b8 	bl	8003e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2140      	movs	r1, #64	; 0x40
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fa11 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e00b      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f000 fa08 	bl	8003f26 <TIM_ITRx_SetConfig>
        break;
 8003b16:	e002      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e031      	b.n	8003bb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8f2 	bl	8003d4c <TIM_SlaveTimer_SetConfig>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e018      	b.n	8003bb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ba0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a40      	ldr	r2, [pc, #256]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d00f      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3d      	ldr	r2, [pc, #244]	; (8003d24 <TIM_Base_SetConfig+0x118>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3c      	ldr	r2, [pc, #240]	; (8003d28 <TIM_Base_SetConfig+0x11c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <TIM_Base_SetConfig+0x120>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d027      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	; (8003d24 <TIM_Base_SetConfig+0x118>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d023      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <TIM_Base_SetConfig+0x11c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <TIM_Base_SetConfig+0x120>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <TIM_Base_SetConfig+0x128>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <TIM_Base_SetConfig+0x130>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <TIM_Base_SetConfig+0x134>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <TIM_Base_SetConfig+0x138>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <TIM_Base_SetConfig+0x124>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800
 8003d40:	40001800 	.word	0x40001800
 8003d44:	40001c00 	.word	0x40001c00
 8003d48:	40002000 	.word	0x40002000

08003d4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b70      	cmp	r3, #112	; 0x70
 8003d90:	d01a      	beq.n	8003dc8 <TIM_SlaveTimer_SetConfig+0x7c>
 8003d92:	2b70      	cmp	r3, #112	; 0x70
 8003d94:	d860      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003d96:	2b60      	cmp	r3, #96	; 0x60
 8003d98:	d054      	beq.n	8003e44 <TIM_SlaveTimer_SetConfig+0xf8>
 8003d9a:	2b60      	cmp	r3, #96	; 0x60
 8003d9c:	d85c      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003d9e:	2b50      	cmp	r3, #80	; 0x50
 8003da0:	d046      	beq.n	8003e30 <TIM_SlaveTimer_SetConfig+0xe4>
 8003da2:	2b50      	cmp	r3, #80	; 0x50
 8003da4:	d858      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d019      	beq.n	8003dde <TIM_SlaveTimer_SetConfig+0x92>
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d854      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003dae:	2b30      	cmp	r3, #48	; 0x30
 8003db0:	d054      	beq.n	8003e5c <TIM_SlaveTimer_SetConfig+0x110>
 8003db2:	2b30      	cmp	r3, #48	; 0x30
 8003db4:	d850      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d050      	beq.n	8003e5c <TIM_SlaveTimer_SetConfig+0x110>
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d84c      	bhi.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04c      	beq.n	8003e5c <TIM_SlaveTimer_SetConfig+0x110>
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d04a      	beq.n	8003e5c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003dc6:	e047      	b.n	8003e58 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68d9      	ldr	r1, [r3, #12]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f000 f8c0 	bl	8003f5c <TIM_ETR_SetConfig>
      break;
 8003ddc:	e03f      	b.n	8003e5e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d101      	bne.n	8003dea <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e03a      	b.n	8003e60 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
      break;
 8003e2e:	e016      	b.n	8003e5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 f813 	bl	8003e68 <TIM_TI1_ConfigInputStage>
      break;
 8003e42:	e00c      	b.n	8003e5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 f838 	bl	8003ec6 <TIM_TI2_ConfigInputStage>
      break;
 8003e56:	e002      	b.n	8003e5e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003e5c:	bf00      	nop
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 030a 	bic.w	r3, r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0210 	bic.w	r2, r3, #16
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f043 0307 	orr.w	r3, r3, #7
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	021a      	lsls	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e05a      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d01d      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10c      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40010400 	.word	0x40010400
 800408c:	40014000 	.word	0x40014000
 8004090:	40001800 	.word	0x40001800

08004094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e03f      	b.n	800414e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd fa4e 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fc7b 	bl	80049fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08a      	sub	sp, #40	; 0x28
 800415a:	af02      	add	r7, sp, #8
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	d17c      	bne.n	8004270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_UART_Transmit+0x2c>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e075      	b.n	8004272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_UART_Transmit+0x3e>
 8004190:	2302      	movs	r3, #2
 8004192:	e06e      	b.n	8004272 <HAL_UART_Transmit+0x11c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041aa:	f7fd fd5d 	bl	8001c68 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c4:	d108      	bne.n	80041d8 <HAL_UART_Transmit+0x82>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e003      	b.n	80041e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041e8:	e02a      	b.n	8004240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa3d 	bl	8004674 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e036      	b.n	8004272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	3302      	adds	r3, #2
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e007      	b.n	8004232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1cf      	bne.n	80041ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fa0d 	bl	8004674 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e006      	b.n	8004272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d11d      	bne.n	80042d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive_IT+0x26>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e016      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Receive_IT+0x38>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e00f      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa1e 	bl	8004708 <UART_Start_Receive_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	e000      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_UART_IRQHandler+0x52>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fad1 	bl	80048ce <UART_Receive_IT>
      return;
 800432c:	e17c      	b.n	8004628 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80b1 	beq.w	8004498 <HAL_UART_IRQHandler+0x1bc>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_UART_IRQHandler+0x70>
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a6 	beq.w	8004498 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_UART_IRQHandler+0x90>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_UART_IRQHandler+0xb0>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0202 	orr.w	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_UART_IRQHandler+0xd0>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f043 0204 	orr.w	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00f      	beq.n	80043d6 <HAL_UART_IRQHandler+0xfa>
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_UART_IRQHandler+0xee>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 811f 	beq.w	800461e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_UART_IRQHandler+0x11e>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa6a 	bl	80048ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_UART_IRQHandler+0x146>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d031      	beq.n	8004486 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9aa 	bl	800477c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d123      	bne.n	800447e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004444:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4a77      	ldr	r2, [pc, #476]	; (8004630 <HAL_UART_IRQHandler+0x354>)
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fd86 	bl	8001f6c <HAL_DMA_Abort_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004474:	e00e      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8e6 	bl	8004648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00a      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8e2 	bl	8004648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e006      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8de 	bl	8004648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004492:	e0c4      	b.n	800461e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	bf00      	nop
    return;
 8004496:	e0c2      	b.n	800461e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 80a2 	bne.w	80045e6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 809c 	beq.w	80045e6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8096 	beq.w	80045e6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d14f      	bne.n	800457e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80044e8:	8a3b      	ldrh	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8099 	beq.w	8004622 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044f4:	8a3a      	ldrh	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	f080 8093 	bcs.w	8004622 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8a3a      	ldrh	r2, [r7, #16]
 8004500:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450c:	d02b      	beq.n	8004566 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0210 	bic.w	r2, r2, #16
 800455a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fc93 	bl	8001e8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800456e:	b29b      	uxth	r3, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f870 	bl	800465c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800457c:	e051      	b.n	8004622 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004586:	b29b      	uxth	r3, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d047      	beq.n	8004626 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004596:	8a7b      	ldrh	r3, [r7, #18]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d044      	beq.n	8004626 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045aa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0210 	bic.w	r2, r2, #16
 80045d8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045da:	8a7b      	ldrh	r3, [r7, #18]
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f83c 	bl	800465c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045e4:	e01f      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_UART_IRQHandler+0x326>
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8ff 	bl	80047fe <UART_Transmit_IT>
    return;
 8004600:	e012      	b.n	8004628 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_UART_IRQHandler+0x34c>
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f941 	bl	800489e <UART_EndTransmit_IT>
    return;
 800461c:	e004      	b.n	8004628 <HAL_UART_IRQHandler+0x34c>
    return;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <HAL_UART_IRQHandler+0x34c>
      return;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <HAL_UART_IRQHandler+0x34c>
      return;
 8004626:	bf00      	nop
  }
}
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	080047d7 	.word	0x080047d7

08004634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004684:	e02c      	b.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d028      	beq.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004694:	f7fd fae8 	bl	8001c68 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d21d      	bcs.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e00f      	b.n	8004700 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d0c3      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2222      	movs	r2, #34	; 0x22
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0220 	orr.w	r2, r2, #32
 800476c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004792:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0210 	bic.w	r2, r2, #16
 80047ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ff29 	bl	8004648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b21      	cmp	r3, #33	; 0x21
 8004810:	d13e      	bne.n	8004890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d114      	bne.n	8004846 <UART_Transmit_IT+0x48>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	e008      	b.n	8004858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6211      	str	r1, [r2, #32]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800487a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff feb8 	bl	8004634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b22      	cmp	r3, #34	; 0x22
 80048e0:	f040 8087 	bne.w	80049f2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d117      	bne.n	800491e <UART_Receive_IT+0x50>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d113      	bne.n	800491e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	b29a      	uxth	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
 800491c:	e026      	b.n	800496c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d007      	beq.n	8004942 <UART_Receive_IT+0x74>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <UART_Receive_IT+0x82>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e008      	b.n	8004962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4619      	mov	r1, r3
 800497a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800497c:	2b00      	cmp	r3, #0
 800497e:	d136      	bne.n	80049ee <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0220 	bic.w	r2, r2, #32
 800498e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800499e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10e      	bne.n	80049de <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0210 	bic.w	r2, r2, #16
 80049ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff fe40 	bl	800465c <HAL_UARTEx_RxEventCallback>
 80049dc:	e002      	b.n	80049e4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fb fdfc 	bl	80005dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e002      	b.n	80049f4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	b09f      	sub	sp, #124	; 0x7c
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	68d9      	ldr	r1, [r3, #12]
 8004a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	ea40 0301 	orr.w	r3, r0, r1
 8004a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a40:	f021 010c 	bic.w	r1, r1, #12
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5a:	6999      	ldr	r1, [r3, #24]
 8004a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	ea40 0301 	orr.w	r3, r0, r1
 8004a64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4bc5      	ldr	r3, [pc, #788]	; (8004d80 <UART_SetConfig+0x384>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d004      	beq.n	8004a7a <UART_SetConfig+0x7e>
 8004a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4bc3      	ldr	r3, [pc, #780]	; (8004d84 <UART_SetConfig+0x388>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d103      	bne.n	8004a82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a7a:	f7fe f89b 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8004a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8004a80:	e002      	b.n	8004a88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7fe f883 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8004a86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a90:	f040 80b6 	bne.w	8004c00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a96:	461c      	mov	r4, r3
 8004a98:	f04f 0500 	mov.w	r5, #0
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aac:	1912      	adds	r2, r2, r4
 8004aae:	eb45 0303 	adc.w	r3, r5, r3
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	00d9      	lsls	r1, r3, #3
 8004abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac0:	00d0      	lsls	r0, r2, #3
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	1911      	adds	r1, r2, r4
 8004ac8:	6639      	str	r1, [r7, #96]	; 0x60
 8004aca:	416b      	adcs	r3, r5
 8004acc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ae8:	f7fb fbca 	bl	8000280 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4ba5      	ldr	r3, [pc, #660]	; (8004d88 <UART_SetConfig+0x38c>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	011e      	lsls	r6, r3, #4
 8004afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afc:	461c      	mov	r4, r3
 8004afe:	f04f 0500 	mov.w	r5, #0
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	6339      	str	r1, [r7, #48]	; 0x30
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b12:	1912      	adds	r2, r2, r4
 8004b14:	eb45 0303 	adc.w	r3, r5, r3
 8004b18:	f04f 0000 	mov.w	r0, #0
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	00d9      	lsls	r1, r3, #3
 8004b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b26:	00d0      	lsls	r0, r2, #3
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	1911      	adds	r1, r2, r4
 8004b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b30:	416b      	adcs	r3, r5
 8004b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	1891      	adds	r1, r2, r2
 8004b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b42:	415b      	adcs	r3, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b4e:	f7fb fb97 	bl	8000280 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b8c      	ldr	r3, [pc, #560]	; (8004d88 <UART_SetConfig+0x38c>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <UART_SetConfig+0x38c>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b78:	441e      	add	r6, r3
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	1894      	adds	r4, r2, r2
 8004b88:	623c      	str	r4, [r7, #32]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b92:	1812      	adds	r2, r2, r0
 8004b94:	eb41 0303 	adc.w	r3, r1, r3
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	00dd      	lsls	r5, r3, #3
 8004ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ba6:	00d4      	lsls	r4, r2, #3
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	1814      	adds	r4, r2, r0
 8004bae:	653c      	str	r4, [r7, #80]	; 0x50
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	1891      	adds	r1, r2, r2
 8004bc0:	61b9      	str	r1, [r7, #24]
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004bce:	f7fb fb57 	bl	8000280 <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4b6c      	ldr	r3, [pc, #432]	; (8004d88 <UART_SetConfig+0x38c>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2164      	movs	r1, #100	; 0x64
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a67      	ldr	r2, [pc, #412]	; (8004d88 <UART_SetConfig+0x38c>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 0207 	and.w	r2, r3, #7
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4432      	add	r2, r6
 8004bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bfe:	e0b9      	b.n	8004d74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c02:	461c      	mov	r4, r3
 8004c04:	f04f 0500 	mov.w	r5, #0
 8004c08:	4622      	mov	r2, r4
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	6139      	str	r1, [r7, #16]
 8004c10:	415b      	adcs	r3, r3
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c18:	1912      	adds	r2, r2, r4
 8004c1a:	eb45 0303 	adc.w	r3, r5, r3
 8004c1e:	f04f 0000 	mov.w	r0, #0
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	00d9      	lsls	r1, r3, #3
 8004c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2c:	00d0      	lsls	r0, r2, #3
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	eb12 0804 	adds.w	r8, r2, r4
 8004c36:	eb43 0905 	adc.w	r9, r3, r5
 8004c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	008b      	lsls	r3, r1, #2
 8004c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c52:	0082      	lsls	r2, r0, #2
 8004c54:	4640      	mov	r0, r8
 8004c56:	4649      	mov	r1, r9
 8004c58:	f7fb fb12 	bl	8000280 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <UART_SetConfig+0x38c>)
 8004c62:	fba3 2302 	umull	r2, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	011e      	lsls	r6, r3, #4
 8004c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	1894      	adds	r4, r2, r2
 8004c78:	60bc      	str	r4, [r7, #8]
 8004c7a:	415b      	adcs	r3, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c82:	1812      	adds	r2, r2, r0
 8004c84:	eb41 0303 	adc.w	r3, r1, r3
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	f04f 0500 	mov.w	r5, #0
 8004c90:	00dd      	lsls	r5, r3, #3
 8004c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c96:	00d4      	lsls	r4, r2, #3
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	1814      	adds	r4, r2, r0
 8004c9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	008b      	lsls	r3, r1, #2
 8004cb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cbc:	0082      	lsls	r2, r0, #2
 8004cbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004cc2:	f7fb fadd 	bl	8000280 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <UART_SetConfig+0x38c>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <UART_SetConfig+0x38c>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cea:	441e      	add	r6, r3
 8004cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	1894      	adds	r4, r2, r2
 8004cfa:	603c      	str	r4, [r7, #0]
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d04:	1812      	adds	r2, r2, r0
 8004d06:	eb41 0303 	adc.w	r3, r1, r3
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	f04f 0500 	mov.w	r5, #0
 8004d12:	00dd      	lsls	r5, r3, #3
 8004d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d18:	00d4      	lsls	r4, r2, #3
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	eb12 0a00 	adds.w	sl, r2, r0
 8004d22:	eb43 0b01 	adc.w	fp, r3, r1
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d3e:	0082      	lsls	r2, r0, #2
 8004d40:	4650      	mov	r0, sl
 8004d42:	4659      	mov	r1, fp
 8004d44:	f7fb fa9c 	bl	8000280 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <UART_SetConfig+0x38c>)
 8004d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2164      	movs	r1, #100	; 0x64
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	3332      	adds	r3, #50	; 0x32
 8004d60:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <UART_SetConfig+0x38c>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4432      	add	r2, r6
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	bf00      	nop
 8004d76:	377c      	adds	r7, #124	; 0x7c
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40011000 	.word	0x40011000
 8004d84:	40011400 	.word	0x40011400
 8004d88:	51eb851f 	.word	0x51eb851f

08004d8c <__errno>:
 8004d8c:	4b01      	ldr	r3, [pc, #4]	; (8004d94 <__errno+0x8>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000014 	.word	0x20000014

08004d98 <__libc_init_array>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	4d0d      	ldr	r5, [pc, #52]	; (8004dd0 <__libc_init_array+0x38>)
 8004d9c:	4c0d      	ldr	r4, [pc, #52]	; (8004dd4 <__libc_init_array+0x3c>)
 8004d9e:	1b64      	subs	r4, r4, r5
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	2600      	movs	r6, #0
 8004da4:	42a6      	cmp	r6, r4
 8004da6:	d109      	bne.n	8004dbc <__libc_init_array+0x24>
 8004da8:	4d0b      	ldr	r5, [pc, #44]	; (8004dd8 <__libc_init_array+0x40>)
 8004daa:	4c0c      	ldr	r4, [pc, #48]	; (8004ddc <__libc_init_array+0x44>)
 8004dac:	f000 fff4 	bl	8005d98 <_init>
 8004db0:	1b64      	subs	r4, r4, r5
 8004db2:	10a4      	asrs	r4, r4, #2
 8004db4:	2600      	movs	r6, #0
 8004db6:	42a6      	cmp	r6, r4
 8004db8:	d105      	bne.n	8004dc6 <__libc_init_array+0x2e>
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc0:	4798      	blx	r3
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e7ee      	b.n	8004da4 <__libc_init_array+0xc>
 8004dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dca:	4798      	blx	r3
 8004dcc:	3601      	adds	r6, #1
 8004dce:	e7f2      	b.n	8004db6 <__libc_init_array+0x1e>
 8004dd0:	08005f60 	.word	0x08005f60
 8004dd4:	08005f60 	.word	0x08005f60
 8004dd8:	08005f60 	.word	0x08005f60
 8004ddc:	08005f64 	.word	0x08005f64

08004de0 <malloc>:
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <malloc+0xc>)
 8004de2:	4601      	mov	r1, r0
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	f000 b85b 	b.w	8004ea0 <_malloc_r>
 8004dea:	bf00      	nop
 8004dec:	20000014 	.word	0x20000014

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <_free_r>:
 8004e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e02:	2900      	cmp	r1, #0
 8004e04:	d048      	beq.n	8004e98 <_free_r+0x98>
 8004e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e0a:	9001      	str	r0, [sp, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e12:	bfb8      	it	lt
 8004e14:	18e4      	addlt	r4, r4, r3
 8004e16:	f000 fc91 	bl	800573c <__malloc_lock>
 8004e1a:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <_free_r+0x9c>)
 8004e1c:	9801      	ldr	r0, [sp, #4]
 8004e1e:	6813      	ldr	r3, [r2, #0]
 8004e20:	4615      	mov	r5, r2
 8004e22:	b933      	cbnz	r3, 8004e32 <_free_r+0x32>
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	6014      	str	r4, [r2, #0]
 8004e28:	b003      	add	sp, #12
 8004e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e2e:	f000 bc8b 	b.w	8005748 <__malloc_unlock>
 8004e32:	42a3      	cmp	r3, r4
 8004e34:	d90b      	bls.n	8004e4e <_free_r+0x4e>
 8004e36:	6821      	ldr	r1, [r4, #0]
 8004e38:	1862      	adds	r2, r4, r1
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	bf04      	itt	eq
 8004e3e:	681a      	ldreq	r2, [r3, #0]
 8004e40:	685b      	ldreq	r3, [r3, #4]
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	bf04      	itt	eq
 8004e46:	1852      	addeq	r2, r2, r1
 8004e48:	6022      	streq	r2, [r4, #0]
 8004e4a:	602c      	str	r4, [r5, #0]
 8004e4c:	e7ec      	b.n	8004e28 <_free_r+0x28>
 8004e4e:	461a      	mov	r2, r3
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b10b      	cbz	r3, 8004e58 <_free_r+0x58>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d9fa      	bls.n	8004e4e <_free_r+0x4e>
 8004e58:	6811      	ldr	r1, [r2, #0]
 8004e5a:	1855      	adds	r5, r2, r1
 8004e5c:	42a5      	cmp	r5, r4
 8004e5e:	d10b      	bne.n	8004e78 <_free_r+0x78>
 8004e60:	6824      	ldr	r4, [r4, #0]
 8004e62:	4421      	add	r1, r4
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	d1dd      	bne.n	8004e28 <_free_r+0x28>
 8004e6c:	681c      	ldr	r4, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6053      	str	r3, [r2, #4]
 8004e72:	4421      	add	r1, r4
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	e7d7      	b.n	8004e28 <_free_r+0x28>
 8004e78:	d902      	bls.n	8004e80 <_free_r+0x80>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6003      	str	r3, [r0, #0]
 8004e7e:	e7d3      	b.n	8004e28 <_free_r+0x28>
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	1961      	adds	r1, r4, r5
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf04      	itt	eq
 8004e88:	6819      	ldreq	r1, [r3, #0]
 8004e8a:	685b      	ldreq	r3, [r3, #4]
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	bf04      	itt	eq
 8004e90:	1949      	addeq	r1, r1, r5
 8004e92:	6021      	streq	r1, [r4, #0]
 8004e94:	6054      	str	r4, [r2, #4]
 8004e96:	e7c7      	b.n	8004e28 <_free_r+0x28>
 8004e98:	b003      	add	sp, #12
 8004e9a:	bd30      	pop	{r4, r5, pc}
 8004e9c:	200000a4 	.word	0x200000a4

08004ea0 <_malloc_r>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	1ccd      	adds	r5, r1, #3
 8004ea4:	f025 0503 	bic.w	r5, r5, #3
 8004ea8:	3508      	adds	r5, #8
 8004eaa:	2d0c      	cmp	r5, #12
 8004eac:	bf38      	it	cc
 8004eae:	250c      	movcc	r5, #12
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	db01      	blt.n	8004eba <_malloc_r+0x1a>
 8004eb6:	42a9      	cmp	r1, r5
 8004eb8:	d903      	bls.n	8004ec2 <_malloc_r+0x22>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec2:	f000 fc3b 	bl	800573c <__malloc_lock>
 8004ec6:	4921      	ldr	r1, [pc, #132]	; (8004f4c <_malloc_r+0xac>)
 8004ec8:	680a      	ldr	r2, [r1, #0]
 8004eca:	4614      	mov	r4, r2
 8004ecc:	b99c      	cbnz	r4, 8004ef6 <_malloc_r+0x56>
 8004ece:	4f20      	ldr	r7, [pc, #128]	; (8004f50 <_malloc_r+0xb0>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	b923      	cbnz	r3, 8004ede <_malloc_r+0x3e>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f8ca 	bl	8005070 <_sbrk_r>
 8004edc:	6038      	str	r0, [r7, #0]
 8004ede:	4629      	mov	r1, r5
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f8c5 	bl	8005070 <_sbrk_r>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	d123      	bne.n	8004f32 <_malloc_r+0x92>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f000 fc2a 	bl	8005748 <__malloc_unlock>
 8004ef4:	e7e3      	b.n	8004ebe <_malloc_r+0x1e>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	1b5b      	subs	r3, r3, r5
 8004efa:	d417      	bmi.n	8004f2c <_malloc_r+0x8c>
 8004efc:	2b0b      	cmp	r3, #11
 8004efe:	d903      	bls.n	8004f08 <_malloc_r+0x68>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	441c      	add	r4, r3
 8004f04:	6025      	str	r5, [r4, #0]
 8004f06:	e004      	b.n	8004f12 <_malloc_r+0x72>
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	42a2      	cmp	r2, r4
 8004f0c:	bf0c      	ite	eq
 8004f0e:	600b      	streq	r3, [r1, #0]
 8004f10:	6053      	strne	r3, [r2, #4]
 8004f12:	4630      	mov	r0, r6
 8004f14:	f000 fc18 	bl	8005748 <__malloc_unlock>
 8004f18:	f104 000b 	add.w	r0, r4, #11
 8004f1c:	1d23      	adds	r3, r4, #4
 8004f1e:	f020 0007 	bic.w	r0, r0, #7
 8004f22:	1ac2      	subs	r2, r0, r3
 8004f24:	d0cc      	beq.n	8004ec0 <_malloc_r+0x20>
 8004f26:	1a1b      	subs	r3, r3, r0
 8004f28:	50a3      	str	r3, [r4, r2]
 8004f2a:	e7c9      	b.n	8004ec0 <_malloc_r+0x20>
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	6864      	ldr	r4, [r4, #4]
 8004f30:	e7cc      	b.n	8004ecc <_malloc_r+0x2c>
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	f024 0403 	bic.w	r4, r4, #3
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d0e3      	beq.n	8004f04 <_malloc_r+0x64>
 8004f3c:	1a21      	subs	r1, r4, r0
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f896 	bl	8005070 <_sbrk_r>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d1dd      	bne.n	8004f04 <_malloc_r+0x64>
 8004f48:	e7cf      	b.n	8004eea <_malloc_r+0x4a>
 8004f4a:	bf00      	nop
 8004f4c:	200000a4 	.word	0x200000a4
 8004f50:	200000a8 	.word	0x200000a8

08004f54 <iprintf>:
 8004f54:	b40f      	push	{r0, r1, r2, r3}
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <iprintf+0x2c>)
 8004f58:	b513      	push	{r0, r1, r4, lr}
 8004f5a:	681c      	ldr	r4, [r3, #0]
 8004f5c:	b124      	cbz	r4, 8004f68 <iprintf+0x14>
 8004f5e:	69a3      	ldr	r3, [r4, #24]
 8004f60:	b913      	cbnz	r3, 8004f68 <iprintf+0x14>
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fad4 	bl	8005510 <__sinit>
 8004f68:	ab05      	add	r3, sp, #20
 8004f6a:	9a04      	ldr	r2, [sp, #16]
 8004f6c:	68a1      	ldr	r1, [r4, #8]
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fc19 	bl	80057a8 <_vfiprintf_r>
 8004f76:	b002      	add	sp, #8
 8004f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f7c:	b004      	add	sp, #16
 8004f7e:	4770      	bx	lr
 8004f80:	20000014 	.word	0x20000014

08004f84 <_puts_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460e      	mov	r6, r1
 8004f88:	4605      	mov	r5, r0
 8004f8a:	b118      	cbz	r0, 8004f94 <_puts_r+0x10>
 8004f8c:	6983      	ldr	r3, [r0, #24]
 8004f8e:	b90b      	cbnz	r3, 8004f94 <_puts_r+0x10>
 8004f90:	f000 fabe 	bl	8005510 <__sinit>
 8004f94:	69ab      	ldr	r3, [r5, #24]
 8004f96:	68ac      	ldr	r4, [r5, #8]
 8004f98:	b913      	cbnz	r3, 8004fa0 <_puts_r+0x1c>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 fab8 	bl	8005510 <__sinit>
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <_puts_r+0xd0>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d120      	bne.n	8004fe8 <_puts_r+0x64>
 8004fa6:	686c      	ldr	r4, [r5, #4]
 8004fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004faa:	07db      	lsls	r3, r3, #31
 8004fac:	d405      	bmi.n	8004fba <_puts_r+0x36>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	0598      	lsls	r0, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <_puts_r+0x36>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb6:	f000 fb49 	bl	800564c <__retarget_lock_acquire_recursive>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	0719      	lsls	r1, r3, #28
 8004fbe:	d51d      	bpl.n	8004ffc <_puts_r+0x78>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	b1db      	cbz	r3, 8004ffc <_puts_r+0x78>
 8004fc4:	3e01      	subs	r6, #1
 8004fc6:	68a3      	ldr	r3, [r4, #8]
 8004fc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	bb39      	cbnz	r1, 8005022 <_puts_r+0x9e>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da38      	bge.n	8005048 <_puts_r+0xc4>
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	210a      	movs	r1, #10
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 f89c 	bl	8005118 <__swbuf_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d011      	beq.n	8005008 <_puts_r+0x84>
 8004fe4:	250a      	movs	r5, #10
 8004fe6:	e011      	b.n	800500c <_puts_r+0x88>
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <_puts_r+0xd4>)
 8004fea:	429c      	cmp	r4, r3
 8004fec:	d101      	bne.n	8004ff2 <_puts_r+0x6e>
 8004fee:	68ac      	ldr	r4, [r5, #8]
 8004ff0:	e7da      	b.n	8004fa8 <_puts_r+0x24>
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <_puts_r+0xd8>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	bf08      	it	eq
 8004ff8:	68ec      	ldreq	r4, [r5, #12]
 8004ffa:	e7d5      	b.n	8004fa8 <_puts_r+0x24>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f8ee 	bl	80051e0 <__swsetup_r>
 8005004:	2800      	cmp	r0, #0
 8005006:	d0dd      	beq.n	8004fc4 <_puts_r+0x40>
 8005008:	f04f 35ff 	mov.w	r5, #4294967295
 800500c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800500e:	07da      	lsls	r2, r3, #31
 8005010:	d405      	bmi.n	800501e <_puts_r+0x9a>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	059b      	lsls	r3, r3, #22
 8005016:	d402      	bmi.n	800501e <_puts_r+0x9a>
 8005018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501a:	f000 fb18 	bl	800564e <__retarget_lock_release_recursive>
 800501e:	4628      	mov	r0, r5
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	2b00      	cmp	r3, #0
 8005024:	da04      	bge.n	8005030 <_puts_r+0xac>
 8005026:	69a2      	ldr	r2, [r4, #24]
 8005028:	429a      	cmp	r2, r3
 800502a:	dc06      	bgt.n	800503a <_puts_r+0xb6>
 800502c:	290a      	cmp	r1, #10
 800502e:	d004      	beq.n	800503a <_puts_r+0xb6>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	7019      	strb	r1, [r3, #0]
 8005038:	e7c5      	b.n	8004fc6 <_puts_r+0x42>
 800503a:	4622      	mov	r2, r4
 800503c:	4628      	mov	r0, r5
 800503e:	f000 f86b 	bl	8005118 <__swbuf_r>
 8005042:	3001      	adds	r0, #1
 8005044:	d1bf      	bne.n	8004fc6 <_puts_r+0x42>
 8005046:	e7df      	b.n	8005008 <_puts_r+0x84>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	250a      	movs	r5, #10
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	701d      	strb	r5, [r3, #0]
 8005052:	e7db      	b.n	800500c <_puts_r+0x88>
 8005054:	08005ee4 	.word	0x08005ee4
 8005058:	08005f04 	.word	0x08005f04
 800505c:	08005ec4 	.word	0x08005ec4

08005060 <puts>:
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <puts+0xc>)
 8005062:	4601      	mov	r1, r0
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f7ff bf8d 	b.w	8004f84 <_puts_r>
 800506a:	bf00      	nop
 800506c:	20000014 	.word	0x20000014

08005070 <_sbrk_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d06      	ldr	r5, [pc, #24]	; (800508c <_sbrk_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fc fd4c 	bl	8001b18 <_sbrk>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_sbrk_r+0x1a>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_sbrk_r+0x1a>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20000484 	.word	0x20000484

08005090 <__sread>:
 8005090:	b510      	push	{r4, lr}
 8005092:	460c      	mov	r4, r1
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	f000 fe4a 	bl	8005d30 <_read_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	bfab      	itete	ge
 80050a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050a2:	89a3      	ldrhlt	r3, [r4, #12]
 80050a4:	181b      	addge	r3, r3, r0
 80050a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050aa:	bfac      	ite	ge
 80050ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ae:	81a3      	strhlt	r3, [r4, #12]
 80050b0:	bd10      	pop	{r4, pc}

080050b2 <__swrite>:
 80050b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	461f      	mov	r7, r3
 80050b8:	898b      	ldrh	r3, [r1, #12]
 80050ba:	05db      	lsls	r3, r3, #23
 80050bc:	4605      	mov	r5, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	4616      	mov	r6, r2
 80050c2:	d505      	bpl.n	80050d0 <__swrite+0x1e>
 80050c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c8:	2302      	movs	r3, #2
 80050ca:	2200      	movs	r2, #0
 80050cc:	f000 fac0 	bl	8005650 <_lseek_r>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	4632      	mov	r2, r6
 80050de:	463b      	mov	r3, r7
 80050e0:	4628      	mov	r0, r5
 80050e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e6:	f000 b869 	b.w	80051bc <_write_r>

080050ea <__sseek>:
 80050ea:	b510      	push	{r4, lr}
 80050ec:	460c      	mov	r4, r1
 80050ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f2:	f000 faad 	bl	8005650 <_lseek_r>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	bf15      	itete	ne
 80050fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80050fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005106:	81a3      	strheq	r3, [r4, #12]
 8005108:	bf18      	it	ne
 800510a:	81a3      	strhne	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__sclose>:
 800510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005112:	f000 b8d3 	b.w	80052bc <_close_r>
	...

08005118 <__swbuf_r>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	460e      	mov	r6, r1
 800511c:	4614      	mov	r4, r2
 800511e:	4605      	mov	r5, r0
 8005120:	b118      	cbz	r0, 800512a <__swbuf_r+0x12>
 8005122:	6983      	ldr	r3, [r0, #24]
 8005124:	b90b      	cbnz	r3, 800512a <__swbuf_r+0x12>
 8005126:	f000 f9f3 	bl	8005510 <__sinit>
 800512a:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <__swbuf_r+0x98>)
 800512c:	429c      	cmp	r4, r3
 800512e:	d12b      	bne.n	8005188 <__swbuf_r+0x70>
 8005130:	686c      	ldr	r4, [r5, #4]
 8005132:	69a3      	ldr	r3, [r4, #24]
 8005134:	60a3      	str	r3, [r4, #8]
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	071a      	lsls	r2, r3, #28
 800513a:	d52f      	bpl.n	800519c <__swbuf_r+0x84>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	b36b      	cbz	r3, 800519c <__swbuf_r+0x84>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	1ac0      	subs	r0, r0, r3
 8005146:	6963      	ldr	r3, [r4, #20]
 8005148:	b2f6      	uxtb	r6, r6
 800514a:	4283      	cmp	r3, r0
 800514c:	4637      	mov	r7, r6
 800514e:	dc04      	bgt.n	800515a <__swbuf_r+0x42>
 8005150:	4621      	mov	r1, r4
 8005152:	4628      	mov	r0, r5
 8005154:	f000 f948 	bl	80053e8 <_fflush_r>
 8005158:	bb30      	cbnz	r0, 80051a8 <__swbuf_r+0x90>
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	3b01      	subs	r3, #1
 800515e:	60a3      	str	r3, [r4, #8]
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	6022      	str	r2, [r4, #0]
 8005166:	701e      	strb	r6, [r3, #0]
 8005168:	6963      	ldr	r3, [r4, #20]
 800516a:	3001      	adds	r0, #1
 800516c:	4283      	cmp	r3, r0
 800516e:	d004      	beq.n	800517a <__swbuf_r+0x62>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	07db      	lsls	r3, r3, #31
 8005174:	d506      	bpl.n	8005184 <__swbuf_r+0x6c>
 8005176:	2e0a      	cmp	r6, #10
 8005178:	d104      	bne.n	8005184 <__swbuf_r+0x6c>
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 f933 	bl	80053e8 <_fflush_r>
 8005182:	b988      	cbnz	r0, 80051a8 <__swbuf_r+0x90>
 8005184:	4638      	mov	r0, r7
 8005186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <__swbuf_r+0x9c>)
 800518a:	429c      	cmp	r4, r3
 800518c:	d101      	bne.n	8005192 <__swbuf_r+0x7a>
 800518e:	68ac      	ldr	r4, [r5, #8]
 8005190:	e7cf      	b.n	8005132 <__swbuf_r+0x1a>
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <__swbuf_r+0xa0>)
 8005194:	429c      	cmp	r4, r3
 8005196:	bf08      	it	eq
 8005198:	68ec      	ldreq	r4, [r5, #12]
 800519a:	e7ca      	b.n	8005132 <__swbuf_r+0x1a>
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 f81e 	bl	80051e0 <__swsetup_r>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d0cb      	beq.n	8005140 <__swbuf_r+0x28>
 80051a8:	f04f 37ff 	mov.w	r7, #4294967295
 80051ac:	e7ea      	b.n	8005184 <__swbuf_r+0x6c>
 80051ae:	bf00      	nop
 80051b0:	08005ee4 	.word	0x08005ee4
 80051b4:	08005f04 	.word	0x08005f04
 80051b8:	08005ec4 	.word	0x08005ec4

080051bc <_write_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	; (80051dc <_write_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fb fb14 	bl	80007f8 <_write>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_write_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_write_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000484 	.word	0x20000484

080051e0 <__swsetup_r>:
 80051e0:	4b32      	ldr	r3, [pc, #200]	; (80052ac <__swsetup_r+0xcc>)
 80051e2:	b570      	push	{r4, r5, r6, lr}
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	4606      	mov	r6, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	b125      	cbz	r5, 80051f6 <__swsetup_r+0x16>
 80051ec:	69ab      	ldr	r3, [r5, #24]
 80051ee:	b913      	cbnz	r3, 80051f6 <__swsetup_r+0x16>
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f98d 	bl	8005510 <__sinit>
 80051f6:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <__swsetup_r+0xd0>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d10f      	bne.n	800521c <__swsetup_r+0x3c>
 80051fc:	686c      	ldr	r4, [r5, #4]
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	0719      	lsls	r1, r3, #28
 8005206:	d42c      	bmi.n	8005262 <__swsetup_r+0x82>
 8005208:	06dd      	lsls	r5, r3, #27
 800520a:	d411      	bmi.n	8005230 <__swsetup_r+0x50>
 800520c:	2309      	movs	r3, #9
 800520e:	6033      	str	r3, [r6, #0]
 8005210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	f04f 30ff 	mov.w	r0, #4294967295
 800521a:	e03e      	b.n	800529a <__swsetup_r+0xba>
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <__swsetup_r+0xd4>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <__swsetup_r+0x46>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7eb      	b.n	80051fe <__swsetup_r+0x1e>
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <__swsetup_r+0xd8>)
 8005228:	429c      	cmp	r4, r3
 800522a:	bf08      	it	eq
 800522c:	68ec      	ldreq	r4, [r5, #12]
 800522e:	e7e6      	b.n	80051fe <__swsetup_r+0x1e>
 8005230:	0758      	lsls	r0, r3, #29
 8005232:	d512      	bpl.n	800525a <__swsetup_r+0x7a>
 8005234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005236:	b141      	cbz	r1, 800524a <__swsetup_r+0x6a>
 8005238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800523c:	4299      	cmp	r1, r3
 800523e:	d002      	beq.n	8005246 <__swsetup_r+0x66>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff fddd 	bl	8004e00 <_free_r>
 8005246:	2300      	movs	r3, #0
 8005248:	6363      	str	r3, [r4, #52]	; 0x34
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	2300      	movs	r3, #0
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	b94b      	cbnz	r3, 800527a <__swsetup_r+0x9a>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800526c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005270:	d003      	beq.n	800527a <__swsetup_r+0x9a>
 8005272:	4621      	mov	r1, r4
 8005274:	4630      	mov	r0, r6
 8005276:	f000 fa21 	bl	80056bc <__smakebuf_r>
 800527a:	89a0      	ldrh	r0, [r4, #12]
 800527c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005280:	f010 0301 	ands.w	r3, r0, #1
 8005284:	d00a      	beq.n	800529c <__swsetup_r+0xbc>
 8005286:	2300      	movs	r3, #0
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	6963      	ldr	r3, [r4, #20]
 800528c:	425b      	negs	r3, r3
 800528e:	61a3      	str	r3, [r4, #24]
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b943      	cbnz	r3, 80052a6 <__swsetup_r+0xc6>
 8005294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005298:	d1ba      	bne.n	8005210 <__swsetup_r+0x30>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	0781      	lsls	r1, r0, #30
 800529e:	bf58      	it	pl
 80052a0:	6963      	ldrpl	r3, [r4, #20]
 80052a2:	60a3      	str	r3, [r4, #8]
 80052a4:	e7f4      	b.n	8005290 <__swsetup_r+0xb0>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e7f7      	b.n	800529a <__swsetup_r+0xba>
 80052aa:	bf00      	nop
 80052ac:	20000014 	.word	0x20000014
 80052b0:	08005ee4 	.word	0x08005ee4
 80052b4:	08005f04 	.word	0x08005f04
 80052b8:	08005ec4 	.word	0x08005ec4

080052bc <_close_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d06      	ldr	r5, [pc, #24]	; (80052d8 <_close_r+0x1c>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	f7fc fbf1 	bl	8001aae <_close>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_close_r+0x1a>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_close_r+0x1a>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	20000484 	.word	0x20000484

080052dc <__sflush_r>:
 80052dc:	898a      	ldrh	r2, [r1, #12]
 80052de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e2:	4605      	mov	r5, r0
 80052e4:	0710      	lsls	r0, r2, #28
 80052e6:	460c      	mov	r4, r1
 80052e8:	d458      	bmi.n	800539c <__sflush_r+0xc0>
 80052ea:	684b      	ldr	r3, [r1, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dc05      	bgt.n	80052fc <__sflush_r+0x20>
 80052f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dc02      	bgt.n	80052fc <__sflush_r+0x20>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052fe:	2e00      	cmp	r6, #0
 8005300:	d0f9      	beq.n	80052f6 <__sflush_r+0x1a>
 8005302:	2300      	movs	r3, #0
 8005304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005308:	682f      	ldr	r7, [r5, #0]
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	d032      	beq.n	8005374 <__sflush_r+0x98>
 800530e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	075a      	lsls	r2, r3, #29
 8005314:	d505      	bpl.n	8005322 <__sflush_r+0x46>
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	1ac0      	subs	r0, r0, r3
 800531a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800531c:	b10b      	cbz	r3, 8005322 <__sflush_r+0x46>
 800531e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005320:	1ac0      	subs	r0, r0, r3
 8005322:	2300      	movs	r3, #0
 8005324:	4602      	mov	r2, r0
 8005326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005328:	6a21      	ldr	r1, [r4, #32]
 800532a:	4628      	mov	r0, r5
 800532c:	47b0      	blx	r6
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	d106      	bne.n	8005342 <__sflush_r+0x66>
 8005334:	6829      	ldr	r1, [r5, #0]
 8005336:	291d      	cmp	r1, #29
 8005338:	d82c      	bhi.n	8005394 <__sflush_r+0xb8>
 800533a:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <__sflush_r+0x108>)
 800533c:	40ca      	lsrs	r2, r1
 800533e:	07d6      	lsls	r6, r2, #31
 8005340:	d528      	bpl.n	8005394 <__sflush_r+0xb8>
 8005342:	2200      	movs	r2, #0
 8005344:	6062      	str	r2, [r4, #4]
 8005346:	04d9      	lsls	r1, r3, #19
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	6022      	str	r2, [r4, #0]
 800534c:	d504      	bpl.n	8005358 <__sflush_r+0x7c>
 800534e:	1c42      	adds	r2, r0, #1
 8005350:	d101      	bne.n	8005356 <__sflush_r+0x7a>
 8005352:	682b      	ldr	r3, [r5, #0]
 8005354:	b903      	cbnz	r3, 8005358 <__sflush_r+0x7c>
 8005356:	6560      	str	r0, [r4, #84]	; 0x54
 8005358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800535a:	602f      	str	r7, [r5, #0]
 800535c:	2900      	cmp	r1, #0
 800535e:	d0ca      	beq.n	80052f6 <__sflush_r+0x1a>
 8005360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005364:	4299      	cmp	r1, r3
 8005366:	d002      	beq.n	800536e <__sflush_r+0x92>
 8005368:	4628      	mov	r0, r5
 800536a:	f7ff fd49 	bl	8004e00 <_free_r>
 800536e:	2000      	movs	r0, #0
 8005370:	6360      	str	r0, [r4, #52]	; 0x34
 8005372:	e7c1      	b.n	80052f8 <__sflush_r+0x1c>
 8005374:	6a21      	ldr	r1, [r4, #32]
 8005376:	2301      	movs	r3, #1
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	1c41      	adds	r1, r0, #1
 800537e:	d1c7      	bne.n	8005310 <__sflush_r+0x34>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0c4      	beq.n	8005310 <__sflush_r+0x34>
 8005386:	2b1d      	cmp	r3, #29
 8005388:	d001      	beq.n	800538e <__sflush_r+0xb2>
 800538a:	2b16      	cmp	r3, #22
 800538c:	d101      	bne.n	8005392 <__sflush_r+0xb6>
 800538e:	602f      	str	r7, [r5, #0]
 8005390:	e7b1      	b.n	80052f6 <__sflush_r+0x1a>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	e7ad      	b.n	80052f8 <__sflush_r+0x1c>
 800539c:	690f      	ldr	r7, [r1, #16]
 800539e:	2f00      	cmp	r7, #0
 80053a0:	d0a9      	beq.n	80052f6 <__sflush_r+0x1a>
 80053a2:	0793      	lsls	r3, r2, #30
 80053a4:	680e      	ldr	r6, [r1, #0]
 80053a6:	bf08      	it	eq
 80053a8:	694b      	ldreq	r3, [r1, #20]
 80053aa:	600f      	str	r7, [r1, #0]
 80053ac:	bf18      	it	ne
 80053ae:	2300      	movne	r3, #0
 80053b0:	eba6 0807 	sub.w	r8, r6, r7
 80053b4:	608b      	str	r3, [r1, #8]
 80053b6:	f1b8 0f00 	cmp.w	r8, #0
 80053ba:	dd9c      	ble.n	80052f6 <__sflush_r+0x1a>
 80053bc:	6a21      	ldr	r1, [r4, #32]
 80053be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053c0:	4643      	mov	r3, r8
 80053c2:	463a      	mov	r2, r7
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b0      	blx	r6
 80053c8:	2800      	cmp	r0, #0
 80053ca:	dc06      	bgt.n	80053da <__sflush_r+0xfe>
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	e78e      	b.n	80052f8 <__sflush_r+0x1c>
 80053da:	4407      	add	r7, r0
 80053dc:	eba8 0800 	sub.w	r8, r8, r0
 80053e0:	e7e9      	b.n	80053b6 <__sflush_r+0xda>
 80053e2:	bf00      	nop
 80053e4:	20400001 	.word	0x20400001

080053e8 <_fflush_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	690b      	ldr	r3, [r1, #16]
 80053ec:	4605      	mov	r5, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	b913      	cbnz	r3, 80053f8 <_fflush_r+0x10>
 80053f2:	2500      	movs	r5, #0
 80053f4:	4628      	mov	r0, r5
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	b118      	cbz	r0, 8005402 <_fflush_r+0x1a>
 80053fa:	6983      	ldr	r3, [r0, #24]
 80053fc:	b90b      	cbnz	r3, 8005402 <_fflush_r+0x1a>
 80053fe:	f000 f887 	bl	8005510 <__sinit>
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <_fflush_r+0x6c>)
 8005404:	429c      	cmp	r4, r3
 8005406:	d11b      	bne.n	8005440 <_fflush_r+0x58>
 8005408:	686c      	ldr	r4, [r5, #4]
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ef      	beq.n	80053f2 <_fflush_r+0xa>
 8005412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005414:	07d0      	lsls	r0, r2, #31
 8005416:	d404      	bmi.n	8005422 <_fflush_r+0x3a>
 8005418:	0599      	lsls	r1, r3, #22
 800541a:	d402      	bmi.n	8005422 <_fflush_r+0x3a>
 800541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541e:	f000 f915 	bl	800564c <__retarget_lock_acquire_recursive>
 8005422:	4628      	mov	r0, r5
 8005424:	4621      	mov	r1, r4
 8005426:	f7ff ff59 	bl	80052dc <__sflush_r>
 800542a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542c:	07da      	lsls	r2, r3, #31
 800542e:	4605      	mov	r5, r0
 8005430:	d4e0      	bmi.n	80053f4 <_fflush_r+0xc>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	d4dd      	bmi.n	80053f4 <_fflush_r+0xc>
 8005438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800543a:	f000 f908 	bl	800564e <__retarget_lock_release_recursive>
 800543e:	e7d9      	b.n	80053f4 <_fflush_r+0xc>
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <_fflush_r+0x70>)
 8005442:	429c      	cmp	r4, r3
 8005444:	d101      	bne.n	800544a <_fflush_r+0x62>
 8005446:	68ac      	ldr	r4, [r5, #8]
 8005448:	e7df      	b.n	800540a <_fflush_r+0x22>
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <_fflush_r+0x74>)
 800544c:	429c      	cmp	r4, r3
 800544e:	bf08      	it	eq
 8005450:	68ec      	ldreq	r4, [r5, #12]
 8005452:	e7da      	b.n	800540a <_fflush_r+0x22>
 8005454:	08005ee4 	.word	0x08005ee4
 8005458:	08005f04 	.word	0x08005f04
 800545c:	08005ec4 	.word	0x08005ec4

08005460 <std>:
 8005460:	2300      	movs	r3, #0
 8005462:	b510      	push	{r4, lr}
 8005464:	4604      	mov	r4, r0
 8005466:	e9c0 3300 	strd	r3, r3, [r0]
 800546a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800546e:	6083      	str	r3, [r0, #8]
 8005470:	8181      	strh	r1, [r0, #12]
 8005472:	6643      	str	r3, [r0, #100]	; 0x64
 8005474:	81c2      	strh	r2, [r0, #14]
 8005476:	6183      	str	r3, [r0, #24]
 8005478:	4619      	mov	r1, r3
 800547a:	2208      	movs	r2, #8
 800547c:	305c      	adds	r0, #92	; 0x5c
 800547e:	f7ff fcb7 	bl	8004df0 <memset>
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <std+0x38>)
 8005484:	6263      	str	r3, [r4, #36]	; 0x24
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <std+0x3c>)
 8005488:	62a3      	str	r3, [r4, #40]	; 0x28
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <std+0x40>)
 800548c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <std+0x44>)
 8005490:	6224      	str	r4, [r4, #32]
 8005492:	6323      	str	r3, [r4, #48]	; 0x30
 8005494:	bd10      	pop	{r4, pc}
 8005496:	bf00      	nop
 8005498:	08005091 	.word	0x08005091
 800549c:	080050b3 	.word	0x080050b3
 80054a0:	080050eb 	.word	0x080050eb
 80054a4:	0800510f 	.word	0x0800510f

080054a8 <_cleanup_r>:
 80054a8:	4901      	ldr	r1, [pc, #4]	; (80054b0 <_cleanup_r+0x8>)
 80054aa:	f000 b8af 	b.w	800560c <_fwalk_reent>
 80054ae:	bf00      	nop
 80054b0:	080053e9 	.word	0x080053e9

080054b4 <__sfmoreglue>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	1e4a      	subs	r2, r1, #1
 80054b8:	2568      	movs	r5, #104	; 0x68
 80054ba:	4355      	muls	r5, r2
 80054bc:	460e      	mov	r6, r1
 80054be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054c2:	f7ff fced 	bl	8004ea0 <_malloc_r>
 80054c6:	4604      	mov	r4, r0
 80054c8:	b140      	cbz	r0, 80054dc <__sfmoreglue+0x28>
 80054ca:	2100      	movs	r1, #0
 80054cc:	e9c0 1600 	strd	r1, r6, [r0]
 80054d0:	300c      	adds	r0, #12
 80054d2:	60a0      	str	r0, [r4, #8]
 80054d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054d8:	f7ff fc8a 	bl	8004df0 <memset>
 80054dc:	4620      	mov	r0, r4
 80054de:	bd70      	pop	{r4, r5, r6, pc}

080054e0 <__sfp_lock_acquire>:
 80054e0:	4801      	ldr	r0, [pc, #4]	; (80054e8 <__sfp_lock_acquire+0x8>)
 80054e2:	f000 b8b3 	b.w	800564c <__retarget_lock_acquire_recursive>
 80054e6:	bf00      	nop
 80054e8:	20000480 	.word	0x20000480

080054ec <__sfp_lock_release>:
 80054ec:	4801      	ldr	r0, [pc, #4]	; (80054f4 <__sfp_lock_release+0x8>)
 80054ee:	f000 b8ae 	b.w	800564e <__retarget_lock_release_recursive>
 80054f2:	bf00      	nop
 80054f4:	20000480 	.word	0x20000480

080054f8 <__sinit_lock_acquire>:
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <__sinit_lock_acquire+0x8>)
 80054fa:	f000 b8a7 	b.w	800564c <__retarget_lock_acquire_recursive>
 80054fe:	bf00      	nop
 8005500:	2000047b 	.word	0x2000047b

08005504 <__sinit_lock_release>:
 8005504:	4801      	ldr	r0, [pc, #4]	; (800550c <__sinit_lock_release+0x8>)
 8005506:	f000 b8a2 	b.w	800564e <__retarget_lock_release_recursive>
 800550a:	bf00      	nop
 800550c:	2000047b 	.word	0x2000047b

08005510 <__sinit>:
 8005510:	b510      	push	{r4, lr}
 8005512:	4604      	mov	r4, r0
 8005514:	f7ff fff0 	bl	80054f8 <__sinit_lock_acquire>
 8005518:	69a3      	ldr	r3, [r4, #24]
 800551a:	b11b      	cbz	r3, 8005524 <__sinit+0x14>
 800551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005520:	f7ff bff0 	b.w	8005504 <__sinit_lock_release>
 8005524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005528:	6523      	str	r3, [r4, #80]	; 0x50
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <__sinit+0x68>)
 800552c:	4a13      	ldr	r2, [pc, #76]	; (800557c <__sinit+0x6c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	62a2      	str	r2, [r4, #40]	; 0x28
 8005532:	42a3      	cmp	r3, r4
 8005534:	bf04      	itt	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	61a3      	streq	r3, [r4, #24]
 800553a:	4620      	mov	r0, r4
 800553c:	f000 f820 	bl	8005580 <__sfp>
 8005540:	6060      	str	r0, [r4, #4]
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f81c 	bl	8005580 <__sfp>
 8005548:	60a0      	str	r0, [r4, #8]
 800554a:	4620      	mov	r0, r4
 800554c:	f000 f818 	bl	8005580 <__sfp>
 8005550:	2200      	movs	r2, #0
 8005552:	60e0      	str	r0, [r4, #12]
 8005554:	2104      	movs	r1, #4
 8005556:	6860      	ldr	r0, [r4, #4]
 8005558:	f7ff ff82 	bl	8005460 <std>
 800555c:	68a0      	ldr	r0, [r4, #8]
 800555e:	2201      	movs	r2, #1
 8005560:	2109      	movs	r1, #9
 8005562:	f7ff ff7d 	bl	8005460 <std>
 8005566:	68e0      	ldr	r0, [r4, #12]
 8005568:	2202      	movs	r2, #2
 800556a:	2112      	movs	r1, #18
 800556c:	f7ff ff78 	bl	8005460 <std>
 8005570:	2301      	movs	r3, #1
 8005572:	61a3      	str	r3, [r4, #24]
 8005574:	e7d2      	b.n	800551c <__sinit+0xc>
 8005576:	bf00      	nop
 8005578:	08005ec0 	.word	0x08005ec0
 800557c:	080054a9 	.word	0x080054a9

08005580 <__sfp>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	4607      	mov	r7, r0
 8005584:	f7ff ffac 	bl	80054e0 <__sfp_lock_acquire>
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <__sfp+0x84>)
 800558a:	681e      	ldr	r6, [r3, #0]
 800558c:	69b3      	ldr	r3, [r6, #24]
 800558e:	b913      	cbnz	r3, 8005596 <__sfp+0x16>
 8005590:	4630      	mov	r0, r6
 8005592:	f7ff ffbd 	bl	8005510 <__sinit>
 8005596:	3648      	adds	r6, #72	; 0x48
 8005598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800559c:	3b01      	subs	r3, #1
 800559e:	d503      	bpl.n	80055a8 <__sfp+0x28>
 80055a0:	6833      	ldr	r3, [r6, #0]
 80055a2:	b30b      	cbz	r3, 80055e8 <__sfp+0x68>
 80055a4:	6836      	ldr	r6, [r6, #0]
 80055a6:	e7f7      	b.n	8005598 <__sfp+0x18>
 80055a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055ac:	b9d5      	cbnz	r5, 80055e4 <__sfp+0x64>
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <__sfp+0x88>)
 80055b0:	60e3      	str	r3, [r4, #12]
 80055b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055b6:	6665      	str	r5, [r4, #100]	; 0x64
 80055b8:	f000 f847 	bl	800564a <__retarget_lock_init_recursive>
 80055bc:	f7ff ff96 	bl	80054ec <__sfp_lock_release>
 80055c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055c8:	6025      	str	r5, [r4, #0]
 80055ca:	61a5      	str	r5, [r4, #24]
 80055cc:	2208      	movs	r2, #8
 80055ce:	4629      	mov	r1, r5
 80055d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055d4:	f7ff fc0c 	bl	8004df0 <memset>
 80055d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055e0:	4620      	mov	r0, r4
 80055e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e4:	3468      	adds	r4, #104	; 0x68
 80055e6:	e7d9      	b.n	800559c <__sfp+0x1c>
 80055e8:	2104      	movs	r1, #4
 80055ea:	4638      	mov	r0, r7
 80055ec:	f7ff ff62 	bl	80054b4 <__sfmoreglue>
 80055f0:	4604      	mov	r4, r0
 80055f2:	6030      	str	r0, [r6, #0]
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d1d5      	bne.n	80055a4 <__sfp+0x24>
 80055f8:	f7ff ff78 	bl	80054ec <__sfp_lock_release>
 80055fc:	230c      	movs	r3, #12
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	e7ee      	b.n	80055e0 <__sfp+0x60>
 8005602:	bf00      	nop
 8005604:	08005ec0 	.word	0x08005ec0
 8005608:	ffff0001 	.word	0xffff0001

0800560c <_fwalk_reent>:
 800560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005610:	4606      	mov	r6, r0
 8005612:	4688      	mov	r8, r1
 8005614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005618:	2700      	movs	r7, #0
 800561a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800561e:	f1b9 0901 	subs.w	r9, r9, #1
 8005622:	d505      	bpl.n	8005630 <_fwalk_reent+0x24>
 8005624:	6824      	ldr	r4, [r4, #0]
 8005626:	2c00      	cmp	r4, #0
 8005628:	d1f7      	bne.n	800561a <_fwalk_reent+0xe>
 800562a:	4638      	mov	r0, r7
 800562c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005630:	89ab      	ldrh	r3, [r5, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d907      	bls.n	8005646 <_fwalk_reent+0x3a>
 8005636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800563a:	3301      	adds	r3, #1
 800563c:	d003      	beq.n	8005646 <_fwalk_reent+0x3a>
 800563e:	4629      	mov	r1, r5
 8005640:	4630      	mov	r0, r6
 8005642:	47c0      	blx	r8
 8005644:	4307      	orrs	r7, r0
 8005646:	3568      	adds	r5, #104	; 0x68
 8005648:	e7e9      	b.n	800561e <_fwalk_reent+0x12>

0800564a <__retarget_lock_init_recursive>:
 800564a:	4770      	bx	lr

0800564c <__retarget_lock_acquire_recursive>:
 800564c:	4770      	bx	lr

0800564e <__retarget_lock_release_recursive>:
 800564e:	4770      	bx	lr

08005650 <_lseek_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d07      	ldr	r5, [pc, #28]	; (8005670 <_lseek_r+0x20>)
 8005654:	4604      	mov	r4, r0
 8005656:	4608      	mov	r0, r1
 8005658:	4611      	mov	r1, r2
 800565a:	2200      	movs	r2, #0
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f7fc fa4c 	bl	8001afc <_lseek>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_lseek_r+0x1e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_lseek_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20000484 	.word	0x20000484

08005674 <__swhatbuf_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	2900      	cmp	r1, #0
 800567e:	b096      	sub	sp, #88	; 0x58
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	da07      	bge.n	8005696 <__swhatbuf_r+0x22>
 8005686:	2300      	movs	r3, #0
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	89b3      	ldrh	r3, [r6, #12]
 800568c:	061a      	lsls	r2, r3, #24
 800568e:	d410      	bmi.n	80056b2 <__swhatbuf_r+0x3e>
 8005690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005694:	e00e      	b.n	80056b4 <__swhatbuf_r+0x40>
 8005696:	466a      	mov	r2, sp
 8005698:	f000 fb5c 	bl	8005d54 <_fstat_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	dbf2      	blt.n	8005686 <__swhatbuf_r+0x12>
 80056a0:	9a01      	ldr	r2, [sp, #4]
 80056a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056aa:	425a      	negs	r2, r3
 80056ac:	415a      	adcs	r2, r3
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	e7ee      	b.n	8005690 <__swhatbuf_r+0x1c>
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	2000      	movs	r0, #0
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	b016      	add	sp, #88	; 0x58
 80056ba:	bd70      	pop	{r4, r5, r6, pc}

080056bc <__smakebuf_r>:
 80056bc:	898b      	ldrh	r3, [r1, #12]
 80056be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056c0:	079d      	lsls	r5, r3, #30
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	d507      	bpl.n	80056d8 <__smakebuf_r+0x1c>
 80056c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	2301      	movs	r3, #1
 80056d2:	6163      	str	r3, [r4, #20]
 80056d4:	b002      	add	sp, #8
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	ab01      	add	r3, sp, #4
 80056da:	466a      	mov	r2, sp
 80056dc:	f7ff ffca 	bl	8005674 <__swhatbuf_r>
 80056e0:	9900      	ldr	r1, [sp, #0]
 80056e2:	4605      	mov	r5, r0
 80056e4:	4630      	mov	r0, r6
 80056e6:	f7ff fbdb 	bl	8004ea0 <_malloc_r>
 80056ea:	b948      	cbnz	r0, 8005700 <__smakebuf_r+0x44>
 80056ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f0:	059a      	lsls	r2, r3, #22
 80056f2:	d4ef      	bmi.n	80056d4 <__smakebuf_r+0x18>
 80056f4:	f023 0303 	bic.w	r3, r3, #3
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	81a3      	strh	r3, [r4, #12]
 80056fe:	e7e3      	b.n	80056c8 <__smakebuf_r+0xc>
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <__smakebuf_r+0x7c>)
 8005702:	62b3      	str	r3, [r6, #40]	; 0x28
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	9b00      	ldr	r3, [sp, #0]
 8005710:	6163      	str	r3, [r4, #20]
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	6120      	str	r0, [r4, #16]
 8005716:	b15b      	cbz	r3, 8005730 <__smakebuf_r+0x74>
 8005718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571c:	4630      	mov	r0, r6
 800571e:	f000 fb2b 	bl	8005d78 <_isatty_r>
 8005722:	b128      	cbz	r0, 8005730 <__smakebuf_r+0x74>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	89a0      	ldrh	r0, [r4, #12]
 8005732:	4305      	orrs	r5, r0
 8005734:	81a5      	strh	r5, [r4, #12]
 8005736:	e7cd      	b.n	80056d4 <__smakebuf_r+0x18>
 8005738:	080054a9 	.word	0x080054a9

0800573c <__malloc_lock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_lock+0x8>)
 800573e:	f7ff bf85 	b.w	800564c <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	2000047c 	.word	0x2000047c

08005748 <__malloc_unlock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_unlock+0x8>)
 800574a:	f7ff bf80 	b.w	800564e <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	2000047c 	.word	0x2000047c

08005754 <__sfputc_r>:
 8005754:	6893      	ldr	r3, [r2, #8]
 8005756:	3b01      	subs	r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	b410      	push	{r4}
 800575c:	6093      	str	r3, [r2, #8]
 800575e:	da08      	bge.n	8005772 <__sfputc_r+0x1e>
 8005760:	6994      	ldr	r4, [r2, #24]
 8005762:	42a3      	cmp	r3, r4
 8005764:	db01      	blt.n	800576a <__sfputc_r+0x16>
 8005766:	290a      	cmp	r1, #10
 8005768:	d103      	bne.n	8005772 <__sfputc_r+0x1e>
 800576a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576e:	f7ff bcd3 	b.w	8005118 <__swbuf_r>
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	1c58      	adds	r0, r3, #1
 8005776:	6010      	str	r0, [r2, #0]
 8005778:	7019      	strb	r1, [r3, #0]
 800577a:	4608      	mov	r0, r1
 800577c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005780:	4770      	bx	lr

08005782 <__sfputs_r>:
 8005782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005784:	4606      	mov	r6, r0
 8005786:	460f      	mov	r7, r1
 8005788:	4614      	mov	r4, r2
 800578a:	18d5      	adds	r5, r2, r3
 800578c:	42ac      	cmp	r4, r5
 800578e:	d101      	bne.n	8005794 <__sfputs_r+0x12>
 8005790:	2000      	movs	r0, #0
 8005792:	e007      	b.n	80057a4 <__sfputs_r+0x22>
 8005794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005798:	463a      	mov	r2, r7
 800579a:	4630      	mov	r0, r6
 800579c:	f7ff ffda 	bl	8005754 <__sfputc_r>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d1f3      	bne.n	800578c <__sfputs_r+0xa>
 80057a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057a8 <_vfiprintf_r>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	460d      	mov	r5, r1
 80057ae:	b09d      	sub	sp, #116	; 0x74
 80057b0:	4614      	mov	r4, r2
 80057b2:	4698      	mov	r8, r3
 80057b4:	4606      	mov	r6, r0
 80057b6:	b118      	cbz	r0, 80057c0 <_vfiprintf_r+0x18>
 80057b8:	6983      	ldr	r3, [r0, #24]
 80057ba:	b90b      	cbnz	r3, 80057c0 <_vfiprintf_r+0x18>
 80057bc:	f7ff fea8 	bl	8005510 <__sinit>
 80057c0:	4b89      	ldr	r3, [pc, #548]	; (80059e8 <_vfiprintf_r+0x240>)
 80057c2:	429d      	cmp	r5, r3
 80057c4:	d11b      	bne.n	80057fe <_vfiprintf_r+0x56>
 80057c6:	6875      	ldr	r5, [r6, #4]
 80057c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ca:	07d9      	lsls	r1, r3, #31
 80057cc:	d405      	bmi.n	80057da <_vfiprintf_r+0x32>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	059a      	lsls	r2, r3, #22
 80057d2:	d402      	bmi.n	80057da <_vfiprintf_r+0x32>
 80057d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d6:	f7ff ff39 	bl	800564c <__retarget_lock_acquire_recursive>
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	071b      	lsls	r3, r3, #28
 80057de:	d501      	bpl.n	80057e4 <_vfiprintf_r+0x3c>
 80057e0:	692b      	ldr	r3, [r5, #16]
 80057e2:	b9eb      	cbnz	r3, 8005820 <_vfiprintf_r+0x78>
 80057e4:	4629      	mov	r1, r5
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7ff fcfa 	bl	80051e0 <__swsetup_r>
 80057ec:	b1c0      	cbz	r0, 8005820 <_vfiprintf_r+0x78>
 80057ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057f0:	07dc      	lsls	r4, r3, #31
 80057f2:	d50e      	bpl.n	8005812 <_vfiprintf_r+0x6a>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	b01d      	add	sp, #116	; 0x74
 80057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fe:	4b7b      	ldr	r3, [pc, #492]	; (80059ec <_vfiprintf_r+0x244>)
 8005800:	429d      	cmp	r5, r3
 8005802:	d101      	bne.n	8005808 <_vfiprintf_r+0x60>
 8005804:	68b5      	ldr	r5, [r6, #8]
 8005806:	e7df      	b.n	80057c8 <_vfiprintf_r+0x20>
 8005808:	4b79      	ldr	r3, [pc, #484]	; (80059f0 <_vfiprintf_r+0x248>)
 800580a:	429d      	cmp	r5, r3
 800580c:	bf08      	it	eq
 800580e:	68f5      	ldreq	r5, [r6, #12]
 8005810:	e7da      	b.n	80057c8 <_vfiprintf_r+0x20>
 8005812:	89ab      	ldrh	r3, [r5, #12]
 8005814:	0598      	lsls	r0, r3, #22
 8005816:	d4ed      	bmi.n	80057f4 <_vfiprintf_r+0x4c>
 8005818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800581a:	f7ff ff18 	bl	800564e <__retarget_lock_release_recursive>
 800581e:	e7e9      	b.n	80057f4 <_vfiprintf_r+0x4c>
 8005820:	2300      	movs	r3, #0
 8005822:	9309      	str	r3, [sp, #36]	; 0x24
 8005824:	2320      	movs	r3, #32
 8005826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800582a:	f8cd 800c 	str.w	r8, [sp, #12]
 800582e:	2330      	movs	r3, #48	; 0x30
 8005830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059f4 <_vfiprintf_r+0x24c>
 8005834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005838:	f04f 0901 	mov.w	r9, #1
 800583c:	4623      	mov	r3, r4
 800583e:	469a      	mov	sl, r3
 8005840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005844:	b10a      	cbz	r2, 800584a <_vfiprintf_r+0xa2>
 8005846:	2a25      	cmp	r2, #37	; 0x25
 8005848:	d1f9      	bne.n	800583e <_vfiprintf_r+0x96>
 800584a:	ebba 0b04 	subs.w	fp, sl, r4
 800584e:	d00b      	beq.n	8005868 <_vfiprintf_r+0xc0>
 8005850:	465b      	mov	r3, fp
 8005852:	4622      	mov	r2, r4
 8005854:	4629      	mov	r1, r5
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff ff93 	bl	8005782 <__sfputs_r>
 800585c:	3001      	adds	r0, #1
 800585e:	f000 80aa 	beq.w	80059b6 <_vfiprintf_r+0x20e>
 8005862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005864:	445a      	add	r2, fp
 8005866:	9209      	str	r2, [sp, #36]	; 0x24
 8005868:	f89a 3000 	ldrb.w	r3, [sl]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80a2 	beq.w	80059b6 <_vfiprintf_r+0x20e>
 8005872:	2300      	movs	r3, #0
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800587c:	f10a 0a01 	add.w	sl, sl, #1
 8005880:	9304      	str	r3, [sp, #16]
 8005882:	9307      	str	r3, [sp, #28]
 8005884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005888:	931a      	str	r3, [sp, #104]	; 0x68
 800588a:	4654      	mov	r4, sl
 800588c:	2205      	movs	r2, #5
 800588e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005892:	4858      	ldr	r0, [pc, #352]	; (80059f4 <_vfiprintf_r+0x24c>)
 8005894:	f7fa fca4 	bl	80001e0 <memchr>
 8005898:	9a04      	ldr	r2, [sp, #16]
 800589a:	b9d8      	cbnz	r0, 80058d4 <_vfiprintf_r+0x12c>
 800589c:	06d1      	lsls	r1, r2, #27
 800589e:	bf44      	itt	mi
 80058a0:	2320      	movmi	r3, #32
 80058a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058a6:	0713      	lsls	r3, r2, #28
 80058a8:	bf44      	itt	mi
 80058aa:	232b      	movmi	r3, #43	; 0x2b
 80058ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b0:	f89a 3000 	ldrb.w	r3, [sl]
 80058b4:	2b2a      	cmp	r3, #42	; 0x2a
 80058b6:	d015      	beq.n	80058e4 <_vfiprintf_r+0x13c>
 80058b8:	9a07      	ldr	r2, [sp, #28]
 80058ba:	4654      	mov	r4, sl
 80058bc:	2000      	movs	r0, #0
 80058be:	f04f 0c0a 	mov.w	ip, #10
 80058c2:	4621      	mov	r1, r4
 80058c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058c8:	3b30      	subs	r3, #48	; 0x30
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d94e      	bls.n	800596c <_vfiprintf_r+0x1c4>
 80058ce:	b1b0      	cbz	r0, 80058fe <_vfiprintf_r+0x156>
 80058d0:	9207      	str	r2, [sp, #28]
 80058d2:	e014      	b.n	80058fe <_vfiprintf_r+0x156>
 80058d4:	eba0 0308 	sub.w	r3, r0, r8
 80058d8:	fa09 f303 	lsl.w	r3, r9, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	46a2      	mov	sl, r4
 80058e2:	e7d2      	b.n	800588a <_vfiprintf_r+0xe2>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	1d19      	adds	r1, r3, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	9103      	str	r1, [sp, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bfbb      	ittet	lt
 80058f0:	425b      	neglt	r3, r3
 80058f2:	f042 0202 	orrlt.w	r2, r2, #2
 80058f6:	9307      	strge	r3, [sp, #28]
 80058f8:	9307      	strlt	r3, [sp, #28]
 80058fa:	bfb8      	it	lt
 80058fc:	9204      	strlt	r2, [sp, #16]
 80058fe:	7823      	ldrb	r3, [r4, #0]
 8005900:	2b2e      	cmp	r3, #46	; 0x2e
 8005902:	d10c      	bne.n	800591e <_vfiprintf_r+0x176>
 8005904:	7863      	ldrb	r3, [r4, #1]
 8005906:	2b2a      	cmp	r3, #42	; 0x2a
 8005908:	d135      	bne.n	8005976 <_vfiprintf_r+0x1ce>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	9203      	str	r2, [sp, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	bfb8      	it	lt
 8005916:	f04f 33ff 	movlt.w	r3, #4294967295
 800591a:	3402      	adds	r4, #2
 800591c:	9305      	str	r3, [sp, #20]
 800591e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a04 <_vfiprintf_r+0x25c>
 8005922:	7821      	ldrb	r1, [r4, #0]
 8005924:	2203      	movs	r2, #3
 8005926:	4650      	mov	r0, sl
 8005928:	f7fa fc5a 	bl	80001e0 <memchr>
 800592c:	b140      	cbz	r0, 8005940 <_vfiprintf_r+0x198>
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	eba0 000a 	sub.w	r0, r0, sl
 8005934:	fa03 f000 	lsl.w	r0, r3, r0
 8005938:	9b04      	ldr	r3, [sp, #16]
 800593a:	4303      	orrs	r3, r0
 800593c:	3401      	adds	r4, #1
 800593e:	9304      	str	r3, [sp, #16]
 8005940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005944:	482c      	ldr	r0, [pc, #176]	; (80059f8 <_vfiprintf_r+0x250>)
 8005946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800594a:	2206      	movs	r2, #6
 800594c:	f7fa fc48 	bl	80001e0 <memchr>
 8005950:	2800      	cmp	r0, #0
 8005952:	d03f      	beq.n	80059d4 <_vfiprintf_r+0x22c>
 8005954:	4b29      	ldr	r3, [pc, #164]	; (80059fc <_vfiprintf_r+0x254>)
 8005956:	bb1b      	cbnz	r3, 80059a0 <_vfiprintf_r+0x1f8>
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	3307      	adds	r3, #7
 800595c:	f023 0307 	bic.w	r3, r3, #7
 8005960:	3308      	adds	r3, #8
 8005962:	9303      	str	r3, [sp, #12]
 8005964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005966:	443b      	add	r3, r7
 8005968:	9309      	str	r3, [sp, #36]	; 0x24
 800596a:	e767      	b.n	800583c <_vfiprintf_r+0x94>
 800596c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005970:	460c      	mov	r4, r1
 8005972:	2001      	movs	r0, #1
 8005974:	e7a5      	b.n	80058c2 <_vfiprintf_r+0x11a>
 8005976:	2300      	movs	r3, #0
 8005978:	3401      	adds	r4, #1
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	4619      	mov	r1, r3
 800597e:	f04f 0c0a 	mov.w	ip, #10
 8005982:	4620      	mov	r0, r4
 8005984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005988:	3a30      	subs	r2, #48	; 0x30
 800598a:	2a09      	cmp	r2, #9
 800598c:	d903      	bls.n	8005996 <_vfiprintf_r+0x1ee>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c5      	beq.n	800591e <_vfiprintf_r+0x176>
 8005992:	9105      	str	r1, [sp, #20]
 8005994:	e7c3      	b.n	800591e <_vfiprintf_r+0x176>
 8005996:	fb0c 2101 	mla	r1, ip, r1, r2
 800599a:	4604      	mov	r4, r0
 800599c:	2301      	movs	r3, #1
 800599e:	e7f0      	b.n	8005982 <_vfiprintf_r+0x1da>
 80059a0:	ab03      	add	r3, sp, #12
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <_vfiprintf_r+0x258>)
 80059a8:	a904      	add	r1, sp, #16
 80059aa:	4630      	mov	r0, r6
 80059ac:	f3af 8000 	nop.w
 80059b0:	4607      	mov	r7, r0
 80059b2:	1c78      	adds	r0, r7, #1
 80059b4:	d1d6      	bne.n	8005964 <_vfiprintf_r+0x1bc>
 80059b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b8:	07d9      	lsls	r1, r3, #31
 80059ba:	d405      	bmi.n	80059c8 <_vfiprintf_r+0x220>
 80059bc:	89ab      	ldrh	r3, [r5, #12]
 80059be:	059a      	lsls	r2, r3, #22
 80059c0:	d402      	bmi.n	80059c8 <_vfiprintf_r+0x220>
 80059c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059c4:	f7ff fe43 	bl	800564e <__retarget_lock_release_recursive>
 80059c8:	89ab      	ldrh	r3, [r5, #12]
 80059ca:	065b      	lsls	r3, r3, #25
 80059cc:	f53f af12 	bmi.w	80057f4 <_vfiprintf_r+0x4c>
 80059d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059d2:	e711      	b.n	80057f8 <_vfiprintf_r+0x50>
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	462a      	mov	r2, r5
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <_vfiprintf_r+0x258>)
 80059dc:	a904      	add	r1, sp, #16
 80059de:	4630      	mov	r0, r6
 80059e0:	f000 f880 	bl	8005ae4 <_printf_i>
 80059e4:	e7e4      	b.n	80059b0 <_vfiprintf_r+0x208>
 80059e6:	bf00      	nop
 80059e8:	08005ee4 	.word	0x08005ee4
 80059ec:	08005f04 	.word	0x08005f04
 80059f0:	08005ec4 	.word	0x08005ec4
 80059f4:	08005f24 	.word	0x08005f24
 80059f8:	08005f2e 	.word	0x08005f2e
 80059fc:	00000000 	.word	0x00000000
 8005a00:	08005783 	.word	0x08005783
 8005a04:	08005f2a 	.word	0x08005f2a

08005a08 <_printf_common>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	688a      	ldr	r2, [r1, #8]
 8005a12:	690b      	ldr	r3, [r1, #16]
 8005a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bfb8      	it	lt
 8005a1c:	4613      	movlt	r3, r2
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a24:	4607      	mov	r7, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	b10a      	cbz	r2, 8005a2e <_printf_common+0x26>
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	6033      	str	r3, [r6, #0]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	0699      	lsls	r1, r3, #26
 8005a32:	bf42      	ittt	mi
 8005a34:	6833      	ldrmi	r3, [r6, #0]
 8005a36:	3302      	addmi	r3, #2
 8005a38:	6033      	strmi	r3, [r6, #0]
 8005a3a:	6825      	ldr	r5, [r4, #0]
 8005a3c:	f015 0506 	ands.w	r5, r5, #6
 8005a40:	d106      	bne.n	8005a50 <_printf_common+0x48>
 8005a42:	f104 0a19 	add.w	sl, r4, #25
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	6832      	ldr	r2, [r6, #0]
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	dc26      	bgt.n	8005a9e <_printf_common+0x96>
 8005a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a54:	1e13      	subs	r3, r2, #0
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	bf18      	it	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	0692      	lsls	r2, r2, #26
 8005a5e:	d42b      	bmi.n	8005ab8 <_printf_common+0xb0>
 8005a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a64:	4649      	mov	r1, r9
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d01e      	beq.n	8005aac <_printf_common+0xa4>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	68e5      	ldr	r5, [r4, #12]
 8005a72:	6832      	ldr	r2, [r6, #0]
 8005a74:	f003 0306 	and.w	r3, r3, #6
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	bf08      	it	eq
 8005a7c:	1aad      	subeq	r5, r5, r2
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	6922      	ldr	r2, [r4, #16]
 8005a82:	bf0c      	ite	eq
 8005a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a88:	2500      	movne	r5, #0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bfc4      	itt	gt
 8005a8e:	1a9b      	subgt	r3, r3, r2
 8005a90:	18ed      	addgt	r5, r5, r3
 8005a92:	2600      	movs	r6, #0
 8005a94:	341a      	adds	r4, #26
 8005a96:	42b5      	cmp	r5, r6
 8005a98:	d11a      	bne.n	8005ad0 <_printf_common+0xc8>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e008      	b.n	8005ab0 <_printf_common+0xa8>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	47c0      	blx	r8
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d103      	bne.n	8005ab4 <_printf_common+0xac>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7c6      	b.n	8005a46 <_printf_common+0x3e>
 8005ab8:	18e1      	adds	r1, r4, r3
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	2030      	movs	r0, #48	; 0x30
 8005abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ac2:	4422      	add	r2, r4
 8005ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005acc:	3302      	adds	r3, #2
 8005ace:	e7c7      	b.n	8005a60 <_printf_common+0x58>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	3001      	adds	r0, #1
 8005adc:	d0e6      	beq.n	8005aac <_printf_common+0xa4>
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7d9      	b.n	8005a96 <_printf_common+0x8e>
	...

08005ae4 <_printf_i>:
 8005ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	460c      	mov	r4, r1
 8005aea:	4691      	mov	r9, r2
 8005aec:	7e27      	ldrb	r7, [r4, #24]
 8005aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005af0:	2f78      	cmp	r7, #120	; 0x78
 8005af2:	4680      	mov	r8, r0
 8005af4:	469a      	mov	sl, r3
 8005af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005afa:	d807      	bhi.n	8005b0c <_printf_i+0x28>
 8005afc:	2f62      	cmp	r7, #98	; 0x62
 8005afe:	d80a      	bhi.n	8005b16 <_printf_i+0x32>
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	f000 80d8 	beq.w	8005cb6 <_printf_i+0x1d2>
 8005b06:	2f58      	cmp	r7, #88	; 0x58
 8005b08:	f000 80a3 	beq.w	8005c52 <_printf_i+0x16e>
 8005b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b14:	e03a      	b.n	8005b8c <_printf_i+0xa8>
 8005b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b1a:	2b15      	cmp	r3, #21
 8005b1c:	d8f6      	bhi.n	8005b0c <_printf_i+0x28>
 8005b1e:	a001      	add	r0, pc, #4	; (adr r0, 8005b24 <_printf_i+0x40>)
 8005b20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b91 	.word	0x08005b91
 8005b2c:	08005b0d 	.word	0x08005b0d
 8005b30:	08005b0d 	.word	0x08005b0d
 8005b34:	08005b0d 	.word	0x08005b0d
 8005b38:	08005b0d 	.word	0x08005b0d
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005b0d 	.word	0x08005b0d
 8005b44:	08005b0d 	.word	0x08005b0d
 8005b48:	08005b0d 	.word	0x08005b0d
 8005b4c:	08005b0d 	.word	0x08005b0d
 8005b50:	08005c9d 	.word	0x08005c9d
 8005b54:	08005bc1 	.word	0x08005bc1
 8005b58:	08005c7f 	.word	0x08005c7f
 8005b5c:	08005b0d 	.word	0x08005b0d
 8005b60:	08005b0d 	.word	0x08005b0d
 8005b64:	08005cbf 	.word	0x08005cbf
 8005b68:	08005b0d 	.word	0x08005b0d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b0d 	.word	0x08005b0d
 8005b74:	08005b0d 	.word	0x08005b0d
 8005b78:	08005c87 	.word	0x08005c87
 8005b7c:	680b      	ldr	r3, [r1, #0]
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	600a      	str	r2, [r1, #0]
 8005b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0a3      	b.n	8005cd8 <_printf_i+0x1f4>
 8005b90:	6825      	ldr	r5, [r4, #0]
 8005b92:	6808      	ldr	r0, [r1, #0]
 8005b94:	062e      	lsls	r6, r5, #24
 8005b96:	f100 0304 	add.w	r3, r0, #4
 8005b9a:	d50a      	bpl.n	8005bb2 <_printf_i+0xce>
 8005b9c:	6805      	ldr	r5, [r0, #0]
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	da03      	bge.n	8005bac <_printf_i+0xc8>
 8005ba4:	232d      	movs	r3, #45	; 0x2d
 8005ba6:	426d      	negs	r5, r5
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	485e      	ldr	r0, [pc, #376]	; (8005d28 <_printf_i+0x244>)
 8005bae:	230a      	movs	r3, #10
 8005bb0:	e019      	b.n	8005be6 <_printf_i+0x102>
 8005bb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bb6:	6805      	ldr	r5, [r0, #0]
 8005bb8:	600b      	str	r3, [r1, #0]
 8005bba:	bf18      	it	ne
 8005bbc:	b22d      	sxthne	r5, r5
 8005bbe:	e7ef      	b.n	8005ba0 <_printf_i+0xbc>
 8005bc0:	680b      	ldr	r3, [r1, #0]
 8005bc2:	6825      	ldr	r5, [r4, #0]
 8005bc4:	1d18      	adds	r0, r3, #4
 8005bc6:	6008      	str	r0, [r1, #0]
 8005bc8:	0628      	lsls	r0, r5, #24
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0xec>
 8005bcc:	681d      	ldr	r5, [r3, #0]
 8005bce:	e002      	b.n	8005bd6 <_printf_i+0xf2>
 8005bd0:	0669      	lsls	r1, r5, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0xe8>
 8005bd4:	881d      	ldrh	r5, [r3, #0]
 8005bd6:	4854      	ldr	r0, [pc, #336]	; (8005d28 <_printf_i+0x244>)
 8005bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bda:	bf0c      	ite	eq
 8005bdc:	2308      	moveq	r3, #8
 8005bde:	230a      	movne	r3, #10
 8005be0:	2100      	movs	r1, #0
 8005be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005be6:	6866      	ldr	r6, [r4, #4]
 8005be8:	60a6      	str	r6, [r4, #8]
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	bfa2      	ittt	ge
 8005bee:	6821      	ldrge	r1, [r4, #0]
 8005bf0:	f021 0104 	bicge.w	r1, r1, #4
 8005bf4:	6021      	strge	r1, [r4, #0]
 8005bf6:	b90d      	cbnz	r5, 8005bfc <_printf_i+0x118>
 8005bf8:	2e00      	cmp	r6, #0
 8005bfa:	d04d      	beq.n	8005c98 <_printf_i+0x1b4>
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c02:	fb03 5711 	mls	r7, r3, r1, r5
 8005c06:	5dc7      	ldrb	r7, [r0, r7]
 8005c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c0c:	462f      	mov	r7, r5
 8005c0e:	42bb      	cmp	r3, r7
 8005c10:	460d      	mov	r5, r1
 8005c12:	d9f4      	bls.n	8005bfe <_printf_i+0x11a>
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d10b      	bne.n	8005c30 <_printf_i+0x14c>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	07df      	lsls	r7, r3, #31
 8005c1c:	d508      	bpl.n	8005c30 <_printf_i+0x14c>
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	6861      	ldr	r1, [r4, #4]
 8005c22:	4299      	cmp	r1, r3
 8005c24:	bfde      	ittt	le
 8005c26:	2330      	movle	r3, #48	; 0x30
 8005c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c30:	1b92      	subs	r2, r2, r6
 8005c32:	6122      	str	r2, [r4, #16]
 8005c34:	f8cd a000 	str.w	sl, [sp]
 8005c38:	464b      	mov	r3, r9
 8005c3a:	aa03      	add	r2, sp, #12
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7ff fee2 	bl	8005a08 <_printf_common>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d14c      	bne.n	8005ce2 <_printf_i+0x1fe>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	b004      	add	sp, #16
 8005c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c52:	4835      	ldr	r0, [pc, #212]	; (8005d28 <_printf_i+0x244>)
 8005c54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	680e      	ldr	r6, [r1, #0]
 8005c5c:	061f      	lsls	r7, r3, #24
 8005c5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c62:	600e      	str	r6, [r1, #0]
 8005c64:	d514      	bpl.n	8005c90 <_printf_i+0x1ac>
 8005c66:	07d9      	lsls	r1, r3, #31
 8005c68:	bf44      	itt	mi
 8005c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c6e:	6023      	strmi	r3, [r4, #0]
 8005c70:	b91d      	cbnz	r5, 8005c7a <_printf_i+0x196>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f023 0320 	bic.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	e7b0      	b.n	8005be0 <_printf_i+0xfc>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	2378      	movs	r3, #120	; 0x78
 8005c88:	4828      	ldr	r0, [pc, #160]	; (8005d2c <_printf_i+0x248>)
 8005c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c8e:	e7e3      	b.n	8005c58 <_printf_i+0x174>
 8005c90:	065e      	lsls	r6, r3, #25
 8005c92:	bf48      	it	mi
 8005c94:	b2ad      	uxthmi	r5, r5
 8005c96:	e7e6      	b.n	8005c66 <_printf_i+0x182>
 8005c98:	4616      	mov	r6, r2
 8005c9a:	e7bb      	b.n	8005c14 <_printf_i+0x130>
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	6826      	ldr	r6, [r4, #0]
 8005ca0:	6960      	ldr	r0, [r4, #20]
 8005ca2:	1d1d      	adds	r5, r3, #4
 8005ca4:	600d      	str	r5, [r1, #0]
 8005ca6:	0635      	lsls	r5, r6, #24
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	d501      	bpl.n	8005cb0 <_printf_i+0x1cc>
 8005cac:	6018      	str	r0, [r3, #0]
 8005cae:	e002      	b.n	8005cb6 <_printf_i+0x1d2>
 8005cb0:	0671      	lsls	r1, r6, #25
 8005cb2:	d5fb      	bpl.n	8005cac <_printf_i+0x1c8>
 8005cb4:	8018      	strh	r0, [r3, #0]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	4616      	mov	r6, r2
 8005cbc:	e7ba      	b.n	8005c34 <_printf_i+0x150>
 8005cbe:	680b      	ldr	r3, [r1, #0]
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	600a      	str	r2, [r1, #0]
 8005cc4:	681e      	ldr	r6, [r3, #0]
 8005cc6:	6862      	ldr	r2, [r4, #4]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7fa fa88 	bl	80001e0 <memchr>
 8005cd0:	b108      	cbz	r0, 8005cd6 <_printf_i+0x1f2>
 8005cd2:	1b80      	subs	r0, r0, r6
 8005cd4:	6060      	str	r0, [r4, #4]
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce0:	e7a8      	b.n	8005c34 <_printf_i+0x150>
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d0ab      	beq.n	8005c48 <_printf_i+0x164>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	079b      	lsls	r3, r3, #30
 8005cf4:	d413      	bmi.n	8005d1e <_printf_i+0x23a>
 8005cf6:	68e0      	ldr	r0, [r4, #12]
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	bfb8      	it	lt
 8005cfe:	4618      	movlt	r0, r3
 8005d00:	e7a4      	b.n	8005c4c <_printf_i+0x168>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4632      	mov	r2, r6
 8005d06:	4649      	mov	r1, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	47d0      	blx	sl
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d09b      	beq.n	8005c48 <_printf_i+0x164>
 8005d10:	3501      	adds	r5, #1
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	9903      	ldr	r1, [sp, #12]
 8005d16:	1a5b      	subs	r3, r3, r1
 8005d18:	42ab      	cmp	r3, r5
 8005d1a:	dcf2      	bgt.n	8005d02 <_printf_i+0x21e>
 8005d1c:	e7eb      	b.n	8005cf6 <_printf_i+0x212>
 8005d1e:	2500      	movs	r5, #0
 8005d20:	f104 0619 	add.w	r6, r4, #25
 8005d24:	e7f5      	b.n	8005d12 <_printf_i+0x22e>
 8005d26:	bf00      	nop
 8005d28:	08005f35 	.word	0x08005f35
 8005d2c:	08005f46 	.word	0x08005f46

08005d30 <_read_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_read_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fb fe98 	bl	8001a74 <_read>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_read_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_read_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000484 	.word	0x20000484

08005d54 <_fstat_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_fstat_r+0x20>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	f7fb feb0 	bl	8001ac6 <_fstat>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d102      	bne.n	8005d70 <_fstat_r+0x1c>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	b103      	cbz	r3, 8005d70 <_fstat_r+0x1c>
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	bf00      	nop
 8005d74:	20000484 	.word	0x20000484

08005d78 <_isatty_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_isatty_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb feaf 	bl	8001ae6 <_isatty>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_isatty_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_isatty_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000484 	.word	0x20000484

08005d98 <_init>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr

08005da4 <_fini>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr
