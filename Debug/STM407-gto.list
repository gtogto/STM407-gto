
STM407-gto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f64  08008f64  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f6c  08008f6c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f6c  08008f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f70  08008f70  00018f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  200000a8  0800901c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0800901c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015154  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f56  00000000  00000000  0003522c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  000394a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b74  00000000  00000000  0003a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413a  00000000  00000000  0003f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74ca  00000000  00000000  0005333e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005998  00000000  00000000  0012a85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a88 	.word	0x08008a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008a88 	.word	0x08008a88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5200 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4798      	blx	r3
   WIZCHIP.CS._select();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0a12      	lsrs	r2, r2, #8
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	4610      	mov	r0, r2
 80005ba:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <WIZCHIP_WRITE+0x58>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5200 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <WIZCHIP_READ+0x58>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <WIZCHIP_READ+0x58>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <WIZCHIP_READ+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	200f      	movs	r0, #15
 80005ee:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <WIZCHIP_READ+0x58>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0a12      	lsrs	r2, r2, #8
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <WIZCHIP_READ+0x58>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	4610      	mov	r0, r2
 8000608:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <WIZCHIP_READ+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4798      	blx	r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <WIZCHIP_READ+0x58>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <WIZCHIP_READ+0x58>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4798      	blx	r3
   return ret;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5200 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	e02a      	b.n	80006aa <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	20f0      	movs	r0, #240	; 0xf0
 8000660:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b291      	uxth	r1, r2
 800066a:	8afa      	ldrh	r2, [r7, #22]
 800066c:	440a      	add	r2, r1
 800066e:	b292      	uxth	r2, r2
 8000670:	0a12      	lsrs	r2, r2, #8
 8000672:	b292      	uxth	r2, r2
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440a      	add	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4610      	mov	r0, r2
 800068c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	440a      	add	r2, r1
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	4610      	mov	r0, r2
 800069c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d0      	bcc.n	8000654 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <WIZCHIP_WRITE_BUF+0x98>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004

080006cc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5200 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	82fb      	strh	r3, [r7, #22]
 80006ee:	e02a      	b.n	8000746 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	200f      	movs	r0, #15
 80006fc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b291      	uxth	r1, r2
 8000706:	8afa      	ldrh	r2, [r7, #22]
 8000708:	440a      	add	r2, r1
 800070a:	b292      	uxth	r2, r2
 800070c:	0a12      	lsrs	r2, r2, #8
 800070e:	b292      	uxth	r2, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	8afa      	ldrh	r2, [r7, #22]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440a      	add	r2, r1
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	8afa      	ldrh	r2, [r7, #22]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	188c      	adds	r4, r1, r2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	3301      	adds	r3, #1
 8000744:	82fb      	strh	r3, [r7, #22]
 8000746:	8afa      	ldrh	r2, [r7, #22]
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3d0      	bcc.n	80006f0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0x98>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000772:	2300      	movs	r3, #0
 8000774:	81fb      	strh	r3, [r7, #14]
 8000776:	2300      	movs	r3, #0
 8000778:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3304      	adds	r3, #4
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	3320      	adds	r3, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <WIZCHIP_READ>
 8000788:	4603      	mov	r3, r0
 800078a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b29c      	uxth	r4, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3304      	adds	r3, #4
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	3321      	adds	r3, #33	; 0x21
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff1a 	bl	80005d4 <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4423      	add	r3, r4
 80007a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80007a8:	89bb      	ldrh	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3304      	adds	r3, #4
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	3320      	adds	r3, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0c 	bl	80005d4 <WIZCHIP_READ>
 80007bc:	4603      	mov	r3, r0
 80007be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3304      	adds	r3, #4
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	3321      	adds	r3, #33	; 0x21
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff00 	bl	80005d4 <WIZCHIP_READ>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4423      	add	r3, r4
 80007da:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d1ca      	bne.n	800077a <getSn_TX_FSR+0x12>
   return val;
 80007e4:	89fb      	ldrh	r3, [r7, #14]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80007ee:	b590      	push	{r4, r7, lr}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	2300      	movs	r3, #0
 80007fe:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3304      	adds	r3, #4
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	3326      	adds	r3, #38	; 0x26
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <WIZCHIP_READ>
 800080e:	4603      	mov	r3, r0
 8000810:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b29c      	uxth	r4, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3304      	adds	r3, #4
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	3327      	adds	r3, #39	; 0x27
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <WIZCHIP_READ>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4423      	add	r3, r4
 800082c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d016      	beq.n	8000862 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3304      	adds	r3, #4
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	3326      	adds	r3, #38	; 0x26
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fec9 	bl	80005d4 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	3327      	adds	r3, #39	; 0x27
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff febd 	bl	80005d4 <WIZCHIP_READ>
 800085a:	4603      	mov	r3, r0
 800085c:	b29b      	uxth	r3, r3
 800085e:	4423      	add	r3, r4
 8000860:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d1ca      	bne.n	8000800 <getSn_RX_RSR+0x12>
   return val;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800087e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000882:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e020      	b.n	80008cc <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 800088a:	201a      	movs	r0, #26
 800088c:	f7ff fea2 	bl	80005d4 <WIZCHIP_READ>
 8000890:	4603      	mov	r3, r0
 8000892:	4619      	mov	r1, r3
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	ea01 0203 	and.w	r2, r1, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80008c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd9      	blt.n	800088a <getSn_RxBASE+0x16>

   return rxbase;
 80008d6:	68bb      	ldr	r3, [r7, #8]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 80008ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ee:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e020      	b.n	8000938 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 80008f6:	201b      	movs	r0, #27
 80008f8:	f7ff fe6c 	bl	80005d4 <WIZCHIP_READ>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	ea01 0203 	and.w	r2, r1, r3
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	2201      	movs	r2, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	b29b      	uxth	r3, r3
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	461a      	mov	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800092c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	3301      	adds	r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbd9      	blt.n	80008f6 <getSn_TxBASE+0x16>
   return txbase;
 8000942:	68bb      	ldr	r3, [r7, #8]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3304      	adds	r3, #4
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	3324      	adds	r3, #36	; 0x24
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe35 	bl	80005d4 <WIZCHIP_READ>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29c      	uxth	r4, r3
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3304      	adds	r3, #4
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	3325      	adds	r3, #37	; 0x25
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe2a 	bl	80005d4 <WIZCHIP_READ>
 8000980:	4603      	mov	r3, r0
 8000982:	b29b      	uxth	r3, r3
 8000984:	4423      	add	r3, r4
 8000986:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8000988:	201b      	movs	r0, #27
 800098a:	f7ff fe23 	bl	80005d4 <WIZCHIP_READ>
 800098e:	4603      	mov	r3, r0
 8000990:	4619      	mov	r1, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	ea01 0203 	and.w	r2, r1, r3
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa42 f303 	asr.w	r3, r2, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	4013      	ands	r3, r2
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff8a 	bl	80008e0 <getSn_TxBASE>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	89bb      	ldrh	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80009d6:	89ba      	ldrh	r2, [r7, #12]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	18d4      	adds	r4, r2, r3
 80009dc:	201b      	movs	r0, #27
 80009de:	f7ff fdf9 	bl	80005d4 <WIZCHIP_READ>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4619      	mov	r1, r3
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	ea01 0203 	and.w	r2, r1, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa42 f303 	asr.w	r3, r2, r3
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dd33      	ble.n	8000a72 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8000a0a:	201b      	movs	r0, #27
 8000a0c:	f7ff fde2 	bl	80005d4 <WIZCHIP_READ>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4619      	mov	r1, r3
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	ea01 0203 	and.w	r2, r1, r3
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa42 f303 	asr.w	r3, r2, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a3c:	897b      	ldrh	r3, [r7, #10]
 8000a3e:	893a      	ldrh	r2, [r7, #8]
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdf4 	bl	8000630 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8000a48:	893b      	ldrh	r3, [r7, #8]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	893b      	ldrh	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff40 	bl	80008e0 <getSn_TxBASE>
 8000a60:	4603      	mov	r3, r0
 8000a62:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8000a64:	897b      	ldrh	r3, [r7, #10]
 8000a66:	893a      	ldrh	r2, [r7, #8]
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fde0 	bl	8000630 <WIZCHIP_WRITE_BUF>
 8000a70:	e005      	b.n	8000a7e <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8000a72:	897b      	ldrh	r3, [r7, #10]
 8000a74:	88ba      	ldrh	r2, [r7, #4]
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fdd9 	bl	8000630 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 8000a7e:	89fa      	ldrh	r2, [r7, #14]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	3324      	adds	r3, #36	; 0x24
 8000a8e:	461a      	mov	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	f7ff fd6c 	bl	8000578 <WIZCHIP_WRITE>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	3325      	adds	r3, #37	; 0x25
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	f7ff fd61 	bl	8000578 <WIZCHIP_WRITE>
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000abe:	b590      	push	{r4, r7, lr}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	3328      	adds	r3, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd7c 	bl	80005d4 <WIZCHIP_READ>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29c      	uxth	r4, r3
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	3329      	adds	r3, #41	; 0x29
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd71 	bl	80005d4 <WIZCHIP_READ>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4423      	add	r3, r4
 8000af8:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8000afa:	201a      	movs	r0, #26
 8000afc:	f7ff fd6a 	bl	80005d4 <WIZCHIP_READ>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4619      	mov	r1, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	ea01 0203 	and.w	r2, r1, r3
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fe9e 	bl	8000874 <getSn_RxBASE>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8000b42:	89ba      	ldrh	r2, [r7, #12]
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	18d4      	adds	r4, r2, r3
 8000b48:	201a      	movs	r0, #26
 8000b4a:	f7ff fd43 	bl	80005d4 <WIZCHIP_READ>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	ea01 0203 	and.w	r2, r1, r3
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa42 f303 	asr.w	r3, r2, r3
 8000b68:	2201      	movs	r2, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	429c      	cmp	r4, r3
 8000b74:	dd33      	ble.n	8000bde <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8000b76:	201a      	movs	r0, #26
 8000b78:	f7ff fd2c 	bl	80005d4 <WIZCHIP_READ>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	ea01 0203 	and.w	r2, r1, r3
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	2201      	movs	r2, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8000ba8:	897b      	ldrh	r3, [r7, #10]
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd8c 	bl	80006cc <WIZCHIP_READ_BUF>
    wizdata += size;
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
    size = len - size;
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	893b      	ldrh	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe54 	bl	8000874 <getSn_RxBASE>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8000bd0:	897b      	ldrh	r3, [r7, #10]
 8000bd2:	893a      	ldrh	r2, [r7, #8]
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd78 	bl	80006cc <WIZCHIP_READ_BUF>
 8000bdc:	e005      	b.n	8000bea <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	88ba      	ldrh	r2, [r7, #4]
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd71 	bl	80006cc <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	3328      	adds	r3, #40	; 0x28
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4610      	mov	r0, r2
 8000c08:	f7ff fcb6 	bl	8000578 <WIZCHIP_WRITE>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	3329      	adds	r3, #41	; 0x29
 8000c14:	461a      	mov	r2, r3
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fcab 	bl	8000578 <WIZCHIP_WRITE>
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71bb      	strb	r3, [r7, #6]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d902      	bls.n	8000c56 <socket+0x2a>
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e0e2      	b.n	8000e1c <socket+0x1f0>
	switch(protocol)
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d819      	bhi.n	8000c92 <socket+0x66>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <socket+0x38>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c79 	.word	0x08000c79
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000c99 	.word	0x08000c99
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	08000c99 	.word	0x08000c99
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	200f      	movs	r0, #15
 8000c82:	f7ff fd23 	bl	80006cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <socket+0x6c>
 8000c8c:	f06f 0302 	mvn.w	r3, #2
 8000c90:	e0c4      	b.n	8000e1c <socket+0x1f0>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000c92:	f06f 0304 	mvn.w	r3, #4
 8000c96:	e0c1      	b.n	8000e1c <socket+0x1f0>
         break;
 8000c98:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <socket+0x7e>
 8000ca4:	f06f 0305 	mvn.w	r3, #5
 8000ca8:	e0b8      	b.n	8000e1c <socket+0x1f0>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d019      	beq.n	8000ce4 <socket+0xb8>
	{
   	switch(protocol)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d002      	beq.n	8000cbc <socket+0x90>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d008      	beq.n	8000ccc <socket+0xa0>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000cba:	e018      	b.n	8000cee <socket+0xc2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d110      	bne.n	8000ce8 <socket+0xbc>
 8000cc6:	f06f 0305 	mvn.w	r3, #5
 8000cca:	e0a7      	b.n	8000e1c <socket+0x1f0>
   	      if(flag & SF_IGMP_VER2)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <socket+0xc0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db06      	blt.n	8000cec <socket+0xc0>
 8000cde:	f06f 0305 	mvn.w	r3, #5
 8000ce2:	e09b      	b.n	8000e1c <socket+0x1f0>
   	}
   }
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <socket+0xc2>
   	      break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <socket+0xc2>
   	      break;
 8000cec:	bf00      	nop
	close(sn);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f8a1 	bl	8000e38 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b25a      	sxtb	r2, r3
 8000d08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fc30 	bl	8000578 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d110      	bne.n	8000d40 <socket+0x114>
	{
	   port = sock_any_port++;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <socket+0x1f8>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <socket+0x1f8>)
 8000d28:	8011      	strh	r1, [r2, #0]
 8000d2a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <socket+0x1f8>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <socket+0x114>
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <socket+0x1f8>)
 8000d3a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d3e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3304      	adds	r3, #4
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	3304      	adds	r3, #4
 8000d48:	461a      	mov	r2, r3
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff fc0f 	bl	8000578 <WIZCHIP_WRITE>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	3305      	adds	r3, #5
 8000d62:	461a      	mov	r2, r3
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f7ff fc04 	bl	8000578 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3304      	adds	r3, #4
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	3301      	adds	r3, #1
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbfc 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d80:	bf00      	nop
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3304      	adds	r3, #4
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc22 	bl	80005d4 <WIZCHIP_READ>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f5      	bne.n	8000d82 <socket+0x156>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <socket+0x1fc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4013      	ands	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <socket+0x1fc>)
 8000db2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <socket+0x1fc>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <socket+0x1fc>)
 8000dd0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <socket+0x200>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <socket+0x200>)
 8000dee:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <socket+0x204>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <socket+0x208>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000e02:	bf00      	nop
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3304      	adds	r3, #4
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbe1 	bl	80005d4 <WIZCHIP_READ>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f5      	beq.n	8000e04 <socket+0x1d8>
   return (int8_t)sn;
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	200000c4 	.word	0x200000c4
 8000e2c:	200000c6 	.word	0x200000c6
 8000e30:	200000c8 	.word	0x200000c8
 8000e34:	200000d0 	.word	0x200000d0

08000e38 <close>:

int8_t close(uint8_t sn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d902      	bls.n	8000e4e <close+0x16>
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e04d      	b.n	8000eea <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3304      	adds	r3, #4
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	3301      	adds	r3, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb8d 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000e5e:	bf00      	nop
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3304      	adds	r3, #4
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	3301      	adds	r3, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fbb3 	bl	80005d4 <WIZCHIP_READ>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f5      	bne.n	8000e60 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	3304      	adds	r3, #4
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb7a 	bl	8000578 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2201      	movs	r2, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <close+0xbc>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <close+0xbc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <close+0xc0>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <close+0xc0>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <close+0xc4>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <close+0xc8>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000ed2:	bf00      	nop
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	3303      	adds	r3, #3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb79 	bl	80005d4 <WIZCHIP_READ>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f5      	bne.n	8000ed4 <close+0x9c>
	return SOCK_OK;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000c4 	.word	0x200000c4
 8000ef8:	200000c6 	.word	0x200000c6
 8000efc:	200000c8 	.word	0x200000c8
 8000f00:	200000d0 	.word	0x200000d0

08000f04 <listen>:

int8_t listen(uint8_t sn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d902      	bls.n	8000f1a <listen+0x16>
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	e040      	b.n	8000f9c <listen+0x98>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb57 	bl	80005d4 <WIZCHIP_READ>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <listen+0x32>
 8000f30:	f06f 0304 	mvn.w	r3, #4
 8000f34:	e032      	b.n	8000f9c <listen+0x98>
	CHECK_SOCKINIT();
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb48 	bl	80005d4 <WIZCHIP_READ>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b13      	cmp	r3, #19
 8000f48:	d002      	beq.n	8000f50 <listen+0x4c>
 8000f4a:	f06f 0302 	mvn.w	r3, #2
 8000f4e:	e025      	b.n	8000f9c <listen+0x98>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3304      	adds	r3, #4
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	3301      	adds	r3, #1
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb0c 	bl	8000578 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000f60:	bf00      	nop
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3304      	adds	r3, #4
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fb32 	bl	80005d4 <WIZCHIP_READ>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f5      	bne.n	8000f62 <listen+0x5e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f76:	e006      	b.n	8000f86 <listen+0x82>
   {
         close(sn);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff5c 	bl	8000e38 <close>
         return SOCKERR_SOCKCLOSED;
 8000f80:	f06f 0303 	mvn.w	r3, #3
 8000f84:	e00a      	b.n	8000f9c <listen+0x98>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb20 	bl	80005d4 <WIZCHIP_READ>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b14      	cmp	r3, #20
 8000f98:	d1ee      	bne.n	8000f78 <listen+0x74>
   }
   return SOCK_OK;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d902      	bls.n	8000fba <disconnect+0x16>
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	e059      	b.n	800106e <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb07 	bl	80005d4 <WIZCHIP_READ>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d002      	beq.n	8000fd6 <disconnect+0x32>
 8000fd0:	f06f 0304 	mvn.w	r3, #4
 8000fd4:	e04b      	b.n	800106e <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	3301      	adds	r3, #1
 8000fde:	2108      	movs	r1, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fac9 	bl	8000578 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000fe6:	bf00      	nop
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3304      	adds	r3, #4
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff faef 	bl	80005d4 <WIZCHIP_READ>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f5      	bne.n	8000fe8 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	b21b      	sxth	r3, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <disconnect+0xd4>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4013      	ands	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <disconnect+0xd4>)
 8001018:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <disconnect+0xd8>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	fa42 f303 	asr.w	r3, r2, r3
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d014      	beq.n	8001058 <disconnect+0xb4>
 800102e:	2300      	movs	r3, #0
 8001030:	e01d      	b.n	800106e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3304      	adds	r3, #4
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	3302      	adds	r3, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff faca 	bl	80005d4 <WIZCHIP_READ>
 8001040:	4603      	mov	r3, r0
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <disconnect+0xb4>
	   {
	      close(sn);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fef3 	bl	8000e38 <close>
	      return SOCKERR_TIMEOUT;
 8001052:	f06f 030c 	mvn.w	r3, #12
 8001056:	e00a      	b.n	800106e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3304      	adds	r3, #4
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	3303      	adds	r3, #3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fab7 	bl	80005d4 <WIZCHIP_READ>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e2      	bne.n	8001032 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c6 	.word	0x200000c6
 800107c:	200000c4 	.word	0x200000c4

08001080 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001094:	2300      	movs	r3, #0
 8001096:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d902      	bls.n	80010a4 <send+0x24>
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e0d8      	b.n	8001256 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3304      	adds	r3, #4
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa92 	bl	80005d4 <WIZCHIP_READ>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <send+0x40>
 80010ba:	f06f 0304 	mvn.w	r3, #4
 80010be:	e0ca      	b.n	8001256 <send+0x1d6>
   CHECK_SOCKDATA();
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <send+0x4c>
 80010c6:	f06f 030d 	mvn.w	r3, #13
 80010ca:	e0c4      	b.n	8001256 <send+0x1d6>
   tmp = getSn_SR(sn);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3304      	adds	r3, #4
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	3303      	adds	r3, #3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa7d 	bl	80005d4 <WIZCHIP_READ>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b17      	cmp	r3, #23
 80010e2:	d005      	beq.n	80010f0 <send+0x70>
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	d002      	beq.n	80010f0 <send+0x70>
 80010ea:	f06f 0306 	mvn.w	r3, #6
 80010ee:	e0b2      	b.n	8001256 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <send+0x1e0>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	fa42 f303 	asr.w	r3, r2, r3
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d033      	beq.n	800116c <send+0xec>
   {
      tmp = getSn_IR(sn);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	3304      	adds	r3, #4
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	3302      	adds	r3, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa61 	bl	80005d4 <WIZCHIP_READ>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d017      	beq.n	8001150 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3304      	adds	r3, #4
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	3302      	adds	r3, #2
 8001128:	2110      	movs	r1, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa24 	bl	8000578 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2201      	movs	r2, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	b21b      	sxth	r3, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <send+0x1e0>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4013      	ands	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <send+0x1e0>)
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e00d      	b.n	800116c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <send+0xe8>
      {
         close(sn);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe6b 	bl	8000e38 <close>
         return SOCKERR_TIMEOUT;
 8001162:	f06f 030c 	mvn.w	r3, #12
 8001166:	e076      	b.n	8001256 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001168:	2300      	movs	r3, #0
 800116a:	e074      	b.n	8001256 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 800116c:	201b      	movs	r0, #27
 800116e:	f7ff fa31 	bl	80005d4 <WIZCHIP_READ>
 8001172:	4603      	mov	r3, r0
 8001174:	4619      	mov	r1, r3
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ea01 0203 	and.w	r2, r1, r3
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa42 f303 	asr.w	r3, r2, r3
 800118c:	2201      	movs	r2, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	029b      	lsls	r3, r3, #10
 8001196:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d901      	bls.n	80011a4 <send+0x124>
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fade 	bl	8000768 <getSn_TX_FSR>
 80011ac:	4603      	mov	r3, r0
 80011ae:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	3304      	adds	r3, #4
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	3303      	adds	r3, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fa0b 	bl	80005d4 <WIZCHIP_READ>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b17      	cmp	r3, #23
 80011c6:	d009      	beq.n	80011dc <send+0x15c>
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b1c      	cmp	r3, #28
 80011cc:	d006      	beq.n	80011dc <send+0x15c>
      {
         close(sn);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe31 	bl	8000e38 <close>
         return SOCKERR_SOCKSTATUS;
 80011d6:	f06f 0306 	mvn.w	r3, #6
 80011da:	e03c      	b.n	8001256 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <send+0x1e4>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	fa42 f303 	asr.w	r3, r2, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <send+0x17c>
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d901      	bls.n	80011fc <send+0x17c>
 80011f8:	2300      	movs	r3, #0
 80011fa:	e02c      	b.n	8001256 <send+0x1d6>
      if(len <= freesize) break;
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	89bb      	ldrh	r3, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d900      	bls.n	8001206 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8001204:	e7ce      	b.n	80011a4 <send+0x124>
      if(len <= freesize) break;
 8001206:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001208:	88ba      	ldrh	r2, [r7, #4]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	6839      	ldr	r1, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fb9c 	bl	800094c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3304      	adds	r3, #4
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	3301      	adds	r3, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9aa 	bl	8000578 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001224:	bf00      	nop
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3304      	adds	r3, #4
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	3301      	adds	r3, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9d0 	bl	80005d4 <WIZCHIP_READ>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f5      	bne.n	8001226 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2201      	movs	r2, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <send+0x1e0>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <send+0x1e0>)
 8001252:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001254:	88bb      	ldrh	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000c6 	.word	0x200000c6
 8001264:	200000c4 	.word	0x200000c4

08001268 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d902      	bls.n	800128c <recv+0x24>
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e0a8      	b.n	80013de <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3304      	adds	r3, #4
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f99e 	bl	80005d4 <WIZCHIP_READ>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d002      	beq.n	80012a8 <recv+0x40>
 80012a2:	f06f 0304 	mvn.w	r3, #4
 80012a6:	e09a      	b.n	80013de <recv+0x176>
   CHECK_SOCKDATA();
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <recv+0x4c>
 80012ae:	f06f 030d 	mvn.w	r3, #13
 80012b2:	e094      	b.n	80013de <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 80012b4:	201a      	movs	r0, #26
 80012b6:	f7ff f98d 	bl	80005d4 <WIZCHIP_READ>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	ea01 0203 	and.w	r2, r1, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80012e0:	89ba      	ldrh	r2, [r7, #12]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d201      	bcs.n	80012ec <recv+0x84>
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fa7d 	bl	80007ee <getSn_RX_RSR>
 80012f4:	4603      	mov	r3, r0
 80012f6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3304      	adds	r3, #4
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	3303      	adds	r3, #3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f967 	bl	80005d4 <WIZCHIP_READ>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b17      	cmp	r3, #23
 800130e:	d030      	beq.n	8001372 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b1c      	cmp	r3, #28
 8001314:	d126      	bne.n	8001364 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13d      	bne.n	8001398 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa22 	bl	8000768 <getSn_TX_FSR>
 8001324:	4603      	mov	r3, r0
 8001326:	461c      	mov	r4, r3
 8001328:	201b      	movs	r0, #27
 800132a:	f7ff f953 	bl	80005d4 <WIZCHIP_READ>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	ea01 0203 	and.w	r2, r1, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa42 f303 	asr.w	r3, r2, r3
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	429c      	cmp	r4, r3
 8001354:	d10d      	bne.n	8001372 <recv+0x10a>
               {
                  close(sn);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd6d 	bl	8000e38 <close>
                  return SOCKERR_SOCKSTATUS;
 800135e:	f06f 0306 	mvn.w	r3, #6
 8001362:	e03c      	b.n	80013de <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd66 	bl	8000e38 <close>
               return SOCKERR_SOCKSTATUS;
 800136c:	f06f 0306 	mvn.w	r3, #6
 8001370:	e035      	b.n	80013de <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <recv+0x180>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <recv+0x128>
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <recv+0x128>
 800138c:	2300      	movs	r3, #0
 800138e:	e026      	b.n	80013de <recv+0x176>
         if(recvsize != 0) break;
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001396:	e7a9      	b.n	80012ec <recv+0x84>
               if(recvsize != 0) break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <recv+0x136>
         if(recvsize != 0) break;
 800139c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d201      	bcs.n	80013aa <recv+0x142>
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fb84 	bl	8000abe <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3304      	adds	r3, #4
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	3301      	adds	r3, #1
 80013be:	2140      	movs	r1, #64	; 0x40
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8d9 	bl	8000578 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80013c6:	bf00      	nop
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3304      	adds	r3, #4
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	3301      	adds	r3, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8ff 	bl	80005d4 <WIZCHIP_READ>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f5      	bne.n	80013c8 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80013dc:	88bb      	ldrh	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000c4 	.word	0x200000c4

080013ec <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
 8001460:	2300      	movs	r3, #0
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <reg_wizchip_cs_cbfunc+0x16>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <reg_wizchip_cs_cbfunc+0x44>)
 800149e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <reg_wizchip_cs_cbfunc+0x48>)
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	e006      	b.n	80014b6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <reg_wizchip_cs_cbfunc+0x40>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6153      	str	r3, [r2, #20]
   }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000004 	.word	0x20000004
 80014c8:	08001409 	.word	0x08001409
 80014cc:	08001417 	.word	0x08001417

080014d0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80014da:	bf00      	nop
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f9      	beq.n	80014dc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <reg_wizchip_spi_cbfunc+0x24>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <reg_wizchip_spi_cbfunc+0x50>)
 80014f8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <reg_wizchip_spi_cbfunc+0x54>)
 80014fe:	61da      	str	r2, [r3, #28]
 8001500:	e006      	b.n	8001510 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <reg_wizchip_spi_cbfunc+0x4c>)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	61d3      	str	r3, [r2, #28]
   }
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000004 	.word	0x20000004
 8001520:	0800145d 	.word	0x0800145d
 8001524:	0800146d 	.word	0x0800146d

08001528 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2206      	movs	r2, #6
 8001532:	4619      	mov	r1, r3
 8001534:	2009      	movs	r0, #9
 8001536:	f7ff f8c9 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2204      	movs	r2, #4
 8001540:	4619      	mov	r1, r3
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff f8c2 	bl	80006cc <WIZCHIP_READ_BUF>
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	2005      	movs	r0, #5
 8001552:	f7ff f8bb 	bl	80006cc <WIZCHIP_READ_BUF>
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2204      	movs	r2, #4
 800155c:	4619      	mov	r1, r3
 800155e:	200f      	movs	r0, #15
 8001560:	f7ff f8b4 	bl	80006cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff f806 	bl	8000578 <WIZCHIP_WRITE>
   getMR(); // for delay
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff f831 	bl	80005d4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2206      	movs	r2, #6
 8001576:	4619      	mov	r1, r3
 8001578:	2009      	movs	r0, #9
 800157a:	f7ff f859 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2204      	movs	r2, #4
 8001584:	4619      	mov	r1, r3
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff f852 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	2005      	movs	r0, #5
 8001596:	f7ff f84b 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2204      	movs	r2, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	200f      	movs	r0, #15
 80015a4:	f7ff f844 	bl	8000630 <WIZCHIP_WRITE_BUF>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80015be:	f7ff ffb3 	bl	8001528 <wizchip_sw_reset>
   if(txsize)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d04e      	beq.n	8001666 <wizchip_init+0xb6>
   {
      tmp = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73bb      	strb	r3, [r7, #14]
         tmp += txsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else      
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e015      	b.n	80015fe <wizchip_init+0x4e>
      {
         tmp += txsize[i];
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	4413      	add	r3, r2
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 80015e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015e8:	2b10      	cmp	r3, #16
 80015ea:	dd02      	ble.n	80015f2 <wizchip_init+0x42>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	e08c      	b.n	800170c <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	2b03      	cmp	r3, #3
 8001604:	dde5      	ble.n	80015d2 <wizchip_init+0x22>
      }
   #endif
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e028      	b.n	800165e <wizchip_init+0xae>
         setSn_TXBUF_SIZE(i, txsize[i]);
 800160c:	201b      	movs	r0, #27
 800160e:	f7fe ffe1 	bl	80005d4 <WIZCHIP_READ>
 8001612:	4603      	mov	r3, r0
 8001614:	b25a      	sxtb	r2, r3
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	b25b      	sxtb	r3, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4013      	ands	r3, r2
 800162a:	b25a      	sxtb	r2, r3
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	b25b      	sxtb	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	201b      	movs	r0, #27
 800164e:	f7fe ff93 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	2b03      	cmp	r3, #3
 8001664:	ddd2      	ble.n	800160c <wizchip_init+0x5c>
   }
   if(rxsize)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04e      	beq.n	800170a <wizchip_init+0x15a>
   {
      tmp = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	73bb      	strb	r3, [r7, #14]
         tmp += rxsize[i];
         if(tmp > 128) return -1;
      }
      if(tmp % 8) return -1;
   #else         
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e015      	b.n	80016a2 <wizchip_init+0xf2>
      {
         tmp += rxsize[i];
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73bb      	strb	r3, [r7, #14]
         if(tmp > 16) return -1;
 8001688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800168c:	2b10      	cmp	r3, #16
 800168e:	dd02      	ble.n	8001696 <wizchip_init+0xe6>
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	e03a      	b.n	800170c <wizchip_init+0x15c>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3301      	adds	r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	dde5      	ble.n	8001676 <wizchip_init+0xc6>
      }
   #endif

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e028      	b.n	8001702 <wizchip_init+0x152>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 80016b0:	201a      	movs	r0, #26
 80016b2:	f7fe ff8f 	bl	80005d4 <WIZCHIP_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2103      	movs	r1, #3
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	201a      	movs	r0, #26
 80016f2:	f7fe ff41 	bl	8000578 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b03      	cmp	r3, #3
 8001708:	ddd2      	ble.n	80016b0 <wizchip_init+0x100>
   }
   return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2206      	movs	r2, #6
 8001720:	4619      	mov	r1, r3
 8001722:	2009      	movs	r0, #9
 8001724:	f7fe ff84 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	330e      	adds	r3, #14
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	2001      	movs	r0, #1
 8001732:	f7fe ff7d 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	330a      	adds	r3, #10
 800173a:	2204      	movs	r2, #4
 800173c:	4619      	mov	r1, r3
 800173e:	2005      	movs	r0, #5
 8001740:	f7fe ff76 	bl	8000630 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3306      	adds	r3, #6
 8001748:	2204      	movs	r2, #4
 800174a:	4619      	mov	r1, r3
 800174c:	200f      	movs	r0, #15
 800174e:	f7fe ff6f 	bl	8000630 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c9a      	ldrb	r2, [r3, #18]
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001758:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7cda      	ldrb	r2, [r3, #19]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001760:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7d1a      	ldrb	r2, [r3, #20]
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001768:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7d5a      	ldrb	r2, [r3, #21]
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <wizchip_setnetinfo+0x70>)
 8001770:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7d9a      	ldrb	r2, [r3, #22]
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <wizchip_setnetinfo+0x74>)
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000d4 	.word	0x200000d4
 8001788:	200000d8 	.word	0x200000d8

0800178c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2206      	movs	r2, #6
 8001798:	4619      	mov	r1, r3
 800179a:	2009      	movs	r0, #9
 800179c:	f7fe ff96 	bl	80006cc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	330e      	adds	r3, #14
 80017a4:	2204      	movs	r2, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7fe ff8f 	bl	80006cc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	330a      	adds	r3, #10
 80017b2:	2204      	movs	r2, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	2005      	movs	r0, #5
 80017b8:	f7fe ff88 	bl	80006cc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3306      	adds	r3, #6
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	200f      	movs	r0, #15
 80017c6:	f7fe ff81 	bl	80006cc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017d4:	785a      	ldrb	r2, [r3, #1]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017dc:	789a      	ldrb	r2, [r3, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <wizchip_getnetinfo+0x70>)
 80017e4:	78da      	ldrb	r2, [r3, #3]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <wizchip_getnetinfo+0x74>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	759a      	strb	r2, [r3, #22]
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000d4 	.word	0x200000d4
 8001800:	200000d8 	.word	0x200000d8

08001804 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <DWT_Delay_us+0x40>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001812:	f003 f935 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8001816:	4603      	mov	r3, r0
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <DWT_Delay_us+0x44>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001828:	bf00      	nop
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <DWT_Delay_us+0x40>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3f8      	bcc.n	800182a <DWT_Delay_us+0x26>
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e0001000 	.word	0xe0001000
 8001848:	431bde83 	.word	0x431bde83

0800184c <cs_sel>:
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);															\
} while(0)

char msg[60];

void cs_sel() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001850:	2200      	movs	r2, #0
 8001852:	2110      	movs	r1, #16
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <cs_sel+0x14>)
 8001856:	f002 fccd 	bl	80041f4 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000

08001864 <cs_desel>:

void cs_desel() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <cs_desel+0x14>)
 800186e:	f002 fcc1 	bl	80041f4 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40020000 	.word	0x40020000

0800187c <spi_rb>:

uint8_t spi_rb(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001882:	1df9      	adds	r1, r7, #7
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	2201      	movs	r2, #1
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <spi_rb+0x20>)
 800188c:	f003 fe6c 	bl	8005568 <HAL_SPI_Receive>
	return rbuf;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000340 	.word	0x20000340

080018a0 <spi_wb>:

void spi_wb(uint8_t b) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80018aa:	1df9      	adds	r1, r7, #7
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	2201      	movs	r2, #1
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <spi_wb+0x20>)
 80018b4:	f003 fd1c 	bl	80052f0 <HAL_SPI_Transmit>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000340 	.word	0x20000340

080018c4 <HAL_UART_RxCpltCallback>:
int32_t loopback_tcps(uint8_t, uint8_t*, uint16_t);		// Loopback TCP server

/*##########################################################################################################*/

/*uart interrupt test*/ //gto
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_UART_RxCpltCallback+0x1d4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0x2e>
			//debugPrintln(&huart1, "uart1 interrupt! ");
	        // When one data is received, an interrupt is generated.

			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	4970      	ldr	r1, [pc, #448]	; (8001a9c <HAL_UART_RxCpltCallback+0x1d8>)
 80018da:	4871      	ldr	r0, [pc, #452]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1dc>)
 80018dc:	f005 f973 	bl	8006bc6 <HAL_UART_Receive_IT>

	        // Send the received data.

			HAL_UART_Transmit(&huart1, &rx_data, 1, 10);
 80018e0:	230a      	movs	r3, #10
 80018e2:	2201      	movs	r2, #1
 80018e4:	496d      	ldr	r1, [pc, #436]	; (8001a9c <HAL_UART_RxCpltCallback+0x1d8>)
 80018e6:	486e      	ldr	r0, [pc, #440]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1dc>)
 80018e8:	f005 f8db 	bl	8006aa2 <HAL_UART_Transmit>

			uart1_key_Flag = 1;
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <HAL_UART_RxCpltCallback+0x1e0>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART2) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_UART_RxCpltCallback+0x1e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d15e      	bne.n	80019ba <HAL_UART_RxCpltCallback+0xf6>
		//uart2_key_Flag = 1;
		//debugPrintln(&huart1, "uart2 interrupt! ");
		HAL_UART_Receive_IT(&huart2, (uint8_t *) &rxdata, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	496b      	ldr	r1, [pc, #428]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001900:	486b      	ldr	r0, [pc, #428]	; (8001ab0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001902:	f005 f960 	bl	8006bc6 <HAL_UART_Receive_IT>

		switch(status){
 8001906:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d002      	beq.n	8001914 <HAL_UART_RxCpltCallback+0x50>
 800190e:	2b02      	cmp	r3, #2
 8001910:	d011      	beq.n	8001936 <HAL_UART_RxCpltCallback+0x72>
 8001912:	e055      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>

		    case START:
		        if( rxdata == START_CODE ) {
 8001914:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b5b      	cmp	r3, #91	; 0x5b
 800191a:	d150      	bne.n	80019be <HAL_UART_RxCpltCallback+0xfa>
		            rxd[0] = START_CODE ;
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 800191e:	225b      	movs	r2, #91	; 0x5b
 8001920:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
		            uart2_key_Flag = 0 ;
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		        }
		        break ;
 8001934:	e043      	b.n	80019be <HAL_UART_RxCpltCallback+0xfa>

		    case PAYLOAD :
		        if( rxdata == START_CODE ) {
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b5b      	cmp	r3, #91	; 0x5b
 800193c:	d109      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x8e>
		            rxd[0] = START_CODE ;
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001940:	225b      	movs	r2, #91	; 0x5b
 8001942:	701a      	strb	r2, [r3, #0]
		            rx_cnt = 1 ;
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
		            status = PAYLOAD ;
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
		                status = START ;
		                rx_cnt = 0 ;
		                uart2_key_Flag = 0 ;
		            }
		        }
		        break ;
 8001950:	e036      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		        else if( rxdata == END_CODE ) {
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5d      	cmp	r3, #93	; 0x5d
 8001958:	d115      	bne.n	8001986 <HAL_UART_RxCpltCallback+0xc2>
		            if( rx_cnt == (LENGTH-1) )  {
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b22      	cmp	r3, #34	; 0x22
 8001960:	d10d      	bne.n	800197e <HAL_UART_RxCpltCallback+0xba>
		                rxd[rx_cnt++] = rxdata ;
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	b2d1      	uxtb	r1, r2
 800196a:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 800196c:	7011      	strb	r1, [r2, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 8001972:	7819      	ldrb	r1, [r3, #0]
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001976:	5499      	strb	r1, [r3, r2]
		                uart2_key_Flag = 1 ;
 8001978:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
		            status = START ;
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		        break ;
 8001984:	e01c      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		            if( rx_cnt < (LENGTH+2) )  rxd[rx_cnt++] = rxdata ;
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b24      	cmp	r3, #36	; 0x24
 800198c:	d80b      	bhi.n	80019a6 <HAL_UART_RxCpltCallback+0xe2>
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	b2d1      	uxtb	r1, r2
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 8001998:	7011      	strb	r1, [r2, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_UART_RxCpltCallback+0x1e8>)
 800199e:	7819      	ldrb	r1, [r3, #0]
 80019a0:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1f4>)
 80019a2:	5499      	strb	r1, [r3, r2]
		        break ;
 80019a4:	e00c      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		                status = START ;
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1f0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		                rx_cnt = 0 ;
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_UART_RxCpltCallback+0x1f8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
		                uart2_key_Flag = 0 ;
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1fc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
		        break ;
 80019b8:	e002      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		}
	}
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <HAL_UART_RxCpltCallback+0xfc>
		        break ;
 80019be:	bf00      	nop

	if (huart->Instance == USART6) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <HAL_UART_RxCpltCallback+0x200>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d15e      	bne.n	8001a88 <HAL_UART_RxCpltCallback+0x1c4>

		//uart_6_flag = 1;

		HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	493e      	ldr	r1, [pc, #248]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 80019ce:	483f      	ldr	r0, [pc, #252]	; (8001acc <HAL_UART_RxCpltCallback+0x208>)
 80019d0:	f005 f8f9 	bl	8006bc6 <HAL_UART_Receive_IT>

		switch(GTO_status){
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d002      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x11e>
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d011      	beq.n	8001a04 <HAL_UART_RxCpltCallback+0x140>
					}
					break ;
		}

	}
}
 80019e0:	e055      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					if( GTO_rxdata == GTO_START_CODE ) {
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b28      	cmp	r3, #40	; 0x28
 80019e8:	d150      	bne.n	8001a8c <HAL_UART_RxCpltCallback+0x1c8>
						GTO_rxd[0] = GTO_START_CODE ;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 80019ec:	2228      	movs	r2, #40	; 0x28
 80019ee:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
						uart_6_flag = 0 ;
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
					break ;
 8001a02:	e043      	b.n	8001a8c <HAL_UART_RxCpltCallback+0x1c8>
					if( GTO_rxdata == GTO_START_CODE ) {
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b28      	cmp	r3, #40	; 0x28
 8001a0a:	d109      	bne.n	8001a20 <HAL_UART_RxCpltCallback+0x15c>
						GTO_rxd[0] = GTO_START_CODE ;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a0e:	2228      	movs	r2, #40	; 0x28
 8001a10:	701a      	strb	r2, [r3, #0]
						GTO_rx_cnt = 1 ;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_PAYLOAD ;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
					break ;
 8001a1e:	e036      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					else if( GTO_rxdata == GTO_END_CODE ) {
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b29      	cmp	r3, #41	; 0x29
 8001a26:	d115      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0x190>
						if( GTO_rx_cnt == (GTO_LENGTH-1) )  {
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0a      	cmp	r3, #10
 8001a2e:	d10d      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x188>
							GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	b2d1      	uxtb	r1, r2
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a3a:	7011      	strb	r1, [r2, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a44:	5499      	strb	r1, [r3, r2]
							uart_6_flag = 1 ;
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
						GTO_status = GTO_START ;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
					break ;
 8001a52:	e01c      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
						if( GTO_rx_cnt < (GTO_LENGTH+2) )  GTO_rxd[GTO_rx_cnt++] = GTO_rxdata ;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d80b      	bhi.n	8001a74 <HAL_UART_RxCpltCallback+0x1b0>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	b2d1      	uxtb	r1, r2
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a66:	7011      	strb	r1, [r2, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_RxCpltCallback+0x204>)
 8001a6c:	7819      	ldrb	r1, [r3, #0]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_RxCpltCallback+0x210>)
 8001a70:	5499      	strb	r1, [r3, r2]
					break ;
 8001a72:	e00c      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
							GTO_status = GTO_START ;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_UART_RxCpltCallback+0x20c>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
							GTO_rx_cnt = 0 ;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_RxCpltCallback+0x214>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
							uart_6_flag = 0 ;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_UART_RxCpltCallback+0x218>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
					break ;
 8001a86:	e002      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
	}
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x1ca>
					break ;
 8001a8c:	bf00      	nop
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	20000289 	.word	0x20000289
 8001aa0:	200001cc 	.word	0x200001cc
 8001aa4:	200000d9 	.word	0x200000d9
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	200001c8 	.word	0x200001c8
 8001ab0:	2000039c 	.word	0x2000039c
 8001ab4:	2000002f 	.word	0x2000002f
 8001ab8:	20000540 	.word	0x20000540
 8001abc:	200000ed 	.word	0x200000ed
 8001ac0:	200000da 	.word	0x200000da
 8001ac4:	40011400 	.word	0x40011400
 8001ac8:	2000033c 	.word	0x2000033c
 8001acc:	2000028c 	.word	0x2000028c
 8001ad0:	20000030 	.word	0x20000030
 8001ad4:	200002d0 	.word	0x200002d0
 8001ad8:	2000056c 	.word	0x2000056c
 8001adc:	200000dc 	.word	0x200000dc

08001ae0 <HAL_GPIO_EXTI_Callback>:
/*##########################################################################################################*/

/*##########################################################################################################*/
//External Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
	//printf("EXTI Callback Function !! \r\n");
	etherNet_Flag = 1;
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_GPIO_EXTI_Callback+0x1c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
	//TCP_Ethernet_Server();
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	200000db 	.word	0x200000db

08001b00 <_write>:
/*##########################################################################################################*/
/*Send information (strings) to the console (PC) */

/*printf for uart1*/	//gto
int _write(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 500);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <_write+0x28>)
 8001b18:	f004 ffc3 	bl	8006aa2 <HAL_UART_Transmit>
	return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200001cc 	.word	0x200001cc

08001b2c <debugPrint>:

/*Function to write directly to UART*/	//gto
void debugPrint(UART_HandleTypeDef *huart1, char _out[]){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart1, (uint8_t *) _out, strlen(_out), 10);
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f7fe fb4a 	bl	80001d0 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	230a      	movs	r3, #10
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 ffac 	bl	8006aa2 <HAL_UART_Transmit>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <debugPrintln>:


/*Function to write to UART and new line termination*/ //gto
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7fe fb37 	bl	80001d0 <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	230a      	movs	r3, #10
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f004 ff99 	bl	8006aa2 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8001b70:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001b74:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8001b76:	f107 010c 	add.w	r1, r7, #12
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f004 ff8f 	bl	8006aa2 <HAL_UART_Transmit>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b92:	f001 fcdb 	bl	800354c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b96:	f000 facd 	bl	8002134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9a:	f000 fddb 	bl	8002754 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9e:	f000 fdb1 	bl	8002704 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ba2:	f000 fd2f 	bl	8002604 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001ba6:	f000 fd03 	bl	80025b0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001baa:	f000 fcad 	bl	8002508 <MX_UART4_Init>
  MX_UART5_Init();
 8001bae:	f000 fcd5 	bl	800255c <MX_UART5_Init>
  MX_USART6_UART_Init();
 8001bb2:	f000 fd7b 	bl	80026ac <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001bb6:	f000 fbab 	bl	8002310 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bba:	f000 fc07 	bl	80023cc <MX_TIM1_Init>
  MX_TIM7_Init();
 8001bbe:	f000 fc6d 	bl	800249c <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001bc2:	f000 fd49 	bl	8002658 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001bc6:	f000 fb49 	bl	800225c <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001bca:	f000 fb33 	bl	8002234 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /*##########################################################################################################*/
  /*START DEBUGGING MESSAGE*/

  printf("\r\n Start STM32F407 for Master Anchor - 20210817 \r\n");
 8001bce:	48c5      	ldr	r0, [pc, #788]	; (8001ee4 <main+0x358>)
 8001bd0:	f005 fefa 	bl	80079c8 <puts>
  /*##########################################################################################################*/

  /*##########################################################################################################*/
  /*INTERRUPT SET*/
  //gto
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	49c4      	ldr	r1, [pc, #784]	; (8001ee8 <main+0x35c>)
 8001bd8:	48c4      	ldr	r0, [pc, #784]	; (8001eec <main+0x360>)
 8001bda:	f004 fff4 	bl	8006bc6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &data, 1); // interrupt uart 2
 8001bde:	2201      	movs	r2, #1
 8001be0:	49c3      	ldr	r1, [pc, #780]	; (8001ef0 <main+0x364>)
 8001be2:	48c4      	ldr	r0, [pc, #784]	; (8001ef4 <main+0x368>)
 8001be4:	f004 ffef 	bl	8006bc6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *) &GTO_rxdata, 1); // interrupt uart 6
 8001be8:	2201      	movs	r2, #1
 8001bea:	49c3      	ldr	r1, [pc, #780]	; (8001ef8 <main+0x36c>)
 8001bec:	48c3      	ldr	r0, [pc, #780]	; (8001efc <main+0x370>)
 8001bee:	f004 ffea 	bl	8006bc6 <HAL_UART_Receive_IT>

  /*PIN SET*/
  HAL_GPIO_WritePin(GPIOB, DOWN_EN, 0); 	// GPIO PB9 OUTPUT LOW -> Down enable
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf8:	48c1      	ldr	r0, [pc, #772]	; (8001f00 <main+0x374>)
 8001bfa:	f002 fafb 	bl	80041f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0); 	// SYNC_GEN LOW
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	48c0      	ldr	r0, [pc, #768]	; (8001f04 <main+0x378>)
 8001c04:	f002 faf6 	bl	80041f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, TX_EN, 1);		// GPIO PC1 OUTPUT HIGH -> tx enable
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	48be      	ldr	r0, [pc, #760]	; (8001f08 <main+0x37c>)
 8001c0e:	f002 faf1 	bl	80041f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_EN, 0);		// GPIO PC1 OUTPUT LOW -> rx enable
 8001c12:	2200      	movs	r2, #0
 8001c14:	2108      	movs	r1, #8
 8001c16:	48bc      	ldr	r0, [pc, #752]	; (8001f08 <main+0x37c>)
 8001c18:	f002 faec 	bl	80041f4 <HAL_GPIO_WritePin>

  /*##########################################################################################################*/
  /*ETHERNET SET*/
  //gto
  //printf("\r\n EHTERNET RUNNING .... 20210813 \r\n");
  E_RST_HIGH();								// Ethernet Enable
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2110      	movs	r1, #16
 8001c20:	48b9      	ldr	r0, [pc, #740]	; (8001f08 <main+0x37c>)
 8001c22:	f002 fae7 	bl	80041f4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, E_RST, 1);		// Ethernet Enable

  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);	// Ethernet Extra Interrupt Enable

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001c26:	49b9      	ldr	r1, [pc, #740]	; (8001f0c <main+0x380>)
 8001c28:	48b9      	ldr	r0, [pc, #740]	; (8001f10 <main+0x384>)
 8001c2a:	f7ff fc2b 	bl	8001484 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8001c2e:	49b9      	ldr	r1, [pc, #740]	; (8001f14 <main+0x388>)
 8001c30:	48b9      	ldr	r0, [pc, #740]	; (8001f18 <main+0x38c>)
 8001c32:	f7ff fc4d 	bl	80014d0 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8001c36:	49b9      	ldr	r1, [pc, #740]	; (8001f1c <main+0x390>)
 8001c38:	48b8      	ldr	r0, [pc, #736]	; (8001f1c <main+0x390>)
 8001c3a:	f7ff fcb9 	bl	80015b0 <wizchip_init>
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
		  	  	  	  	  .ip 	= {192, 168, 2, 192},					// IP address
						  .sn 	= {255, 255, 255, 0},					// Subnet mask
						  .gw 	= {192, 168, 2, 1}};					// Gateway address
  */
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	f8c3 2013 	str.w	r2, [r3, #19]
 8001c50:	4ab3      	ldr	r2, [pc, #716]	; (8001f20 <main+0x394>)
 8001c52:	463b      	mov	r3, r7
 8001c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c58:	6018      	str	r0, [r3, #0]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	8019      	strh	r1, [r3, #0]
 8001c5e:	4ab1      	ldr	r2, [pc, #708]	; (8001f24 <main+0x398>)
 8001c60:	1dbb      	adds	r3, r7, #6
 8001c62:	6810      	ldr	r0, [r2, #0]
 8001c64:	6018      	str	r0, [r3, #0]
 8001c66:	4ab0      	ldr	r2, [pc, #704]	; (8001f28 <main+0x39c>)
 8001c68:	f107 030a 	add.w	r3, r7, #10
 8001c6c:	6810      	ldr	r0, [r2, #0]
 8001c6e:	6018      	str	r0, [r3, #0]
 8001c70:	4aae      	ldr	r2, [pc, #696]	; (8001f2c <main+0x3a0>)
 8001c72:	f107 030e 	add.w	r3, r7, #14
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]
 		  	  	  	  	  .ip 	= {10, 0, 7, 211},						// IP address
 						  .sn 	= {255, 255, 248, 0},					// Subnet mask
 						  .gw 	= {10, 0, 0, 1}};						// Gateway address

  wizchip_setnetinfo(&netInfo);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fd49 	bl	8001714 <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 8001c82:	463b      	mov	r3, r7
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd81 	bl	800178c <wizchip_getnetinfo>
  PRINT_NETINFO(netInfo);
 8001c8a:	2364      	movs	r3, #100	; 0x64
 8001c8c:	2218      	movs	r2, #24
 8001c8e:	49a8      	ldr	r1, [pc, #672]	; (8001f30 <main+0x3a4>)
 8001c90:	4898      	ldr	r0, [pc, #608]	; (8001ef4 <main+0x368>)
 8001c92:	f004 ff06 	bl	8006aa2 <HAL_UART_Transmit>
 8001c96:	783b      	ldrb	r3, [r7, #0]
 8001c98:	461c      	mov	r4, r3
 8001c9a:	787b      	ldrb	r3, [r7, #1]
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	78bb      	ldrb	r3, [r7, #2]
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	7939      	ldrb	r1, [r7, #4]
 8001ca4:	7978      	ldrb	r0, [r7, #5]
 8001ca6:	9003      	str	r0, [sp, #12]
 8001ca8:	9102      	str	r1, [sp, #8]
 8001caa:	9201      	str	r2, [sp, #4]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	462b      	mov	r3, r5
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	49a0      	ldr	r1, [pc, #640]	; (8001f34 <main+0x3a8>)
 8001cb4:	48a0      	ldr	r0, [pc, #640]	; (8001f38 <main+0x3ac>)
 8001cb6:	f005 fe9f 	bl	80079f8 <siprintf>
 8001cba:	489f      	ldr	r0, [pc, #636]	; (8001f38 <main+0x3ac>)
 8001cbc:	f7fe fa88 	bl	80001d0 <strlen>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	499c      	ldr	r1, [pc, #624]	; (8001f38 <main+0x3ac>)
 8001cc8:	488a      	ldr	r0, [pc, #552]	; (8001ef4 <main+0x368>)
 8001cca:	f004 feea 	bl	8006aa2 <HAL_UART_Transmit>
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	7a3b      	ldrb	r3, [r7, #8]
 8001cd8:	7a7a      	ldrb	r2, [r7, #9]
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	4996      	ldr	r1, [pc, #600]	; (8001f3c <main+0x3b0>)
 8001ce4:	4894      	ldr	r0, [pc, #592]	; (8001f38 <main+0x3ac>)
 8001ce6:	f005 fe87 	bl	80079f8 <siprintf>
 8001cea:	4893      	ldr	r0, [pc, #588]	; (8001f38 <main+0x3ac>)
 8001cec:	f7fe fa70 	bl	80001d0 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	4990      	ldr	r1, [pc, #576]	; (8001f38 <main+0x3ac>)
 8001cf8:	487e      	ldr	r0, [pc, #504]	; (8001ef4 <main+0x368>)
 8001cfa:	f004 fed2 	bl	8006aa2 <HAL_UART_Transmit>
 8001cfe:	7abb      	ldrb	r3, [r7, #10]
 8001d00:	4619      	mov	r1, r3
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	4618      	mov	r0, r3
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	7b7a      	ldrb	r2, [r7, #13]
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	498b      	ldr	r1, [pc, #556]	; (8001f40 <main+0x3b4>)
 8001d14:	4888      	ldr	r0, [pc, #544]	; (8001f38 <main+0x3ac>)
 8001d16:	f005 fe6f 	bl	80079f8 <siprintf>
 8001d1a:	4887      	ldr	r0, [pc, #540]	; (8001f38 <main+0x3ac>)
 8001d1c:	f7fe fa58 	bl	80001d0 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	4984      	ldr	r1, [pc, #528]	; (8001f38 <main+0x3ac>)
 8001d28:	4872      	ldr	r0, [pc, #456]	; (8001ef4 <main+0x368>)
 8001d2a:	f004 feba 	bl	8006aa2 <HAL_UART_Transmit>
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	4619      	mov	r1, r3
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	4618      	mov	r0, r3
 8001d36:	7c3b      	ldrb	r3, [r7, #16]
 8001d38:	7c7a      	ldrb	r2, [r7, #17]
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	4980      	ldr	r1, [pc, #512]	; (8001f44 <main+0x3b8>)
 8001d44:	487c      	ldr	r0, [pc, #496]	; (8001f38 <main+0x3ac>)
 8001d46:	f005 fe57 	bl	80079f8 <siprintf>
 8001d4a:	487b      	ldr	r0, [pc, #492]	; (8001f38 <main+0x3ac>)
 8001d4c:	f7fe fa40 	bl	80001d0 <strlen>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2364      	movs	r3, #100	; 0x64
 8001d56:	4978      	ldr	r1, [pc, #480]	; (8001f38 <main+0x3ac>)
 8001d58:	4866      	ldr	r0, [pc, #408]	; (8001ef4 <main+0x368>)
 8001d5a:	f004 fea2 	bl	8006aa2 <HAL_UART_Transmit>
  while (1)
  {
	  //DWT_Delay_us(1000);											// 10 microsecond
	  //HAL_UART_Transmit(&huart6, (uint8_t *) &test, 1, 10);		//4mbps test

	  loopback_tcps(SOCK_TCPS, 100, 60500);
 8001d5e:	f64e 4254 	movw	r2, #60500	; 0xec54
 8001d62:	2164      	movs	r1, #100	; 0x64
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 fe49 	bl	80029fc <loopback_tcps>

	  if (uart1_key_Flag){
 8001d6a:	4b77      	ldr	r3, [pc, #476]	; (8001f48 <main+0x3bc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8137 	beq.w	8001fe2 <main+0x456>
		  uart1_key_Flag = 0;
 8001d74:	4b74      	ldr	r3, [pc, #464]	; (8001f48 <main+0x3bc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
		  switch(rx_data){
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <main+0x35c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3b32      	subs	r3, #50	; 0x32
 8001d80:	2b48      	cmp	r3, #72	; 0x48
 8001d82:	f200 8131 	bhi.w	8001fe8 <main+0x45c>
 8001d86:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <main+0x200>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001ecf 	.word	0x08001ecf
 8001d90:	08001fe9 	.word	0x08001fe9
 8001d94:	08001fe9 	.word	0x08001fe9
 8001d98:	08001fe9 	.word	0x08001fe9
 8001d9c:	08001f59 	.word	0x08001f59
 8001da0:	08001fe9 	.word	0x08001fe9
 8001da4:	08001fe9 	.word	0x08001fe9
 8001da8:	08001fe9 	.word	0x08001fe9
 8001dac:	08001fe9 	.word	0x08001fe9
 8001db0:	08001fe9 	.word	0x08001fe9
 8001db4:	08001fe9 	.word	0x08001fe9
 8001db8:	08001fe9 	.word	0x08001fe9
 8001dbc:	08001fe9 	.word	0x08001fe9
 8001dc0:	08001fe9 	.word	0x08001fe9
 8001dc4:	08001fe9 	.word	0x08001fe9
 8001dc8:	08001fe9 	.word	0x08001fe9
 8001dcc:	08001fe9 	.word	0x08001fe9
 8001dd0:	08001fe9 	.word	0x08001fe9
 8001dd4:	08001fe9 	.word	0x08001fe9
 8001dd8:	08001fe9 	.word	0x08001fe9
 8001ddc:	08001fe9 	.word	0x08001fe9
 8001de0:	08001fe9 	.word	0x08001fe9
 8001de4:	08001fe9 	.word	0x08001fe9
 8001de8:	08001fe9 	.word	0x08001fe9
 8001dec:	08001fe9 	.word	0x08001fe9
 8001df0:	08001fe9 	.word	0x08001fe9
 8001df4:	08001fe9 	.word	0x08001fe9
 8001df8:	08001fe9 	.word	0x08001fe9
 8001dfc:	08001fe9 	.word	0x08001fe9
 8001e00:	08001fe9 	.word	0x08001fe9
 8001e04:	08001fe9 	.word	0x08001fe9
 8001e08:	08001fe9 	.word	0x08001fe9
 8001e0c:	08001fe9 	.word	0x08001fe9
 8001e10:	08001fe9 	.word	0x08001fe9
 8001e14:	08001fe9 	.word	0x08001fe9
 8001e18:	08001fe9 	.word	0x08001fe9
 8001e1c:	08001fe9 	.word	0x08001fe9
 8001e20:	08001fe9 	.word	0x08001fe9
 8001e24:	08001fe9 	.word	0x08001fe9
 8001e28:	08001fe9 	.word	0x08001fe9
 8001e2c:	08001fe9 	.word	0x08001fe9
 8001e30:	08001fe9 	.word	0x08001fe9
 8001e34:	08001fe9 	.word	0x08001fe9
 8001e38:	08001fe9 	.word	0x08001fe9
 8001e3c:	08001fe9 	.word	0x08001fe9
 8001e40:	08001fe9 	.word	0x08001fe9
 8001e44:	08001fe9 	.word	0x08001fe9
 8001e48:	08001eb1 	.word	0x08001eb1
 8001e4c:	08001fe9 	.word	0x08001fe9
 8001e50:	08001fa7 	.word	0x08001fa7
 8001e54:	08001fe9 	.word	0x08001fe9
 8001e58:	08001fb5 	.word	0x08001fb5
 8001e5c:	08001fe9 	.word	0x08001fe9
 8001e60:	08001fe9 	.word	0x08001fe9
 8001e64:	08001fe9 	.word	0x08001fe9
 8001e68:	08001fe9 	.word	0x08001fe9
 8001e6c:	08001fe9 	.word	0x08001fe9
 8001e70:	08001fe9 	.word	0x08001fe9
 8001e74:	08001fe9 	.word	0x08001fe9
 8001e78:	08001fe9 	.word	0x08001fe9
 8001e7c:	08001fe9 	.word	0x08001fe9
 8001e80:	08001fe9 	.word	0x08001fe9
 8001e84:	08001fe9 	.word	0x08001fe9
 8001e88:	08001fe9 	.word	0x08001fe9
 8001e8c:	08001f6f 	.word	0x08001f6f
 8001e90:	08001ec9 	.word	0x08001ec9
 8001e94:	08001f7d 	.word	0x08001f7d
 8001e98:	08001fe9 	.word	0x08001fe9
 8001e9c:	08001fe9 	.word	0x08001fe9
 8001ea0:	08001fe9 	.word	0x08001fe9
 8001ea4:	08001f99 	.word	0x08001f99
 8001ea8:	08001fe9 	.word	0x08001fe9
 8001eac:	08001f8b 	.word	0x08001f8b
			  case 'a':
				  debugPrint(&huart1, "debugPrint test ");
 8001eb0:	4926      	ldr	r1, [pc, #152]	; (8001f4c <main+0x3c0>)
 8001eb2:	480e      	ldr	r0, [pc, #56]	; (8001eec <main+0x360>)
 8001eb4:	f7ff fe3a 	bl	8001b2c <debugPrint>
				  debugPrintln(&huart1, "debugPrintln test");
 8001eb8:	4925      	ldr	r1, [pc, #148]	; (8001f50 <main+0x3c4>)
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <main+0x360>)
 8001ebc:	f7ff fe49 	bl	8001b52 <debugPrintln>
				  printf("printf test\r\n");
 8001ec0:	4824      	ldr	r0, [pc, #144]	; (8001f54 <main+0x3c8>)
 8001ec2:	f005 fd81 	bl	80079c8 <puts>
				  break;
 8001ec6:	e08f      	b.n	8001fe8 <main+0x45c>

			  case 's':
				  Sync_out();
 8001ec8:	f000 fd24 	bl	8002914 <Sync_out>
				  break;
 8001ecc:	e08c      	b.n	8001fe8 <main+0x45c>

			  case '2':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	480c      	ldr	r0, [pc, #48]	; (8001f04 <main+0x378>)
 8001ed4:	f002 f98e 	bl	80041f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 0);								// GPIO PB5 OUTPUT LOW  -> USART2 enable
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2120      	movs	r1, #32
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <main+0x374>)
 8001ede:	f002 f989 	bl	80041f4 <HAL_GPIO_WritePin>
				  break;
 8001ee2:	e081      	b.n	8001fe8 <main+0x45c>
 8001ee4:	08008aa0 	.word	0x08008aa0
 8001ee8:	20000289 	.word	0x20000289
 8001eec:	200001cc 	.word	0x200001cc
 8001ef0:	2000002c 	.word	0x2000002c
 8001ef4:	2000039c 	.word	0x2000039c
 8001ef8:	2000033c 	.word	0x2000033c
 8001efc:	2000028c 	.word	0x2000028c
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	08001865 	.word	0x08001865
 8001f10:	0800184d 	.word	0x0800184d
 8001f14:	080018a1 	.word	0x080018a1
 8001f18:	0800187d 	.word	0x0800187d
 8001f1c:	20000034 	.word	0x20000034
 8001f20:	08008cd0 	.word	0x08008cd0
 8001f24:	08008cd8 	.word	0x08008cd8
 8001f28:	08008cdc 	.word	0x08008cdc
 8001f2c:	08008ce0 	.word	0x08008ce0
 8001f30:	08008ad4 	.word	0x08008ad4
 8001f34:	08008af0 	.word	0x08008af0
 8001f38:	20000144 	.word	0x20000144
 8001f3c:	08008b14 	.word	0x08008b14
 8001f40:	08008b34 	.word	0x08008b34
 8001f44:	08008b54 	.word	0x08008b54
 8001f48:	200000d9 	.word	0x200000d9
 8001f4c:	08008b74 	.word	0x08008b74
 8001f50:	08008b88 	.word	0x08008b88
 8001f54:	08008b9c 	.word	0x08008b9c

			  case '6':
				  HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	485a      	ldr	r0, [pc, #360]	; (80020c8 <main+0x53c>)
 8001f5e:	f002 f949 	bl	80041f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);								// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8001f62:	2201      	movs	r2, #1
 8001f64:	2120      	movs	r1, #32
 8001f66:	4859      	ldr	r0, [pc, #356]	; (80020cc <main+0x540>)
 8001f68:	f002 f944 	bl	80041f4 <HAL_GPIO_WritePin>
				  break;
 8001f6c:	e03c      	b.n	8001fe8 <main+0x45c>

			  case 'r':
				  HAL_UART_Transmit(&huart2, (uint8_t *) data, 1, 10);				// send data(0x00)
 8001f6e:	230a      	movs	r3, #10
 8001f70:	2201      	movs	r2, #1
 8001f72:	4957      	ldr	r1, [pc, #348]	; (80020d0 <main+0x544>)
 8001f74:	4857      	ldr	r0, [pc, #348]	; (80020d4 <main+0x548>)
 8001f76:	f004 fd94 	bl	8006aa2 <HAL_UART_Transmit>
				  break;
 8001f7a:	e035      	b.n	8001fe8 <main+0x45c>

			  case 't':
				  HAL_UART_Transmit(&huart6, (uint8_t *) &uart6_Signal, 1, 10);		// send data(0x00)
 8001f7c:	230a      	movs	r3, #10
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4955      	ldr	r1, [pc, #340]	; (80020d8 <main+0x54c>)
 8001f82:	4856      	ldr	r0, [pc, #344]	; (80020dc <main+0x550>)
 8001f84:	f004 fd8d 	bl	8006aa2 <HAL_UART_Transmit>
				  break;
 8001f88:	e02e      	b.n	8001fe8 <main+0x45c>

			  case 'z':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=00 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001f8a:	2364      	movs	r3, #100	; 0x64
 8001f8c:	2223      	movs	r2, #35	; 0x23
 8001f8e:	4954      	ldr	r1, [pc, #336]	; (80020e0 <main+0x554>)
 8001f90:	4850      	ldr	r0, [pc, #320]	; (80020d4 <main+0x548>)
 8001f92:	f004 fd86 	bl	8006aa2 <HAL_UART_Transmit>
				  break;
 8001f96:	e027      	b.n	8001fe8 <main+0x45c>

			  case 'x':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=01 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001f98:	2364      	movs	r3, #100	; 0x64
 8001f9a:	2223      	movs	r2, #35	; 0x23
 8001f9c:	4951      	ldr	r1, [pc, #324]	; (80020e4 <main+0x558>)
 8001f9e:	484d      	ldr	r0, [pc, #308]	; (80020d4 <main+0x548>)
 8001fa0:	f004 fd7f 	bl	8006aa2 <HAL_UART_Transmit>
				  break;
 8001fa4:	e020      	b.n	8001fe8 <main+0x45c>

			  case 'c':
				  HAL_UART_Transmit(&huart2, (uint8_t *) "[RID=08 407 TO SLAVE ANCHOR DEVICE]", 35, 100);
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	2223      	movs	r2, #35	; 0x23
 8001faa:	494f      	ldr	r1, [pc, #316]	; (80020e8 <main+0x55c>)
 8001fac:	4849      	ldr	r0, [pc, #292]	; (80020d4 <main+0x548>)
 8001fae:	f004 fd78 	bl	8006aa2 <HAL_UART_Transmit>
				  break;
 8001fb2:	e019      	b.n	8001fe8 <main+0x45c>

			  case 'e':
				  //etherNet_Flag = 1;
				  //TCP_Ethernet_Server();
				  //loopback_tcps(SOCK_TCPS, 100, 60500);
				  if((retVal = send(0, GREETING_MSG, strlen(GREETING_MSG))) == (int16_t)strlen(GREETING_MSG)) {
 8001fb4:	2236      	movs	r2, #54	; 0x36
 8001fb6:	494d      	ldr	r1, [pc, #308]	; (80020ec <main+0x560>)
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff f861 	bl	8001080 <send>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <main+0x564>)
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <main+0x564>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b36      	cmp	r3, #54	; 0x36
 8001fcc:	d10b      	bne.n	8001fe6 <main+0x45a>
					  printf("######### WELCOME MESSAGE !! \r\n");
 8001fce:	4849      	ldr	r0, [pc, #292]	; (80020f4 <main+0x568>)
 8001fd0:	f005 fcfa 	bl	80079c8 <puts>
					  PRINT_STR(SENT_MESSAGE_MSG);
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	2229      	movs	r2, #41	; 0x29
 8001fd8:	4947      	ldr	r1, [pc, #284]	; (80020f8 <main+0x56c>)
 8001fda:	483e      	ldr	r0, [pc, #248]	; (80020d4 <main+0x548>)
 8001fdc:	f004 fd61 	bl	8006aa2 <HAL_UART_Transmit>
					  //etherNet_Flag = 0;
				  }
				  break;
 8001fe0:	e001      	b.n	8001fe6 <main+0x45a>

		  }
	  }
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <main+0x45c>
				  break;
 8001fe6:	bf00      	nop

	  if(uart2_key_Flag) {
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <main+0x570>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d024      	beq.n	800203a <main+0x4ae>
		  uart2_key_Flag = 0;
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <main+0x570>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		  printf("uart2 flag on \r\n");
 8001ff6:	4842      	ldr	r0, [pc, #264]	; (8002100 <main+0x574>)
 8001ff8:	f005 fce6 	bl	80079c8 <puts>
		  reset_CMD = SubStr(rxd, 0, 35);
 8001ffc:	2223      	movs	r2, #35	; 0x23
 8001ffe:	2100      	movs	r1, #0
 8002000:	4840      	ldr	r0, [pc, #256]	; (8002104 <main+0x578>)
 8002002:	f000 fcb7 	bl	8002974 <SubStr>
 8002006:	4603      	mov	r3, r0
 8002008:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <main+0x57c>)
 800200a:	6013      	str	r3, [r2, #0]
		  printf("substring %s\r\n", reset_CMD);
 800200c:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <main+0x57c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	483e      	ldr	r0, [pc, #248]	; (800210c <main+0x580>)
 8002014:	f005 fc52 	bl	80078bc <iprintf>
		  //HAL_Delay(1);
		  for (int i = 0; i < LENGTH; i++) {
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	e00a      	b.n	8002034 <main+0x4a8>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &rxd[i], 1, 10);
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4a38      	ldr	r2, [pc, #224]	; (8002104 <main+0x578>)
 8002022:	1899      	adds	r1, r3, r2
 8002024:	230a      	movs	r3, #10
 8002026:	2201      	movs	r2, #1
 8002028:	4839      	ldr	r0, [pc, #228]	; (8002110 <main+0x584>)
 800202a:	f004 fd3a 	bl	8006aa2 <HAL_UART_Transmit>
		  for (int i = 0; i < LENGTH; i++) {
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b22      	cmp	r3, #34	; 0x22
 8002038:	ddf1      	ble.n	800201e <main+0x492>
		  }
	  }

	  if(uart_6_flag) {
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <main+0x588>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <main+0x4e4>
		  uart_6_flag = 0;
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <main+0x588>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]

		  printf("Received 105 Data \r\n");
 8002048:	4833      	ldr	r0, [pc, #204]	; (8002118 <main+0x58c>)
 800204a:	f005 fcbd 	bl	80079c8 <puts>

		  //HAL_Delay(1);

		  for (int i = 0; i < GTO_LENGTH; i++) {
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e00a      	b.n	800206a <main+0x4de>
			  HAL_UART_Transmit(&huart1, (uint8_t *) &GTO_rxd[i], 1, 10);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <main+0x590>)
 8002058:	1899      	adds	r1, r3, r2
 800205a:	230a      	movs	r3, #10
 800205c:	2201      	movs	r2, #1
 800205e:	482c      	ldr	r0, [pc, #176]	; (8002110 <main+0x584>)
 8002060:	f004 fd1f 	bl	8006aa2 <HAL_UART_Transmit>
		  for (int i = 0; i < GTO_LENGTH; i++) {
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3301      	adds	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b0a      	cmp	r3, #10
 800206e:	ddf1      	ble.n	8002054 <main+0x4c8>
		  }
		  //printf("\r\n\r\n");

	  }

	  if(etherNet_Flag){
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <main+0x594>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <main+0x4f2>
		  etherNet_Flag = 0;
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <main+0x594>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]

	  }


	  id_1 = HAL_GPIO_ReadPin(GPIOB, ID1);
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	4812      	ldr	r0, [pc, #72]	; (80020cc <main+0x540>)
 8002084:	f002 f89e 	bl	80041c4 <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <main+0x598>)
 800208e:	701a      	strb	r2, [r3, #0]
	  id_2 = HAL_GPIO_ReadPin(GPIOB, ID2);
 8002090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <main+0x540>)
 8002096:	f002 f895 	bl	80041c4 <HAL_GPIO_ReadPin>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <main+0x59c>)
 80020a0:	701a      	strb	r2, [r3, #0]
	  id_3 = HAL_GPIO_ReadPin(GPIOB, ID3);
 80020a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <main+0x540>)
 80020a8:	f002 f88c 	bl	80041c4 <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <main+0x5a0>)
 80020b2:	701a      	strb	r2, [r3, #0]
	  id_4 = HAL_GPIO_ReadPin(GPIOB, ID4);
 80020b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <main+0x540>)
 80020ba:	f002 f883 	bl	80041c4 <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <main+0x5a4>)
 80020c4:	701a      	strb	r2, [r3, #0]
	  loopback_tcps(SOCK_TCPS, 100, 60500);
 80020c6:	e64a      	b.n	8001d5e <main+0x1d2>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40020400 	.word	0x40020400
 80020d0:	2000002c 	.word	0x2000002c
 80020d4:	2000039c 	.word	0x2000039c
 80020d8:	2000002e 	.word	0x2000002e
 80020dc:	2000028c 	.word	0x2000028c
 80020e0:	08008bac 	.word	0x08008bac
 80020e4:	08008bd0 	.word	0x08008bd0
 80020e8:	08008bf4 	.word	0x08008bf4
 80020ec:	08008c18 	.word	0x08008c18
 80020f0:	2000013c 	.word	0x2000013c
 80020f4:	08008c50 	.word	0x08008c50
 80020f8:	08008c70 	.word	0x08008c70
 80020fc:	200000da 	.word	0x200000da
 8002100:	08008c9c 	.word	0x08008c9c
 8002104:	20000540 	.word	0x20000540
 8002108:	20000138 	.word	0x20000138
 800210c:	08008cac 	.word	0x08008cac
 8002110:	200001cc 	.word	0x200001cc
 8002114:	200000dc 	.word	0x200000dc
 8002118:	08008cbc 	.word	0x08008cbc
 800211c:	200002d0 	.word	0x200002d0
 8002120:	200000db 	.word	0x200000db
 8002124:	20000180 	.word	0x20000180
 8002128:	200004dc 	.word	0x200004dc
 800212c:	20000210 	.word	0x20000210
 8002130:	200000ec 	.word	0x200000ec

08002134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b098      	sub	sp, #96	; 0x60
 8002138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800213e:	2230      	movs	r2, #48	; 0x30
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f005 fb08 	bl	8007758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <SystemClock_Config+0xf8>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <SystemClock_Config+0xf8>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <SystemClock_Config+0xf8>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <SystemClock_Config+0xfc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a29      	ldr	r2, [pc, #164]	; (8002230 <SystemClock_Config+0xfc>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <SystemClock_Config+0xfc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800219e:	230a      	movs	r3, #10
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a2:	2301      	movs	r3, #1
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a6:	2310      	movs	r3, #16
 80021a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021aa:	2301      	movs	r3, #1
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ae:	2302      	movs	r3, #2
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021b6:	2308      	movs	r3, #8
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021ba:	23a8      	movs	r3, #168	; 0xa8
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021be:	2302      	movs	r3, #2
 80021c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c2:	2304      	movs	r3, #4
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 f844 	bl	8004258 <HAL_RCC_OscConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021d6:	f000 fd2b 	bl	8002c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021da:	230f      	movs	r3, #15
 80021dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2102      	movs	r1, #2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 faa6 	bl	8004748 <HAL_RCC_ClockConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002202:	f000 fd15 	bl	8002c30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002206:	2302      	movs	r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800220a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fc99 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002220:	f000 fd06 	bl	8002c30 <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3760      	adds	r7, #96	; 0x60
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2025      	movs	r0, #37	; 0x25
 800223e:	f001 fa7f 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002242:	2025      	movs	r0, #37	; 0x25
 8002244:	f001 fa98 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	2047      	movs	r0, #71	; 0x47
 800224e:	f001 fa77 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002252:	2047      	movs	r0, #71	; 0x47
 8002254:	f001 fa90 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002270:	2300      	movs	r3, #0
 8002272:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <MX_RTC_Init+0xac>)
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <MX_RTC_Init+0xb0>)
 8002278:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <MX_RTC_Init+0xac>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <MX_RTC_Init+0xac>)
 8002282:	227f      	movs	r2, #127	; 0x7f
 8002284:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <MX_RTC_Init+0xac>)
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <MX_RTC_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_RTC_Init+0xac>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_RTC_Init+0xac>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800229e:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_RTC_Init+0xac>)
 80022a0:	f002 fd36 	bl	8004d10 <HAL_RTC_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80022aa:	f000 fcc1 	bl	8002c30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2201      	movs	r2, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <MX_RTC_Init+0xac>)
 80022ca:	f002 fdb2 	bl	8004e32 <HAL_RTC_SetTime>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80022d4:	f000 fcac 	bl	8002c30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022d8:	2301      	movs	r3, #1
 80022da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022dc:	2301      	movs	r3, #1
 80022de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022e8:	463b      	mov	r3, r7
 80022ea:	2201      	movs	r2, #1
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_RTC_Init+0xac>)
 80022f0:	f002 fe5c 	bl	8004fac <HAL_RTC_SetDate>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80022fa:	f000 fc99 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000214 	.word	0x20000214
 800230c:	40002800 	.word	0x40002800

08002310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <MX_SPI1_Init+0xb4>)
 800231a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <MX_SPI1_Init+0xb0>)
 800231e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002322:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <MX_SPI1_Init+0xb0>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MX_SPI1_Init+0xb0>)
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002346:	2210      	movs	r2, #16
 8002348:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <MX_SPI1_Init+0xb0>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MX_SPI1_Init+0xb0>)
 800235e:	220a      	movs	r2, #10
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <MX_SPI1_Init+0xb0>)
 8002364:	f002 ff3b 	bl	80051de <HAL_SPI_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800236e:	f000 fc5f 	bl	8002c30 <Error_Handler>
  /**SPI2 GPIO Configuration
	PB4     ------> SPI1_SCK
	PB6     ------> SPI1_MISO
	PB7     ------> SPI1_MOSI
  */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002380:	23e0      	movs	r3, #224	; 0xe0
 8002382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002390:	2305      	movs	r3, #5
 8002392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <MX_SPI1_Init+0xb8>)
 800239a:	f001 fd77 	bl	8003e8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800239e:	2310      	movs	r3, #16
 80023a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_SPI1_Init+0xb8>)
 80023b4:	f001 fd6a 	bl	8003e8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000340 	.word	0x20000340
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40020000 	.word	0x40020000

080023cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <MX_TIM1_Init+0xc8>)
 80023fa:	4a27      	ldr	r2, [pc, #156]	; (8002498 <MX_TIM1_Init+0xcc>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <MX_TIM1_Init+0xc8>)
 800240c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <MX_TIM1_Init+0xc8>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002424:	481b      	ldr	r0, [pc, #108]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002426:	f003 fda1 	bl	8005f6c <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002430:	f000 fbfe 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4619      	mov	r1, r3
 8002440:	4814      	ldr	r0, [pc, #80]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002442:	f003 ff5b 	bl	80062fc <HAL_TIM_ConfigClockSource>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800244c:	f000 fbf0 	bl	8002c30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002450:	2306      	movs	r3, #6
 8002452:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	4619      	mov	r1, r3
 800245e:	480d      	ldr	r0, [pc, #52]	; (8002494 <MX_TIM1_Init+0xc8>)
 8002460:	f004 f810 	bl	8006484 <HAL_TIM_SlaveConfigSynchro>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800246a:	f000 fbe1 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_TIM1_Init+0xc8>)
 800247c:	f004 fa34 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002486:	f000 fbd3 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3730      	adds	r7, #48	; 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000023c 	.word	0x2000023c
 8002498:	40010000 	.word	0x40010000

0800249c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a2:	463b      	mov	r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MX_TIM7_Init+0x64>)
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <MX_TIM7_Init+0x68>)
 80024ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_TIM7_Init+0x64>)
 80024b2:	2229      	movs	r2, #41	; 0x29
 80024b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_TIM7_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_TIM7_Init+0x64>)
 80024be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_TIM7_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024ca:	480d      	ldr	r0, [pc, #52]	; (8002500 <MX_TIM7_Init+0x64>)
 80024cc:	f003 fd4e 	bl	8005f6c <HAL_TIM_Base_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024d6:	f000 fbab 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	4619      	mov	r1, r3
 80024e6:	4806      	ldr	r0, [pc, #24]	; (8002500 <MX_TIM7_Init+0x64>)
 80024e8:	f004 f9fe 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80024f2:	f000 fb9d 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000494 	.word	0x20000494
 8002504:	40001400 	.word	0x40001400

08002508 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_UART4_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <MX_UART4_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_UART4_Init+0x4c>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_UART4_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_UART4_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_UART4_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_UART4_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_UART4_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_UART4_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_UART4_Init+0x4c>)
 8002540:	f004 fa62 	bl	8006a08 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800254a:	f000 fb71 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200002f8 	.word	0x200002f8
 8002558:	40004c00 	.word	0x40004c00

0800255c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_UART5_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_UART5_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_UART5_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_UART5_Init+0x4c>)
 8002594:	f004 fa38 	bl	8006a08 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800259e:	f000 fb47 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000184 	.word	0x20000184
 80025ac:	40005000 	.word	0x40005000

080025b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_USART1_UART_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART1_UART_Init+0x4c>)
 80025e8:	f004 fa0e 	bl	8006a08 <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025f2:	f000 fb1d 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001cc 	.word	0x200001cc
 8002600:	40011000 	.word	0x40011000

08002604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_USART2_UART_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800263c:	f004 f9e4 	bl	8006a08 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002646:	f000 faf3 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000039c 	.word	0x2000039c
 8002654:	40004400 	.word	0x40004400

08002658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <MX_USART3_UART_Init+0x50>)
 8002660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_USART3_UART_Init+0x4c>)
 8002690:	f004 f9ba 	bl	8006a08 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800269a:	f000 fac9 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200000f0 	.word	0x200000f0
 80026a8:	40004800 	.word	0x40004800

080026ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
#endif
  huart6.Instance = USART6;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_USART6_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;	//4mbps //115200;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <MX_USART6_UART_Init+0x54>)
 80026ba:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026d0:	220c      	movs	r2, #12
 80026d2:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;	//UART_OVERSAMPLING_16;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART6_UART_Init+0x4c>)
 80026e4:	f004 f990 	bl	8006a08 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80026ee:	f000 fa9f 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE END USART6_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000028c 	.word	0x2000028c
 80026fc:	40011400 	.word	0x40011400
 8002700:	003d0900 	.word	0x003d0900

08002704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_DMA_Init+0x4c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <MX_DMA_Init+0x4c>)
 8002714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <MX_DMA_Init+0x4c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2038      	movs	r0, #56	; 0x38
 800272c:	f001 f808 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002730:	2038      	movs	r0, #56	; 0x38
 8002732:	f001 f821 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	203b      	movs	r0, #59	; 0x3b
 800273c:	f001 f800 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002740:	203b      	movs	r0, #59	; 0x3b
 8002742:	f001 f819 	bl	8003778 <HAL_NVIC_EnableIRQ>

}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a62      	ldr	r2, [pc, #392]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b60      	ldr	r3, [pc, #384]	; (80028fc <MX_GPIO_Init+0x1a8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <MX_GPIO_Init+0x1a8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a5b      	ldr	r2, [pc, #364]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a54      	ldr	r2, [pc, #336]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b52      	ldr	r3, [pc, #328]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a46      	ldr	r2, [pc, #280]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b44      	ldr	r3, [pc, #272]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <MX_GPIO_Init+0x1a8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a3f      	ldr	r2, [pc, #252]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <MX_GPIO_Init+0x1a8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	211a      	movs	r1, #26
 8002816:	483a      	ldr	r0, [pc, #232]	; (8002900 <MX_GPIO_Init+0x1ac>)
 8002818:	f001 fcec 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	4838      	ldr	r0, [pc, #224]	; (8002904 <MX_GPIO_Init+0x1b0>)
 8002824:	f001 fce6 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800282e:	4836      	ldr	r0, [pc, #216]	; (8002908 <MX_GPIO_Init+0x1b4>)
 8002830:	f001 fce0 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	2101      	movs	r1, #1
 8002838:	4834      	ldr	r0, [pc, #208]	; (800290c <MX_GPIO_Init+0x1b8>)
 800283a:	f001 fcdb 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800283e:	231a      	movs	r3, #26
 8002840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002842:	2301      	movs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	482a      	ldr	r0, [pc, #168]	; (8002900 <MX_GPIO_Init+0x1ac>)
 8002856:	f001 fb19 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <MX_GPIO_Init+0x1bc>)
 8002860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4827      	ldr	r0, [pc, #156]	; (800290c <MX_GPIO_Init+0x1b8>)
 800286e:	f001 fb0d 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002872:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	4820      	ldr	r0, [pc, #128]	; (8002908 <MX_GPIO_Init+0x1b4>)
 8002888:	f001 fb00 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800288c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	2301      	movs	r3, #1
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4817      	ldr	r0, [pc, #92]	; (8002904 <MX_GPIO_Init+0x1b0>)
 80028a6:	f001 faf1 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 80028aa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4811      	ldr	r0, [pc, #68]	; (8002908 <MX_GPIO_Init+0x1b4>)
 80028c4:	f001 fae2 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	2301      	movs	r3, #1
 80028ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	480b      	ldr	r0, [pc, #44]	; (800290c <MX_GPIO_Init+0x1b8>)
 80028e0:	f001 fad4 	bl	8003e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	2017      	movs	r0, #23
 80028ea:	f000 ff29 	bl	8003740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028ee:	2017      	movs	r0, #23
 80028f0:	f000 ff42 	bl	8003778 <HAL_NVIC_EnableIRQ>

}
 80028f4:	bf00      	nop
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020800 	.word	0x40020800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40021000 	.word	0x40021000
 8002910:	10110000 	.word	0x10110000

08002914 <Sync_out>:
/* USER CODE BEGIN 4 */
/*##########################################################################################################*/
/*gto*/
/* Synchronization Function */

void Sync_out(){
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	// sync signal
	HAL_GPIO_WritePin(GPIOB, GPIO_A, 1);							// GPIO PB5 OUTPUT HIGH -> USART6 enable
 8002918:	2201      	movs	r2, #1
 800291a:	2120      	movs	r1, #32
 800291c:	4810      	ldr	r0, [pc, #64]	; (8002960 <Sync_out+0x4c>)
 800291e:	f001 fc69 	bl	80041f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 1);							// GPIO PE0 OUTPUT High -> SYNC_GEN
 8002922:	2201      	movs	r2, #1
 8002924:	2101      	movs	r1, #1
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <Sync_out+0x50>)
 8002928:	f001 fc64 	bl	80041f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 1);								// GPIO PC1 OUTPUT HIGH -> tx enable
 800292c:	2201      	movs	r2, #1
 800292e:	2102      	movs	r1, #2
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <Sync_out+0x54>)
 8002932:	f001 fc5f 	bl	80041f4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, (uint8_t *) &sync_Signal, 1, 10);	// send data(0xff)
 8002936:	230a      	movs	r3, #10
 8002938:	2201      	movs	r2, #1
 800293a:	490c      	ldr	r1, [pc, #48]	; (800296c <Sync_out+0x58>)
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <Sync_out+0x5c>)
 800293e:	f004 f8b0 	bl	8006aa2 <HAL_UART_Transmit>
	DWT_Delay_us(100);												// 10 microsecond
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	f7fe ff5e 	bl	8001804 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOC, TX_EN, 0);								// GPIO PC1 OUTPUT LOW -> tx enable
 8002948:	2200      	movs	r2, #0
 800294a:	2102      	movs	r1, #2
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <Sync_out+0x54>)
 800294e:	f001 fc51 	bl	80041f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SYNC_GEN, 0);							// GPIO PE0 OUTPUT LOW -> SYNC_GEN
 8002952:	2200      	movs	r2, #0
 8002954:	2101      	movs	r1, #1
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <Sync_out+0x50>)
 8002958:	f001 fc4c 	bl	80041f4 <HAL_GPIO_WritePin>
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40020400 	.word	0x40020400
 8002964:	40021000 	.word	0x40021000
 8002968:	40020800 	.word	0x40020800
 800296c:	2000002d 	.word	0x2000002d
 8002970:	2000028c 	.word	0x2000028c

08002974 <SubStr>:
/*##########################################################################################################*/
/*gto*/
/* make a Substring function */

char *SubStr( char *pnInput, int nStart, int nLen )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
    int nLoop ;
    int nLength ;
    char *pszOutPut ;

    if( pnInput == NULL ){
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <SubStr+0x16>
        return NULL ;
 8002986:	2300      	movs	r3, #0
 8002988:	e033      	b.n	80029f2 <SubStr+0x7e>
    }
    pszOutPut = (char *)malloc( sizeof(char) * nLen + 1 ) ;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f004 fecc 	bl	800772c <malloc>
 8002994:	4603      	mov	r3, r0
 8002996:	617b      	str	r3, [r7, #20]
    nLength = strlen( pnInput ) ;
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fd fc19 	bl	80001d0 <strlen>
 800299e:	4603      	mov	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
    if( nLength > nStart + nLen ){
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dd03      	ble.n	80029b6 <SubStr+0x42>
        nLength = nStart + nLen ;
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
    }
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e00d      	b.n	80029d8 <SubStr+0x64>
        pszOutPut[nLoop-nStart] = pnInput[nLoop] ;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	441a      	add	r2, r3
 80029c2:	69f9      	ldr	r1, [r7, #28]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1acb      	subs	r3, r1, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	440b      	add	r3, r1
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	701a      	strb	r2, [r3, #0]
    for( nLoop = nStart ; nLoop < nLength ; nLoop++ ){
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	429a      	cmp	r2, r3
 80029de:	dbed      	blt.n	80029bc <SubStr+0x48>
    }
    pszOutPut[nLoop - nStart] = '\0' ;
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4413      	add	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
    return pszOutPut ;
 80029f0:	697b      	ldr	r3, [r7, #20]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <loopback_tcps>:
		printf("%c ", pRcvBuffer[i]);
	}
}

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	81fb      	strh	r3, [r7, #14]
 8002a10:	2300      	movs	r3, #0
 8002a12:	81bb      	strh	r3, [r7, #12]
   switch(getSn_SR(sn))
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	3304      	adds	r3, #4
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fdd9 	bl	80005d4 <WIZCHIP_READ>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b1c      	cmp	r3, #28
 8002a26:	f200 80d8 	bhi.w	8002bda <loopback_tcps+0x1de>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <loopback_tcps+0x34>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002ba9 	.word	0x08002ba9
 8002a34:	08002bdb 	.word	0x08002bdb
 8002a38:	08002bdb 	.word	0x08002bdb
 8002a3c:	08002bdb 	.word	0x08002bdb
 8002a40:	08002bdb 	.word	0x08002bdb
 8002a44:	08002bdb 	.word	0x08002bdb
 8002a48:	08002bdb 	.word	0x08002bdb
 8002a4c:	08002bdb 	.word	0x08002bdb
 8002a50:	08002bdb 	.word	0x08002bdb
 8002a54:	08002bdb 	.word	0x08002bdb
 8002a58:	08002bdb 	.word	0x08002bdb
 8002a5c:	08002bdb 	.word	0x08002bdb
 8002a60:	08002bdb 	.word	0x08002bdb
 8002a64:	08002bdb 	.word	0x08002bdb
 8002a68:	08002bdb 	.word	0x08002bdb
 8002a6c:	08002bdb 	.word	0x08002bdb
 8002a70:	08002bdb 	.word	0x08002bdb
 8002a74:	08002bdb 	.word	0x08002bdb
 8002a78:	08002bdb 	.word	0x08002bdb
 8002a7c:	08002b87 	.word	0x08002b87
 8002a80:	08002bdb 	.word	0x08002bdb
 8002a84:	08002bdb 	.word	0x08002bdb
 8002a88:	08002bdb 	.word	0x08002bdb
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002bdb 	.word	0x08002bdb
 8002a94:	08002bdb 	.word	0x08002bdb
 8002a98:	08002bdb 	.word	0x08002bdb
 8002a9c:	08002bdb 	.word	0x08002bdb
 8002aa0:	08002b5b 	.word	0x08002b5b
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	3302      	adds	r3, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd91 	bl	80005d4 <WIZCHIP_READ>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <loopback_tcps+0xda>
         {
            printf("%d:Connected\r\n",sn);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	484b      	ldr	r0, [pc, #300]	; (8002bf0 <loopback_tcps+0x1f4>)
 8002ac2:	f004 fefb 	bl	80078bc <iprintf>
            setSn_IR(sn,Sn_IR_CON);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	3302      	adds	r3, #2
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd51 	bl	8000578 <WIZCHIP_WRITE>
         }
         if((size = getSn_RX_RSR(sn)) > 0)
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fe88 	bl	80007ee <getSn_RX_RSR>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	81fb      	strh	r3, [r7, #14]
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d07a      	beq.n	8002bde <loopback_tcps+0x1e2>
         {
            if(size > TX_RX_MAX_BUF_SIZE) size = TX_RX_MAX_BUF_SIZE;
 8002ae8:	89fb      	ldrh	r3, [r7, #14]
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d902      	bls.n	8002af6 <loopback_tcps+0xfa>
 8002af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002af4:	81fb      	strh	r3, [r7, #14]
            ret = recv(sn,buf,size);
 8002af6:	89fa      	ldrh	r2, [r7, #14]
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	6839      	ldr	r1, [r7, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fbb3 	bl	8001268 <recv>
 8002b02:	60b8      	str	r0, [r7, #8]
            if(ret <= 0) return ret;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	dc01      	bgt.n	8002b0e <loopback_tcps+0x112>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	e06b      	b.n	8002be6 <loopback_tcps+0x1ea>
            sentsize = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 8002b12:	e01d      	b.n	8002b50 <loopback_tcps+0x154>
            {
               ret = send(sn,buf+sentsize,size-sentsize);
 8002b14:	89bb      	ldrh	r3, [r7, #12]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	18d1      	adds	r1, r2, r3
 8002b1a:	89fa      	ldrh	r2, [r7, #14]
 8002b1c:	89bb      	ldrh	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe faab 	bl	8001080 <send>
 8002b2a:	60b8      	str	r0, [r7, #8]
               printf("RX : %s \r\n",buf);
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4831      	ldr	r0, [pc, #196]	; (8002bf4 <loopback_tcps+0x1f8>)
 8002b30:	f004 fec4 	bl	80078bc <iprintf>
               if(ret < 0)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da05      	bge.n	8002b46 <loopback_tcps+0x14a>
               {
                  close(sn);
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f97b 	bl	8000e38 <close>
                  return ret;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	e04f      	b.n	8002be6 <loopback_tcps+0x1ea>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 8002b50:	89fa      	ldrh	r2, [r7, #14]
 8002b52:	89bb      	ldrh	r3, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1dd      	bne.n	8002b14 <loopback_tcps+0x118>
            }
         }
         break;
 8002b58:	e041      	b.n	8002bde <loopback_tcps+0x1e2>
      case SOCK_CLOSE_WAIT :
         printf("%d:CloseWait\r\n",sn);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4826      	ldr	r0, [pc, #152]	; (8002bf8 <loopback_tcps+0x1fc>)
 8002b60:	f004 feac 	bl	80078bc <iprintf>
         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa1c 	bl	8000fa4 <disconnect>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <loopback_tcps+0x17e>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	e035      	b.n	8002be6 <loopback_tcps+0x1ea>
         printf("%d:Closed\r\n",sn);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481f      	ldr	r0, [pc, #124]	; (8002bfc <loopback_tcps+0x200>)
 8002b80:	f004 fe9c 	bl	80078bc <iprintf>
         break;
 8002b84:	e02e      	b.n	8002be4 <loopback_tcps+0x1e8>
      case SOCK_INIT :
    	  printf("%d:Listen, port [%d]\r\n",sn, port);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	88ba      	ldrh	r2, [r7, #4]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	481c      	ldr	r0, [pc, #112]	; (8002c00 <loopback_tcps+0x204>)
 8002b8e:	f004 fe95 	bl	80078bc <iprintf>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f9b5 	bl	8000f04 <listen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d01e      	beq.n	8002be2 <loopback_tcps+0x1e6>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	e01e      	b.n	8002be6 <loopback_tcps+0x1ea>
         break;
      case SOCK_CLOSED:
         printf("%d:LBTStart\r\n",sn);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4815      	ldr	r0, [pc, #84]	; (8002c04 <loopback_tcps+0x208>)
 8002bae:	f004 fe85 	bl	80078bc <iprintf>
         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 8002bb2:	88ba      	ldrh	r2, [r7, #4]
 8002bb4:	79f8      	ldrb	r0, [r7, #7]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2101      	movs	r1, #1
 8002bba:	f7fe f837 	bl	8000c2c <socket>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <loopback_tcps+0x1d2>
            return ret;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	e00b      	b.n	8002be6 <loopback_tcps+0x1ea>
         printf("%d:Opened\r\n",sn);
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <loopback_tcps+0x20c>)
 8002bd4:	f004 fe72 	bl	80078bc <iprintf>
         break;
 8002bd8:	e004      	b.n	8002be4 <loopback_tcps+0x1e8>
      default:
         break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <loopback_tcps+0x1e8>
         break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <loopback_tcps+0x1e8>
         break;
 8002be2:	bf00      	nop
   }
   return 1;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08008e40 	.word	0x08008e40
 8002bf4:	08008e50 	.word	0x08008e50
 8002bf8:	08008e5c 	.word	0x08008e5c
 8002bfc:	08008e6c 	.word	0x08008e6c
 8002c00:	08008e78 	.word	0x08008e78
 8002c04:	08008e90 	.word	0x08008e90
 8002c08:	08008ea0 	.word	0x08008ea0

08002c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c1e:	f000 fcb7 	bl	8003590 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40001000 	.word	0x40001000

08002c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c34:	b672      	cpsid	i
}
 8002c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <Error_Handler+0x8>
	...

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_RTC_MspInit+0x24>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RTC_MspInit+0x28>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40002800 	.word	0x40002800
 8002cb4:	42470e3c 	.word	0x42470e3c

08002cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <HAL_SPI_MspInit+0x150>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f040 8091 	bne.w	8002dfe <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	4a49      	ldr	r2, [pc, #292]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cea:	6453      	str	r3, [r2, #68]	; 0x44
 8002cec:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a42      	ldr	r2, [pc, #264]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_SPI_MspInit+0x154>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d14:	23f0      	movs	r3, #240	; 0xf0
 8002d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d24:	2305      	movs	r3, #5
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4838      	ldr	r0, [pc, #224]	; (8002e10 <HAL_SPI_MspInit+0x158>)
 8002d30:	f001 f8ac 	bl	8003e8c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002d34:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d36:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_SPI_MspInit+0x160>)
 8002d38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002d3a:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d3c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d40:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d42:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d48:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d74:	4827      	ldr	r0, [pc, #156]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d76:	f000 fd0d 	bl	8003794 <HAL_DMA_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002d80:	f7ff ff56 	bl	8002c30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d88:	649a      	str	r2, [r3, #72]	; 0x48
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_SPI_MspInit+0x15c>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002d92:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_SPI_MspInit+0x168>)
 8002d94:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002d98:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d9c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002dd2:	4812      	ldr	r0, [pc, #72]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dd4:	f000 fcde 	bl	8003794 <HAL_DMA_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002dde:	f7ff ff27 	bl	8002c30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002de6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002de8:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <HAL_SPI_MspInit+0x164>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2023      	movs	r0, #35	; 0x23
 8002df4:	f000 fca4 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002df8:	2023      	movs	r0, #35	; 0x23
 8002dfa:	f000 fcbd 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40013000 	.word	0x40013000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	200004e0 	.word	0x200004e0
 8002e18:	40026458 	.word	0x40026458
 8002e1c:	200003e0 	.word	0x200003e0
 8002e20:	40026410 	.word	0x40026410

08002e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_TIM_Base_MspInit+0x70>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e52:	e01a      	b.n	8002e8a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d115      	bne.n	8002e8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_TIM_Base_MspInit+0x74>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2037      	movs	r0, #55	; 0x37
 8002e80:	f000 fc5e 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e84:	2037      	movs	r0, #55	; 0x37
 8002e86:	f000 fc77 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40001400 	.word	0x40001400

08002ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b094      	sub	sp, #80	; 0x50
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a9c      	ldr	r2, [pc, #624]	; (8003130 <HAL_UART_MspInit+0x290>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d135      	bne.n	8002f2e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec6:	4b9b      	ldr	r3, [pc, #620]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a9a      	ldr	r2, [pc, #616]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b98      	ldr	r3, [pc, #608]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	4b94      	ldr	r3, [pc, #592]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a93      	ldr	r2, [pc, #588]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b91      	ldr	r3, [pc, #580]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002efa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f14:	4619      	mov	r1, r3
 8002f16:	4888      	ldr	r0, [pc, #544]	; (8003138 <HAL_UART_MspInit+0x298>)
 8002f18:	f000 ffb8 	bl	8003e8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2034      	movs	r0, #52	; 0x34
 8002f22:	f000 fc0d 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f26:	2034      	movs	r0, #52	; 0x34
 8002f28:	f000 fc26 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f2c:	e145      	b.n	80031ba <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==UART5)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a82      	ldr	r2, [pc, #520]	; (800313c <HAL_UART_MspInit+0x29c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d153      	bne.n	8002fe0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3c:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
 8002f48:	4b7a      	ldr	r3, [pc, #488]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	4b76      	ldr	r3, [pc, #472]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	4a75      	ldr	r2, [pc, #468]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6313      	str	r3, [r2, #48]	; 0x30
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f80:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4863      	ldr	r0, [pc, #396]	; (8003138 <HAL_UART_MspInit+0x298>)
 8002faa:	f000 ff6f 	bl	8003e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	485d      	ldr	r0, [pc, #372]	; (8003140 <HAL_UART_MspInit+0x2a0>)
 8002fca:	f000 ff5f 	bl	8003e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2035      	movs	r0, #53	; 0x35
 8002fd4:	f000 fbb4 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002fd8:	2035      	movs	r0, #53	; 0x35
 8002fda:	f000 fbcd 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 8002fde:	e0ec      	b.n	80031ba <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_UART_MspInit+0x2a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12d      	bne.n	8003046 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	4b51      	ldr	r3, [pc, #324]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a50      	ldr	r2, [pc, #320]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <HAL_UART_MspInit+0x294>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_UART_MspInit+0x294>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003022:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003034:	2307      	movs	r3, #7
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800303c:	4619      	mov	r1, r3
 800303e:	4842      	ldr	r0, [pc, #264]	; (8003148 <HAL_UART_MspInit+0x2a8>)
 8003040:	f000 ff24 	bl	8003e8c <HAL_GPIO_Init>
}
 8003044:	e0b9      	b.n	80031ba <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a40      	ldr	r2, [pc, #256]	; (800314c <HAL_UART_MspInit+0x2ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d134      	bne.n	80030ba <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	4b37      	ldr	r3, [pc, #220]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a36      	ldr	r2, [pc, #216]	; (8003134 <HAL_UART_MspInit+0x294>)
 800305a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_UART_MspInit+0x294>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_UART_MspInit+0x294>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003088:	230c      	movs	r3, #12
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	2302      	movs	r3, #2
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003098:	2307      	movs	r3, #7
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030a0:	4619      	mov	r1, r3
 80030a2:	4829      	ldr	r0, [pc, #164]	; (8003148 <HAL_UART_MspInit+0x2a8>)
 80030a4:	f000 fef2 	bl	8003e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	2026      	movs	r0, #38	; 0x26
 80030ae:	f000 fb47 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030b2:	2026      	movs	r0, #38	; 0x26
 80030b4:	f000 fb60 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 80030b8:	e07f      	b.n	80031ba <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_UART_MspInit+0x2b0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d149      	bne.n	8003158 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4a12      	ldr	r2, [pc, #72]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	6313      	str	r3, [r2, #48]	; 0x30
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_UART_MspInit+0x294>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800310e:	2307      	movs	r3, #7
 8003110:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003112:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003116:	4619      	mov	r1, r3
 8003118:	480e      	ldr	r0, [pc, #56]	; (8003154 <HAL_UART_MspInit+0x2b4>)
 800311a:	f000 feb7 	bl	8003e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2027      	movs	r0, #39	; 0x27
 8003124:	f000 fb0c 	bl	8003740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003128:	2027      	movs	r0, #39	; 0x27
 800312a:	f000 fb25 	bl	8003778 <HAL_NVIC_EnableIRQ>
}
 800312e:	e044      	b.n	80031ba <HAL_UART_MspInit+0x31a>
 8003130:	40004c00 	.word	0x40004c00
 8003134:	40023800 	.word	0x40023800
 8003138:	40020800 	.word	0x40020800
 800313c:	40005000 	.word	0x40005000
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40011000 	.word	0x40011000
 8003148:	40020000 	.word	0x40020000
 800314c:	40004400 	.word	0x40004400
 8003150:	40004800 	.word	0x40004800
 8003154:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <HAL_UART_MspInit+0x324>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d12b      	bne.n	80031ba <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_UART_MspInit+0x328>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_UART_MspInit+0x328>)
 800316c:	f043 0320 	orr.w	r3, r3, #32
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_UART_MspInit+0x328>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_UART_MspInit+0x328>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HAL_UART_MspInit+0x328>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_UART_MspInit+0x328>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800319a:	23c0      	movs	r3, #192	; 0xc0
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031aa:	2308      	movs	r3, #8
 80031ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031b2:	4619      	mov	r1, r3
 80031b4:	4805      	ldr	r0, [pc, #20]	; (80031cc <HAL_UART_MspInit+0x32c>)
 80031b6:	f000 fe69 	bl	8003e8c <HAL_GPIO_Init>
}
 80031ba:	bf00      	nop
 80031bc:	3750      	adds	r7, #80	; 0x50
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40011400 	.word	0x40011400
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020800 	.word	0x40020800

080031d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	2036      	movs	r0, #54	; 0x36
 80031e6:	f000 faab 	bl	8003740 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031ea:	2036      	movs	r0, #54	; 0x36
 80031ec:	f000 fac4 	bl	8003778 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_InitTick+0xa4>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_InitTick+0xa4>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_InitTick+0xa4>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800320c:	f107 0210 	add.w	r2, r7, #16
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f001 fc66 	bl	8004ae8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800321c:	f001 fc3c 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8003220:	4603      	mov	r3, r0
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	4a13      	ldr	r2, [pc, #76]	; (8003278 <HAL_InitTick+0xa8>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	3b01      	subs	r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_InitTick+0xac>)
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_InitTick+0xb0>)
 8003238:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_InitTick+0xac>)
 800323c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003240:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <HAL_InitTick+0xac>)
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_InitTick+0xac>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_InitTick+0xac>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003254:	4809      	ldr	r0, [pc, #36]	; (800327c <HAL_InitTick+0xac>)
 8003256:	f002 fe89 	bl	8005f6c <HAL_TIM_Base_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003260:	4806      	ldr	r0, [pc, #24]	; (800327c <HAL_InitTick+0xac>)
 8003262:	f002 fed3 	bl	800600c <HAL_TIM_Base_Start_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	e000      	b.n	800326c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
}
 800326c:	4618      	mov	r0, r3
 800326e:	3730      	adds	r7, #48	; 0x30
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	431bde83 	.word	0x431bde83
 800327c:	20000570 	.word	0x20000570
 8003280:	40001000 	.word	0x40001000

08003284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <NMI_Handler+0x4>

0800328a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <MemManage_Handler+0x4>

08003296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <BusFault_Handler+0x4>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <UsageFault_Handler+0x4>

080032a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80032de:	2080      	movs	r0, #128	; 0x80
 80032e0:	f000 ffa2 	bl	8004228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <SPI1_IRQHandler+0x10>)
 80032ee:	f002 fbef 	bl	8005ad0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000340 	.word	0x20000340

080032fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <USART1_IRQHandler+0x10>)
 8003302:	f003 fc91 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200001cc 	.word	0x200001cc

08003310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <USART2_IRQHandler+0x10>)
 8003316:	f003 fc87 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000039c 	.word	0x2000039c

08003324 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <USART3_IRQHandler+0x10>)
 800332a:	f003 fc7d 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200000f0 	.word	0x200000f0

08003338 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <UART4_IRQHandler+0x10>)
 800333e:	f003 fc73 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200002f8 	.word	0x200002f8

0800334c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <UART5_IRQHandler+0x10>)
 8003352:	f003 fc69 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000184 	.word	0x20000184

08003360 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <TIM6_DAC_IRQHandler+0x10>)
 8003366:	f002 fec1 	bl	80060ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000570 	.word	0x20000570

08003374 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <TIM7_IRQHandler+0x10>)
 800337a:	f002 feb7 	bl	80060ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000494 	.word	0x20000494

08003388 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <DMA2_Stream0_IRQHandler+0x10>)
 800338e:	f000 fb41 	bl	8003a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200003e0 	.word	0x200003e0

0800339c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <DMA2_Stream3_IRQHandler+0x10>)
 80033a2:	f000 fb37 	bl	8003a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200004e0 	.word	0x200004e0

080033b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <USART6_IRQHandler+0x10>)
 80033b6:	f003 fc37 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000028c 	.word	0x2000028c

080033c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e00a      	b.n	80033ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033d6:	f3af 8000 	nop.w
 80033da:	4601      	mov	r1, r0
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	60ba      	str	r2, [r7, #8]
 80033e2:	b2ca      	uxtb	r2, r1
 80033e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	dbf0      	blt.n	80033d6 <_read+0x12>
	}

return len;
 80033f4:	687b      	ldr	r3, [r7, #4]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
	return -1;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003426:	605a      	str	r2, [r3, #4]
	return 0;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <_isatty>:

int _isatty(int file)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	return 1;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <_sbrk+0x5c>)
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <_sbrk+0x60>)
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_sbrk+0x64>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <_sbrk+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003498:	f004 f91e 	bl	80076d8 <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	220c      	movs	r2, #12
 80034a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	e009      	b.n	80034bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <_sbrk+0x64>)
 80034b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20020000 	.word	0x20020000
 80034c8:	00000400 	.word	0x00000400
 80034cc:	200000e0 	.word	0x200000e0
 80034d0:	200005d0 	.word	0x200005d0

080034d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <SystemInit+0x20>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <SystemInit+0x20>)
 80034e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034fe:	490e      	ldr	r1, [pc, #56]	; (8003538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003504:	e002      	b.n	800350c <LoopCopyDataInit>

08003506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350a:	3304      	adds	r3, #4

0800350c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800350c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003510:	d3f9      	bcc.n	8003506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003514:	4c0b      	ldr	r4, [pc, #44]	; (8003544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003518:	e001      	b.n	800351e <LoopFillZerobss>

0800351a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800351c:	3204      	adds	r2, #4

0800351e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003520:	d3fb      	bcc.n	800351a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003522:	f7ff ffd7 	bl	80034d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003526:	f004 f8dd 	bl	80076e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352a:	f7fe fb2f 	bl	8001b8c <main>
  bx  lr    
 800352e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003538:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800353c:	08008f74 	.word	0x08008f74
  ldr r2, =_sbss
 8003540:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003544:	200005cc 	.word	0x200005cc

08003548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC_IRQHandler>
	...

0800354c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_Init+0x40>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_Init+0x40>)
 8003556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_Init+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <HAL_Init+0x40>)
 8003562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_Init+0x40>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <HAL_Init+0x40>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003574:	2003      	movs	r0, #3
 8003576:	f000 f8d8 	bl	800372a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357a:	2000      	movs	r0, #0
 800357c:	f7ff fe28 	bl	80031d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003580:	f7ff fb5c 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00

08003590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x20>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_IncTick+0x24>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_IncTick+0x24>)
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000040 	.word	0x20000040
 80035b4:	200005b8 	.word	0x200005b8

080035b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return uwTick;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetTick+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	200005b8 	.word	0x200005b8

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff4c 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003752:	f7ff ff61 	bl	8003618 <__NVIC_GetPriorityGrouping>
 8003756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f7ff ffb1 	bl	80036c4 <NVIC_EncodePriority>
 8003762:	4602      	mov	r2, r0
 8003764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ff80 	bl	8003670 <__NVIC_SetPriority>
}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff54 	bl	8003634 <__NVIC_EnableIRQ>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff ff0a 	bl	80035b8 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff fef1 	bl	80035b8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa7b 	bl	8003d94 <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa32 	bl	8003d28 <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038fe:	f7ff fe5b 	bl	80035b8 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d008      	beq.n	8003922 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e052      	b.n	80039c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0216 	bic.w	r2, r2, #22
 8003930:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003940:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <HAL_DMA_Abort+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0208 	bic.w	r2, r2, #8
 8003960:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003972:	e013      	b.n	800399c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003974:	f7ff fe20 	bl	80035b8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b05      	cmp	r3, #5
 8003980:	d90c      	bls.n	800399c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2203      	movs	r2, #3
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e015      	b.n	80039c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e4      	bne.n	8003974 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	223f      	movs	r2, #63	; 0x3f
 80039b0:	409a      	lsls	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00c      	b.n	8003a08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2205      	movs	r2, #5
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a20:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <HAL_DMA_IRQHandler+0x258>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a92      	ldr	r2, [pc, #584]	; (8003c70 <HAL_DMA_IRQHandler+0x25c>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2208      	movs	r2, #8
 8003a40:	409a      	lsls	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01a      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	2201      	movs	r2, #1
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2204      	movs	r2, #4
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2204      	movs	r2, #4
 8003ada:	409a      	lsls	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2210      	movs	r2, #16
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d043      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d03c      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2210      	movs	r2, #16
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d024      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e01f      	b.n	8003b84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01b      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
 8003b54:	e016      	b.n	8003b84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0208 	bic.w	r2, r2, #8
 8003b72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	2220      	movs	r2, #32
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 808e 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8086 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	2220      	movs	r2, #32
 8003bac:	409a      	lsls	r2, r3
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d136      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0216 	bic.w	r2, r2, #22
 8003bcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_DMA_IRQHandler+0x1da>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0208 	bic.w	r2, r2, #8
 8003bfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	223f      	movs	r2, #63	; 0x3f
 8003c04:	409a      	lsls	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d07d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
        }
        return;
 8003c2a:	e078      	b.n	8003d1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01c      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d030      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
 8003c58:	e02b      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d027      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
 8003c6a:	e022      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x29e>
 8003c6c:	20000038 	.word	0x20000038
 8003c70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0210 	bic.w	r2, r2, #16
 8003c90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d032      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d307      	bcc.n	8003cfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f2      	bne.n	8003cde <HAL_DMA_IRQHandler+0x2ca>
 8003cf8:	e000      	b.n	8003cfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cfa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d1e:	bf00      	nop
    }
  }
}
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop

08003d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3b10      	subs	r3, #16
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <DMA_CalcBaseAndBitshift+0x64>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <DMA_CalcBaseAndBitshift+0x68>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d909      	bls.n	8003d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	659a      	str	r2, [r3, #88]	; 0x58
 8003d68:	e007      	b.n	8003d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	aaaaaaab 	.word	0xaaaaaaab
 8003d90:	08008ec4 	.word	0x08008ec4

08003d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11f      	bne.n	8003dee <DMA_CheckFifoParam+0x5a>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d856      	bhi.n	8003e62 <DMA_CheckFifoParam+0xce>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <DMA_CheckFifoParam+0x28>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddf 	.word	0x08003ddf
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003e63 	.word	0x08003e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d046      	beq.n	8003e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ddc:	e043      	b.n	8003e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de6:	d140      	bne.n	8003e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e03d      	b.n	8003e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df6:	d121      	bne.n	8003e3c <DMA_CheckFifoParam+0xa8>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d837      	bhi.n	8003e6e <DMA_CheckFifoParam+0xda>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <DMA_CheckFifoParam+0x70>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e1b 	.word	0x08003e1b
 8003e0c:	08003e15 	.word	0x08003e15
 8003e10:	08003e2d 	.word	0x08003e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e030      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d025      	beq.n	8003e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e022      	b.n	8003e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e34:	d11f      	bne.n	8003e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e3a:	e01c      	b.n	8003e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d903      	bls.n	8003e4a <DMA_CheckFifoParam+0xb6>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d003      	beq.n	8003e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e48:	e018      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4e:	e015      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e00b      	b.n	8003e7a <DMA_CheckFifoParam+0xe6>
      break;
 8003e62:	bf00      	nop
 8003e64:	e00a      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e008      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e16b      	b.n	8004180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 815a 	bne.w	800417a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80b4 	beq.w	800417a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b60      	ldr	r3, [pc, #384]	; (8004198 <HAL_GPIO_Init+0x30c>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4a5f      	ldr	r2, [pc, #380]	; (8004198 <HAL_GPIO_Init+0x30c>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004020:	6453      	str	r3, [r2, #68]	; 0x44
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_GPIO_Init+0x30c>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402e:	4a5b      	ldr	r2, [pc, #364]	; (800419c <HAL_GPIO_Init+0x310>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_GPIO_Init+0x314>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <HAL_GPIO_Init+0x226>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <HAL_GPIO_Init+0x318>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d025      	beq.n	80040ae <HAL_GPIO_Init+0x222>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a50      	ldr	r2, [pc, #320]	; (80041a8 <HAL_GPIO_Init+0x31c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <HAL_GPIO_Init+0x21e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4f      	ldr	r2, [pc, #316]	; (80041ac <HAL_GPIO_Init+0x320>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_GPIO_Init+0x21a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4e      	ldr	r2, [pc, #312]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x216>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4d      	ldr	r2, [pc, #308]	; (80041b4 <HAL_GPIO_Init+0x328>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x212>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4c      	ldr	r2, [pc, #304]	; (80041b8 <HAL_GPIO_Init+0x32c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x20e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4b      	ldr	r2, [pc, #300]	; (80041bc <HAL_GPIO_Init+0x330>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x20a>
 8004092:	2307      	movs	r3, #7
 8004094:	e00e      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 8004096:	2308      	movs	r3, #8
 8004098:	e00c      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 800409a:	2306      	movs	r3, #6
 800409c:	e00a      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 800409e:	2305      	movs	r3, #5
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x228>
 80040b2:	2300      	movs	r3, #0
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f002 0203 	and.w	r2, r2, #3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c4:	4935      	ldr	r1, [pc, #212]	; (800419c <HAL_GPIO_Init+0x310>)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_GPIO_Init+0x334>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f6:	4a32      	ldr	r2, [pc, #200]	; (80041c0 <HAL_GPIO_Init+0x334>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_GPIO_Init+0x334>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <HAL_GPIO_Init+0x334>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_GPIO_Init+0x334>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_GPIO_Init+0x334>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_GPIO_Init+0x334>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <HAL_GPIO_Init+0x334>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	f67f ae90 	bls.w	8003ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40013800 	.word	0x40013800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40020400 	.word	0x40020400
 80041a8:	40020800 	.word	0x40020800
 80041ac:	40020c00 	.word	0x40020c00
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40021400 	.word	0x40021400
 80041b8:	40021800 	.word	0x40021800
 80041bc:	40021c00 	.word	0x40021c00
 80041c0:	40013c00 	.word	0x40013c00

080041c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e001      	b.n	80041e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
 8004200:	4613      	mov	r3, r2
 8004202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004204:	787b      	ldrb	r3, [r7, #1]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004210:	e003      	b.n	800421a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	041a      	lsls	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	619a      	str	r2, [r3, #24]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800423e:	4a05      	ldr	r2, [pc, #20]	; (8004254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fc4a 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40013c00 	.word	0x40013c00

08004258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e264      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d075      	beq.n	8004362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004276:	4ba3      	ldr	r3, [pc, #652]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00c      	beq.n	800429c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004282:	4ba0      	ldr	r3, [pc, #640]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428a:	2b08      	cmp	r3, #8
 800428c:	d112      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4b9d      	ldr	r3, [pc, #628]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d10b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4b99      	ldr	r3, [pc, #612]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d05b      	beq.n	8004360 <HAL_RCC_OscConfig+0x108>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d157      	bne.n	8004360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e23f      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d106      	bne.n	80042cc <HAL_RCC_OscConfig+0x74>
 80042be:	4b91      	ldr	r3, [pc, #580]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a90      	ldr	r2, [pc, #576]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e01d      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x98>
 80042d6:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a8a      	ldr	r2, [pc, #552]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a87      	ldr	r2, [pc, #540]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042f0:	4b84      	ldr	r3, [pc, #528]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a83      	ldr	r2, [pc, #524]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a80      	ldr	r2, [pc, #512]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7ff f952 	bl	80035b8 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7ff f94e 	bl	80035b8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e204      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0xc0>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7ff f93e 	bl	80035b8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7ff f93a 	bl	80035b8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1f0      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004352:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0xe8>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d063      	beq.n	8004436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800436e:	4b65      	ldr	r3, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b62      	ldr	r3, [pc, #392]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d116      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1c4      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4952      	ldr	r1, [pc, #328]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	e03a      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c8:	4b4f      	ldr	r3, [pc, #316]	; (8004508 <HAL_RCC_OscConfig+0x2b0>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7ff f8f3 	bl	80035b8 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d6:	f7ff f8ef 	bl	80035b8 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1a5      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e8:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4940      	ldr	r1, [pc, #256]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCC_OscConfig+0x2b0>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7ff f8d2 	bl	80035b8 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004418:	f7ff f8ce 	bl	80035b8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e184      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d030      	beq.n	80044a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCC_OscConfig+0x2b4>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7ff f8b2 	bl	80035b8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004458:	f7ff f8ae 	bl	80035b8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e164      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x200>
 8004476:	e015      	b.n	80044a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_RCC_OscConfig+0x2b4>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7ff f89b 	bl	80035b8 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004486:	f7ff f897 	bl	80035b8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e14d      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a0 	beq.w	80045f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d121      	bne.n	8004532 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7ff f85d 	bl	80035b8 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e011      	b.n	8004526 <HAL_RCC_OscConfig+0x2ce>
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	42470000 	.word	0x42470000
 800450c:	42470e80 	.word	0x42470e80
 8004510:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7ff f850 	bl	80035b8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e106      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b85      	ldr	r3, [pc, #532]	; (800473c <HAL_RCC_OscConfig+0x4e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x2f0>
 800453a:	4b81      	ldr	r3, [pc, #516]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a80      	ldr	r2, [pc, #512]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x32a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x312>
 8004550:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	4b78      	ldr	r3, [pc, #480]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a77      	ldr	r2, [pc, #476]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x32a>
 800456a:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a74      	ldr	r2, [pc, #464]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a71      	ldr	r2, [pc, #452]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458a:	f7ff f815 	bl	80035b8 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7ff f811 	bl	80035b8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0c5      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x33a>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe ffff 	bl	80035b8 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe fffb 	bl	80035b8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0af      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a55      	ldr	r2, [pc, #340]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 809b 	beq.w	8004732 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d05c      	beq.n	80046c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d141      	bne.n	8004694 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe ffcf 	bl	80035b8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe ffcb 	bl	80035b8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e081      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004630:	4b43      	ldr	r3, [pc, #268]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	019b      	lsls	r3, r3, #6
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	3b01      	subs	r3, #1
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	4937      	ldr	r1, [pc, #220]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe ffa4 	bl	80035b8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe ffa0 	bl	80035b8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e056      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x41c>
 8004692:	e04e      	b.n	8004732 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe ff8d 	bl	80035b8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe ff89 	bl	80035b8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e03f      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b4:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x44a>
 80046c0:	e037      	b.n	8004732 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e032      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ce:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d028      	beq.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d121      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d11a      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004704:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004706:	4293      	cmp	r3, r2
 8004708:	d111      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d107      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40007000 	.word	0x40007000
 8004740:	40023800 	.word	0x40023800
 8004744:	42470060 	.word	0x42470060

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cc      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b68      	ldr	r3, [pc, #416]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d90c      	bls.n	8004784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b65      	ldr	r3, [pc, #404]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b8      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a58      	ldr	r2, [pc, #352]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b50      	ldr	r3, [pc, #320]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494d      	ldr	r1, [pc, #308]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d044      	beq.n	8004868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d119      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004802:	2b03      	cmp	r3, #3
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e06f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e067      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004826:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4934      	ldr	r1, [pc, #208]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004838:	f7fe febe 	bl	80035b8 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	e00a      	b.n	8004856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004840:	f7fe feba 	bl	80035b8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e04f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 020c 	and.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1eb      	bne.n	8004840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d20c      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e032      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4916      	ldr	r1, [pc, #88]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490e      	ldr	r1, [pc, #56]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f821 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490a      	ldr	r1, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a09      	ldr	r2, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fc6e 	bl	80031d0 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00
 8004904:	40023800 	.word	0x40023800
 8004908:	08008eac 	.word	0x08008eac
 800490c:	20000038 	.word	0x20000038
 8004910:	2000003c 	.word	0x2000003c

08004914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	b5b0      	push	{r4, r5, r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800491a:	2100      	movs	r1, #0
 800491c:	6079      	str	r1, [r7, #4]
 800491e:	2100      	movs	r1, #0
 8004920:	60f9      	str	r1, [r7, #12]
 8004922:	2100      	movs	r1, #0
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004926:	2100      	movs	r1, #0
 8004928:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800492a:	4952      	ldr	r1, [pc, #328]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 800492c:	6889      	ldr	r1, [r1, #8]
 800492e:	f001 010c 	and.w	r1, r1, #12
 8004932:	2908      	cmp	r1, #8
 8004934:	d00d      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x3e>
 8004936:	2908      	cmp	r1, #8
 8004938:	f200 8094 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x150>
 800493c:	2900      	cmp	r1, #0
 800493e:	d002      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x32>
 8004940:	2904      	cmp	r1, #4
 8004942:	d003      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x38>
 8004944:	e08e      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004946:	4b4c      	ldr	r3, [pc, #304]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x164>)
 8004948:	60bb      	str	r3, [r7, #8]
       break;
 800494a:	e08e      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494c:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x168>)
 800494e:	60bb      	str	r3, [r7, #8]
      break;
 8004950:	e08b      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004952:	4948      	ldr	r1, [pc, #288]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 8004954:	6849      	ldr	r1, [r1, #4]
 8004956:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800495a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495c:	4945      	ldr	r1, [pc, #276]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 800495e:	6849      	ldr	r1, [r1, #4]
 8004960:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004964:	2900      	cmp	r1, #0
 8004966:	d024      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004968:	4942      	ldr	r1, [pc, #264]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 800496a:	6849      	ldr	r1, [r1, #4]
 800496c:	0989      	lsrs	r1, r1, #6
 800496e:	4608      	mov	r0, r1
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004978:	f04f 0500 	mov.w	r5, #0
 800497c:	ea00 0204 	and.w	r2, r0, r4
 8004980:	ea01 0305 	and.w	r3, r1, r5
 8004984:	493d      	ldr	r1, [pc, #244]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x168>)
 8004986:	fb01 f003 	mul.w	r0, r1, r3
 800498a:	2100      	movs	r1, #0
 800498c:	fb01 f102 	mul.w	r1, r1, r2
 8004990:	1844      	adds	r4, r0, r1
 8004992:	493a      	ldr	r1, [pc, #232]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x168>)
 8004994:	fba2 0101 	umull	r0, r1, r2, r1
 8004998:	1863      	adds	r3, r4, r1
 800499a:	4619      	mov	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	461a      	mov	r2, r3
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f7fb fc6c 	bl	8000280 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e04a      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b2:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	461a      	mov	r2, r3
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	ea02 0400 	and.w	r4, r2, r0
 80049ca:	ea03 0501 	and.w	r5, r3, r1
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	014b      	lsls	r3, r1, #5
 80049dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049e0:	0142      	lsls	r2, r0, #5
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	1b00      	subs	r0, r0, r4
 80049e8:	eb61 0105 	sbc.w	r1, r1, r5
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	018b      	lsls	r3, r1, #6
 80049f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049fa:	0182      	lsls	r2, r0, #6
 80049fc:	1a12      	subs	r2, r2, r0
 80049fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	00d9      	lsls	r1, r3, #3
 8004a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a10:	00d0      	lsls	r0, r2, #3
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	1912      	adds	r2, r2, r4
 8004a18:	eb45 0303 	adc.w	r3, r5, r3
 8004a1c:	f04f 0000 	mov.w	r0, #0
 8004a20:	f04f 0100 	mov.w	r1, #0
 8004a24:	0299      	lsls	r1, r3, #10
 8004a26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a2a:	0290      	lsls	r0, r2, #10
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	f7fb fc20 	bl	8000280 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	3301      	adds	r3, #1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	60bb      	str	r3, [r7, #8]
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a66:	60bb      	str	r3, [r7, #8]
      break;
 8004a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bdb0      	pop	{r4, r5, r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	017d7840 	.word	0x017d7840

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000038 	.word	0x20000038

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	08008ebc 	.word	0x08008ebc

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac4:	f7ff ffdc 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0b5b      	lsrs	r3, r3, #13
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	08008ebc 	.word	0x08008ebc

08004ae8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	220f      	movs	r2, #15
 8004af6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_GetClockConfig+0x5c>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0203 	and.w	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <HAL_RCC_GetClockConfig+0x60>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0207 	and.w	r2, r3, #7
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40023c00 	.word	0x40023c00

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d035      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b74:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fe fd1d 	bl	80035b8 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b82:	f7fe fd19 	bl	80035b8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0b0      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b94:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	019a      	lsls	r2, r3, #6
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	071b      	lsls	r3, r3, #28
 8004bac:	4955      	ldr	r1, [pc, #340]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb4:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fe fcfd 	bl	80035b8 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fe fcf9 	bl	80035b8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e090      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8083 	beq.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4a43      	ldr	r2, [pc, #268]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fe fccf 	bl	80035b8 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c1e:	f7fe fccb 	bl	80035b8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e062      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c30:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3c:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d028      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c70:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d114      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fe fc99 	bl	80035b8 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fe fc95 	bl	80035b8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e02a      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d10d      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cee:	4905      	ldr	r1, [pc, #20]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	42470068 	.word	0x42470068
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	42470e40 	.word	0x42470e40

08004d10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e083      	b.n	8004e2a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7f5b      	ldrb	r3, [r3, #29]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd ffaa 	bl	8002c8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	22ca      	movs	r2, #202	; 0xca
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2253      	movs	r2, #83	; 0x53
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9fb 	bl	800514a <RTC_EnterInitMode>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e05e      	b.n	8004e2a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6899      	ldr	r1, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6919      	ldr	r1, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10e      	bne.n	8004df8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f98d 	bl	80050fa <HAL_RTC_WaitForSynchro>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e018      	b.n	8004e2a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e32:	b590      	push	{r4, r7, lr}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	7f1b      	ldrb	r3, [r3, #28]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_RTC_SetTime+0x1c>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e0aa      	b.n	8004fa4 <HAL_RTC_SetTime+0x172>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2202      	movs	r2, #2
 8004e58:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d126      	bne.n	8004eae <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2200      	movs	r2, #0
 8004e72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f992 	bl	80051a2 <RTC_ByteToBcd2>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f98b 	bl	80051a2 <RTC_ByteToBcd2>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	789b      	ldrb	r3, [r3, #2]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f983 	bl	80051a2 <RTC_ByteToBcd2>
 8004e9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	78db      	ldrb	r3, [r3, #3]
 8004ea6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e018      	b.n	8004ee0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ece:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ed4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	78db      	ldrb	r3, [r3, #3]
 8004eda:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	22ca      	movs	r2, #202	; 0xca
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2253      	movs	r2, #83	; 0x53
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f92a 	bl	800514a <RTC_EnterInitMode>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2204      	movs	r2, #4
 8004f08:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e047      	b.n	8004fa4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f22:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f32:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d111      	bne.n	8004f8e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f8c5 	bl	80050fa <HAL_RTC_WaitForSynchro>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	22ff      	movs	r2, #255	; 0xff
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2204      	movs	r2, #4
 8004f82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}

08004fac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	7f1b      	ldrb	r3, [r3, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RTC_SetDate+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e094      	b.n	80050f2 <HAL_RTC_SetDate+0x146>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_RTC_SetDate+0x4c>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	330a      	adds	r3, #10
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11c      	bne.n	8005038 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f8cd 	bl	80051a2 <RTC_ByteToBcd2>
 8005008:	4603      	mov	r3, r0
 800500a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f8c6 	bl	80051a2 <RTC_ByteToBcd2>
 8005016:	4603      	mov	r3, r0
 8005018:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800501a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	789b      	ldrb	r3, [r3, #2]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f8be 	bl	80051a2 <RTC_ByteToBcd2>
 8005026:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005028:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e00e      	b.n	8005056 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005044:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800504a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	22ca      	movs	r2, #202	; 0xca
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2253      	movs	r2, #83	; 0x53
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f86f 	bl	800514a <RTC_EnterInitMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2204      	movs	r2, #4
 800507e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e033      	b.n	80050f2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005094:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005098:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d111      	bne.n	80050dc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f81e 	bl	80050fa <HAL_RTC_WaitForSynchro>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	22ff      	movs	r2, #255	; 0xff
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2204      	movs	r2, #4
 80050d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e00a      	b.n	80050f2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd90      	pop	{r4, r7, pc}

080050fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005114:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005116:	f7fe fa4f 	bl	80035b8 <HAL_GetTick>
 800511a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800511c:	e009      	b.n	8005132 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800511e:	f7fe fa4b 	bl	80035b8 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800512c:	d901      	bls.n	8005132 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e007      	b.n	8005142 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d119      	bne.n	8005198 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f04f 32ff 	mov.w	r2, #4294967295
 800516c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800516e:	f7fe fa23 	bl	80035b8 <HAL_GetTick>
 8005172:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005174:	e009      	b.n	800518a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005176:	f7fe fa1f 	bl	80035b8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005184:	d901      	bls.n	800518a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e007      	b.n	800519a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ee      	beq.n	8005176 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80051b0:	e005      	b.n	80051be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	3b0a      	subs	r3, #10
 80051bc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b09      	cmp	r3, #9
 80051c2:	d8f6      	bhi.n	80051b2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b2db      	uxtb	r3, r3
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e07b      	b.n	80052e8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005200:	d009      	beq.n	8005216 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
 8005208:	e005      	b.n	8005216 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fd fd41 	bl	8002cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	ea42 0103 	orr.w	r1, r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	f003 0104 	and.w	r1, r3, #4
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0210 	and.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_SPI_Transmit+0x22>
 800530e:	2302      	movs	r3, #2
 8005310:	e126      	b.n	8005560 <HAL_SPI_Transmit+0x270>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531a:	f7fe f94d 	bl	80035b8 <HAL_GetTick>
 800531e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d002      	beq.n	8005336 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005330:	2302      	movs	r3, #2
 8005332:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005334:	e10b      	b.n	800554e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_SPI_Transmit+0x52>
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005346:	e102      	b.n	800554e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538e:	d10f      	bne.n	80053b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d007      	beq.n	80053ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d14b      	bne.n	8005470 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_SPI_Transmit+0xf6>
 80053e0:	8afb      	ldrh	r3, [r7, #22]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d13e      	bne.n	8005464 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	1c9a      	adds	r2, r3, #2
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800540a:	e02b      	b.n	8005464 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d112      	bne.n	8005440 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	1c9a      	adds	r2, r3, #2
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	86da      	strh	r2, [r3, #54]	; 0x36
 800543e:	e011      	b.n	8005464 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005440:	f7fe f8ba 	bl	80035b8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d803      	bhi.n	8005458 <HAL_SPI_Transmit+0x168>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d102      	bne.n	800545e <HAL_SPI_Transmit+0x16e>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005462:	e074      	b.n	800554e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ce      	bne.n	800540c <HAL_SPI_Transmit+0x11c>
 800546e:	e04c      	b.n	800550a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_SPI_Transmit+0x18e>
 8005478:	8afb      	ldrh	r3, [r7, #22]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d140      	bne.n	8005500 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	7812      	ldrb	r2, [r2, #0]
 800548a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054a4:	e02c      	b.n	8005500 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d113      	bne.n	80054dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80054da:	e011      	b.n	8005500 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054dc:	f7fe f86c 	bl	80035b8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d803      	bhi.n	80054f4 <HAL_SPI_Transmit+0x204>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Transmit+0x20a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054fe:	e026      	b.n	800554e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1cd      	bne.n	80054a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fcea 	bl	8005ee8 <SPI_EndRxTxTransaction>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e000      	b.n	800554e <HAL_SPI_Transmit+0x25e>
  }

error:
 800554c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800555e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d112      	bne.n	80055ac <HAL_SPI_Receive+0x44>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10e      	bne.n	80055ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2204      	movs	r2, #4
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005596:	88fa      	ldrh	r2, [r7, #6]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f8f1 	bl	800578a <HAL_SPI_TransmitReceive>
 80055a8:	4603      	mov	r3, r0
 80055aa:	e0ea      	b.n	8005782 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Receive+0x52>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e0e3      	b.n	8005782 <HAL_SPI_Receive+0x21a>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c2:	f7fd fff9 	bl	80035b8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d002      	beq.n	80055da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
 80055d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055d8:	e0ca      	b.n	8005770 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Receive+0x7e>
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ea:	e0c1      	b.n	8005770 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005632:	d10f      	bne.n	8005654 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005652:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d007      	beq.n	8005672 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d162      	bne.n	8005740 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800567a:	e02e      	b.n	80056da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d115      	bne.n	80056b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f103 020c 	add.w	r2, r3, #12
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b4:	e011      	b.n	80056da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b6:	f7fd ff7f 	bl	80035b8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d803      	bhi.n	80056ce <HAL_SPI_Receive+0x166>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_Receive+0x16c>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056d8:	e04a      	b.n	8005770 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1cb      	bne.n	800567c <HAL_SPI_Receive+0x114>
 80056e4:	e031      	b.n	800574a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d113      	bne.n	800571c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	b292      	uxth	r2, r2
 8005700:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571a:	e011      	b.n	8005740 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571c:	f7fd ff4c 	bl	80035b8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d803      	bhi.n	8005734 <HAL_SPI_Receive+0x1cc>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d102      	bne.n	800573a <HAL_SPI_Receive+0x1d2>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800573e:	e017      	b.n	8005770 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1cd      	bne.n	80056e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb64 	bl	8005e1c <SPI_EndRxTransaction>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
 800576c:	e000      	b.n	8005770 <HAL_SPI_Receive+0x208>
  }

error :
 800576e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08c      	sub	sp, #48	; 0x30
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005798:	2301      	movs	r3, #1
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x26>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e18a      	b.n	8005ac6 <HAL_SPI_TransmitReceive+0x33c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b8:	f7fd fefe 	bl	80035b8 <HAL_GetTick>
 80057bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00f      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x70>
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e0:	d107      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x68>
 80057ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d003      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057f8:	e15b      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_SPI_TransmitReceive+0x82>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_TransmitReceive+0x82>
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005812:	e14e      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b04      	cmp	r3, #4
 800581e:	d003      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2205      	movs	r2, #5
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	887a      	ldrh	r2, [r7, #2]
 800583e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d007      	beq.n	800587c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005884:	d178      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x10a>
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d166      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b8:	e053      	b.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d11b      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x176>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x176>
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d113      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d119      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x1b8>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d014      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	b292      	uxth	r2, r2
 8005924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	1c9a      	adds	r2, r3, #2
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800593e:	2301      	movs	r3, #1
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005942:	f7fd fe39 	bl	80035b8 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594e:	429a      	cmp	r2, r3
 8005950:	d807      	bhi.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d003      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005960:	e0a7      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1a6      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x130>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1a1      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x130>
 8005976:	e07c      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x1fc>
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d16b      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ac:	e057      	b.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d11c      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d114      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d119      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x2ae>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d014      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a38:	f7fd fdbe 	bl	80035b8 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d803      	bhi.n	8005a50 <HAL_SPI_TransmitReceive+0x2c6>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x2cc>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a5c:	e029      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1a2      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x224>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d19d      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fa36 	bl	8005ee8 <SPI_EndRxTxTransaction>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a8e:	e010      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3730      	adds	r7, #48	; 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	099b      	lsrs	r3, r3, #6
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10f      	bne.n	8005b14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
    return;
 8005b12:	e0d7      	b.n	8005cc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_SPI_IRQHandler+0x66>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
    return;
 8005b34:	e0c6      	b.n	8005cc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <HAL_SPI_IRQHandler+0x8c>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80b4 	beq.w	8005cc4 <HAL_SPI_IRQHandler+0x1f4>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80ad 	beq.w	8005cc4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d023      	beq.n	8005bbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d011      	beq.n	8005ba6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0204 	orr.w	r2, r3, #4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	e00b      	b.n	8005bbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	693b      	ldr	r3, [r7, #16]
        return;
 8005bbc:	e082      	b.n	8005cc4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0201 	orr.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00c      	beq.n	8005c1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	f043 0208 	orr.w	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04f      	beq.n	8005cc2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_SPI_IRQHandler+0x17e>
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d034      	beq.n	8005cb8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0203 	bic.w	r2, r2, #3
 8005c5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <HAL_SPI_IRQHandler+0x1fc>)
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fd feac 	bl	80039d0 <HAL_DMA_Abort_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <HAL_SPI_IRQHandler+0x1fc>)
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fe96 	bl	80039d0 <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005cb6:	e003      	b.n	8005cc0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f809 	bl	8005cd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005cbe:	e000      	b.n	8005cc2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005cc0:	bf00      	nop
    return;
 8005cc2:	bf00      	nop
  }
}
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08005ce5 	.word	0x08005ce5

08005cd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ffe6 	bl	8005cd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d1c:	f7fd fc4c 	bl	80035b8 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d2c:	f7fd fc44 	bl	80035b8 <HAL_GetTick>
 8005d30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d32:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	015b      	lsls	r3, r3, #5
 8005d38:	0d1b      	lsrs	r3, r3, #20
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d42:	e054      	b.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d050      	beq.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d4c:	f7fd fc34 	bl	80035b8 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d902      	bls.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d13d      	bne.n	8005dde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7a:	d111      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d84:	d004      	beq.n	8005d90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d107      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d10f      	bne.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e017      	b.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4013      	ands	r3, r2
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d19b      	bne.n	8005d44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000038 	.word	0x20000038

08005e1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e30:	d111      	bne.n	8005e56 <SPI_EndRxTransaction+0x3a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d004      	beq.n	8005e46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e44:	d107      	bne.n	8005e56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5e:	d12a      	bne.n	8005eb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d012      	beq.n	8005e90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ff49 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d02d      	beq.n	8005edc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e026      	b.n	8005ede <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2101      	movs	r1, #1
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff36 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01a      	beq.n	8005edc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e013      	b.n	8005ede <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff23 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f043 0220 	orr.w	r2, r3, #32
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e000      	b.n	8005ede <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <SPI_EndRxTxTransaction+0x7c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <SPI_EndRxTxTransaction+0x80>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0d5b      	lsrs	r3, r3, #21
 8005f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f12:	d112      	bne.n	8005f3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fef4 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	d0f2      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x52>
 8005f54:	e000      	b.n	8005f58 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f56:	bf00      	nop
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000038 	.word	0x20000038
 8005f68:	165e9f81 	.word	0x165e9f81

08005f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e041      	b.n	8006002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc ff46 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f000 fad4 	bl	8006558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e04e      	b.n	80060c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d01d      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <HAL_TIM_Base_Start_IT+0xd0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d010      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	e007      	b.n	80060c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40001800 	.word	0x40001800

080060ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d122      	bne.n	8006148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d11b      	bne.n	8006148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0202 	mvn.w	r2, #2
 8006118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9f4 	bl	800651c <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9e6 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f9f7 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b04      	cmp	r3, #4
 8006154:	d122      	bne.n	800619c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d11b      	bne.n	800619c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0204 	mvn.w	r2, #4
 800616c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f9ca 	bl	800651c <HAL_TIM_IC_CaptureCallback>
 8006188:	e005      	b.n	8006196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9bc 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9cd 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0208 	mvn.w	r2, #8
 80061c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2204      	movs	r2, #4
 80061c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9a0 	bl	800651c <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f992 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9a3 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b10      	cmp	r3, #16
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0210 	mvn.w	r2, #16
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2208      	movs	r2, #8
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f976 	bl	800651c <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f968 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f979 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10e      	bne.n	8006270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d107      	bne.n	8006270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0201 	mvn.w	r2, #1
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fc fcce 	bl	8002c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d10e      	bne.n	800629c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006288:	2b80      	cmp	r3, #128	; 0x80
 800628a:	d107      	bne.n	800629c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fbac 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d10e      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d107      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f93e 	bl	8006544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d10e      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d107      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0220 	mvn.w	r2, #32
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb76 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIM_ConfigClockSource+0x18>
 8006310:	2302      	movs	r3, #2
 8006312:	e0b3      	b.n	800647c <HAL_TIM_ConfigClockSource+0x180>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d03e      	beq.n	80063cc <HAL_TIM_ConfigClockSource+0xd0>
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	f200 8087 	bhi.w	8006464 <HAL_TIM_ConfigClockSource+0x168>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	f000 8085 	beq.w	8006468 <HAL_TIM_ConfigClockSource+0x16c>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d87f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d01a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xa2>
 8006368:	2b70      	cmp	r3, #112	; 0x70
 800636a:	d87b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d050      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x116>
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d877      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d03c      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0xf6>
 8006378:	2b50      	cmp	r3, #80	; 0x50
 800637a:	d873      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d058      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x136>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d86f      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d064      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x156>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d86b      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d060      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x156>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d867      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05c      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x156>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d05a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800639c:	e062      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f000 fa7b 	bl	80068a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	609a      	str	r2, [r3, #8]
      break;
 80063ca:	e04e      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f000 fa64 	bl	80068a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e03b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 f9d8 	bl	80067b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fa31 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006410:	e02b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	461a      	mov	r2, r3
 8006420:	f000 f9f7 	bl	8006812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2160      	movs	r1, #96	; 0x60
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa21 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006430:	e01b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f000 f9b8 	bl	80067b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fa11 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006450:	e00b      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 fa08 	bl	8006872 <TIM_ITRx_SetConfig>
        break;
 8006462:	e002      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e031      	b.n	8006500 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8f2 	bl	8006698 <TIM_SlaveTimer_SetConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e018      	b.n	8006500 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a40      	ldr	r2, [pc, #256]	; (800666c <TIM_Base_SetConfig+0x114>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d00f      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <TIM_Base_SetConfig+0x118>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <TIM_Base_SetConfig+0x11c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a3b      	ldr	r2, [pc, #236]	; (8006678 <TIM_Base_SetConfig+0x120>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a3a      	ldr	r2, [pc, #232]	; (800667c <TIM_Base_SetConfig+0x124>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d108      	bne.n	80065aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2f      	ldr	r2, [pc, #188]	; (800666c <TIM_Base_SetConfig+0x114>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d027      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2c      	ldr	r2, [pc, #176]	; (8006670 <TIM_Base_SetConfig+0x118>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d023      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a2b      	ldr	r2, [pc, #172]	; (8006674 <TIM_Base_SetConfig+0x11c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01f      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <TIM_Base_SetConfig+0x120>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a29      	ldr	r2, [pc, #164]	; (800667c <TIM_Base_SetConfig+0x124>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d017      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a28      	ldr	r2, [pc, #160]	; (8006680 <TIM_Base_SetConfig+0x128>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a27      	ldr	r2, [pc, #156]	; (8006684 <TIM_Base_SetConfig+0x12c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00f      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a26      	ldr	r2, [pc, #152]	; (8006688 <TIM_Base_SetConfig+0x130>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <TIM_Base_SetConfig+0x134>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d007      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a24      	ldr	r2, [pc, #144]	; (8006690 <TIM_Base_SetConfig+0x138>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a23      	ldr	r2, [pc, #140]	; (8006694 <TIM_Base_SetConfig+0x13c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d108      	bne.n	800661c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a0a      	ldr	r2, [pc, #40]	; (800666c <TIM_Base_SetConfig+0x114>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0xf8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a0c      	ldr	r2, [pc, #48]	; (800667c <TIM_Base_SetConfig+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d103      	bne.n	8006658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	615a      	str	r2, [r3, #20]
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40010000 	.word	0x40010000
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40010400 	.word	0x40010400
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800
 800668c:	40001800 	.word	0x40001800
 8006690:	40001c00 	.word	0x40001c00
 8006694:	40002000 	.word	0x40002000

08006698 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b70      	cmp	r3, #112	; 0x70
 80066dc:	d01a      	beq.n	8006714 <TIM_SlaveTimer_SetConfig+0x7c>
 80066de:	2b70      	cmp	r3, #112	; 0x70
 80066e0:	d860      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80066e2:	2b60      	cmp	r3, #96	; 0x60
 80066e4:	d054      	beq.n	8006790 <TIM_SlaveTimer_SetConfig+0xf8>
 80066e6:	2b60      	cmp	r3, #96	; 0x60
 80066e8:	d85c      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80066ea:	2b50      	cmp	r3, #80	; 0x50
 80066ec:	d046      	beq.n	800677c <TIM_SlaveTimer_SetConfig+0xe4>
 80066ee:	2b50      	cmp	r3, #80	; 0x50
 80066f0:	d858      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d019      	beq.n	800672a <TIM_SlaveTimer_SetConfig+0x92>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d854      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80066fa:	2b30      	cmp	r3, #48	; 0x30
 80066fc:	d054      	beq.n	80067a8 <TIM_SlaveTimer_SetConfig+0x110>
 80066fe:	2b30      	cmp	r3, #48	; 0x30
 8006700:	d850      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8006702:	2b20      	cmp	r3, #32
 8006704:	d050      	beq.n	80067a8 <TIM_SlaveTimer_SetConfig+0x110>
 8006706:	2b20      	cmp	r3, #32
 8006708:	d84c      	bhi.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04c      	beq.n	80067a8 <TIM_SlaveTimer_SetConfig+0x110>
 800670e:	2b10      	cmp	r3, #16
 8006710:	d04a      	beq.n	80067a8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006712:	e047      	b.n	80067a4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68d9      	ldr	r1, [r3, #12]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f000 f8c0 	bl	80068a8 <TIM_ETR_SetConfig>
      break;
 8006728:	e03f      	b.n	80067aa <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b05      	cmp	r3, #5
 8006730:	d101      	bne.n	8006736 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e03a      	b.n	80067ac <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800675c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
      break;
 800677a:	e016      	b.n	80067aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6899      	ldr	r1, [r3, #8]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	461a      	mov	r2, r3
 800678a:	f000 f813 	bl	80067b4 <TIM_TI1_ConfigInputStage>
      break;
 800678e:	e00c      	b.n	80067aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	461a      	mov	r2, r3
 800679e:	f000 f838 	bl	8006812 <TIM_TI2_ConfigInputStage>
      break;
 80067a2:	e002      	b.n	80067aa <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80067a8:	bf00      	nop
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f023 030a 	bic.w	r3, r3, #10
 80067f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0210 	bic.w	r2, r3, #16
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800684e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	f043 0307 	orr.w	r3, r3, #7
 8006894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	021a      	lsls	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e05a      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e03f      	b.n	8006a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc fa36 	bl	8002ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc7b 	bl	8007348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08a      	sub	sp, #40	; 0x28
 8006aa6:	af02      	add	r7, sp, #8
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d17c      	bne.n	8006bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_UART_Transmit+0x2c>
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e075      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Transmit+0x3e>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e06e      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	; 0x21
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fc fd5f 	bl	80035b8 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d108      	bne.n	8006b24 <HAL_UART_Transmit+0x82>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e003      	b.n	8006b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b34:	e02a      	b.n	8006b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fa3d 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e036      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e007      	b.n	8006b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1cf      	bne.n	8006b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2140      	movs	r1, #64	; 0x40
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fa0d 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d11d      	bne.n	8006c1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UART_Receive_IT+0x26>
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e016      	b.n	8006c1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Receive_IT+0x38>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e00f      	b.n	8006c1e <HAL_UART_Receive_IT+0x58>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fa1e 	bl	8007054 <UART_Start_Receive_IT>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	e000      	b.n	8006c1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10d      	bne.n	8006c7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_UART_IRQHandler+0x52>
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fad1 	bl	800721a <UART_Receive_IT>
      return;
 8006c78:	e17c      	b.n	8006f74 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80b1 	beq.w	8006de4 <HAL_UART_IRQHandler+0x1bc>
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <HAL_UART_IRQHandler+0x70>
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80a6 	beq.w	8006de4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x90>
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xb0>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	f043 0202 	orr.w	r2, r3, #2
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_UART_IRQHandler+0xd0>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f043 0204 	orr.w	r2, r3, #4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00f      	beq.n	8006d22 <HAL_UART_IRQHandler+0xfa>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <HAL_UART_IRQHandler+0xee>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f043 0208 	orr.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 811f 	beq.w	8006f6a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_UART_IRQHandler+0x11e>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa6a 	bl	800721a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_UART_IRQHandler+0x146>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d031      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9aa 	bl	80070c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d123      	bne.n	8006dca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d013      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	4a77      	ldr	r2, [pc, #476]	; (8006f7c <HAL_UART_IRQHandler+0x354>)
 8006da0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fc fe12 	bl	80039d0 <HAL_DMA_Abort_IT>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	e00e      	b.n	8006de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f8e6 	bl	8006f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	e00a      	b.n	8006de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f8e2 	bl	8006f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	e006      	b.n	8006de0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8de 	bl	8006f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dde:	e0c4      	b.n	8006f6a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	bf00      	nop
    return;
 8006de2:	e0c2      	b.n	8006f6a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f040 80a2 	bne.w	8006f32 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 809c 	beq.w	8006f32 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8096 	beq.w	8006f32 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d14f      	bne.n	8006eca <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006e34:	8a3b      	ldrh	r3, [r7, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 8099 	beq.w	8006f6e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e40:	8a3a      	ldrh	r2, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f080 8093 	bcs.w	8006f6e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8a3a      	ldrh	r2, [r7, #16]
 8006e4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e58:	d02b      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e68:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e88:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0210 	bic.w	r2, r2, #16
 8006ea6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fc fd1f 	bl	80038f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f870 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ec8:	e051      	b.n	8006f6e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d047      	beq.n	8006f72 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006ee2:	8a7b      	ldrh	r3, [r7, #18]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d044      	beq.n	8006f72 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ef6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695a      	ldr	r2, [r3, #20]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0210 	bic.w	r2, r2, #16
 8006f24:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f26:	8a7b      	ldrh	r3, [r7, #18]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f83c 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f30:	e01f      	b.n	8006f72 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_UART_IRQHandler+0x326>
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f8ff 	bl	800714a <UART_Transmit_IT>
    return;
 8006f4c:	e012      	b.n	8006f74 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00d      	beq.n	8006f74 <HAL_UART_IRQHandler+0x34c>
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f941 	bl	80071ea <UART_EndTransmit_IT>
    return;
 8006f68:	e004      	b.n	8006f74 <HAL_UART_IRQHandler+0x34c>
    return;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f72:	bf00      	nop
  }
}
 8006f74:	3728      	adds	r7, #40	; 0x28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08007123 	.word	0x08007123

08006f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd0:	e02c      	b.n	800702c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d028      	beq.n	800702c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fe0:	f7fc faea 	bl	80035b8 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d21d      	bcs.n	800702c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ffe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e00f      	b.n	800704c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4013      	ands	r3, r2
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	bf0c      	ite	eq
 800703c:	2301      	moveq	r3, #1
 800703e:	2300      	movne	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	429a      	cmp	r2, r3
 8007048:	d0c3      	beq.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2222      	movs	r2, #34	; 0x22
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007098:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0220 	orr.w	r2, r2, #32
 80070b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695a      	ldr	r2, [r3, #20]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d107      	bne.n	8007108 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0210 	bic.w	r2, r2, #16
 8007106:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ff29 	bl	8006f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b21      	cmp	r3, #33	; 0x21
 800715c:	d13e      	bne.n	80071dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d114      	bne.n	8007192 <UART_Transmit_IT+0x48>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d110      	bne.n	8007192 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007184:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	621a      	str	r2, [r3, #32]
 8007190:	e008      	b.n	80071a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6211      	str	r1, [r2, #32]
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4619      	mov	r1, r3
 80071b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10f      	bne.n	80071d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e000      	b.n	80071de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071dc:	2302      	movs	r3, #2
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007200:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff feb8 	bl	8006f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b22      	cmp	r3, #34	; 0x22
 800722c:	f040 8087 	bne.w	800733e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d117      	bne.n	800726a <UART_Receive_IT+0x50>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d113      	bne.n	800726a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007258:	b29a      	uxth	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	1c9a      	adds	r2, r3, #2
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	629a      	str	r2, [r3, #40]	; 0x28
 8007268:	e026      	b.n	80072b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727c:	d007      	beq.n	800728e <UART_Receive_IT+0x74>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <UART_Receive_IT+0x82>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e008      	b.n	80072ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4619      	mov	r1, r3
 80072c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d136      	bne.n	800733a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0220 	bic.w	r2, r2, #32
 80072da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	d10e      	bne.n	800732a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0210 	bic.w	r2, r2, #16
 800731a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fe40 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
 8007328:	e002      	b.n	8007330 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fa faca 	bl	80018c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e002      	b.n	8007340 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	e000      	b.n	8007340 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800733e:	2302      	movs	r3, #2
  }
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	b09f      	sub	sp, #124	; 0x7c
 800734e:	af00      	add	r7, sp, #0
 8007350:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	68d9      	ldr	r1, [r3, #12]
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	ea40 0301 	orr.w	r3, r0, r1
 8007368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800736a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	431a      	orrs	r2, r3
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	431a      	orrs	r2, r3
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	4313      	orrs	r3, r2
 8007380:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800738c:	f021 010c 	bic.w	r1, r1, #12
 8007390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007396:	430b      	orrs	r3, r1
 8007398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a6:	6999      	ldr	r1, [r3, #24]
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	ea40 0301 	orr.w	r3, r0, r1
 80073b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4bc5      	ldr	r3, [pc, #788]	; (80076cc <UART_SetConfig+0x384>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <UART_SetConfig+0x7e>
 80073bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4bc3      	ldr	r3, [pc, #780]	; (80076d0 <UART_SetConfig+0x388>)
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d103      	bne.n	80073ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073c6:	f7fd fb7b 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 80073ca:	6778      	str	r0, [r7, #116]	; 0x74
 80073cc:	e002      	b.n	80073d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073ce:	f7fd fb63 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 80073d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	f040 80b6 	bne.w	800754c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e2:	461c      	mov	r4, r3
 80073e4:	f04f 0500 	mov.w	r5, #0
 80073e8:	4622      	mov	r2, r4
 80073ea:	462b      	mov	r3, r5
 80073ec:	1891      	adds	r1, r2, r2
 80073ee:	6439      	str	r1, [r7, #64]	; 0x40
 80073f0:	415b      	adcs	r3, r3
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
 80073f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073f8:	1912      	adds	r2, r2, r4
 80073fa:	eb45 0303 	adc.w	r3, r5, r3
 80073fe:	f04f 0000 	mov.w	r0, #0
 8007402:	f04f 0100 	mov.w	r1, #0
 8007406:	00d9      	lsls	r1, r3, #3
 8007408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800740c:	00d0      	lsls	r0, r2, #3
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	1911      	adds	r1, r2, r4
 8007414:	6639      	str	r1, [r7, #96]	; 0x60
 8007416:	416b      	adcs	r3, r5
 8007418:	667b      	str	r3, [r7, #100]	; 0x64
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	461a      	mov	r2, r3
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	1891      	adds	r1, r2, r2
 8007426:	63b9      	str	r1, [r7, #56]	; 0x38
 8007428:	415b      	adcs	r3, r3
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800742c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007430:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007434:	f7f8 ff24 	bl	8000280 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4ba5      	ldr	r3, [pc, #660]	; (80076d4 <UART_SetConfig+0x38c>)
 800743e:	fba3 2302 	umull	r2, r3, r3, r2
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	011e      	lsls	r6, r3, #4
 8007446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007448:	461c      	mov	r4, r3
 800744a:	f04f 0500 	mov.w	r5, #0
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	1891      	adds	r1, r2, r2
 8007454:	6339      	str	r1, [r7, #48]	; 0x30
 8007456:	415b      	adcs	r3, r3
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800745e:	1912      	adds	r2, r2, r4
 8007460:	eb45 0303 	adc.w	r3, r5, r3
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	00d9      	lsls	r1, r3, #3
 800746e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007472:	00d0      	lsls	r0, r2, #3
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	1911      	adds	r1, r2, r4
 800747a:	65b9      	str	r1, [r7, #88]	; 0x58
 800747c:	416b      	adcs	r3, r5
 800747e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	461a      	mov	r2, r3
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	1891      	adds	r1, r2, r2
 800748c:	62b9      	str	r1, [r7, #40]	; 0x28
 800748e:	415b      	adcs	r3, r3
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007496:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800749a:	f7f8 fef1 	bl	8000280 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4b8c      	ldr	r3, [pc, #560]	; (80076d4 <UART_SetConfig+0x38c>)
 80074a4:	fba3 1302 	umull	r1, r3, r3, r2
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	2164      	movs	r1, #100	; 0x64
 80074ac:	fb01 f303 	mul.w	r3, r1, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	3332      	adds	r3, #50	; 0x32
 80074b6:	4a87      	ldr	r2, [pc, #540]	; (80076d4 <UART_SetConfig+0x38c>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074c4:	441e      	add	r6, r3
 80074c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c8:	4618      	mov	r0, r3
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	1894      	adds	r4, r2, r2
 80074d4:	623c      	str	r4, [r7, #32]
 80074d6:	415b      	adcs	r3, r3
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
 80074da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074de:	1812      	adds	r2, r2, r0
 80074e0:	eb41 0303 	adc.w	r3, r1, r3
 80074e4:	f04f 0400 	mov.w	r4, #0
 80074e8:	f04f 0500 	mov.w	r5, #0
 80074ec:	00dd      	lsls	r5, r3, #3
 80074ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074f2:	00d4      	lsls	r4, r2, #3
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	1814      	adds	r4, r2, r0
 80074fa:	653c      	str	r4, [r7, #80]	; 0x50
 80074fc:	414b      	adcs	r3, r1
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	461a      	mov	r2, r3
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	1891      	adds	r1, r2, r2
 800750c:	61b9      	str	r1, [r7, #24]
 800750e:	415b      	adcs	r3, r3
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007516:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800751a:	f7f8 feb1 	bl	8000280 <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b6c      	ldr	r3, [pc, #432]	; (80076d4 <UART_SetConfig+0x38c>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	; 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	4a67      	ldr	r2, [pc, #412]	; (80076d4 <UART_SetConfig+0x38c>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4432      	add	r2, r6
 8007548:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800754a:	e0b9      	b.n	80076c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800754c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754e:	461c      	mov	r4, r3
 8007550:	f04f 0500 	mov.w	r5, #0
 8007554:	4622      	mov	r2, r4
 8007556:	462b      	mov	r3, r5
 8007558:	1891      	adds	r1, r2, r2
 800755a:	6139      	str	r1, [r7, #16]
 800755c:	415b      	adcs	r3, r3
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007564:	1912      	adds	r2, r2, r4
 8007566:	eb45 0303 	adc.w	r3, r5, r3
 800756a:	f04f 0000 	mov.w	r0, #0
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	00d9      	lsls	r1, r3, #3
 8007574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007578:	00d0      	lsls	r0, r2, #3
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	eb12 0804 	adds.w	r8, r2, r4
 8007582:	eb43 0905 	adc.w	r9, r3, r5
 8007586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4618      	mov	r0, r3
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	008b      	lsls	r3, r1, #2
 800759a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800759e:	0082      	lsls	r2, r0, #2
 80075a0:	4640      	mov	r0, r8
 80075a2:	4649      	mov	r1, r9
 80075a4:	f7f8 fe6c 	bl	8000280 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4b49      	ldr	r3, [pc, #292]	; (80076d4 <UART_SetConfig+0x38c>)
 80075ae:	fba3 2302 	umull	r2, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	011e      	lsls	r6, r3, #4
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	4618      	mov	r0, r3
 80075ba:	f04f 0100 	mov.w	r1, #0
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	1894      	adds	r4, r2, r2
 80075c4:	60bc      	str	r4, [r7, #8]
 80075c6:	415b      	adcs	r3, r3
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ce:	1812      	adds	r2, r2, r0
 80075d0:	eb41 0303 	adc.w	r3, r1, r3
 80075d4:	f04f 0400 	mov.w	r4, #0
 80075d8:	f04f 0500 	mov.w	r5, #0
 80075dc:	00dd      	lsls	r5, r3, #3
 80075de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075e2:	00d4      	lsls	r4, r2, #3
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	1814      	adds	r4, r2, r0
 80075ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80075ec:	414b      	adcs	r3, r1
 80075ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	008b      	lsls	r3, r1, #2
 8007604:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007608:	0082      	lsls	r2, r0, #2
 800760a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800760e:	f7f8 fe37 	bl	8000280 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <UART_SetConfig+0x38c>)
 8007618:	fba3 1302 	umull	r1, r3, r3, r2
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	2164      	movs	r1, #100	; 0x64
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	3332      	adds	r3, #50	; 0x32
 800762a:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <UART_SetConfig+0x38c>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007636:	441e      	add	r6, r3
 8007638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763a:	4618      	mov	r0, r3
 800763c:	f04f 0100 	mov.w	r1, #0
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	1894      	adds	r4, r2, r2
 8007646:	603c      	str	r4, [r7, #0]
 8007648:	415b      	adcs	r3, r3
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007650:	1812      	adds	r2, r2, r0
 8007652:	eb41 0303 	adc.w	r3, r1, r3
 8007656:	f04f 0400 	mov.w	r4, #0
 800765a:	f04f 0500 	mov.w	r5, #0
 800765e:	00dd      	lsls	r5, r3, #3
 8007660:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007664:	00d4      	lsls	r4, r2, #3
 8007666:	4622      	mov	r2, r4
 8007668:	462b      	mov	r3, r5
 800766a:	eb12 0a00 	adds.w	sl, r2, r0
 800766e:	eb43 0b01 	adc.w	fp, r3, r1
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4618      	mov	r0, r3
 8007678:	f04f 0100 	mov.w	r1, #0
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	008b      	lsls	r3, r1, #2
 8007686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800768a:	0082      	lsls	r2, r0, #2
 800768c:	4650      	mov	r0, sl
 800768e:	4659      	mov	r1, fp
 8007690:	f7f8 fdf6 	bl	8000280 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <UART_SetConfig+0x38c>)
 800769a:	fba3 1302 	umull	r1, r3, r3, r2
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	2164      	movs	r1, #100	; 0x64
 80076a2:	fb01 f303 	mul.w	r3, r1, r3
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	3332      	adds	r3, #50	; 0x32
 80076ac:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <UART_SetConfig+0x38c>)
 80076ae:	fba2 2303 	umull	r2, r3, r2, r3
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	f003 020f 	and.w	r2, r3, #15
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4432      	add	r2, r6
 80076be:	609a      	str	r2, [r3, #8]
}
 80076c0:	bf00      	nop
 80076c2:	377c      	adds	r7, #124	; 0x7c
 80076c4:	46bd      	mov	sp, r7
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	bf00      	nop
 80076cc:	40011000 	.word	0x40011000
 80076d0:	40011400 	.word	0x40011400
 80076d4:	51eb851f 	.word	0x51eb851f

080076d8 <__errno>:
 80076d8:	4b01      	ldr	r3, [pc, #4]	; (80076e0 <__errno+0x8>)
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000044 	.word	0x20000044

080076e4 <__libc_init_array>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4d0d      	ldr	r5, [pc, #52]	; (800771c <__libc_init_array+0x38>)
 80076e8:	4c0d      	ldr	r4, [pc, #52]	; (8007720 <__libc_init_array+0x3c>)
 80076ea:	1b64      	subs	r4, r4, r5
 80076ec:	10a4      	asrs	r4, r4, #2
 80076ee:	2600      	movs	r6, #0
 80076f0:	42a6      	cmp	r6, r4
 80076f2:	d109      	bne.n	8007708 <__libc_init_array+0x24>
 80076f4:	4d0b      	ldr	r5, [pc, #44]	; (8007724 <__libc_init_array+0x40>)
 80076f6:	4c0c      	ldr	r4, [pc, #48]	; (8007728 <__libc_init_array+0x44>)
 80076f8:	f001 f9c6 	bl	8008a88 <_init>
 80076fc:	1b64      	subs	r4, r4, r5
 80076fe:	10a4      	asrs	r4, r4, #2
 8007700:	2600      	movs	r6, #0
 8007702:	42a6      	cmp	r6, r4
 8007704:	d105      	bne.n	8007712 <__libc_init_array+0x2e>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	f855 3b04 	ldr.w	r3, [r5], #4
 800770c:	4798      	blx	r3
 800770e:	3601      	adds	r6, #1
 8007710:	e7ee      	b.n	80076f0 <__libc_init_array+0xc>
 8007712:	f855 3b04 	ldr.w	r3, [r5], #4
 8007716:	4798      	blx	r3
 8007718:	3601      	adds	r6, #1
 800771a:	e7f2      	b.n	8007702 <__libc_init_array+0x1e>
 800771c:	08008f6c 	.word	0x08008f6c
 8007720:	08008f6c 	.word	0x08008f6c
 8007724:	08008f6c 	.word	0x08008f6c
 8007728:	08008f70 	.word	0x08008f70

0800772c <malloc>:
 800772c:	4b02      	ldr	r3, [pc, #8]	; (8007738 <malloc+0xc>)
 800772e:	4601      	mov	r1, r0
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	f000 b869 	b.w	8007808 <_malloc_r>
 8007736:	bf00      	nop
 8007738:	20000044 	.word	0x20000044

0800773c <memcpy>:
 800773c:	440a      	add	r2, r1
 800773e:	4291      	cmp	r1, r2
 8007740:	f100 33ff 	add.w	r3, r0, #4294967295
 8007744:	d100      	bne.n	8007748 <memcpy+0xc>
 8007746:	4770      	bx	lr
 8007748:	b510      	push	{r4, lr}
 800774a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007752:	4291      	cmp	r1, r2
 8007754:	d1f9      	bne.n	800774a <memcpy+0xe>
 8007756:	bd10      	pop	{r4, pc}

08007758 <memset>:
 8007758:	4402      	add	r2, r0
 800775a:	4603      	mov	r3, r0
 800775c:	4293      	cmp	r3, r2
 800775e:	d100      	bne.n	8007762 <memset+0xa>
 8007760:	4770      	bx	lr
 8007762:	f803 1b01 	strb.w	r1, [r3], #1
 8007766:	e7f9      	b.n	800775c <memset+0x4>

08007768 <_free_r>:
 8007768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776a:	2900      	cmp	r1, #0
 800776c:	d048      	beq.n	8007800 <_free_r+0x98>
 800776e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007772:	9001      	str	r0, [sp, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f1a1 0404 	sub.w	r4, r1, #4
 800777a:	bfb8      	it	lt
 800777c:	18e4      	addlt	r4, r4, r3
 800777e:	f000 fcb1 	bl	80080e4 <__malloc_lock>
 8007782:	4a20      	ldr	r2, [pc, #128]	; (8007804 <_free_r+0x9c>)
 8007784:	9801      	ldr	r0, [sp, #4]
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	4615      	mov	r5, r2
 800778a:	b933      	cbnz	r3, 800779a <_free_r+0x32>
 800778c:	6063      	str	r3, [r4, #4]
 800778e:	6014      	str	r4, [r2, #0]
 8007790:	b003      	add	sp, #12
 8007792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007796:	f000 bcab 	b.w	80080f0 <__malloc_unlock>
 800779a:	42a3      	cmp	r3, r4
 800779c:	d90b      	bls.n	80077b6 <_free_r+0x4e>
 800779e:	6821      	ldr	r1, [r4, #0]
 80077a0:	1862      	adds	r2, r4, r1
 80077a2:	4293      	cmp	r3, r2
 80077a4:	bf04      	itt	eq
 80077a6:	681a      	ldreq	r2, [r3, #0]
 80077a8:	685b      	ldreq	r3, [r3, #4]
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	bf04      	itt	eq
 80077ae:	1852      	addeq	r2, r2, r1
 80077b0:	6022      	streq	r2, [r4, #0]
 80077b2:	602c      	str	r4, [r5, #0]
 80077b4:	e7ec      	b.n	8007790 <_free_r+0x28>
 80077b6:	461a      	mov	r2, r3
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b10b      	cbz	r3, 80077c0 <_free_r+0x58>
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d9fa      	bls.n	80077b6 <_free_r+0x4e>
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	1855      	adds	r5, r2, r1
 80077c4:	42a5      	cmp	r5, r4
 80077c6:	d10b      	bne.n	80077e0 <_free_r+0x78>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	4421      	add	r1, r4
 80077cc:	1854      	adds	r4, r2, r1
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	d1dd      	bne.n	8007790 <_free_r+0x28>
 80077d4:	681c      	ldr	r4, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	6053      	str	r3, [r2, #4]
 80077da:	4421      	add	r1, r4
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	e7d7      	b.n	8007790 <_free_r+0x28>
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x80>
 80077e2:	230c      	movs	r3, #12
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	e7d3      	b.n	8007790 <_free_r+0x28>
 80077e8:	6825      	ldr	r5, [r4, #0]
 80077ea:	1961      	adds	r1, r4, r5
 80077ec:	428b      	cmp	r3, r1
 80077ee:	bf04      	itt	eq
 80077f0:	6819      	ldreq	r1, [r3, #0]
 80077f2:	685b      	ldreq	r3, [r3, #4]
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	bf04      	itt	eq
 80077f8:	1949      	addeq	r1, r1, r5
 80077fa:	6021      	streq	r1, [r4, #0]
 80077fc:	6054      	str	r4, [r2, #4]
 80077fe:	e7c7      	b.n	8007790 <_free_r+0x28>
 8007800:	b003      	add	sp, #12
 8007802:	bd30      	pop	{r4, r5, pc}
 8007804:	200000e4 	.word	0x200000e4

08007808 <_malloc_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	1ccd      	adds	r5, r1, #3
 800780c:	f025 0503 	bic.w	r5, r5, #3
 8007810:	3508      	adds	r5, #8
 8007812:	2d0c      	cmp	r5, #12
 8007814:	bf38      	it	cc
 8007816:	250c      	movcc	r5, #12
 8007818:	2d00      	cmp	r5, #0
 800781a:	4606      	mov	r6, r0
 800781c:	db01      	blt.n	8007822 <_malloc_r+0x1a>
 800781e:	42a9      	cmp	r1, r5
 8007820:	d903      	bls.n	800782a <_malloc_r+0x22>
 8007822:	230c      	movs	r3, #12
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	2000      	movs	r0, #0
 8007828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782a:	f000 fc5b 	bl	80080e4 <__malloc_lock>
 800782e:	4921      	ldr	r1, [pc, #132]	; (80078b4 <_malloc_r+0xac>)
 8007830:	680a      	ldr	r2, [r1, #0]
 8007832:	4614      	mov	r4, r2
 8007834:	b99c      	cbnz	r4, 800785e <_malloc_r+0x56>
 8007836:	4f20      	ldr	r7, [pc, #128]	; (80078b8 <_malloc_r+0xb0>)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	b923      	cbnz	r3, 8007846 <_malloc_r+0x3e>
 800783c:	4621      	mov	r1, r4
 800783e:	4630      	mov	r0, r6
 8007840:	f000 f8ca 	bl	80079d8 <_sbrk_r>
 8007844:	6038      	str	r0, [r7, #0]
 8007846:	4629      	mov	r1, r5
 8007848:	4630      	mov	r0, r6
 800784a:	f000 f8c5 	bl	80079d8 <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d123      	bne.n	800789a <_malloc_r+0x92>
 8007852:	230c      	movs	r3, #12
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	4630      	mov	r0, r6
 8007858:	f000 fc4a 	bl	80080f0 <__malloc_unlock>
 800785c:	e7e3      	b.n	8007826 <_malloc_r+0x1e>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	1b5b      	subs	r3, r3, r5
 8007862:	d417      	bmi.n	8007894 <_malloc_r+0x8c>
 8007864:	2b0b      	cmp	r3, #11
 8007866:	d903      	bls.n	8007870 <_malloc_r+0x68>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	441c      	add	r4, r3
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	e004      	b.n	800787a <_malloc_r+0x72>
 8007870:	6863      	ldr	r3, [r4, #4]
 8007872:	42a2      	cmp	r2, r4
 8007874:	bf0c      	ite	eq
 8007876:	600b      	streq	r3, [r1, #0]
 8007878:	6053      	strne	r3, [r2, #4]
 800787a:	4630      	mov	r0, r6
 800787c:	f000 fc38 	bl	80080f0 <__malloc_unlock>
 8007880:	f104 000b 	add.w	r0, r4, #11
 8007884:	1d23      	adds	r3, r4, #4
 8007886:	f020 0007 	bic.w	r0, r0, #7
 800788a:	1ac2      	subs	r2, r0, r3
 800788c:	d0cc      	beq.n	8007828 <_malloc_r+0x20>
 800788e:	1a1b      	subs	r3, r3, r0
 8007890:	50a3      	str	r3, [r4, r2]
 8007892:	e7c9      	b.n	8007828 <_malloc_r+0x20>
 8007894:	4622      	mov	r2, r4
 8007896:	6864      	ldr	r4, [r4, #4]
 8007898:	e7cc      	b.n	8007834 <_malloc_r+0x2c>
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0e3      	beq.n	800786c <_malloc_r+0x64>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 f896 	bl	80079d8 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1dd      	bne.n	800786c <_malloc_r+0x64>
 80078b0:	e7cf      	b.n	8007852 <_malloc_r+0x4a>
 80078b2:	bf00      	nop
 80078b4:	200000e4 	.word	0x200000e4
 80078b8:	200000e8 	.word	0x200000e8

080078bc <iprintf>:
 80078bc:	b40f      	push	{r0, r1, r2, r3}
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <iprintf+0x2c>)
 80078c0:	b513      	push	{r0, r1, r4, lr}
 80078c2:	681c      	ldr	r4, [r3, #0]
 80078c4:	b124      	cbz	r4, 80078d0 <iprintf+0x14>
 80078c6:	69a3      	ldr	r3, [r4, #24]
 80078c8:	b913      	cbnz	r3, 80078d0 <iprintf+0x14>
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 faf4 	bl	8007eb8 <__sinit>
 80078d0:	ab05      	add	r3, sp, #20
 80078d2:	9a04      	ldr	r2, [sp, #16]
 80078d4:	68a1      	ldr	r1, [r4, #8]
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fd95 	bl	8008408 <_vfiprintf_r>
 80078de:	b002      	add	sp, #8
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e4:	b004      	add	sp, #16
 80078e6:	4770      	bx	lr
 80078e8:	20000044 	.word	0x20000044

080078ec <_puts_r>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	460e      	mov	r6, r1
 80078f0:	4605      	mov	r5, r0
 80078f2:	b118      	cbz	r0, 80078fc <_puts_r+0x10>
 80078f4:	6983      	ldr	r3, [r0, #24]
 80078f6:	b90b      	cbnz	r3, 80078fc <_puts_r+0x10>
 80078f8:	f000 fade 	bl	8007eb8 <__sinit>
 80078fc:	69ab      	ldr	r3, [r5, #24]
 80078fe:	68ac      	ldr	r4, [r5, #8]
 8007900:	b913      	cbnz	r3, 8007908 <_puts_r+0x1c>
 8007902:	4628      	mov	r0, r5
 8007904:	f000 fad8 	bl	8007eb8 <__sinit>
 8007908:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <_puts_r+0xd0>)
 800790a:	429c      	cmp	r4, r3
 800790c:	d120      	bne.n	8007950 <_puts_r+0x64>
 800790e:	686c      	ldr	r4, [r5, #4]
 8007910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d405      	bmi.n	8007922 <_puts_r+0x36>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d402      	bmi.n	8007922 <_puts_r+0x36>
 800791c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791e:	f000 fb69 	bl	8007ff4 <__retarget_lock_acquire_recursive>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	0719      	lsls	r1, r3, #28
 8007926:	d51d      	bpl.n	8007964 <_puts_r+0x78>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	b1db      	cbz	r3, 8007964 <_puts_r+0x78>
 800792c:	3e01      	subs	r6, #1
 800792e:	68a3      	ldr	r3, [r4, #8]
 8007930:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007934:	3b01      	subs	r3, #1
 8007936:	60a3      	str	r3, [r4, #8]
 8007938:	bb39      	cbnz	r1, 800798a <_puts_r+0x9e>
 800793a:	2b00      	cmp	r3, #0
 800793c:	da38      	bge.n	80079b0 <_puts_r+0xc4>
 800793e:	4622      	mov	r2, r4
 8007940:	210a      	movs	r1, #10
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f8bc 	bl	8007ac0 <__swbuf_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d011      	beq.n	8007970 <_puts_r+0x84>
 800794c:	250a      	movs	r5, #10
 800794e:	e011      	b.n	8007974 <_puts_r+0x88>
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <_puts_r+0xd4>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <_puts_r+0x6e>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7da      	b.n	8007910 <_puts_r+0x24>
 800795a:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <_puts_r+0xd8>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7d5      	b.n	8007910 <_puts_r+0x24>
 8007964:	4621      	mov	r1, r4
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f90e 	bl	8007b88 <__swsetup_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	d0dd      	beq.n	800792c <_puts_r+0x40>
 8007970:	f04f 35ff 	mov.w	r5, #4294967295
 8007974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007976:	07da      	lsls	r2, r3, #31
 8007978:	d405      	bmi.n	8007986 <_puts_r+0x9a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	d402      	bmi.n	8007986 <_puts_r+0x9a>
 8007980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007982:	f000 fb38 	bl	8007ff6 <__retarget_lock_release_recursive>
 8007986:	4628      	mov	r0, r5
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	2b00      	cmp	r3, #0
 800798c:	da04      	bge.n	8007998 <_puts_r+0xac>
 800798e:	69a2      	ldr	r2, [r4, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	dc06      	bgt.n	80079a2 <_puts_r+0xb6>
 8007994:	290a      	cmp	r1, #10
 8007996:	d004      	beq.n	80079a2 <_puts_r+0xb6>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	7019      	strb	r1, [r3, #0]
 80079a0:	e7c5      	b.n	800792e <_puts_r+0x42>
 80079a2:	4622      	mov	r2, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f88b 	bl	8007ac0 <__swbuf_r>
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1bf      	bne.n	800792e <_puts_r+0x42>
 80079ae:	e7df      	b.n	8007970 <_puts_r+0x84>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	250a      	movs	r5, #10
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	701d      	strb	r5, [r3, #0]
 80079ba:	e7db      	b.n	8007974 <_puts_r+0x88>
 80079bc:	08008ef0 	.word	0x08008ef0
 80079c0:	08008f10 	.word	0x08008f10
 80079c4:	08008ed0 	.word	0x08008ed0

080079c8 <puts>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <puts+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f7ff bf8d 	b.w	80078ec <_puts_r>
 80079d2:	bf00      	nop
 80079d4:	20000044 	.word	0x20000044

080079d8 <_sbrk_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_sbrk_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7fb fd40 	bl	8003468 <_sbrk>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_sbrk_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_sbrk_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200005c8 	.word	0x200005c8

080079f8 <siprintf>:
 80079f8:	b40e      	push	{r1, r2, r3}
 80079fa:	b500      	push	{lr}
 80079fc:	b09c      	sub	sp, #112	; 0x70
 80079fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007a00:	9002      	str	r0, [sp, #8]
 8007a02:	9006      	str	r0, [sp, #24]
 8007a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a08:	4809      	ldr	r0, [pc, #36]	; (8007a30 <siprintf+0x38>)
 8007a0a:	9107      	str	r1, [sp, #28]
 8007a0c:	9104      	str	r1, [sp, #16]
 8007a0e:	4909      	ldr	r1, [pc, #36]	; (8007a34 <siprintf+0x3c>)
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	9105      	str	r1, [sp, #20]
 8007a16:	6800      	ldr	r0, [r0, #0]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	a902      	add	r1, sp, #8
 8007a1c:	f000 fbca 	bl	80081b4 <_svfiprintf_r>
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	b01c      	add	sp, #112	; 0x70
 8007a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a2c:	b003      	add	sp, #12
 8007a2e:	4770      	bx	lr
 8007a30:	20000044 	.word	0x20000044
 8007a34:	ffff0208 	.word	0xffff0208

08007a38 <__sread>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	f000 ffa6 	bl	8008990 <_read_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	bfab      	itete	ge
 8007a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a4c:	181b      	addge	r3, r3, r0
 8007a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a52:	bfac      	ite	ge
 8007a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a56:	81a3      	strhlt	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__swrite>:
 8007a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	461f      	mov	r7, r3
 8007a60:	898b      	ldrh	r3, [r1, #12]
 8007a62:	05db      	lsls	r3, r3, #23
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4616      	mov	r6, r2
 8007a6a:	d505      	bpl.n	8007a78 <__swrite+0x1e>
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	2302      	movs	r3, #2
 8007a72:	2200      	movs	r2, #0
 8007a74:	f000 fac0 	bl	8007ff8 <_lseek_r>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	4628      	mov	r0, r5
 8007a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	f000 b869 	b.w	8007b64 <_write_r>

08007a92 <__sseek>:
 8007a92:	b510      	push	{r4, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9a:	f000 faad 	bl	8007ff8 <_lseek_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	bf15      	itete	ne
 8007aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aae:	81a3      	strheq	r3, [r4, #12]
 8007ab0:	bf18      	it	ne
 8007ab2:	81a3      	strhne	r3, [r4, #12]
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <__sclose>:
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 b8d3 	b.w	8007c64 <_close_r>
	...

08007ac0 <__swbuf_r>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b118      	cbz	r0, 8007ad2 <__swbuf_r+0x12>
 8007aca:	6983      	ldr	r3, [r0, #24]
 8007acc:	b90b      	cbnz	r3, 8007ad2 <__swbuf_r+0x12>
 8007ace:	f000 f9f3 	bl	8007eb8 <__sinit>
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <__swbuf_r+0x98>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d12b      	bne.n	8007b30 <__swbuf_r+0x70>
 8007ad8:	686c      	ldr	r4, [r5, #4]
 8007ada:	69a3      	ldr	r3, [r4, #24]
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	071a      	lsls	r2, r3, #28
 8007ae2:	d52f      	bpl.n	8007b44 <__swbuf_r+0x84>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b36b      	cbz	r3, 8007b44 <__swbuf_r+0x84>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6963      	ldr	r3, [r4, #20]
 8007af0:	b2f6      	uxtb	r6, r6
 8007af2:	4283      	cmp	r3, r0
 8007af4:	4637      	mov	r7, r6
 8007af6:	dc04      	bgt.n	8007b02 <__swbuf_r+0x42>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f000 f948 	bl	8007d90 <_fflush_r>
 8007b00:	bb30      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	701e      	strb	r6, [r3, #0]
 8007b10:	6963      	ldr	r3, [r4, #20]
 8007b12:	3001      	adds	r0, #1
 8007b14:	4283      	cmp	r3, r0
 8007b16:	d004      	beq.n	8007b22 <__swbuf_r+0x62>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d506      	bpl.n	8007b2c <__swbuf_r+0x6c>
 8007b1e:	2e0a      	cmp	r6, #10
 8007b20:	d104      	bne.n	8007b2c <__swbuf_r+0x6c>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f933 	bl	8007d90 <_fflush_r>
 8007b2a:	b988      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <__swbuf_r+0x9c>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <__swbuf_r+0x7a>
 8007b36:	68ac      	ldr	r4, [r5, #8]
 8007b38:	e7cf      	b.n	8007ada <__swbuf_r+0x1a>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <__swbuf_r+0xa0>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68ec      	ldreq	r4, [r5, #12]
 8007b42:	e7ca      	b.n	8007ada <__swbuf_r+0x1a>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 f81e 	bl	8007b88 <__swsetup_r>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d0cb      	beq.n	8007ae8 <__swbuf_r+0x28>
 8007b50:	f04f 37ff 	mov.w	r7, #4294967295
 8007b54:	e7ea      	b.n	8007b2c <__swbuf_r+0x6c>
 8007b56:	bf00      	nop
 8007b58:	08008ef0 	.word	0x08008ef0
 8007b5c:	08008f10 	.word	0x08008f10
 8007b60:	08008ed0 	.word	0x08008ed0

08007b64 <_write_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	; (8007b84 <_write_r+0x20>)
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	602a      	str	r2, [r5, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f7f9 ffc4 	bl	8001b00 <_write>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_write_r+0x1e>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_write_r+0x1e>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	200005c8 	.word	0x200005c8

08007b88 <__swsetup_r>:
 8007b88:	4b32      	ldr	r3, [pc, #200]	; (8007c54 <__swsetup_r+0xcc>)
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	681d      	ldr	r5, [r3, #0]
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460c      	mov	r4, r1
 8007b92:	b125      	cbz	r5, 8007b9e <__swsetup_r+0x16>
 8007b94:	69ab      	ldr	r3, [r5, #24]
 8007b96:	b913      	cbnz	r3, 8007b9e <__swsetup_r+0x16>
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 f98d 	bl	8007eb8 <__sinit>
 8007b9e:	4b2e      	ldr	r3, [pc, #184]	; (8007c58 <__swsetup_r+0xd0>)
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	d10f      	bne.n	8007bc4 <__swsetup_r+0x3c>
 8007ba4:	686c      	ldr	r4, [r5, #4]
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bac:	0719      	lsls	r1, r3, #28
 8007bae:	d42c      	bmi.n	8007c0a <__swsetup_r+0x82>
 8007bb0:	06dd      	lsls	r5, r3, #27
 8007bb2:	d411      	bmi.n	8007bd8 <__swsetup_r+0x50>
 8007bb4:	2309      	movs	r3, #9
 8007bb6:	6033      	str	r3, [r6, #0]
 8007bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	e03e      	b.n	8007c42 <__swsetup_r+0xba>
 8007bc4:	4b25      	ldr	r3, [pc, #148]	; (8007c5c <__swsetup_r+0xd4>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <__swsetup_r+0x46>
 8007bca:	68ac      	ldr	r4, [r5, #8]
 8007bcc:	e7eb      	b.n	8007ba6 <__swsetup_r+0x1e>
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <__swsetup_r+0xd8>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68ec      	ldreq	r4, [r5, #12]
 8007bd6:	e7e6      	b.n	8007ba6 <__swsetup_r+0x1e>
 8007bd8:	0758      	lsls	r0, r3, #29
 8007bda:	d512      	bpl.n	8007c02 <__swsetup_r+0x7a>
 8007bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bde:	b141      	cbz	r1, 8007bf2 <__swsetup_r+0x6a>
 8007be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007be4:	4299      	cmp	r1, r3
 8007be6:	d002      	beq.n	8007bee <__swsetup_r+0x66>
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7ff fdbd 	bl	8007768 <_free_r>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6063      	str	r3, [r4, #4]
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f043 0308 	orr.w	r3, r3, #8
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	b94b      	cbnz	r3, 8007c22 <__swsetup_r+0x9a>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c18:	d003      	beq.n	8007c22 <__swsetup_r+0x9a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 fa21 	bl	8008064 <__smakebuf_r>
 8007c22:	89a0      	ldrh	r0, [r4, #12]
 8007c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c28:	f010 0301 	ands.w	r3, r0, #1
 8007c2c:	d00a      	beq.n	8007c44 <__swsetup_r+0xbc>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	6963      	ldr	r3, [r4, #20]
 8007c34:	425b      	negs	r3, r3
 8007c36:	61a3      	str	r3, [r4, #24]
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	b943      	cbnz	r3, 8007c4e <__swsetup_r+0xc6>
 8007c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c40:	d1ba      	bne.n	8007bb8 <__swsetup_r+0x30>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	0781      	lsls	r1, r0, #30
 8007c46:	bf58      	it	pl
 8007c48:	6963      	ldrpl	r3, [r4, #20]
 8007c4a:	60a3      	str	r3, [r4, #8]
 8007c4c:	e7f4      	b.n	8007c38 <__swsetup_r+0xb0>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e7f7      	b.n	8007c42 <__swsetup_r+0xba>
 8007c52:	bf00      	nop
 8007c54:	20000044 	.word	0x20000044
 8007c58:	08008ef0 	.word	0x08008ef0
 8007c5c:	08008f10 	.word	0x08008f10
 8007c60:	08008ed0 	.word	0x08008ed0

08007c64 <_close_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_close_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7fb fbc5 	bl	80033fe <_close>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_close_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_close_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	200005c8 	.word	0x200005c8

08007c84 <__sflush_r>:
 8007c84:	898a      	ldrh	r2, [r1, #12]
 8007c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	0710      	lsls	r0, r2, #28
 8007c8e:	460c      	mov	r4, r1
 8007c90:	d458      	bmi.n	8007d44 <__sflush_r+0xc0>
 8007c92:	684b      	ldr	r3, [r1, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc05      	bgt.n	8007ca4 <__sflush_r+0x20>
 8007c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dc02      	bgt.n	8007ca4 <__sflush_r+0x20>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	d0f9      	beq.n	8007c9e <__sflush_r+0x1a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cb0:	682f      	ldr	r7, [r5, #0]
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	d032      	beq.n	8007d1c <__sflush_r+0x98>
 8007cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	075a      	lsls	r2, r3, #29
 8007cbc:	d505      	bpl.n	8007cca <__sflush_r+0x46>
 8007cbe:	6863      	ldr	r3, [r4, #4]
 8007cc0:	1ac0      	subs	r0, r0, r3
 8007cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cc4:	b10b      	cbz	r3, 8007cca <__sflush_r+0x46>
 8007cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc8:	1ac0      	subs	r0, r0, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cd0:	6a21      	ldr	r1, [r4, #32]
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b0      	blx	r6
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	d106      	bne.n	8007cea <__sflush_r+0x66>
 8007cdc:	6829      	ldr	r1, [r5, #0]
 8007cde:	291d      	cmp	r1, #29
 8007ce0:	d82c      	bhi.n	8007d3c <__sflush_r+0xb8>
 8007ce2:	4a2a      	ldr	r2, [pc, #168]	; (8007d8c <__sflush_r+0x108>)
 8007ce4:	40ca      	lsrs	r2, r1
 8007ce6:	07d6      	lsls	r6, r2, #31
 8007ce8:	d528      	bpl.n	8007d3c <__sflush_r+0xb8>
 8007cea:	2200      	movs	r2, #0
 8007cec:	6062      	str	r2, [r4, #4]
 8007cee:	04d9      	lsls	r1, r3, #19
 8007cf0:	6922      	ldr	r2, [r4, #16]
 8007cf2:	6022      	str	r2, [r4, #0]
 8007cf4:	d504      	bpl.n	8007d00 <__sflush_r+0x7c>
 8007cf6:	1c42      	adds	r2, r0, #1
 8007cf8:	d101      	bne.n	8007cfe <__sflush_r+0x7a>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	b903      	cbnz	r3, 8007d00 <__sflush_r+0x7c>
 8007cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8007d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d02:	602f      	str	r7, [r5, #0]
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d0ca      	beq.n	8007c9e <__sflush_r+0x1a>
 8007d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	d002      	beq.n	8007d16 <__sflush_r+0x92>
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff fd29 	bl	8007768 <_free_r>
 8007d16:	2000      	movs	r0, #0
 8007d18:	6360      	str	r0, [r4, #52]	; 0x34
 8007d1a:	e7c1      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d1c:	6a21      	ldr	r1, [r4, #32]
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	1c41      	adds	r1, r0, #1
 8007d26:	d1c7      	bne.n	8007cb8 <__sflush_r+0x34>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0c4      	beq.n	8007cb8 <__sflush_r+0x34>
 8007d2e:	2b1d      	cmp	r3, #29
 8007d30:	d001      	beq.n	8007d36 <__sflush_r+0xb2>
 8007d32:	2b16      	cmp	r3, #22
 8007d34:	d101      	bne.n	8007d3a <__sflush_r+0xb6>
 8007d36:	602f      	str	r7, [r5, #0]
 8007d38:	e7b1      	b.n	8007c9e <__sflush_r+0x1a>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	e7ad      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d44:	690f      	ldr	r7, [r1, #16]
 8007d46:	2f00      	cmp	r7, #0
 8007d48:	d0a9      	beq.n	8007c9e <__sflush_r+0x1a>
 8007d4a:	0793      	lsls	r3, r2, #30
 8007d4c:	680e      	ldr	r6, [r1, #0]
 8007d4e:	bf08      	it	eq
 8007d50:	694b      	ldreq	r3, [r1, #20]
 8007d52:	600f      	str	r7, [r1, #0]
 8007d54:	bf18      	it	ne
 8007d56:	2300      	movne	r3, #0
 8007d58:	eba6 0807 	sub.w	r8, r6, r7
 8007d5c:	608b      	str	r3, [r1, #8]
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	dd9c      	ble.n	8007c9e <__sflush_r+0x1a>
 8007d64:	6a21      	ldr	r1, [r4, #32]
 8007d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d68:	4643      	mov	r3, r8
 8007d6a:	463a      	mov	r2, r7
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	2800      	cmp	r0, #0
 8007d72:	dc06      	bgt.n	8007d82 <__sflush_r+0xfe>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e78e      	b.n	8007ca0 <__sflush_r+0x1c>
 8007d82:	4407      	add	r7, r0
 8007d84:	eba8 0800 	sub.w	r8, r8, r0
 8007d88:	e7e9      	b.n	8007d5e <__sflush_r+0xda>
 8007d8a:	bf00      	nop
 8007d8c:	20400001 	.word	0x20400001

08007d90 <_fflush_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	690b      	ldr	r3, [r1, #16]
 8007d94:	4605      	mov	r5, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	b913      	cbnz	r3, 8007da0 <_fflush_r+0x10>
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	b118      	cbz	r0, 8007daa <_fflush_r+0x1a>
 8007da2:	6983      	ldr	r3, [r0, #24]
 8007da4:	b90b      	cbnz	r3, 8007daa <_fflush_r+0x1a>
 8007da6:	f000 f887 	bl	8007eb8 <__sinit>
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <_fflush_r+0x6c>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d11b      	bne.n	8007de8 <_fflush_r+0x58>
 8007db0:	686c      	ldr	r4, [r5, #4]
 8007db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ef      	beq.n	8007d9a <_fflush_r+0xa>
 8007dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dbc:	07d0      	lsls	r0, r2, #31
 8007dbe:	d404      	bmi.n	8007dca <_fflush_r+0x3a>
 8007dc0:	0599      	lsls	r1, r3, #22
 8007dc2:	d402      	bmi.n	8007dca <_fflush_r+0x3a>
 8007dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dc6:	f000 f915 	bl	8007ff4 <__retarget_lock_acquire_recursive>
 8007dca:	4628      	mov	r0, r5
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f7ff ff59 	bl	8007c84 <__sflush_r>
 8007dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd4:	07da      	lsls	r2, r3, #31
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	d4e0      	bmi.n	8007d9c <_fflush_r+0xc>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	059b      	lsls	r3, r3, #22
 8007dde:	d4dd      	bmi.n	8007d9c <_fflush_r+0xc>
 8007de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de2:	f000 f908 	bl	8007ff6 <__retarget_lock_release_recursive>
 8007de6:	e7d9      	b.n	8007d9c <_fflush_r+0xc>
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <_fflush_r+0x70>)
 8007dea:	429c      	cmp	r4, r3
 8007dec:	d101      	bne.n	8007df2 <_fflush_r+0x62>
 8007dee:	68ac      	ldr	r4, [r5, #8]
 8007df0:	e7df      	b.n	8007db2 <_fflush_r+0x22>
 8007df2:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <_fflush_r+0x74>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	bf08      	it	eq
 8007df8:	68ec      	ldreq	r4, [r5, #12]
 8007dfa:	e7da      	b.n	8007db2 <_fflush_r+0x22>
 8007dfc:	08008ef0 	.word	0x08008ef0
 8007e00:	08008f10 	.word	0x08008f10
 8007e04:	08008ed0 	.word	0x08008ed0

08007e08 <std>:
 8007e08:	2300      	movs	r3, #0
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e16:	6083      	str	r3, [r0, #8]
 8007e18:	8181      	strh	r1, [r0, #12]
 8007e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e1c:	81c2      	strh	r2, [r0, #14]
 8007e1e:	6183      	str	r3, [r0, #24]
 8007e20:	4619      	mov	r1, r3
 8007e22:	2208      	movs	r2, #8
 8007e24:	305c      	adds	r0, #92	; 0x5c
 8007e26:	f7ff fc97 	bl	8007758 <memset>
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <std+0x38>)
 8007e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <std+0x3c>)
 8007e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <std+0x40>)
 8007e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <std+0x44>)
 8007e38:	6224      	str	r4, [r4, #32]
 8007e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	bf00      	nop
 8007e40:	08007a39 	.word	0x08007a39
 8007e44:	08007a5b 	.word	0x08007a5b
 8007e48:	08007a93 	.word	0x08007a93
 8007e4c:	08007ab7 	.word	0x08007ab7

08007e50 <_cleanup_r>:
 8007e50:	4901      	ldr	r1, [pc, #4]	; (8007e58 <_cleanup_r+0x8>)
 8007e52:	f000 b8af 	b.w	8007fb4 <_fwalk_reent>
 8007e56:	bf00      	nop
 8007e58:	08007d91 	.word	0x08007d91

08007e5c <__sfmoreglue>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	1e4a      	subs	r2, r1, #1
 8007e60:	2568      	movs	r5, #104	; 0x68
 8007e62:	4355      	muls	r5, r2
 8007e64:	460e      	mov	r6, r1
 8007e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e6a:	f7ff fccd 	bl	8007808 <_malloc_r>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	b140      	cbz	r0, 8007e84 <__sfmoreglue+0x28>
 8007e72:	2100      	movs	r1, #0
 8007e74:	e9c0 1600 	strd	r1, r6, [r0]
 8007e78:	300c      	adds	r0, #12
 8007e7a:	60a0      	str	r0, [r4, #8]
 8007e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e80:	f7ff fc6a 	bl	8007758 <memset>
 8007e84:	4620      	mov	r0, r4
 8007e86:	bd70      	pop	{r4, r5, r6, pc}

08007e88 <__sfp_lock_acquire>:
 8007e88:	4801      	ldr	r0, [pc, #4]	; (8007e90 <__sfp_lock_acquire+0x8>)
 8007e8a:	f000 b8b3 	b.w	8007ff4 <__retarget_lock_acquire_recursive>
 8007e8e:	bf00      	nop
 8007e90:	200005c4 	.word	0x200005c4

08007e94 <__sfp_lock_release>:
 8007e94:	4801      	ldr	r0, [pc, #4]	; (8007e9c <__sfp_lock_release+0x8>)
 8007e96:	f000 b8ae 	b.w	8007ff6 <__retarget_lock_release_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	200005c4 	.word	0x200005c4

08007ea0 <__sinit_lock_acquire>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__sinit_lock_acquire+0x8>)
 8007ea2:	f000 b8a7 	b.w	8007ff4 <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	200005bf 	.word	0x200005bf

08007eac <__sinit_lock_release>:
 8007eac:	4801      	ldr	r0, [pc, #4]	; (8007eb4 <__sinit_lock_release+0x8>)
 8007eae:	f000 b8a2 	b.w	8007ff6 <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200005bf 	.word	0x200005bf

08007eb8 <__sinit>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	4604      	mov	r4, r0
 8007ebc:	f7ff fff0 	bl	8007ea0 <__sinit_lock_acquire>
 8007ec0:	69a3      	ldr	r3, [r4, #24]
 8007ec2:	b11b      	cbz	r3, 8007ecc <__sinit+0x14>
 8007ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec8:	f7ff bff0 	b.w	8007eac <__sinit_lock_release>
 8007ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ed2:	4b13      	ldr	r3, [pc, #76]	; (8007f20 <__sinit+0x68>)
 8007ed4:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <__sinit+0x6c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eda:	42a3      	cmp	r3, r4
 8007edc:	bf04      	itt	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	61a3      	streq	r3, [r4, #24]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f820 	bl	8007f28 <__sfp>
 8007ee8:	6060      	str	r0, [r4, #4]
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 f81c 	bl	8007f28 <__sfp>
 8007ef0:	60a0      	str	r0, [r4, #8]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f818 	bl	8007f28 <__sfp>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	60e0      	str	r0, [r4, #12]
 8007efc:	2104      	movs	r1, #4
 8007efe:	6860      	ldr	r0, [r4, #4]
 8007f00:	f7ff ff82 	bl	8007e08 <std>
 8007f04:	68a0      	ldr	r0, [r4, #8]
 8007f06:	2201      	movs	r2, #1
 8007f08:	2109      	movs	r1, #9
 8007f0a:	f7ff ff7d 	bl	8007e08 <std>
 8007f0e:	68e0      	ldr	r0, [r4, #12]
 8007f10:	2202      	movs	r2, #2
 8007f12:	2112      	movs	r1, #18
 8007f14:	f7ff ff78 	bl	8007e08 <std>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	61a3      	str	r3, [r4, #24]
 8007f1c:	e7d2      	b.n	8007ec4 <__sinit+0xc>
 8007f1e:	bf00      	nop
 8007f20:	08008ecc 	.word	0x08008ecc
 8007f24:	08007e51 	.word	0x08007e51

08007f28 <__sfp>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	f7ff ffac 	bl	8007e88 <__sfp_lock_acquire>
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <__sfp+0x84>)
 8007f32:	681e      	ldr	r6, [r3, #0]
 8007f34:	69b3      	ldr	r3, [r6, #24]
 8007f36:	b913      	cbnz	r3, 8007f3e <__sfp+0x16>
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff ffbd 	bl	8007eb8 <__sinit>
 8007f3e:	3648      	adds	r6, #72	; 0x48
 8007f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	d503      	bpl.n	8007f50 <__sfp+0x28>
 8007f48:	6833      	ldr	r3, [r6, #0]
 8007f4a:	b30b      	cbz	r3, 8007f90 <__sfp+0x68>
 8007f4c:	6836      	ldr	r6, [r6, #0]
 8007f4e:	e7f7      	b.n	8007f40 <__sfp+0x18>
 8007f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f54:	b9d5      	cbnz	r5, 8007f8c <__sfp+0x64>
 8007f56:	4b16      	ldr	r3, [pc, #88]	; (8007fb0 <__sfp+0x88>)
 8007f58:	60e3      	str	r3, [r4, #12]
 8007f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f60:	f000 f847 	bl	8007ff2 <__retarget_lock_init_recursive>
 8007f64:	f7ff ff96 	bl	8007e94 <__sfp_lock_release>
 8007f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f70:	6025      	str	r5, [r4, #0]
 8007f72:	61a5      	str	r5, [r4, #24]
 8007f74:	2208      	movs	r2, #8
 8007f76:	4629      	mov	r1, r5
 8007f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f7c:	f7ff fbec 	bl	8007758 <memset>
 8007f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f88:	4620      	mov	r0, r4
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	3468      	adds	r4, #104	; 0x68
 8007f8e:	e7d9      	b.n	8007f44 <__sfp+0x1c>
 8007f90:	2104      	movs	r1, #4
 8007f92:	4638      	mov	r0, r7
 8007f94:	f7ff ff62 	bl	8007e5c <__sfmoreglue>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	6030      	str	r0, [r6, #0]
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1d5      	bne.n	8007f4c <__sfp+0x24>
 8007fa0:	f7ff ff78 	bl	8007e94 <__sfp_lock_release>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	e7ee      	b.n	8007f88 <__sfp+0x60>
 8007faa:	bf00      	nop
 8007fac:	08008ecc 	.word	0x08008ecc
 8007fb0:	ffff0001 	.word	0xffff0001

08007fb4 <_fwalk_reent>:
 8007fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4606      	mov	r6, r0
 8007fba:	4688      	mov	r8, r1
 8007fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fc0:	2700      	movs	r7, #0
 8007fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fca:	d505      	bpl.n	8007fd8 <_fwalk_reent+0x24>
 8007fcc:	6824      	ldr	r4, [r4, #0]
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d1f7      	bne.n	8007fc2 <_fwalk_reent+0xe>
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd8:	89ab      	ldrh	r3, [r5, #12]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d907      	bls.n	8007fee <_fwalk_reent+0x3a>
 8007fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	d003      	beq.n	8007fee <_fwalk_reent+0x3a>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	47c0      	blx	r8
 8007fec:	4307      	orrs	r7, r0
 8007fee:	3568      	adds	r5, #104	; 0x68
 8007ff0:	e7e9      	b.n	8007fc6 <_fwalk_reent+0x12>

08007ff2 <__retarget_lock_init_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <__retarget_lock_acquire_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <__retarget_lock_release_recursive>:
 8007ff6:	4770      	bx	lr

08007ff8 <_lseek_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	; (8008018 <_lseek_r+0x20>)
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	4611      	mov	r1, r2
 8008002:	2200      	movs	r2, #0
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7fb fa20 	bl	800344c <_lseek>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_lseek_r+0x1e>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_lseek_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200005c8 	.word	0x200005c8

0800801c <__swhatbuf_r>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	460e      	mov	r6, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	2900      	cmp	r1, #0
 8008026:	b096      	sub	sp, #88	; 0x58
 8008028:	4614      	mov	r4, r2
 800802a:	461d      	mov	r5, r3
 800802c:	da07      	bge.n	800803e <__swhatbuf_r+0x22>
 800802e:	2300      	movs	r3, #0
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	89b3      	ldrh	r3, [r6, #12]
 8008034:	061a      	lsls	r2, r3, #24
 8008036:	d410      	bmi.n	800805a <__swhatbuf_r+0x3e>
 8008038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803c:	e00e      	b.n	800805c <__swhatbuf_r+0x40>
 800803e:	466a      	mov	r2, sp
 8008040:	f000 fcb8 	bl	80089b4 <_fstat_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	dbf2      	blt.n	800802e <__swhatbuf_r+0x12>
 8008048:	9a01      	ldr	r2, [sp, #4]
 800804a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800804e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008052:	425a      	negs	r2, r3
 8008054:	415a      	adcs	r2, r3
 8008056:	602a      	str	r2, [r5, #0]
 8008058:	e7ee      	b.n	8008038 <__swhatbuf_r+0x1c>
 800805a:	2340      	movs	r3, #64	; 0x40
 800805c:	2000      	movs	r0, #0
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	b016      	add	sp, #88	; 0x58
 8008062:	bd70      	pop	{r4, r5, r6, pc}

08008064 <__smakebuf_r>:
 8008064:	898b      	ldrh	r3, [r1, #12]
 8008066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008068:	079d      	lsls	r5, r3, #30
 800806a:	4606      	mov	r6, r0
 800806c:	460c      	mov	r4, r1
 800806e:	d507      	bpl.n	8008080 <__smakebuf_r+0x1c>
 8008070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	2301      	movs	r3, #1
 800807a:	6163      	str	r3, [r4, #20]
 800807c:	b002      	add	sp, #8
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	ab01      	add	r3, sp, #4
 8008082:	466a      	mov	r2, sp
 8008084:	f7ff ffca 	bl	800801c <__swhatbuf_r>
 8008088:	9900      	ldr	r1, [sp, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fbbb 	bl	8007808 <_malloc_r>
 8008092:	b948      	cbnz	r0, 80080a8 <__smakebuf_r+0x44>
 8008094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008098:	059a      	lsls	r2, r3, #22
 800809a:	d4ef      	bmi.n	800807c <__smakebuf_r+0x18>
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	f043 0302 	orr.w	r3, r3, #2
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	e7e3      	b.n	8008070 <__smakebuf_r+0xc>
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <__smakebuf_r+0x7c>)
 80080aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	6020      	str	r0, [r4, #0]
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	6163      	str	r3, [r4, #20]
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	6120      	str	r0, [r4, #16]
 80080be:	b15b      	cbz	r3, 80080d8 <__smakebuf_r+0x74>
 80080c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c4:	4630      	mov	r0, r6
 80080c6:	f000 fc87 	bl	80089d8 <_isatty_r>
 80080ca:	b128      	cbz	r0, 80080d8 <__smakebuf_r+0x74>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	89a0      	ldrh	r0, [r4, #12]
 80080da:	4305      	orrs	r5, r0
 80080dc:	81a5      	strh	r5, [r4, #12]
 80080de:	e7cd      	b.n	800807c <__smakebuf_r+0x18>
 80080e0:	08007e51 	.word	0x08007e51

080080e4 <__malloc_lock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__malloc_lock+0x8>)
 80080e6:	f7ff bf85 	b.w	8007ff4 <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	200005c0 	.word	0x200005c0

080080f0 <__malloc_unlock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_unlock+0x8>)
 80080f2:	f7ff bf80 	b.w	8007ff6 <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	200005c0 	.word	0x200005c0

080080fc <__ssputs_r>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	688e      	ldr	r6, [r1, #8]
 8008102:	429e      	cmp	r6, r3
 8008104:	4682      	mov	sl, r0
 8008106:	460c      	mov	r4, r1
 8008108:	4690      	mov	r8, r2
 800810a:	461f      	mov	r7, r3
 800810c:	d838      	bhi.n	8008180 <__ssputs_r+0x84>
 800810e:	898a      	ldrh	r2, [r1, #12]
 8008110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008114:	d032      	beq.n	800817c <__ssputs_r+0x80>
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	6909      	ldr	r1, [r1, #16]
 800811a:	eba5 0901 	sub.w	r9, r5, r1
 800811e:	6965      	ldr	r5, [r4, #20]
 8008120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008128:	3301      	adds	r3, #1
 800812a:	444b      	add	r3, r9
 800812c:	106d      	asrs	r5, r5, #1
 800812e:	429d      	cmp	r5, r3
 8008130:	bf38      	it	cc
 8008132:	461d      	movcc	r5, r3
 8008134:	0553      	lsls	r3, r2, #21
 8008136:	d531      	bpl.n	800819c <__ssputs_r+0xa0>
 8008138:	4629      	mov	r1, r5
 800813a:	f7ff fb65 	bl	8007808 <_malloc_r>
 800813e:	4606      	mov	r6, r0
 8008140:	b950      	cbnz	r0, 8008158 <__ssputs_r+0x5c>
 8008142:	230c      	movs	r3, #12
 8008144:	f8ca 3000 	str.w	r3, [sl]
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008158:	6921      	ldr	r1, [r4, #16]
 800815a:	464a      	mov	r2, r9
 800815c:	f7ff faee 	bl	800773c <memcpy>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	6126      	str	r6, [r4, #16]
 800816e:	6165      	str	r5, [r4, #20]
 8008170:	444e      	add	r6, r9
 8008172:	eba5 0509 	sub.w	r5, r5, r9
 8008176:	6026      	str	r6, [r4, #0]
 8008178:	60a5      	str	r5, [r4, #8]
 800817a:	463e      	mov	r6, r7
 800817c:	42be      	cmp	r6, r7
 800817e:	d900      	bls.n	8008182 <__ssputs_r+0x86>
 8008180:	463e      	mov	r6, r7
 8008182:	4632      	mov	r2, r6
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	4641      	mov	r1, r8
 8008188:	f000 fc36 	bl	80089f8 <memmove>
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	1b9b      	subs	r3, r3, r6
 8008192:	4432      	add	r2, r6
 8008194:	60a3      	str	r3, [r4, #8]
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e7db      	b.n	8008154 <__ssputs_r+0x58>
 800819c:	462a      	mov	r2, r5
 800819e:	f000 fc45 	bl	8008a2c <_realloc_r>
 80081a2:	4606      	mov	r6, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d1e1      	bne.n	800816c <__ssputs_r+0x70>
 80081a8:	6921      	ldr	r1, [r4, #16]
 80081aa:	4650      	mov	r0, sl
 80081ac:	f7ff fadc 	bl	8007768 <_free_r>
 80081b0:	e7c7      	b.n	8008142 <__ssputs_r+0x46>
	...

080081b4 <_svfiprintf_r>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	4698      	mov	r8, r3
 80081ba:	898b      	ldrh	r3, [r1, #12]
 80081bc:	061b      	lsls	r3, r3, #24
 80081be:	b09d      	sub	sp, #116	; 0x74
 80081c0:	4607      	mov	r7, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	4614      	mov	r4, r2
 80081c6:	d50e      	bpl.n	80081e6 <_svfiprintf_r+0x32>
 80081c8:	690b      	ldr	r3, [r1, #16]
 80081ca:	b963      	cbnz	r3, 80081e6 <_svfiprintf_r+0x32>
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	f7ff fb1b 	bl	8007808 <_malloc_r>
 80081d2:	6028      	str	r0, [r5, #0]
 80081d4:	6128      	str	r0, [r5, #16]
 80081d6:	b920      	cbnz	r0, 80081e2 <_svfiprintf_r+0x2e>
 80081d8:	230c      	movs	r3, #12
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	e0d1      	b.n	8008386 <_svfiprintf_r+0x1d2>
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	616b      	str	r3, [r5, #20]
 80081e6:	2300      	movs	r3, #0
 80081e8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ea:	2320      	movs	r3, #32
 80081ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081f4:	2330      	movs	r3, #48	; 0x30
 80081f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083a0 <_svfiprintf_r+0x1ec>
 80081fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081fe:	f04f 0901 	mov.w	r9, #1
 8008202:	4623      	mov	r3, r4
 8008204:	469a      	mov	sl, r3
 8008206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820a:	b10a      	cbz	r2, 8008210 <_svfiprintf_r+0x5c>
 800820c:	2a25      	cmp	r2, #37	; 0x25
 800820e:	d1f9      	bne.n	8008204 <_svfiprintf_r+0x50>
 8008210:	ebba 0b04 	subs.w	fp, sl, r4
 8008214:	d00b      	beq.n	800822e <_svfiprintf_r+0x7a>
 8008216:	465b      	mov	r3, fp
 8008218:	4622      	mov	r2, r4
 800821a:	4629      	mov	r1, r5
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff ff6d 	bl	80080fc <__ssputs_r>
 8008222:	3001      	adds	r0, #1
 8008224:	f000 80aa 	beq.w	800837c <_svfiprintf_r+0x1c8>
 8008228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800822a:	445a      	add	r2, fp
 800822c:	9209      	str	r2, [sp, #36]	; 0x24
 800822e:	f89a 3000 	ldrb.w	r3, [sl]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80a2 	beq.w	800837c <_svfiprintf_r+0x1c8>
 8008238:	2300      	movs	r3, #0
 800823a:	f04f 32ff 	mov.w	r2, #4294967295
 800823e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008242:	f10a 0a01 	add.w	sl, sl, #1
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	9307      	str	r3, [sp, #28]
 800824a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800824e:	931a      	str	r3, [sp, #104]	; 0x68
 8008250:	4654      	mov	r4, sl
 8008252:	2205      	movs	r2, #5
 8008254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008258:	4851      	ldr	r0, [pc, #324]	; (80083a0 <_svfiprintf_r+0x1ec>)
 800825a:	f7f7 ffc1 	bl	80001e0 <memchr>
 800825e:	9a04      	ldr	r2, [sp, #16]
 8008260:	b9d8      	cbnz	r0, 800829a <_svfiprintf_r+0xe6>
 8008262:	06d0      	lsls	r0, r2, #27
 8008264:	bf44      	itt	mi
 8008266:	2320      	movmi	r3, #32
 8008268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826c:	0711      	lsls	r1, r2, #28
 800826e:	bf44      	itt	mi
 8008270:	232b      	movmi	r3, #43	; 0x2b
 8008272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008276:	f89a 3000 	ldrb.w	r3, [sl]
 800827a:	2b2a      	cmp	r3, #42	; 0x2a
 800827c:	d015      	beq.n	80082aa <_svfiprintf_r+0xf6>
 800827e:	9a07      	ldr	r2, [sp, #28]
 8008280:	4654      	mov	r4, sl
 8008282:	2000      	movs	r0, #0
 8008284:	f04f 0c0a 	mov.w	ip, #10
 8008288:	4621      	mov	r1, r4
 800828a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800828e:	3b30      	subs	r3, #48	; 0x30
 8008290:	2b09      	cmp	r3, #9
 8008292:	d94e      	bls.n	8008332 <_svfiprintf_r+0x17e>
 8008294:	b1b0      	cbz	r0, 80082c4 <_svfiprintf_r+0x110>
 8008296:	9207      	str	r2, [sp, #28]
 8008298:	e014      	b.n	80082c4 <_svfiprintf_r+0x110>
 800829a:	eba0 0308 	sub.w	r3, r0, r8
 800829e:	fa09 f303 	lsl.w	r3, r9, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	9304      	str	r3, [sp, #16]
 80082a6:	46a2      	mov	sl, r4
 80082a8:	e7d2      	b.n	8008250 <_svfiprintf_r+0x9c>
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	1d19      	adds	r1, r3, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	9103      	str	r1, [sp, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	bfbb      	ittet	lt
 80082b6:	425b      	neglt	r3, r3
 80082b8:	f042 0202 	orrlt.w	r2, r2, #2
 80082bc:	9307      	strge	r3, [sp, #28]
 80082be:	9307      	strlt	r3, [sp, #28]
 80082c0:	bfb8      	it	lt
 80082c2:	9204      	strlt	r2, [sp, #16]
 80082c4:	7823      	ldrb	r3, [r4, #0]
 80082c6:	2b2e      	cmp	r3, #46	; 0x2e
 80082c8:	d10c      	bne.n	80082e4 <_svfiprintf_r+0x130>
 80082ca:	7863      	ldrb	r3, [r4, #1]
 80082cc:	2b2a      	cmp	r3, #42	; 0x2a
 80082ce:	d135      	bne.n	800833c <_svfiprintf_r+0x188>
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	1d1a      	adds	r2, r3, #4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	9203      	str	r2, [sp, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bfb8      	it	lt
 80082dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80082e0:	3402      	adds	r4, #2
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083b0 <_svfiprintf_r+0x1fc>
 80082e8:	7821      	ldrb	r1, [r4, #0]
 80082ea:	2203      	movs	r2, #3
 80082ec:	4650      	mov	r0, sl
 80082ee:	f7f7 ff77 	bl	80001e0 <memchr>
 80082f2:	b140      	cbz	r0, 8008306 <_svfiprintf_r+0x152>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	eba0 000a 	sub.w	r0, r0, sl
 80082fa:	fa03 f000 	lsl.w	r0, r3, r0
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	4303      	orrs	r3, r0
 8008302:	3401      	adds	r4, #1
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830a:	4826      	ldr	r0, [pc, #152]	; (80083a4 <_svfiprintf_r+0x1f0>)
 800830c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008310:	2206      	movs	r2, #6
 8008312:	f7f7 ff65 	bl	80001e0 <memchr>
 8008316:	2800      	cmp	r0, #0
 8008318:	d038      	beq.n	800838c <_svfiprintf_r+0x1d8>
 800831a:	4b23      	ldr	r3, [pc, #140]	; (80083a8 <_svfiprintf_r+0x1f4>)
 800831c:	bb1b      	cbnz	r3, 8008366 <_svfiprintf_r+0x1b2>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	3307      	adds	r3, #7
 8008322:	f023 0307 	bic.w	r3, r3, #7
 8008326:	3308      	adds	r3, #8
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	4433      	add	r3, r6
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	e767      	b.n	8008202 <_svfiprintf_r+0x4e>
 8008332:	fb0c 3202 	mla	r2, ip, r2, r3
 8008336:	460c      	mov	r4, r1
 8008338:	2001      	movs	r0, #1
 800833a:	e7a5      	b.n	8008288 <_svfiprintf_r+0xd4>
 800833c:	2300      	movs	r3, #0
 800833e:	3401      	adds	r4, #1
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	4619      	mov	r1, r3
 8008344:	f04f 0c0a 	mov.w	ip, #10
 8008348:	4620      	mov	r0, r4
 800834a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800834e:	3a30      	subs	r2, #48	; 0x30
 8008350:	2a09      	cmp	r2, #9
 8008352:	d903      	bls.n	800835c <_svfiprintf_r+0x1a8>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0c5      	beq.n	80082e4 <_svfiprintf_r+0x130>
 8008358:	9105      	str	r1, [sp, #20]
 800835a:	e7c3      	b.n	80082e4 <_svfiprintf_r+0x130>
 800835c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008360:	4604      	mov	r4, r0
 8008362:	2301      	movs	r3, #1
 8008364:	e7f0      	b.n	8008348 <_svfiprintf_r+0x194>
 8008366:	ab03      	add	r3, sp, #12
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	462a      	mov	r2, r5
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <_svfiprintf_r+0x1f8>)
 800836e:	a904      	add	r1, sp, #16
 8008370:	4638      	mov	r0, r7
 8008372:	f3af 8000 	nop.w
 8008376:	1c42      	adds	r2, r0, #1
 8008378:	4606      	mov	r6, r0
 800837a:	d1d6      	bne.n	800832a <_svfiprintf_r+0x176>
 800837c:	89ab      	ldrh	r3, [r5, #12]
 800837e:	065b      	lsls	r3, r3, #25
 8008380:	f53f af2c 	bmi.w	80081dc <_svfiprintf_r+0x28>
 8008384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008386:	b01d      	add	sp, #116	; 0x74
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838c:	ab03      	add	r3, sp, #12
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	462a      	mov	r2, r5
 8008392:	4b06      	ldr	r3, [pc, #24]	; (80083ac <_svfiprintf_r+0x1f8>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	4638      	mov	r0, r7
 8008398:	f000 f9d4 	bl	8008744 <_printf_i>
 800839c:	e7eb      	b.n	8008376 <_svfiprintf_r+0x1c2>
 800839e:	bf00      	nop
 80083a0:	08008f30 	.word	0x08008f30
 80083a4:	08008f3a 	.word	0x08008f3a
 80083a8:	00000000 	.word	0x00000000
 80083ac:	080080fd 	.word	0x080080fd
 80083b0:	08008f36 	.word	0x08008f36

080083b4 <__sfputc_r>:
 80083b4:	6893      	ldr	r3, [r2, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	b410      	push	{r4}
 80083bc:	6093      	str	r3, [r2, #8]
 80083be:	da08      	bge.n	80083d2 <__sfputc_r+0x1e>
 80083c0:	6994      	ldr	r4, [r2, #24]
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	db01      	blt.n	80083ca <__sfputc_r+0x16>
 80083c6:	290a      	cmp	r1, #10
 80083c8:	d103      	bne.n	80083d2 <__sfputc_r+0x1e>
 80083ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ce:	f7ff bb77 	b.w	8007ac0 <__swbuf_r>
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	1c58      	adds	r0, r3, #1
 80083d6:	6010      	str	r0, [r2, #0]
 80083d8:	7019      	strb	r1, [r3, #0]
 80083da:	4608      	mov	r0, r1
 80083dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <__sfputs_r>:
 80083e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	18d5      	adds	r5, r2, r3
 80083ec:	42ac      	cmp	r4, r5
 80083ee:	d101      	bne.n	80083f4 <__sfputs_r+0x12>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e007      	b.n	8008404 <__sfputs_r+0x22>
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	463a      	mov	r2, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ffda 	bl	80083b4 <__sfputc_r>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d1f3      	bne.n	80083ec <__sfputs_r+0xa>
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008408 <_vfiprintf_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	b09d      	sub	sp, #116	; 0x74
 8008410:	4614      	mov	r4, r2
 8008412:	4698      	mov	r8, r3
 8008414:	4606      	mov	r6, r0
 8008416:	b118      	cbz	r0, 8008420 <_vfiprintf_r+0x18>
 8008418:	6983      	ldr	r3, [r0, #24]
 800841a:	b90b      	cbnz	r3, 8008420 <_vfiprintf_r+0x18>
 800841c:	f7ff fd4c 	bl	8007eb8 <__sinit>
 8008420:	4b89      	ldr	r3, [pc, #548]	; (8008648 <_vfiprintf_r+0x240>)
 8008422:	429d      	cmp	r5, r3
 8008424:	d11b      	bne.n	800845e <_vfiprintf_r+0x56>
 8008426:	6875      	ldr	r5, [r6, #4]
 8008428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842a:	07d9      	lsls	r1, r3, #31
 800842c:	d405      	bmi.n	800843a <_vfiprintf_r+0x32>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	059a      	lsls	r2, r3, #22
 8008432:	d402      	bmi.n	800843a <_vfiprintf_r+0x32>
 8008434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008436:	f7ff fddd 	bl	8007ff4 <__retarget_lock_acquire_recursive>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	d501      	bpl.n	8008444 <_vfiprintf_r+0x3c>
 8008440:	692b      	ldr	r3, [r5, #16]
 8008442:	b9eb      	cbnz	r3, 8008480 <_vfiprintf_r+0x78>
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff fb9e 	bl	8007b88 <__swsetup_r>
 800844c:	b1c0      	cbz	r0, 8008480 <_vfiprintf_r+0x78>
 800844e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008450:	07dc      	lsls	r4, r3, #31
 8008452:	d50e      	bpl.n	8008472 <_vfiprintf_r+0x6a>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b01d      	add	sp, #116	; 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	4b7b      	ldr	r3, [pc, #492]	; (800864c <_vfiprintf_r+0x244>)
 8008460:	429d      	cmp	r5, r3
 8008462:	d101      	bne.n	8008468 <_vfiprintf_r+0x60>
 8008464:	68b5      	ldr	r5, [r6, #8]
 8008466:	e7df      	b.n	8008428 <_vfiprintf_r+0x20>
 8008468:	4b79      	ldr	r3, [pc, #484]	; (8008650 <_vfiprintf_r+0x248>)
 800846a:	429d      	cmp	r5, r3
 800846c:	bf08      	it	eq
 800846e:	68f5      	ldreq	r5, [r6, #12]
 8008470:	e7da      	b.n	8008428 <_vfiprintf_r+0x20>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	0598      	lsls	r0, r3, #22
 8008476:	d4ed      	bmi.n	8008454 <_vfiprintf_r+0x4c>
 8008478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800847a:	f7ff fdbc 	bl	8007ff6 <__retarget_lock_release_recursive>
 800847e:	e7e9      	b.n	8008454 <_vfiprintf_r+0x4c>
 8008480:	2300      	movs	r3, #0
 8008482:	9309      	str	r3, [sp, #36]	; 0x24
 8008484:	2320      	movs	r3, #32
 8008486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800848a:	f8cd 800c 	str.w	r8, [sp, #12]
 800848e:	2330      	movs	r3, #48	; 0x30
 8008490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008654 <_vfiprintf_r+0x24c>
 8008494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008498:	f04f 0901 	mov.w	r9, #1
 800849c:	4623      	mov	r3, r4
 800849e:	469a      	mov	sl, r3
 80084a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a4:	b10a      	cbz	r2, 80084aa <_vfiprintf_r+0xa2>
 80084a6:	2a25      	cmp	r2, #37	; 0x25
 80084a8:	d1f9      	bne.n	800849e <_vfiprintf_r+0x96>
 80084aa:	ebba 0b04 	subs.w	fp, sl, r4
 80084ae:	d00b      	beq.n	80084c8 <_vfiprintf_r+0xc0>
 80084b0:	465b      	mov	r3, fp
 80084b2:	4622      	mov	r2, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff ff93 	bl	80083e2 <__sfputs_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	f000 80aa 	beq.w	8008616 <_vfiprintf_r+0x20e>
 80084c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c4:	445a      	add	r2, fp
 80084c6:	9209      	str	r2, [sp, #36]	; 0x24
 80084c8:	f89a 3000 	ldrb.w	r3, [sl]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80a2 	beq.w	8008616 <_vfiprintf_r+0x20e>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084dc:	f10a 0a01 	add.w	sl, sl, #1
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	9307      	str	r3, [sp, #28]
 80084e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e8:	931a      	str	r3, [sp, #104]	; 0x68
 80084ea:	4654      	mov	r4, sl
 80084ec:	2205      	movs	r2, #5
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4858      	ldr	r0, [pc, #352]	; (8008654 <_vfiprintf_r+0x24c>)
 80084f4:	f7f7 fe74 	bl	80001e0 <memchr>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	b9d8      	cbnz	r0, 8008534 <_vfiprintf_r+0x12c>
 80084fc:	06d1      	lsls	r1, r2, #27
 80084fe:	bf44      	itt	mi
 8008500:	2320      	movmi	r3, #32
 8008502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008506:	0713      	lsls	r3, r2, #28
 8008508:	bf44      	itt	mi
 800850a:	232b      	movmi	r3, #43	; 0x2b
 800850c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008510:	f89a 3000 	ldrb.w	r3, [sl]
 8008514:	2b2a      	cmp	r3, #42	; 0x2a
 8008516:	d015      	beq.n	8008544 <_vfiprintf_r+0x13c>
 8008518:	9a07      	ldr	r2, [sp, #28]
 800851a:	4654      	mov	r4, sl
 800851c:	2000      	movs	r0, #0
 800851e:	f04f 0c0a 	mov.w	ip, #10
 8008522:	4621      	mov	r1, r4
 8008524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008528:	3b30      	subs	r3, #48	; 0x30
 800852a:	2b09      	cmp	r3, #9
 800852c:	d94e      	bls.n	80085cc <_vfiprintf_r+0x1c4>
 800852e:	b1b0      	cbz	r0, 800855e <_vfiprintf_r+0x156>
 8008530:	9207      	str	r2, [sp, #28]
 8008532:	e014      	b.n	800855e <_vfiprintf_r+0x156>
 8008534:	eba0 0308 	sub.w	r3, r0, r8
 8008538:	fa09 f303 	lsl.w	r3, r9, r3
 800853c:	4313      	orrs	r3, r2
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	46a2      	mov	sl, r4
 8008542:	e7d2      	b.n	80084ea <_vfiprintf_r+0xe2>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	1d19      	adds	r1, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	9103      	str	r1, [sp, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfbb      	ittet	lt
 8008550:	425b      	neglt	r3, r3
 8008552:	f042 0202 	orrlt.w	r2, r2, #2
 8008556:	9307      	strge	r3, [sp, #28]
 8008558:	9307      	strlt	r3, [sp, #28]
 800855a:	bfb8      	it	lt
 800855c:	9204      	strlt	r2, [sp, #16]
 800855e:	7823      	ldrb	r3, [r4, #0]
 8008560:	2b2e      	cmp	r3, #46	; 0x2e
 8008562:	d10c      	bne.n	800857e <_vfiprintf_r+0x176>
 8008564:	7863      	ldrb	r3, [r4, #1]
 8008566:	2b2a      	cmp	r3, #42	; 0x2a
 8008568:	d135      	bne.n	80085d6 <_vfiprintf_r+0x1ce>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	1d1a      	adds	r2, r3, #4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	9203      	str	r2, [sp, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfb8      	it	lt
 8008576:	f04f 33ff 	movlt.w	r3, #4294967295
 800857a:	3402      	adds	r4, #2
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008664 <_vfiprintf_r+0x25c>
 8008582:	7821      	ldrb	r1, [r4, #0]
 8008584:	2203      	movs	r2, #3
 8008586:	4650      	mov	r0, sl
 8008588:	f7f7 fe2a 	bl	80001e0 <memchr>
 800858c:	b140      	cbz	r0, 80085a0 <_vfiprintf_r+0x198>
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	eba0 000a 	sub.w	r0, r0, sl
 8008594:	fa03 f000 	lsl.w	r0, r3, r0
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	4303      	orrs	r3, r0
 800859c:	3401      	adds	r4, #1
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	482c      	ldr	r0, [pc, #176]	; (8008658 <_vfiprintf_r+0x250>)
 80085a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085aa:	2206      	movs	r2, #6
 80085ac:	f7f7 fe18 	bl	80001e0 <memchr>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d03f      	beq.n	8008634 <_vfiprintf_r+0x22c>
 80085b4:	4b29      	ldr	r3, [pc, #164]	; (800865c <_vfiprintf_r+0x254>)
 80085b6:	bb1b      	cbnz	r3, 8008600 <_vfiprintf_r+0x1f8>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	3307      	adds	r3, #7
 80085bc:	f023 0307 	bic.w	r3, r3, #7
 80085c0:	3308      	adds	r3, #8
 80085c2:	9303      	str	r3, [sp, #12]
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	443b      	add	r3, r7
 80085c8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ca:	e767      	b.n	800849c <_vfiprintf_r+0x94>
 80085cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085d0:	460c      	mov	r4, r1
 80085d2:	2001      	movs	r0, #1
 80085d4:	e7a5      	b.n	8008522 <_vfiprintf_r+0x11a>
 80085d6:	2300      	movs	r3, #0
 80085d8:	3401      	adds	r4, #1
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	4619      	mov	r1, r3
 80085de:	f04f 0c0a 	mov.w	ip, #10
 80085e2:	4620      	mov	r0, r4
 80085e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e8:	3a30      	subs	r2, #48	; 0x30
 80085ea:	2a09      	cmp	r2, #9
 80085ec:	d903      	bls.n	80085f6 <_vfiprintf_r+0x1ee>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0c5      	beq.n	800857e <_vfiprintf_r+0x176>
 80085f2:	9105      	str	r1, [sp, #20]
 80085f4:	e7c3      	b.n	800857e <_vfiprintf_r+0x176>
 80085f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085fa:	4604      	mov	r4, r0
 80085fc:	2301      	movs	r3, #1
 80085fe:	e7f0      	b.n	80085e2 <_vfiprintf_r+0x1da>
 8008600:	ab03      	add	r3, sp, #12
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	462a      	mov	r2, r5
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <_vfiprintf_r+0x258>)
 8008608:	a904      	add	r1, sp, #16
 800860a:	4630      	mov	r0, r6
 800860c:	f3af 8000 	nop.w
 8008610:	4607      	mov	r7, r0
 8008612:	1c78      	adds	r0, r7, #1
 8008614:	d1d6      	bne.n	80085c4 <_vfiprintf_r+0x1bc>
 8008616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008618:	07d9      	lsls	r1, r3, #31
 800861a:	d405      	bmi.n	8008628 <_vfiprintf_r+0x220>
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	059a      	lsls	r2, r3, #22
 8008620:	d402      	bmi.n	8008628 <_vfiprintf_r+0x220>
 8008622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008624:	f7ff fce7 	bl	8007ff6 <__retarget_lock_release_recursive>
 8008628:	89ab      	ldrh	r3, [r5, #12]
 800862a:	065b      	lsls	r3, r3, #25
 800862c:	f53f af12 	bmi.w	8008454 <_vfiprintf_r+0x4c>
 8008630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008632:	e711      	b.n	8008458 <_vfiprintf_r+0x50>
 8008634:	ab03      	add	r3, sp, #12
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	462a      	mov	r2, r5
 800863a:	4b09      	ldr	r3, [pc, #36]	; (8008660 <_vfiprintf_r+0x258>)
 800863c:	a904      	add	r1, sp, #16
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f880 	bl	8008744 <_printf_i>
 8008644:	e7e4      	b.n	8008610 <_vfiprintf_r+0x208>
 8008646:	bf00      	nop
 8008648:	08008ef0 	.word	0x08008ef0
 800864c:	08008f10 	.word	0x08008f10
 8008650:	08008ed0 	.word	0x08008ed0
 8008654:	08008f30 	.word	0x08008f30
 8008658:	08008f3a 	.word	0x08008f3a
 800865c:	00000000 	.word	0x00000000
 8008660:	080083e3 	.word	0x080083e3
 8008664:	08008f36 	.word	0x08008f36

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4616      	mov	r6, r2
 800866e:	4699      	mov	r9, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008678:	4293      	cmp	r3, r2
 800867a:	bfb8      	it	lt
 800867c:	4613      	movlt	r3, r2
 800867e:	6033      	str	r3, [r6, #0]
 8008680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008684:	4607      	mov	r7, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b10a      	cbz	r2, 800868e <_printf_common+0x26>
 800868a:	3301      	adds	r3, #1
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	0699      	lsls	r1, r3, #26
 8008692:	bf42      	ittt	mi
 8008694:	6833      	ldrmi	r3, [r6, #0]
 8008696:	3302      	addmi	r3, #2
 8008698:	6033      	strmi	r3, [r6, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d106      	bne.n	80086b0 <_printf_common+0x48>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6832      	ldr	r2, [r6, #0]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc26      	bgt.n	80086fe <_printf_common+0x96>
 80086b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b4:	1e13      	subs	r3, r2, #0
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	0692      	lsls	r2, r2, #26
 80086be:	d42b      	bmi.n	8008718 <_printf_common+0xb0>
 80086c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d01e      	beq.n	800870c <_printf_common+0xa4>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	68e5      	ldr	r5, [r4, #12]
 80086d2:	6832      	ldr	r2, [r6, #0]
 80086d4:	f003 0306 	and.w	r3, r3, #6
 80086d8:	2b04      	cmp	r3, #4
 80086da:	bf08      	it	eq
 80086dc:	1aad      	subeq	r5, r5, r2
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	6922      	ldr	r2, [r4, #16]
 80086e2:	bf0c      	ite	eq
 80086e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e8:	2500      	movne	r5, #0
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bfc4      	itt	gt
 80086ee:	1a9b      	subgt	r3, r3, r2
 80086f0:	18ed      	addgt	r5, r5, r3
 80086f2:	2600      	movs	r6, #0
 80086f4:	341a      	adds	r4, #26
 80086f6:	42b5      	cmp	r5, r6
 80086f8:	d11a      	bne.n	8008730 <_printf_common+0xc8>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e008      	b.n	8008710 <_printf_common+0xa8>
 80086fe:	2301      	movs	r3, #1
 8008700:	4652      	mov	r2, sl
 8008702:	4649      	mov	r1, r9
 8008704:	4638      	mov	r0, r7
 8008706:	47c0      	blx	r8
 8008708:	3001      	adds	r0, #1
 800870a:	d103      	bne.n	8008714 <_printf_common+0xac>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008714:	3501      	adds	r5, #1
 8008716:	e7c6      	b.n	80086a6 <_printf_common+0x3e>
 8008718:	18e1      	adds	r1, r4, r3
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	2030      	movs	r0, #48	; 0x30
 800871e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008722:	4422      	add	r2, r4
 8008724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800872c:	3302      	adds	r3, #2
 800872e:	e7c7      	b.n	80086c0 <_printf_common+0x58>
 8008730:	2301      	movs	r3, #1
 8008732:	4622      	mov	r2, r4
 8008734:	4649      	mov	r1, r9
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	3001      	adds	r0, #1
 800873c:	d0e6      	beq.n	800870c <_printf_common+0xa4>
 800873e:	3601      	adds	r6, #1
 8008740:	e7d9      	b.n	80086f6 <_printf_common+0x8e>
	...

08008744 <_printf_i>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	4691      	mov	r9, r2
 800874c:	7e27      	ldrb	r7, [r4, #24]
 800874e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008750:	2f78      	cmp	r7, #120	; 0x78
 8008752:	4680      	mov	r8, r0
 8008754:	469a      	mov	sl, r3
 8008756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800875a:	d807      	bhi.n	800876c <_printf_i+0x28>
 800875c:	2f62      	cmp	r7, #98	; 0x62
 800875e:	d80a      	bhi.n	8008776 <_printf_i+0x32>
 8008760:	2f00      	cmp	r7, #0
 8008762:	f000 80d8 	beq.w	8008916 <_printf_i+0x1d2>
 8008766:	2f58      	cmp	r7, #88	; 0x58
 8008768:	f000 80a3 	beq.w	80088b2 <_printf_i+0x16e>
 800876c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008774:	e03a      	b.n	80087ec <_printf_i+0xa8>
 8008776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877a:	2b15      	cmp	r3, #21
 800877c:	d8f6      	bhi.n	800876c <_printf_i+0x28>
 800877e:	a001      	add	r0, pc, #4	; (adr r0, 8008784 <_printf_i+0x40>)
 8008780:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087f1 	.word	0x080087f1
 800878c:	0800876d 	.word	0x0800876d
 8008790:	0800876d 	.word	0x0800876d
 8008794:	0800876d 	.word	0x0800876d
 8008798:	0800876d 	.word	0x0800876d
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	0800876d 	.word	0x0800876d
 80087a4:	0800876d 	.word	0x0800876d
 80087a8:	0800876d 	.word	0x0800876d
 80087ac:	0800876d 	.word	0x0800876d
 80087b0:	080088fd 	.word	0x080088fd
 80087b4:	08008821 	.word	0x08008821
 80087b8:	080088df 	.word	0x080088df
 80087bc:	0800876d 	.word	0x0800876d
 80087c0:	0800876d 	.word	0x0800876d
 80087c4:	0800891f 	.word	0x0800891f
 80087c8:	0800876d 	.word	0x0800876d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800876d 	.word	0x0800876d
 80087d4:	0800876d 	.word	0x0800876d
 80087d8:	080088e7 	.word	0x080088e7
 80087dc:	680b      	ldr	r3, [r1, #0]
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	600a      	str	r2, [r1, #0]
 80087e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0a3      	b.n	8008938 <_printf_i+0x1f4>
 80087f0:	6825      	ldr	r5, [r4, #0]
 80087f2:	6808      	ldr	r0, [r1, #0]
 80087f4:	062e      	lsls	r6, r5, #24
 80087f6:	f100 0304 	add.w	r3, r0, #4
 80087fa:	d50a      	bpl.n	8008812 <_printf_i+0xce>
 80087fc:	6805      	ldr	r5, [r0, #0]
 80087fe:	600b      	str	r3, [r1, #0]
 8008800:	2d00      	cmp	r5, #0
 8008802:	da03      	bge.n	800880c <_printf_i+0xc8>
 8008804:	232d      	movs	r3, #45	; 0x2d
 8008806:	426d      	negs	r5, r5
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	485e      	ldr	r0, [pc, #376]	; (8008988 <_printf_i+0x244>)
 800880e:	230a      	movs	r3, #10
 8008810:	e019      	b.n	8008846 <_printf_i+0x102>
 8008812:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008816:	6805      	ldr	r5, [r0, #0]
 8008818:	600b      	str	r3, [r1, #0]
 800881a:	bf18      	it	ne
 800881c:	b22d      	sxthne	r5, r5
 800881e:	e7ef      	b.n	8008800 <_printf_i+0xbc>
 8008820:	680b      	ldr	r3, [r1, #0]
 8008822:	6825      	ldr	r5, [r4, #0]
 8008824:	1d18      	adds	r0, r3, #4
 8008826:	6008      	str	r0, [r1, #0]
 8008828:	0628      	lsls	r0, r5, #24
 800882a:	d501      	bpl.n	8008830 <_printf_i+0xec>
 800882c:	681d      	ldr	r5, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0xf2>
 8008830:	0669      	lsls	r1, r5, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0xe8>
 8008834:	881d      	ldrh	r5, [r3, #0]
 8008836:	4854      	ldr	r0, [pc, #336]	; (8008988 <_printf_i+0x244>)
 8008838:	2f6f      	cmp	r7, #111	; 0x6f
 800883a:	bf0c      	ite	eq
 800883c:	2308      	moveq	r3, #8
 800883e:	230a      	movne	r3, #10
 8008840:	2100      	movs	r1, #0
 8008842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008846:	6866      	ldr	r6, [r4, #4]
 8008848:	60a6      	str	r6, [r4, #8]
 800884a:	2e00      	cmp	r6, #0
 800884c:	bfa2      	ittt	ge
 800884e:	6821      	ldrge	r1, [r4, #0]
 8008850:	f021 0104 	bicge.w	r1, r1, #4
 8008854:	6021      	strge	r1, [r4, #0]
 8008856:	b90d      	cbnz	r5, 800885c <_printf_i+0x118>
 8008858:	2e00      	cmp	r6, #0
 800885a:	d04d      	beq.n	80088f8 <_printf_i+0x1b4>
 800885c:	4616      	mov	r6, r2
 800885e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008862:	fb03 5711 	mls	r7, r3, r1, r5
 8008866:	5dc7      	ldrb	r7, [r0, r7]
 8008868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800886c:	462f      	mov	r7, r5
 800886e:	42bb      	cmp	r3, r7
 8008870:	460d      	mov	r5, r1
 8008872:	d9f4      	bls.n	800885e <_printf_i+0x11a>
 8008874:	2b08      	cmp	r3, #8
 8008876:	d10b      	bne.n	8008890 <_printf_i+0x14c>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	07df      	lsls	r7, r3, #31
 800887c:	d508      	bpl.n	8008890 <_printf_i+0x14c>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	4299      	cmp	r1, r3
 8008884:	bfde      	ittt	le
 8008886:	2330      	movle	r3, #48	; 0x30
 8008888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800888c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008890:	1b92      	subs	r2, r2, r6
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	464b      	mov	r3, r9
 800889a:	aa03      	add	r2, sp, #12
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f7ff fee2 	bl	8008668 <_printf_common>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d14c      	bne.n	8008942 <_printf_i+0x1fe>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b004      	add	sp, #16
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	4835      	ldr	r0, [pc, #212]	; (8008988 <_printf_i+0x244>)
 80088b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	680e      	ldr	r6, [r1, #0]
 80088bc:	061f      	lsls	r7, r3, #24
 80088be:	f856 5b04 	ldr.w	r5, [r6], #4
 80088c2:	600e      	str	r6, [r1, #0]
 80088c4:	d514      	bpl.n	80088f0 <_printf_i+0x1ac>
 80088c6:	07d9      	lsls	r1, r3, #31
 80088c8:	bf44      	itt	mi
 80088ca:	f043 0320 	orrmi.w	r3, r3, #32
 80088ce:	6023      	strmi	r3, [r4, #0]
 80088d0:	b91d      	cbnz	r5, 80088da <_printf_i+0x196>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f023 0320 	bic.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	2310      	movs	r3, #16
 80088dc:	e7b0      	b.n	8008840 <_printf_i+0xfc>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	f043 0320 	orr.w	r3, r3, #32
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	2378      	movs	r3, #120	; 0x78
 80088e8:	4828      	ldr	r0, [pc, #160]	; (800898c <_printf_i+0x248>)
 80088ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ee:	e7e3      	b.n	80088b8 <_printf_i+0x174>
 80088f0:	065e      	lsls	r6, r3, #25
 80088f2:	bf48      	it	mi
 80088f4:	b2ad      	uxthmi	r5, r5
 80088f6:	e7e6      	b.n	80088c6 <_printf_i+0x182>
 80088f8:	4616      	mov	r6, r2
 80088fa:	e7bb      	b.n	8008874 <_printf_i+0x130>
 80088fc:	680b      	ldr	r3, [r1, #0]
 80088fe:	6826      	ldr	r6, [r4, #0]
 8008900:	6960      	ldr	r0, [r4, #20]
 8008902:	1d1d      	adds	r5, r3, #4
 8008904:	600d      	str	r5, [r1, #0]
 8008906:	0635      	lsls	r5, r6, #24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	d501      	bpl.n	8008910 <_printf_i+0x1cc>
 800890c:	6018      	str	r0, [r3, #0]
 800890e:	e002      	b.n	8008916 <_printf_i+0x1d2>
 8008910:	0671      	lsls	r1, r6, #25
 8008912:	d5fb      	bpl.n	800890c <_printf_i+0x1c8>
 8008914:	8018      	strh	r0, [r3, #0]
 8008916:	2300      	movs	r3, #0
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	4616      	mov	r6, r2
 800891c:	e7ba      	b.n	8008894 <_printf_i+0x150>
 800891e:	680b      	ldr	r3, [r1, #0]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	681e      	ldr	r6, [r3, #0]
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	2100      	movs	r1, #0
 800892a:	4630      	mov	r0, r6
 800892c:	f7f7 fc58 	bl	80001e0 <memchr>
 8008930:	b108      	cbz	r0, 8008936 <_printf_i+0x1f2>
 8008932:	1b80      	subs	r0, r0, r6
 8008934:	6060      	str	r0, [r4, #4]
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	2300      	movs	r3, #0
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008940:	e7a8      	b.n	8008894 <_printf_i+0x150>
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	4632      	mov	r2, r6
 8008946:	4649      	mov	r1, r9
 8008948:	4640      	mov	r0, r8
 800894a:	47d0      	blx	sl
 800894c:	3001      	adds	r0, #1
 800894e:	d0ab      	beq.n	80088a8 <_printf_i+0x164>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	079b      	lsls	r3, r3, #30
 8008954:	d413      	bmi.n	800897e <_printf_i+0x23a>
 8008956:	68e0      	ldr	r0, [r4, #12]
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	4298      	cmp	r0, r3
 800895c:	bfb8      	it	lt
 800895e:	4618      	movlt	r0, r3
 8008960:	e7a4      	b.n	80088ac <_printf_i+0x168>
 8008962:	2301      	movs	r3, #1
 8008964:	4632      	mov	r2, r6
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d09b      	beq.n	80088a8 <_printf_i+0x164>
 8008970:	3501      	adds	r5, #1
 8008972:	68e3      	ldr	r3, [r4, #12]
 8008974:	9903      	ldr	r1, [sp, #12]
 8008976:	1a5b      	subs	r3, r3, r1
 8008978:	42ab      	cmp	r3, r5
 800897a:	dcf2      	bgt.n	8008962 <_printf_i+0x21e>
 800897c:	e7eb      	b.n	8008956 <_printf_i+0x212>
 800897e:	2500      	movs	r5, #0
 8008980:	f104 0619 	add.w	r6, r4, #25
 8008984:	e7f5      	b.n	8008972 <_printf_i+0x22e>
 8008986:	bf00      	nop
 8008988:	08008f41 	.word	0x08008f41
 800898c:	08008f52 	.word	0x08008f52

08008990 <_read_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_read_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7fa fd10 	bl	80033c4 <_read>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_read_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_read_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	200005c8 	.word	0x200005c8

080089b4 <_fstat_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_fstat_r+0x20>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	4611      	mov	r1, r2
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f7fa fd28 	bl	8003416 <_fstat>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d102      	bne.n	80089d0 <_fstat_r+0x1c>
 80089ca:	682b      	ldr	r3, [r5, #0]
 80089cc:	b103      	cbz	r3, 80089d0 <_fstat_r+0x1c>
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	200005c8 	.word	0x200005c8

080089d8 <_isatty_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_isatty_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7fa fd27 	bl	8003436 <_isatty>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_isatty_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_isatty_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	200005c8 	.word	0x200005c8

080089f8 <memmove>:
 80089f8:	4288      	cmp	r0, r1
 80089fa:	b510      	push	{r4, lr}
 80089fc:	eb01 0402 	add.w	r4, r1, r2
 8008a00:	d902      	bls.n	8008a08 <memmove+0x10>
 8008a02:	4284      	cmp	r4, r0
 8008a04:	4623      	mov	r3, r4
 8008a06:	d807      	bhi.n	8008a18 <memmove+0x20>
 8008a08:	1e43      	subs	r3, r0, #1
 8008a0a:	42a1      	cmp	r1, r4
 8008a0c:	d008      	beq.n	8008a20 <memmove+0x28>
 8008a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a16:	e7f8      	b.n	8008a0a <memmove+0x12>
 8008a18:	4402      	add	r2, r0
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	428a      	cmp	r2, r1
 8008a1e:	d100      	bne.n	8008a22 <memmove+0x2a>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a2a:	e7f7      	b.n	8008a1c <memmove+0x24>

08008a2c <_realloc_r>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	4607      	mov	r7, r0
 8008a30:	4614      	mov	r4, r2
 8008a32:	460e      	mov	r6, r1
 8008a34:	b921      	cbnz	r1, 8008a40 <_realloc_r+0x14>
 8008a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	f7fe bee4 	b.w	8007808 <_malloc_r>
 8008a40:	b922      	cbnz	r2, 8008a4c <_realloc_r+0x20>
 8008a42:	f7fe fe91 	bl	8007768 <_free_r>
 8008a46:	4625      	mov	r5, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	f000 f814 	bl	8008a78 <_malloc_usable_size_r>
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d20f      	bcs.n	8008a74 <_realloc_r+0x48>
 8008a54:	4621      	mov	r1, r4
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7fe fed6 	bl	8007808 <_malloc_r>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0f2      	beq.n	8008a48 <_realloc_r+0x1c>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4622      	mov	r2, r4
 8008a66:	f7fe fe69 	bl	800773c <memcpy>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7fe fe7b 	bl	8007768 <_free_r>
 8008a72:	e7e9      	b.n	8008a48 <_realloc_r+0x1c>
 8008a74:	4635      	mov	r5, r6
 8008a76:	e7e7      	b.n	8008a48 <_realloc_r+0x1c>

08008a78 <_malloc_usable_size_r>:
 8008a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7c:	1f18      	subs	r0, r3, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfbc      	itt	lt
 8008a82:	580b      	ldrlt	r3, [r1, r0]
 8008a84:	18c0      	addlt	r0, r0, r3
 8008a86:	4770      	bx	lr

08008a88 <_init>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr

08008a94 <_fini>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr
